(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return combineReducers; });
/* unused harmony export bindActionCreators */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return applyMiddleware; });
/* unused harmony export compose */
var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof commonjsGlobal === 'undefined' ? 'undefined' : _typeof$2(commonjsGlobal)) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof$1(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var _Symbol = _root.Symbol;

var _Symbol_1 = _Symbol;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$1.toString;

/** Built-in value references. */
var symToStringTag$1 = _Symbol_1 ? _Symbol_1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$2.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol_1 ? _Symbol_1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg;

/** Built-in value references. */
var getPrototype = _overArg(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype;

var _typeof$3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof$3(value)) == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype;
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = _getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject;

function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
}

/* global window */
var root$2;

if (typeof self !== 'undefined') {
  root$2 = self;
} else if (typeof window !== 'undefined') {
  root$2 = window;
} else if (typeof global !== 'undefined') {
  root$2 = global;
} else if (true) {
  root$2 = module;
} else {}

var result = symbolObservablePonyfill(root$2);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = {
  INIT: '@@redux/INIT'

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */
};function createStore(reducer, preloadedState, enhancer) {
  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!isPlainObject_1(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */
  function observable() {
    var outerSubscribe = subscribe;
    return _defineProperty({
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, result, function () {
      return this;
    });
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _defineProperty({
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, result, observable);
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: ActionTypes.INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  var unexpectedKeyCache = void 0;
  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}

var _typeof$4 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof$4(actionCreators)) !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof$4(actionCreators)) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(undefined, _toConsumableArray(chain))(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
function isCrushed() {}

if (false) {}



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1), __webpack_require__(9)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/**
 * Fork of reflect-metadata library
 */

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof global === "object" ? global :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));
//# sourceMappingURL=reflect.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(1)))

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AjvValidator; });
var require;var require;/* Fork of ajv 6.1.0: Another JSON Schema Validator with added es6 default export*/
/* tslint:disable */
const AjvValidator = (
// @ts-ignore
function () { return function e(r, t, a) { function s(i, n) { if (!t[i]) {
    if (!r[i]) {
        var l = "function" == typeof require && require;
        if (!n && l)
            return require(i, !0);
        if (o)
            return o(i, !0);
        var h = new Error("Cannot find module '" + i + "'");
        throw h.code = "MODULE_NOT_FOUND", h;
    }
    var c = t[i] = { exports: {} };
    r[i][0].call(c.exports, function (e) { var t = r[i][1][e]; return s(t || e); }, c, c.exports, e, r, t, a);
} return t[i].exports; } for (var o = "function" == typeof require && require, i = 0; i < a.length; i++)
    s(a[i]); return s; }({ 1: [function (e, r, t) {
            "use strict";
            var a = r.exports = function () { this._cache = {}; };
            a.prototype.put = function (e, r) { this._cache[e] = r; }, a.prototype.get = function (e) { return this._cache[e]; }, a.prototype.del = function (e) { delete this._cache[e]; }, a.prototype.clear = function () { this._cache = {}; };
        }, {}], 2: [function (e, r, t) {
            "use strict";
            var a = e("./error_classes").MissingRef;
            r.exports = function e(r, t, s) { var o = this; if ("function" != typeof this._opts.loadSchema)
                throw new Error("options.loadSchema should be a function"); "function" == typeof t && (s = t, t = void 0); var i = n(r).then(function () { var e = o._addSchema(r, void 0, t); return e.validate || function e(r) { try {
                return o._compile(r);
            }
            catch (e) {
                if (e instanceof a)
                    return s(e);
                throw e;
            } function s(a) { var s = a.missingSchema; if (h(s))
                throw new Error("Schema " + s + " is loaded but " + a.missingRef + " cannot be resolved"); var i = o._loadingSchemas[s]; return i || (i = o._loadingSchemas[s] = o._opts.loadSchema(s)).then(l, l), i.then(function (e) { if (!h(s))
                return n(e).then(function () { h(s) || o.addSchema(e, s, void 0, t); }); }).then(function () { return e(r); }); function l() { delete o._loadingSchemas[s]; } function h(e) { return o._refs[e] || o._schemas[e]; } } }(e); }); s && i.then(function (e) { s(null, e); }, s); return i; function n(r) { var t = r.$schema; return t && !o.getSchema(t) ? e.call(o, { $ref: t }, !0) : Promise.resolve(); } };
        }, { "./error_classes": 3 }], 3: [function (e, r, t) {
            "use strict";
            var a = e("./resolve");
            r.exports = { Validation: o(function (e) { this.message = "validation failed", this.errors = e, this.ajv = this.validation = !0; }), MissingRef: o(s) };
            s.message = function (e, r) { return "can't resolve reference " + r + " from id " + e; };
            function s(e, r, t) { this.message = t || s.message(e, r), this.missingRef = a.url(e, r), this.missingSchema = a.normalizeId(a.fullPath(this.missingRef)); }
            function o(e) { return e.prototype = Object.create(Error.prototype), e.prototype.constructor = e, e; }
        }, { "./resolve": 6 }], 4: [function (e, r, t) {
            "use strict";
            var a = e("./util"), s = /^(\d\d\d\d)-(\d\d)-(\d\d)$/, o = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], i = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i, n = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i, l = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i, h = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i, c = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i, u = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i, d = /^(?:\/(?:[^~/]|~0|~1)*)*$/, f = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i, p = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
            r.exports = m;
            function m(e) { return a.copy(m[e = "full" == e ? "full" : "fast"]); }
            m.fast = { date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/, time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i, "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i, uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i, "uri-reference": /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i, "uri-template": h, url: c, email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i, hostname: n, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/, ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i, regex: w, uuid: u, "json-pointer": d, "json-pointer-uri-fragment": f, "relative-json-pointer": p }, m.full = { date: v, time: y, "date-time": function (e) { var r = e.split(g); return 2 == r.length && v(r[0]) && y(r[1], !0); }, uri: function (e) { return P.test(e) && l.test(e); }, "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i, "uri-template": h, url: c, email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i, hostname: function (e) { return e.length <= 255 && n.test(e); }, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/, ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i, regex: w, uuid: u, "json-pointer": d, "json-pointer-uri-fragment": f, "relative-json-pointer": p };
            function v(e) { var r = e.match(s); if (!r)
                return !1; var t = +r[2], a = +r[3]; return t >= 1 && t <= 12 && a >= 1 && a <= (2 != t || (i = +r[1], i % 4 != 0 || i % 100 == 0 && i % 400 != 0) ? o[t] : 29); var i; }
            function y(e, r) { var t = e.match(i); if (!t)
                return !1; var a = t[1], s = t[2], o = t[3]; return (a <= 23 && s <= 59 && o <= 59 || 23 == a && 59 == s && 60 == o) && (!r || t[5]); }
            var g = /t|\s/i;
            var P = /\/|:/;
            var E = /[^\\]\\Z/;
            function w(e) { if (E.test(e))
                return !1; try {
                return new RegExp(e), !0;
            }
            catch (e) {
                return !1;
            } }
        }, { "./util": 10 }], 5: [function (e, r, t) {
            "use strict";
            var a = e("./resolve"), s = e("./util"), o = e("./error_classes"), i = e("fast-json-stable-stringify"), n = e("../dotjs/validate"), l = s.ucs2length, h = e("fast-deep-equal"), c = o.Validation;
            r.exports = function e(r, t, y, g) { var P = this, E = this._opts, w = [void 0], b = {}, S = [], _ = {}, $ = [], x = {}, F = []; t = t || { schema: r, refVal: w, refs: b }; var R = function (e, r, t) { var a = u.call(this, e, r, t); return a >= 0 ? { index: a, compiling: !0 } : (this._compilations[a = this._compilations.length] = { schema: e, root: r, baseId: t }, { index: a, compiling: !1 }); }.call(this, r, t, g); var j = this._compilations[R.index]; if (R.compiling)
                return j.callValidate = function e() { var r = j.validate; var t = r.apply(null, arguments); e.errors = r.errors; return t; }; var O = this._formats; var D = this.RULES; try {
                var I = k(r, t, y, g);
                j.validate = I;
                var A = j.callValidate;
                return A && (A.schema = I.schema, A.errors = null, A.refs = I.refs, A.refVal = I.refVal, A.root = I.root, A.$async = I.$async, E.sourceCode && (A.source = I.source)), I;
            }
            finally {
                (function (e, r, t) { var a = u.call(this, e, r, t); a >= 0 && this._compilations.splice(a, 1); }).call(this, r, t, g);
            } function k(r, i, u, y) { var g = !i || i && i.schema == r; if (i.schema != t.schema)
                return e.call(P, r, i, u, y); var _ = !0 === r.$async, x = n({ isTop: !0, schema: r, isRoot: g, baseId: y, root: i, schemaPath: "", errSchemaPath: "#", errorPath: '""', MissingRefError: o.MissingRef, RULES: D, validate: n, util: s, resolve: a, resolveRef: L, usePattern: C, useDefault: Q, useCustomRule: U, opts: E, formats: O, logger: P.logger, self: P }); x = v(w, p) + v(S, d) + v($, f) + v(F, m) + x, E.processCode && (x = E.processCode(x)); var R; try {
                var j = new Function("self", "RULES", "formats", "root", "refVal", "defaults", "customRules", "equal", "ucs2length", "ValidationError", x);
                R = j(P, D, O, t, w, $, F, h, l, c), w[0] = R;
            }
            catch (e) {
                throw P.logger.error("Error compiling schema, function code:", x), e;
            } return R.schema = r, R.errors = null, R.refs = b, R.refVal = w, R.root = g ? R : i, _ && (R.$async = !0), !0 === E.sourceCode && (R.source = { code: x, patterns: S, defaults: $ }), R; } function L(r, s, o) { s = a.url(r, s); var i, n, l = b[s]; if (void 0 !== l)
                return z(i = w[l], n = "refVal[" + l + "]"); if (!o && t.refs) {
                var h = t.refs[s];
                if (void 0 !== h)
                    return n = q(s, i = t.refVal[h]), z(i, n);
            } n = q(s); var c = a.call(P, k, t, s); if (void 0 === c) {
                var u = y && y[s];
                u && (c = a.inlineRef(u, E.inlineRefs) ? u : e.call(P, u, t, y, r));
            } if (void 0 !== c)
                return w[b[s]] = c, z(c, n); delete b[s]; } function q(e, r) { var t = w.length; return w[t] = r, b[e] = t, "refVal" + t; } function z(e, r) { return "object" == typeof e || "boolean" == typeof e ? { code: r, schema: e, inline: !0 } : { code: r, $async: e && !!e.$async }; } function C(e) { var r = _[e]; return void 0 === r && (r = _[e] = S.length, S[r] = e), "pattern" + r; } function Q(e) { switch (typeof e) {
                case "boolean":
                case "number": return "" + e;
                case "string": return s.toQuotedString(e);
                case "object":
                    if (null === e)
                        return "null";
                    var r = i(e), t = x[r];
                    return void 0 === t && (t = x[r] = $.length, $[t] = e), "default" + t;
            } } function U(e, r, t, a) { var s = e.definition.validateSchema; if (s && !1 !== P._opts.validateSchema) {
                var o = s(r);
                if (!o) {
                    var i = "keyword schema is invalid: " + P.errorsText(s.errors);
                    if ("log" != P._opts.validateSchema)
                        throw new Error(i);
                    P.logger.error(i);
                }
            } var n, l = e.definition.compile, h = e.definition.inline, c = e.definition.macro; if (l)
                n = l.call(P, r, t, a);
            else if (c)
                n = c.call(P, r, t, a), !1 !== E.validateSchema && P.validateSchema(n, !0);
            else if (h)
                n = h.call(P, a, e.keyword, r, t);
            else if (!(n = e.definition.validate))
                return; if (void 0 === n)
                throw new Error('custom keyword "' + e.keyword + '"failed to compile'); var u = F.length; return F[u] = n, { code: "customRule" + u, validate: n }; } };
            function u(e, r, t) { for (var a = 0; a < this._compilations.length; a++) {
                var s = this._compilations[a];
                if (s.schema == e && s.root == r && s.baseId == t)
                    return a;
            } return -1; }
            function d(e, r) { return "var pattern" + e + " = new RegExp(" + s.toQuotedString(r[e]) + ");"; }
            function f(e) { return "var default" + e + " = defaults[" + e + "];"; }
            function p(e, r) { return void 0 === r[e] ? "" : "var refVal" + e + " = refVal[" + e + "];"; }
            function m(e) { return "var customRule" + e + " = customRules[" + e + "];"; }
            function v(e, r) { if (!e.length)
                return ""; for (var t = "", a = 0; a < e.length; a++)
                t += r(a, e); return t; }
        }, { "../dotjs/validate": 37, "./error_classes": 3, "./resolve": 6, "./util": 10, "fast-deep-equal": 41, "fast-json-stable-stringify": 42 }], 6: [function (e, r, t) {
            "use strict";
            var a = e("url"), s = e("fast-deep-equal"), o = e("./util"), i = e("./schema_obj"), n = e("json-schema-traverse");
            r.exports = l, l.normalizeId = y, l.fullPath = p, l.url = g, l.ids = function (e) { var r = y(this._getId(e)), t = { "": r }, i = { "": p(r, !1) }, l = {}, h = this; return n(e, { allKeys: !0 }, function (e, r, n, c, u, d, f) { if ("" !== r) {
                var p = h._getId(e), m = t[c], v = i[c] + "/" + u;
                if (void 0 !== f && (v += "/" + ("number" == typeof f ? f : o.escapeFragment(f))), "string" == typeof p) {
                    p = m = y(m ? a.resolve(m, p) : p);
                    var g = h._refs[p];
                    if ("string" == typeof g && (g = h._refs[g]), g && g.schema) {
                        if (!s(e, g.schema))
                            throw new Error('id "' + p + '" resolves to more than one schema');
                    }
                    else if (p != y(v))
                        if ("#" == p[0]) {
                            if (l[p] && !s(e, l[p]))
                                throw new Error('id "' + p + '" resolves to more than one schema');
                            l[p] = e;
                        }
                        else
                            h._refs[p] = v;
                }
                t[r] = m, i[r] = v;
            } }), l; }, l.inlineRef = f, l.schema = h;
            function l(e, r, t) { var a = this._refs[t]; if ("string" == typeof a) {
                if (!this._refs[a])
                    return l.call(this, e, r, a);
                a = this._refs[a];
            } if ((a = a || this._schemas[t]) instanceof i)
                return f(a.schema, this._opts.inlineRefs) ? a.schema : a.validate || this._compile(a); var s, o, n, c = h.call(this, r, t); return c && (s = c.schema, r = c.root, n = c.baseId), s instanceof i ? o = s.validate || e.call(this, s.schema, r, void 0, n) : void 0 !== s && (o = f(s, this._opts.inlineRefs) ? s : e.call(this, s, r, void 0, n)), o; }
            function h(e, r) { var t = a.parse(r, !1, !0), s = m(t), o = p(this._getId(e.schema)); if (s !== o) {
                var n = y(s), l = this._refs[n];
                if ("string" == typeof l)
                    return function (e, r, t) { var a = h.call(this, e, r); if (a) {
                        var s = a.schema, o = a.baseId;
                        e = a.root;
                        var i = this._getId(s);
                        return i && (o = g(o, i)), u.call(this, t, o, s, e);
                    } }.call(this, e, l, t);
                if (l instanceof i)
                    l.validate || this._compile(l), e = l;
                else {
                    if (!((l = this._schemas[n]) instanceof i))
                        return;
                    if (l.validate || this._compile(l), n == y(r))
                        return { schema: l, root: e, baseId: o };
                    e = l;
                }
                if (!e.schema)
                    return;
                o = p(this._getId(e.schema));
            } return u.call(this, t, o, e.schema, e); }
            var c = o.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
            function u(e, r, t, a) { if (e.hash = e.hash || "", "#/" == e.hash.slice(0, 2)) {
                for (var s = e.hash.split("/"), i = 1; i < s.length; i++) {
                    var n = s[i];
                    if (n) {
                        if (void 0 === (t = t[n = o.unescapeFragment(n)]))
                            break;
                        var l;
                        if (!c[n] && ((l = this._getId(t)) && (r = g(r, l)), t.$ref)) {
                            var u = g(r, t.$ref), d = h.call(this, a, u);
                            d && (t = d.schema, a = d.root, r = d.baseId);
                        }
                    }
                }
                return void 0 !== t && t !== a.schema ? { schema: t, root: a, baseId: r } : void 0;
            } }
            var d = o.toHash(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum"]);
            function f(e, r) { return !1 !== r && (void 0 === r || !0 === r ? function e(r) { var t; if (Array.isArray(r)) {
                for (var a = 0; a < r.length; a++)
                    if ("object" == typeof (t = r[a]) && !e(t))
                        return !1;
            }
            else
                for (var s in r) {
                    if ("$ref" == s)
                        return !1;
                    if ("object" == typeof (t = r[s]) && !e(t))
                        return !1;
                } return !0; }(e) : r ? function e(r) { var t, a = 0; if (Array.isArray(r)) {
                for (var s = 0; s < r.length; s++)
                    if ("object" == typeof (t = r[s]) && (a += e(t)), a == 1 / 0)
                        return 1 / 0;
            }
            else
                for (var o in r) {
                    if ("$ref" == o)
                        return 1 / 0;
                    if (d[o])
                        a++;
                    else if ("object" == typeof (t = r[o]) && (a += e(t) + 1), a == 1 / 0)
                        return 1 / 0;
                } return a; }(e) <= r : void 0); }
            function p(e, r) { !1 !== r && (e = y(e)); return m(a.parse(e, !1, !0)); }
            function m(e) { var r = e.protocol || "//" == e.href.slice(0, 2) ? "//" : ""; return (e.protocol || "") + r + (e.host || "") + (e.path || "") + "#"; }
            var v = /#\/?$/;
            function y(e) { return e ? e.replace(v, "") : ""; }
            function g(e, r) { return r = y(r), a.resolve(e, r); }
        }, { "./schema_obj": 8, "./util": 10, "fast-deep-equal": 41, "json-schema-traverse": 43, url: 48 }], 7: [function (e, r, t) {
            "use strict";
            var a = e("../dotjs"), s = e("./util").toHash;
            r.exports = function () { var e = [{ type: "number", rules: [{ maximum: ["exclusiveMaximum"] }, { minimum: ["exclusiveMinimum"] }, "multipleOf", "format"] }, { type: "string", rules: ["maxLength", "minLength", "pattern", "format"] }, { type: "array", rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"] }, { type: "object", rules: ["maxProperties", "minProperties", "required", "dependencies", "propertyNames", { properties: ["additionalProperties", "patternProperties"] }] }, { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }], r = ["type", "$comment"]; return e.all = s(r), e.types = s(["number", "integer", "string", "array", "object", "boolean", "null"]), e.forEach(function (t) { t.rules = t.rules.map(function (t) { var s; if ("object" == typeof t) {
                var o = Object.keys(t)[0];
                s = t[o], t = o, s.forEach(function (t) { r.push(t), e.all[t] = !0; });
            } r.push(t); return e.all[t] = { keyword: t, code: a[t], implements: s }; }), e.all.$comment = { keyword: "$comment", code: a.$comment }, t.type && (e.types[t.type] = t); }), e.keywords = s(r.concat(["$schema", "$id", "id", "$data", "title", "description", "default", "definitions", "examples", "readOnly", "writeOnly", "contentMediaType", "contentEncoding", "additionalItems", "then", "else"])), e.custom = {}, e; };
        }, { "../dotjs": 26, "./util": 10 }], 8: [function (e, r, t) {
            "use strict";
            var a = e("./util");
            r.exports = function (e) { a.copy(e, this); };
        }, { "./util": 10 }], 9: [function (e, r, t) {
            "use strict";
            r.exports = function (e) { for (var r, t = 0, a = e.length, s = 0; s < a;)
                t++, (r = e.charCodeAt(s++)) >= 55296 && r <= 56319 && s < a && 56320 == (64512 & (r = e.charCodeAt(s))) && s++; return t; };
        }, {}], 10: [function (e, r, t) {
            "use strict";
            r.exports = { copy: function (e, r) { r = r || {}; for (var t in e)
                    r[t] = e[t]; return r; }, checkDataType: a, checkDataTypes: function (e, r) { switch (e.length) {
                    case 1: return a(e[0], r, !0);
                    default:
                        var t = "", s = o(e);
                        s.array && s.object && (t = s.null ? "(" : "(!" + r + " || ", t += "typeof " + r + ' !== "object")', delete s.null, delete s.array, delete s.object), s.number && delete s.integer;
                        for (var i in s)
                            t += (t ? " && " : "") + a(i, r, !0);
                        return t;
                } }, coerceToTypes: function (e, r) { if (Array.isArray(r)) {
                    for (var t = [], a = 0; a < r.length; a++) {
                        var o = r[a];
                        s[o] ? t[t.length] = o : "array" === e && "array" === o && (t[t.length] = o);
                    }
                    if (t.length)
                        return t;
                }
                else {
                    if (s[r])
                        return [r];
                    if ("array" === e && "array" === r)
                        return ["array"];
                } }, toHash: o, getProperty: l, escapeQuotes: h, equal: e("fast-deep-equal"), ucs2length: e("./ucs2length"), varOccurences: function (e, r) { var t = e.match(new RegExp(r += "[^0-9]", "g")); return t ? t.length : 0; }, varReplace: function (e, r, t) { return r += "([^0-9])", t = t.replace(/\$/g, "$$$$"), e.replace(new RegExp(r, "g"), t + "$1"); }, cleanUpCode: function (e) { return e.replace(c, "").replace(u, "").replace(d, "if (!($1))"); }, finalCleanUpCode: function (e, r) { var t = e.match(f); t && 2 == t.length && (e = r ? e.replace(m, "").replace(g, P) : e.replace(p, "").replace(v, y)); return (t = e.match(E)) && 3 === t.length ? e.replace(w, "") : e; }, schemaHasRules: function (e, r) { if ("boolean" == typeof e)
                    return !e; for (var t in e)
                    if (r[t])
                        return !0; }, schemaHasRulesExcept: function (e, r, t) { if ("boolean" == typeof e)
                    return !e && "not" != t; for (var a in e)
                    if (a != t && r[a])
                        return !0; }, toQuotedString: b, getPathExpr: function (e, r, t, a) { return $(e, t ? "'/' + " + r + (a ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : a ? "'[' + " + r + " + ']'" : "'[\\'' + " + r + " + '\\']'"); }, getPath: function (e, r, t) { var a = b(t ? "/" + x(r) : l(r)); return $(e, a); }, getData: function (e, r, t) { var a, s, o, i; if ("" === e)
                    return "rootData"; if ("/" == e[0]) {
                    if (!S.test(e))
                        throw new Error("Invalid JSON-pointer: " + e);
                    s = e, o = "rootData";
                }
                else {
                    if (!(i = e.match(_)))
                        throw new Error("Invalid JSON-pointer: " + e);
                    if (a = +i[1], "#" == (s = i[2])) {
                        if (a >= r)
                            throw new Error("Cannot access property/index " + a + " levels up, current level is " + r);
                        return t[r - a];
                    }
                    if (a > r)
                        throw new Error("Cannot access data " + a + " levels up, current level is " + r);
                    if (o = "data" + (r - a || ""), !s)
                        return o;
                } for (var n = o, h = s.split("/"), c = 0; c < h.length; c++) {
                    var u = h[c];
                    u && (o += l(F(u)), n += " && " + o);
                } return n; }, unescapeFragment: function (e) { return F(decodeURIComponent(e)); }, unescapeJsonPointer: F, escapeFragment: function (e) { return encodeURIComponent(x(e)); }, escapeJsonPointer: x };
            function a(e, r, t) { var a = t ? " !== " : " === ", s = t ? " || " : " && ", o = t ? "!" : "", i = t ? "" : "!"; switch (e) {
                case "null": return r + a + "null";
                case "array": return o + "Array.isArray(" + r + ")";
                case "object": return "(" + o + r + s + "typeof " + r + a + '"object"' + s + i + "Array.isArray(" + r + "))";
                case "integer": return "(typeof " + r + a + '"number"' + s + i + "(" + r + " % 1)" + s + r + a + r + ")";
                default: return "typeof " + r + a + '"' + e + '"';
            } }
            var s = o(["string", "number", "integer", "boolean", "null"]);
            function o(e) { for (var r = {}, t = 0; t < e.length; t++)
                r[e[t]] = !0; return r; }
            var i = /^[a-z$_][a-z$_0-9]*$/i, n = /'|\\/g;
            function l(e) { return "number" == typeof e ? "[" + e + "]" : i.test(e) ? "." + e : "['" + h(e) + "']"; }
            function h(e) { return e.replace(n, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t"); }
            var c = /else\s*{\s*}/g, u = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g, d = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
            var f = /[^v.]errors/g, p = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g, m = /var errors = 0;|var vErrors = null;/g, v = "return errors === 0;", y = "validate.errors = null; return true;", g = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/, P = "return data;", E = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g, w = /if \(rootData === undefined\) rootData = data;/;
            function b(e) { return "'" + h(e) + "'"; }
            var S = /^\/(?:[^~]|~0|~1)*$/, _ = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
            function $(e, r) { return '""' == e ? r : (e + " + " + r).replace(/' \+ '/g, ""); }
            function x(e) { return e.replace(/~/g, "~0").replace(/\//g, "~1"); }
            function F(e) { return e.replace(/~1/g, "/").replace(/~0/g, "~"); }
        }, { "./ucs2length": 9, "fast-deep-equal": 41 }], 11: [function (e, r, t) {
            "use strict";
            var a = ["multipleOf", "maximum", "exclusiveMaximum", "minimum", "exclusiveMinimum", "maxLength", "minLength", "pattern", "additionalItems", "maxItems", "minItems", "uniqueItems", "maxProperties", "minProperties", "required", "additionalProperties", "enum", "format", "const"];
            r.exports = function (e, r) { for (var t = 0; t < r.length; t++) {
                e = JSON.parse(JSON.stringify(e));
                var s, o = r[t].split("/"), i = e;
                for (s = 1; s < o.length; s++)
                    i = i[o[s]];
                for (s = 0; s < a.length; s++) {
                    var n = a[s], l = i[n];
                    l && (i[n] = { anyOf: [l, { $ref: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#" }] });
                }
            } return e; };
        }, {}], 12: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n; var f = "maximum" == r, p = f ? "exclusiveMaximum" : "exclusiveMinimum", m = e.schema[p], v = f ? "<" : ">", y = f ? ">" : "<", g = void 0; if (e.opts.$data && m && m.$data) {
                var P = e.util.getData(m.$data, i, e.dataPathArr), E = "exclusive" + o, w = "exclType" + o, b = "exclIsNumber" + o, S = "' + " + ($ = "op" + o) + " + '";
                s += " var schemaExcl" + o + " = " + P + "; ", s += " var " + E + "; var " + w + " = typeof " + (P = "schemaExcl" + o) + "; if (" + w + " != 'boolean' && " + w + " != 'undefined' && " + w + " != 'number') { ";
                g = p;
                (x = x || []).push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: '" + (g || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: {} ", !1 !== e.opts.messages && (s += " , message: '" + p + " should be boolean' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
                var _ = s;
                s = x.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + _ + "]); " : " validate.errors = [" + _ + "]; return false; " : " var err = " + _ + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } else if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " " + w + " == 'number' ? ( (" + E + " = " + a + " === undefined || " + P + " " + v + "= " + a + ") ? " + u + " " + y + "= " + P + " : " + u + " " + y + " " + a + " ) : ( (" + E + " = " + P + " === true) ? " + u + " " + y + "= " + a + " : " + u + " " + y + " " + a + " ) || " + u + " !== " + u + ") { var op" + o + " = " + E + " ? '" + v + "' : '" + v + "=';";
            }
            else {
                S = v;
                if ((b = "number" == typeof m) && d) {
                    var $ = "'" + S + "'";
                    s += " if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " ( " + a + " === undefined || " + m + " " + v + "= " + a + " ? " + u + " " + y + "= " + m + " : " + u + " " + y + " " + a + " ) || " + u + " !== " + u + ") { ";
                }
                else {
                    b && void 0 === n ? (E = !0, g = p, h = e.errSchemaPath + "/" + p, a = m, y += "=") : (b && (a = Math[f ? "min" : "max"](m, n)), m === (!b || a) ? (E = !0, g = p, h = e.errSchemaPath + "/" + p, y += "=") : (E = !1, S += "="));
                    $ = "'" + S + "'";
                    s += " if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " " + u + " " + y + " " + a + " || " + u + " !== " + u + ") { ";
                }
            } g = g || r; var x; (x = x || []).push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: '" + (g || "_limit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { comparison: " + $ + ", limit: " + a + ", exclusive: " + E + " } ", !1 !== e.opts.messages && (s += " , message: 'should be " + S + " ", s += d ? "' + " + a : a + "'"), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; _ = s; return s = x.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + _ + "]); " : " validate.errors = [" + _ + "]; return false; " : " var err = " + _ + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } ", c && (s += " else { "), s; };
        }, {}], 13: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n; s += "if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " " + u + ".length " + ("maxItems" == r ? ">" : "<") + " " + a + ") { "; var f = r, p = p || []; p.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: '" + (f || "_limitItems") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { limit: " + a + " } ", !1 !== e.opts.messages && (s += " , message: 'should NOT have ", s += "maxItems" == r ? "more" : "less", s += " than ", s += d ? "' + " + a + " + '" : "" + n, s += " items' "), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; var m = s; return s = p.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", c && (s += " else { "), s; };
        }, {}], 14: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n; s += "if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += !1 === e.opts.unicode ? " " + u + ".length " : " ucs2length(" + u + ") ", s += " " + ("maxLength" == r ? ">" : "<") + " " + a + ") { "; var f = r, p = p || []; p.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: '" + (f || "_limitLength") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { limit: " + a + " } ", !1 !== e.opts.messages && (s += " , message: 'should NOT be ", s += "maxLength" == r ? "longer" : "shorter", s += " than ", s += d ? "' + " + a + " + '" : "" + n, s += " characters' "), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; var m = s; return s = p.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", c && (s += " else { "), s; };
        }, {}], 15: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n; s += "if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " Object.keys(" + u + ").length " + ("maxProperties" == r ? ">" : "<") + " " + a + ") { "; var f = r, p = p || []; p.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: '" + (f || "_limitProperties") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { limit: " + a + " } ", !1 !== e.opts.messages && (s += " , message: 'should NOT have ", s += "maxProperties" == r ? "more" : "less", s += " than ", s += d ? "' + " + a + " + '" : "" + n, s += " properties' "), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; var m = s; return s = p.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", c && (s += " else { "), s; };
        }, {}], 16: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.schema[r], o = e.schemaPath + e.util.getProperty(r), i = e.errSchemaPath + "/" + r, n = !e.opts.allErrors, l = e.util.copy(e), h = ""; l.level++; var c = "valid" + l.level, u = l.baseId, d = !0, f = s; if (f)
                for (var p, m = -1, v = f.length - 1; m < v;)
                    p = f[m += 1], e.util.schemaHasRules(p, e.RULES.all) && (d = !1, l.schema = p, l.schemaPath = o + "[" + m + "]", l.errSchemaPath = i + "/" + m, a += "  " + e.validate(l) + " ", l.baseId = u, n && (a += " if (" + c + ") { ", h += "}")); return n && (a += d ? " if (true) { " : " " + h.slice(0, -1) + " "), a = e.util.cleanUpCode(a); };
        }, {}], 17: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = "errs__" + s, f = e.util.copy(e), p = ""; f.level++; var m = "valid" + f.level; if (i.every(function (r) { return e.util.schemaHasRules(r, e.RULES.all); })) {
                var v = f.baseId;
                a += " var " + d + " = errors; var " + u + " = false;  ";
                var y = e.compositeRule;
                e.compositeRule = f.compositeRule = !0;
                var g = i;
                if (g)
                    for (var P, E = -1, w = g.length - 1; E < w;)
                        P = g[E += 1], f.schema = P, f.schemaPath = n + "[" + E + "]", f.errSchemaPath = l + "/" + E, a += "  " + e.validate(f) + " ", f.baseId = v, a += " " + u + " = " + u + " || " + m + "; if (!" + u + ") { ", p += "}";
                e.compositeRule = f.compositeRule = y, a += " " + p + " if (!" + u + ") {   var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'should match some schema in anyOf' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && h && (a += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false; "), a += " } else {  errors = " + d + "; if (vErrors !== null) { if (" + d + ") vErrors.length = " + d + "; else vErrors = null; } ", e.opts.allErrors && (a += " } "), a = e.util.cleanUpCode(a);
            }
            else
                h && (a += " if (true) { "); return a; };
        }, {}], 18: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.errSchemaPath + "/" + r, o = e.util.toQuotedString(e.schema[r]); return !0 === e.opts.$comment ? a += " console.log(" + o + ");" : "function" == typeof e.opts.$comment && (a += " self._opts.$comment(" + o + ", " + e.util.toQuotedString(s) + ", validate.root.schema);"), a; };
        }, {}], 19: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = e.opts.$data && i && i.$data; d && (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; "), d || (a += " var schema" + s + " = validate.schema" + n + ";"), a += "var " + u + " = equal(" + c + ", schema" + s + "); if (!" + u + ") {   "; var f = f || []; f.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'const' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'should be equal to constant' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} "; var p = a; return a = f.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + p + "]); " : " validate.errors = [" + p + "]; return false; " : " var err = " + p + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " }", h && (a += " else { "), a; };
        }, {}], 20: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = "errs__" + s, f = e.util.copy(e); f.level++; var p = "valid" + f.level, m = "i" + s, v = f.dataLevel = e.dataLevel + 1, y = "data" + v, g = e.baseId, P = e.util.schemaHasRules(i, e.RULES.all); if (a += "var " + d + " = errors;var " + u + ";", P) {
                var E = e.compositeRule;
                e.compositeRule = f.compositeRule = !0, f.schema = i, f.schemaPath = n, f.errSchemaPath = l, a += " var " + p + " = false; for (var " + m + " = 0; " + m + " < " + c + ".length; " + m + "++) { ", f.errorPath = e.util.getPathExpr(e.errorPath, m, e.opts.jsonPointers, !0);
                var w = c + "[" + m + "]";
                f.dataPathArr[v] = m;
                var b = e.validate(f);
                f.baseId = g, e.util.varOccurences(b, y) < 2 ? a += " " + e.util.varReplace(b, y, w) + " " : a += " var " + y + " = " + w + "; " + b + " ", a += " if (" + p + ") break; }  ", e.compositeRule = f.compositeRule = E, a += "  if (!" + p + ") {";
            }
            else
                a += " if (" + c + ".length == 0) {"; var S = S || []; S.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'contains' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'should contain a valid item' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} "; var _ = a; return a = S.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + _ + "]); " : " validate.errors = [" + _ + "]; return false; " : " var err = " + _ + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else { ", P && (a += "  errors = " + d + "; if (vErrors !== null) { if (" + d + ") vErrors.length = " + d + "; else vErrors = null; } "), e.opts.allErrors && (a += " } "), a = e.util.cleanUpCode(a); };
        }, {}], 21: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s, o = " ", i = e.level, n = e.dataLevel, l = e.schema[r], h = e.schemaPath + e.util.getProperty(r), c = e.errSchemaPath + "/" + r, u = !e.opts.allErrors, d = "data" + (n || ""), f = "valid" + i, p = "errs__" + i, m = e.opts.$data && l && l.$data; m ? (o += " var schema" + i + " = " + e.util.getData(l.$data, n, e.dataPathArr) + "; ", s = "schema" + i) : s = l; var v, y, g, P, E, w = "definition" + i, b = this.definition, S = ""; if (m && b.$data) {
                var _ = b.validateSchema;
                o += " var " + w + " = RULES.custom['" + r + "'].definition; var " + (E = "keywordValidate" + i) + " = " + w + ".validate;";
            }
            else {
                if (!(P = e.useCustomRule(this, l, e.schema, e)))
                    return;
                s = "validate.schema" + h, E = P.code, v = b.compile, y = b.inline, g = b.macro;
            } var $ = E + ".errors", x = "i" + i, F = "ruleErr" + i, R = b.async; if (R && !e.async)
                throw new Error("async keyword in sync schema"); if (y || g || (o += $ + " = null;"), o += "var " + p + " = errors;var " + f + ";", m && b.$data && (S += "}", o += " if (" + s + " === undefined) { " + f + " = true; } else { ", _ && (S += "}", o += " " + f + " = " + w + ".validateSchema(" + s + "); if (" + f + ") { ")), y)
                o += b.statements ? " " + P.validate + " " : " " + f + " = " + P.validate + "; ";
            else if (g) {
                var j = e.util.copy(e);
                S = "";
                j.level++;
                var O = "valid" + j.level;
                j.schema = P.validate, j.schemaPath = "";
                var D = e.compositeRule;
                e.compositeRule = j.compositeRule = !0;
                var I = e.validate(j).replace(/validate\.schema/g, E);
                e.compositeRule = j.compositeRule = D, o += " " + I;
            }
            else {
                (q = q || []).push(o), o = "", o += "  " + E + ".call( ", o += e.opts.passContext ? "this" : "self", o += v || !1 === b.schema ? " , " + d + " " : " , " + s + " , " + d + " , validate.schema" + e.schemaPath + " ", o += " , (dataPath || '')", '""' != e.errorPath && (o += " + " + e.errorPath);
                var A = n ? "data" + (n - 1 || "") : "parentData", k = n ? e.dataPathArr[n] : "parentDataProperty", L = o += " , " + A + " , " + k + " , rootData )  ";
                o = q.pop(), !1 === b.errors ? (o += " " + f + " = ", R && (o += "await "), o += L + "; ") : o += R ? " var " + ($ = "customErrors" + i) + " = null; try { " + f + " = await " + L + "; } catch (e) { " + f + " = false; if (e instanceof ValidationError) " + $ + " = e.errors; else throw e; } " : " " + $ + " = null; " + f + " = " + L + "; ";
            } if (b.modifying && (o += " if (" + A + ") " + d + " = " + A + "[" + k + "];"), o += "" + S, b.valid)
                u && (o += " if (true) { ");
            else {
                o += " if ( ", void 0 === b.valid ? (o += " !", o += g ? "" + O : "" + f) : o += " " + !b.valid + " ", o += ") { ", a = this.keyword;
                (q = q || []).push(o), o = "";
                var q;
                (q = q || []).push(o), o = "", !1 !== e.createErrors ? (o += " { keyword: '" + (a || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { keyword: '" + this.keyword + "' } ", !1 !== e.opts.messages && (o += " , message: 'should pass \"" + this.keyword + "\" keyword validation' "), e.opts.verbose && (o += " , schema: validate.schema" + h + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), o += " } ") : o += " {} ";
                var z = o;
                o = q.pop();
                var C = o += !e.compositeRule && u ? e.async ? " throw new ValidationError([" + z + "]); " : " validate.errors = [" + z + "]; return false; " : " var err = " + z + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                o = q.pop(), y ? b.errors ? "full" != b.errors && (o += "  for (var " + x + "=" + p + "; " + x + "<errors; " + x + "++) { var " + F + " = vErrors[" + x + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + "; if (" + F + ".schemaPath === undefined) { " + F + '.schemaPath = "' + c + '"; } ', e.opts.verbose && (o += " " + F + ".schema = " + s + "; " + F + ".data = " + d + "; "), o += " } ") : !1 === b.errors ? o += " " + C + " " : (o += " if (" + p + " == errors) { " + C + " } else {  for (var " + x + "=" + p + "; " + x + "<errors; " + x + "++) { var " + F + " = vErrors[" + x + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + "; if (" + F + ".schemaPath === undefined) { " + F + '.schemaPath = "' + c + '"; } ', e.opts.verbose && (o += " " + F + ".schema = " + s + "; " + F + ".data = " + d + "; "), o += " } } ") : g ? (o += "   var err =   ", !1 !== e.createErrors ? (o += " { keyword: '" + (a || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { keyword: '" + this.keyword + "' } ", !1 !== e.opts.messages && (o += " , message: 'should pass \"" + this.keyword + "\" keyword validation' "), e.opts.verbose && (o += " , schema: validate.schema" + h + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), o += " } ") : o += " {} ", o += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && u && (o += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false; ")) : !1 === b.errors ? o += " " + C + " " : (o += " if (Array.isArray(" + $ + ")) { if (vErrors === null) vErrors = " + $ + "; else vErrors = vErrors.concat(" + $ + "); errors = vErrors.length;  for (var " + x + "=" + p + "; " + x + "<errors; " + x + "++) { var " + F + " = vErrors[" + x + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + ";  " + F + '.schemaPath = "' + c + '";  ', e.opts.verbose && (o += " " + F + ".schema = " + s + "; " + F + ".data = " + d + "; "), o += " } } else { " + C + " } "), o += " } ", u && (o += " else { ");
            } return o; };
        }, {}], 22: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "errs__" + s, d = e.util.copy(e), f = ""; d.level++; var p = "valid" + d.level, m = {}, v = {}, y = e.opts.ownProperties; for (w in i) {
                var g = i[w], P = Array.isArray(g) ? v : m;
                P[w] = g;
            } a += "var " + u + " = errors;"; var E = e.errorPath; a += "var missing" + s + ";"; for (var w in v)
                if ((P = v[w]).length) {
                    if (a += " if ( " + c + e.util.getProperty(w) + " !== undefined ", y && (a += " && Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(w) + "') "), h) {
                        a += " && ( ";
                        var b = P;
                        if (b)
                            for (var S = -1, _ = b.length - 1; S < _;) {
                                O = b[S += 1], S && (a += " || ");
                                a += " ( ( " + (k = c + (A = e.util.getProperty(O))) + " === undefined ", y && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(O) + "') "), a += ") && (missing" + s + " = " + e.util.toQuotedString(e.opts.jsonPointers ? O : A) + ") ) ";
                            }
                        a += ")) {  ";
                        var $ = "missing" + s, x = "' + " + $ + " + '";
                        e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(E, $, !0) : E + " + " + $);
                        var F = F || [];
                        F.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { property: '" + e.util.escapeQuotes(w) + "', missingProperty: '" + x + "', depsCount: " + P.length + ", deps: '" + e.util.escapeQuotes(1 == P.length ? P[0] : P.join(", ")) + "' } ", !1 !== e.opts.messages && (a += " , message: 'should have ", a += 1 == P.length ? "property " + e.util.escapeQuotes(P[0]) : "properties " + e.util.escapeQuotes(P.join(", ")), a += " when property " + e.util.escapeQuotes(w) + " is present' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                        var R = a;
                        a = F.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + R + "]); " : " validate.errors = [" + R + "]; return false; " : " var err = " + R + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    else {
                        a += " ) { ";
                        var j = P;
                        if (j)
                            for (var O, D = -1, I = j.length - 1; D < I;) {
                                O = j[D += 1];
                                var A = e.util.getProperty(O), k = (x = e.util.escapeQuotes(O), c + A);
                                e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(E, O, e.opts.jsonPointers)), a += " if ( " + k + " === undefined ", y && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(O) + "') "), a += ") {  var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { property: '" + e.util.escapeQuotes(w) + "', missingProperty: '" + x + "', depsCount: " + P.length + ", deps: '" + e.util.escapeQuotes(1 == P.length ? P[0] : P.join(", ")) + "' } ", !1 !== e.opts.messages && (a += " , message: 'should have ", a += 1 == P.length ? "property " + e.util.escapeQuotes(P[0]) : "properties " + e.util.escapeQuotes(P.join(", ")), a += " when property " + e.util.escapeQuotes(w) + " is present' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                            }
                    }
                    a += " }   ", h && (f += "}", a += " else { ");
                } e.errorPath = E; var L = d.baseId; for (var w in m) {
                e.util.schemaHasRules(g = m[w], e.RULES.all) && (a += " " + p + " = true; if ( " + c + e.util.getProperty(w) + " !== undefined ", y && (a += " && Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(w) + "') "), a += ") { ", d.schema = g, d.schemaPath = n + e.util.getProperty(w), d.errSchemaPath = l + "/" + e.util.escapeFragment(w), a += "  " + e.validate(d) + " ", d.baseId = L, a += " }  ", h && (a += " if (" + p + ") { ", f += "}"));
            } return h && (a += "   " + f + " if (" + u + " == errors) {"), a = e.util.cleanUpCode(a); };
        }, {}], 23: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = e.opts.$data && i && i.$data; d && (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; "); var f = "i" + s, p = "schema" + s; d || (a += " var " + p + " = validate.schema" + n + ";"), a += "var " + u + ";", d && (a += " if (schema" + s + " === undefined) " + u + " = true; else if (!Array.isArray(schema" + s + ")) " + u + " = false; else {"), a += u + " = false;for (var " + f + "=0; " + f + "<" + p + ".length; " + f + "++) if (equal(" + c + ", " + p + "[" + f + "])) { " + u + " = true; break; }", d && (a += "  }  "), a += " if (!" + u + ") {   "; var m = m || []; m.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'enum' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { allowedValues: schema" + s + " } ", !1 !== e.opts.messages && (a += " , message: 'should be equal to one of the allowed values' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} "; var v = a; return a = m.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + v + "]); " : " validate.errors = [" + v + "]; return false; " : " var err = " + v + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " }", h && (a += " else { "), a; };
        }, {}], 24: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""); if (!1 === e.opts.format)
                return h && (a += " if (true) { "), a; var u, d = e.opts.$data && i && i.$data; d ? (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; ", u = "schema" + s) : u = i; var f = e.opts.unknownFormats, p = Array.isArray(f); if (d) {
                a += " var " + (m = "format" + s) + " = formats[" + u + "]; var " + (v = "isObject" + s) + " = typeof " + m + " == 'object' && !(" + m + " instanceof RegExp) && " + m + ".validate; var " + (y = "formatType" + s) + " = " + v + " && " + m + ".type || 'string'; if (" + v + ") { ", e.async && (a += " var async" + s + " = " + m + ".async; "), a += " " + m + " = " + m + ".validate; } if (  ", d && (a += " (" + u + " !== undefined && typeof " + u + " != 'string') || "), a += " (", "ignore" != f && (a += " (" + u + " && !" + m + " ", p && (a += " && self._opts.unknownFormats.indexOf(" + u + ") == -1 "), a += ") || "), a += " (" + m + " && " + y + " == '" + t + "' && !(typeof " + m + " == 'function' ? ", a += e.async ? " (async" + s + " ? await " + m + "(" + c + ") : " + m + "(" + c + ")) " : " " + m + "(" + c + ") ", a += " : " + m + ".test(" + c + "))))) {";
            }
            else {
                var m;
                if (!(m = e.formats[i])) {
                    if ("ignore" == f)
                        return e.logger.warn('unknown format "' + i + '" ignored in schema at path "' + e.errSchemaPath + '"'), h && (a += " if (true) { "), a;
                    if (p && f.indexOf(i) >= 0)
                        return h && (a += " if (true) { "), a;
                    throw new Error('unknown format "' + i + '" is used in schema at path "' + e.errSchemaPath + '"');
                }
                var v, y = (v = "object" == typeof m && !(m instanceof RegExp) && m.validate) && m.type || "string";
                if (v) {
                    var g = !0 === m.async;
                    m = m.validate;
                }
                if (y != t)
                    return h && (a += " if (true) { "), a;
                if (g) {
                    if (!e.async)
                        throw new Error("async format in sync schema");
                    a += " if (!(await " + (P = "formats" + e.util.getProperty(i) + ".validate") + "(" + c + "))) { ";
                }
                else {
                    a += " if (! ";
                    var P = "formats" + e.util.getProperty(i);
                    v && (P += ".validate"), a += "function" == typeof m ? " " + P + "(" + c + ") " : " " + P + ".test(" + c + ") ", a += ") { ";
                }
            } var E = E || []; E.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'format' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { format:  ", a += d ? "" + u : "" + e.util.toQuotedString(i), a += "  } ", !1 !== e.opts.messages && (a += " , message: 'should match format \"", a += d ? "' + " + u + " + '" : "" + e.util.escapeQuotes(i), a += "\"' "), e.opts.verbose && (a += " , schema:  ", a += d ? "validate.schema" + n : "" + e.util.toQuotedString(i), a += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} "; var w = a; return a = E.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + w + "]); " : " validate.errors = [" + w + "]; return false; " : " var err = " + w + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ", h && (a += " else { "), a; };
        }, {}], 25: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = "errs__" + s, f = e.util.copy(e); f.level++; var p = "valid" + f.level, m = e.schema.then, v = e.schema.else, y = void 0 !== m && e.util.schemaHasRules(m, e.RULES.all), g = void 0 !== v && e.util.schemaHasRules(v, e.RULES.all), P = f.baseId; if (y || g) {
                var E;
                f.createErrors = !1, f.schema = i, f.schemaPath = n, f.errSchemaPath = l, a += " var " + d + " = errors; var " + u + " = true;  ";
                var w = e.compositeRule;
                e.compositeRule = f.compositeRule = !0, a += "  " + e.validate(f) + " ", f.baseId = P, f.createErrors = !0, a += "  errors = " + d + "; if (vErrors !== null) { if (" + d + ") vErrors.length = " + d + "; else vErrors = null; }  ", e.compositeRule = f.compositeRule = w, y ? (a += " if (" + p + ") {  ", f.schema = e.schema.then, f.schemaPath = e.schemaPath + ".then", f.errSchemaPath = e.errSchemaPath + "/then", a += "  " + e.validate(f) + " ", f.baseId = P, a += " " + u + " = " + p + "; ", y && g ? a += " var " + (E = "ifClause" + s) + " = 'then'; " : E = "'then'", a += " } ", g && (a += " else { ")) : a += " if (!" + p + ") { ", g && (f.schema = e.schema.else, f.schemaPath = e.schemaPath + ".else", f.errSchemaPath = e.errSchemaPath + "/else", a += "  " + e.validate(f) + " ", f.baseId = P, a += " " + u + " = " + p + "; ", y && g ? a += " var " + (E = "ifClause" + s) + " = 'else'; " : E = "'else'", a += " } "), a += " if (!" + u + ") {   var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'if' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { failingKeyword: " + E + " } ", !1 !== e.opts.messages && (a += " , message: 'should match \"' + " + E + " + '\" schema' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && h && (a += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false; "), a += " }   ", h && (a += " else { "), a = e.util.cleanUpCode(a);
            }
            else
                h && (a += " if (true) { "); return a; };
        }, {}], 26: [function (e, r, t) {
            "use strict";
            r.exports = { $ref: e("./ref"), allOf: e("./allOf"), anyOf: e("./anyOf"), $comment: e("./comment"), const: e("./const"), contains: e("./contains"), dependencies: e("./dependencies"), enum: e("./enum"), format: e("./format"), if: e("./if"), items: e("./items"), maximum: e("./_limit"), minimum: e("./_limit"), maxItems: e("./_limitItems"), minItems: e("./_limitItems"), maxLength: e("./_limitLength"), minLength: e("./_limitLength"), maxProperties: e("./_limitProperties"), minProperties: e("./_limitProperties"), multipleOf: e("./multipleOf"), not: e("./not"), oneOf: e("./oneOf"), pattern: e("./pattern"), properties: e("./properties"), propertyNames: e("./propertyNames"), required: e("./required"), uniqueItems: e("./uniqueItems"), validate: e("./validate") };
        }, { "./_limit": 12, "./_limitItems": 13, "./_limitLength": 14, "./_limitProperties": 15, "./allOf": 16, "./anyOf": 17, "./comment": 18, "./const": 19, "./contains": 20, "./dependencies": 22, "./enum": 23, "./format": 24, "./if": 25, "./items": 27, "./multipleOf": 28, "./not": 29, "./oneOf": 30, "./pattern": 31, "./properties": 32, "./propertyNames": 33, "./ref": 34, "./required": 35, "./uniqueItems": 36, "./validate": 37 }], 27: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = "errs__" + s, f = e.util.copy(e), p = ""; f.level++; var m = "valid" + f.level, v = "i" + s, y = f.dataLevel = e.dataLevel + 1, g = "data" + y, P = e.baseId; if (a += "var " + d + " = errors;var " + u + ";", Array.isArray(i)) {
                var E = e.schema.additionalItems;
                if (!1 === E) {
                    a += " " + u + " = " + c + ".length <= " + i.length + "; ";
                    var w = l;
                    l = e.errSchemaPath + "/additionalItems", a += "  if (!" + u + ") {   ";
                    var b = b || [];
                    b.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { limit: " + i.length + " } ", !1 !== e.opts.messages && (a += " , message: 'should NOT have more than " + i.length + " items' "), e.opts.verbose && (a += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                    var S = a;
                    a = b.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + S + "]); " : " validate.errors = [" + S + "]; return false; " : " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ", l = w, h && (p += "}", a += " else { ");
                }
                var _ = i;
                if (_)
                    for (var $, x = -1, F = _.length - 1; x < F;)
                        if ($ = _[x += 1], e.util.schemaHasRules($, e.RULES.all)) {
                            a += " " + m + " = true; if (" + c + ".length > " + x + ") { ";
                            var R = c + "[" + x + "]";
                            f.schema = $, f.schemaPath = n + "[" + x + "]", f.errSchemaPath = l + "/" + x, f.errorPath = e.util.getPathExpr(e.errorPath, x, e.opts.jsonPointers, !0), f.dataPathArr[y] = x;
                            var j = e.validate(f);
                            f.baseId = P, e.util.varOccurences(j, g) < 2 ? a += " " + e.util.varReplace(j, g, R) + " " : a += " var " + g + " = " + R + "; " + j + " ", a += " }  ", h && (a += " if (" + m + ") { ", p += "}");
                        }
                if ("object" == typeof E && e.util.schemaHasRules(E, e.RULES.all)) {
                    f.schema = E, f.schemaPath = e.schemaPath + ".additionalItems", f.errSchemaPath = e.errSchemaPath + "/additionalItems", a += " " + m + " = true; if (" + c + ".length > " + i.length + ") {  for (var " + v + " = " + i.length + "; " + v + " < " + c + ".length; " + v + "++) { ", f.errorPath = e.util.getPathExpr(e.errorPath, v, e.opts.jsonPointers, !0);
                    R = c + "[" + v + "]";
                    f.dataPathArr[y] = v;
                    j = e.validate(f);
                    f.baseId = P, e.util.varOccurences(j, g) < 2 ? a += " " + e.util.varReplace(j, g, R) + " " : a += " var " + g + " = " + R + "; " + j + " ", h && (a += " if (!" + m + ") break; "), a += " } }  ", h && (a += " if (" + m + ") { ", p += "}");
                }
            }
            else if (e.util.schemaHasRules(i, e.RULES.all)) {
                f.schema = i, f.schemaPath = n, f.errSchemaPath = l, a += "  for (var " + v + " = 0; " + v + " < " + c + ".length; " + v + "++) { ", f.errorPath = e.util.getPathExpr(e.errorPath, v, e.opts.jsonPointers, !0);
                R = c + "[" + v + "]";
                f.dataPathArr[y] = v;
                j = e.validate(f);
                f.baseId = P, e.util.varOccurences(j, g) < 2 ? a += " " + e.util.varReplace(j, g, R) + " " : a += " var " + g + " = " + R + "; " + j + " ", h && (a += " if (!" + m + ") break; "), a += " }";
            } return h && (a += " " + p + " if (" + d + " == errors) {"), a = e.util.cleanUpCode(a); };
        }, {}], 28: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, s += "var division" + o + ";if (", d && (s += " " + a + " !== undefined && ( typeof " + a + " != 'number' || "), s += " (division" + o + " = " + u + " / " + a + ", ", s += e.opts.multipleOfPrecision ? " Math.abs(Math.round(division" + o + ") - division" + o + ") > 1e-" + e.opts.multipleOfPrecision + " " : " division" + o + " !== parseInt(division" + o + ") ", s += " ) ", d && (s += "  )  "), s += " ) {   "; var f = f || []; f.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { multipleOf: " + a + " } ", !1 !== e.opts.messages && (s += " , message: 'should be multiple of ", s += d ? "' + " + a : a + "'"), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; var p = s; return s = f.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + p + "]); " : " validate.errors = [" + p + "]; return false; " : " var err = " + p + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", c && (s += " else { "), s; };
        }, {}], 29: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "errs__" + s, d = e.util.copy(e); d.level++; var f = "valid" + d.level; if (e.util.schemaHasRules(i, e.RULES.all)) {
                d.schema = i, d.schemaPath = n, d.errSchemaPath = l, a += " var " + u + " = errors;  ";
                var p = e.compositeRule;
                e.compositeRule = d.compositeRule = !0, d.createErrors = !1;
                var m;
                d.opts.allErrors && (m = d.opts.allErrors, d.opts.allErrors = !1), a += " " + e.validate(d) + " ", d.createErrors = !0, m && (d.opts.allErrors = m), e.compositeRule = d.compositeRule = p, a += " if (" + f + ") {   ";
                var v = v || [];
                v.push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'not' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'should NOT be valid' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                var y = a;
                a = v.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + y + "]); " : " validate.errors = [" + y + "]; return false; " : " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else {  errors = " + u + "; if (vErrors !== null) { if (" + u + ") vErrors.length = " + u + "; else vErrors = null; } ", e.opts.allErrors && (a += " } ");
            }
            else
                a += "  var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'not' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'should NOT be valid' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", h && (a += " if (false) { "); return a; };
        }, {}], 30: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = "errs__" + s, f = e.util.copy(e), p = ""; f.level++; var m = "valid" + f.level, v = f.baseId, y = "prevValid" + s, g = "passingSchemas" + s; a += "var " + d + " = errors , " + y + " = false , " + u + " = false , " + g + " = null; "; var P = e.compositeRule; e.compositeRule = f.compositeRule = !0; var E = i; if (E)
                for (var w, b = -1, S = E.length - 1; b < S;)
                    w = E[b += 1], e.util.schemaHasRules(w, e.RULES.all) ? (f.schema = w, f.schemaPath = n + "[" + b + "]", f.errSchemaPath = l + "/" + b, a += "  " + e.validate(f) + " ", f.baseId = v) : a += " var " + m + " = true; ", b && (a += " if (" + m + " && " + y + ") { " + u + " = false; " + g + " = [" + g + ", " + b + "]; } else { ", p += "}"), a += " if (" + m + ") { " + u + " = " + y + " = true; " + g + " = " + b + "; }"; return e.compositeRule = f.compositeRule = P, a += p + "if (!" + u + ") {   var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { passingSchemas: " + g + " } ", !1 !== e.opts.messages && (a += " , message: 'should match exactly one schema in oneOf' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && h && (a += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false; "), a += "} else {  errors = " + d + "; if (vErrors !== null) { if (" + d + ") vErrors.length = " + d + "; else vErrors = null; }", e.opts.allErrors && (a += " } "), a; };
        }, {}], 31: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = e.opts.$data && n && n.$data; d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n; var f = d ? "(new RegExp(" + a + "))" : e.usePattern(n); s += "if ( ", d && (s += " (" + a + " !== undefined && typeof " + a + " != 'string') || "), s += " !" + f + ".test(" + u + ") ) {   "; var p = p || []; p.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { pattern:  ", s += d ? "" + a : "" + e.util.toQuotedString(n), s += "  } ", !1 !== e.opts.messages && (s += " , message: 'should match pattern \"", s += d ? "' + " + a + " + '" : "" + e.util.escapeQuotes(n), s += "\"' "), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + e.util.toQuotedString(n), s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} "; var m = s; return s = p.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", c && (s += " else { "), s; };
        }, {}], 32: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "errs__" + s, d = e.util.copy(e), f = ""; d.level++; var p = "valid" + d.level, m = "key" + s, v = "idx" + s, y = d.dataLevel = e.dataLevel + 1, g = "data" + y, P = "dataProperties" + s, E = Object.keys(i || {}), w = e.schema.patternProperties || {}, b = Object.keys(w), S = e.schema.additionalProperties, _ = E.length || b.length, $ = !1 === S, x = "object" == typeof S && Object.keys(S).length, F = e.opts.removeAdditional, R = $ || x || F, j = e.opts.ownProperties, O = e.baseId, D = e.schema.required; if (D && (!e.opts.v5 || !D.$data) && D.length < e.opts.loopRequired)
                var I = e.util.toHash(D); if (a += "var " + u + " = errors;var " + p + " = true;", j && (a += " var " + P + " = undefined;"), R) {
                if (a += j ? " " + P + " = " + P + " || Object.keys(" + c + "); for (var " + v + "=0; " + v + "<" + P + ".length; " + v + "++) { var " + m + " = " + P + "[" + v + "]; " : " for (var " + m + " in " + c + ") { ", _) {
                    if (a += " var isAdditional" + s + " = !(false ", E.length)
                        if (E.length > 5)
                            a += " || validate.schema" + n + "[" + m + "] ";
                        else {
                            var A = E;
                            if (A)
                                for (var k = -1, L = A.length - 1; k < L;)
                                    J = A[k += 1], a += " || " + m + " == " + e.util.toQuotedString(J) + " ";
                        }
                    if (b.length) {
                        var q = b;
                        if (q)
                            for (var z = -1, C = q.length - 1; z < C;)
                                ae = q[z += 1], a += " || " + e.usePattern(ae) + ".test(" + m + ") ";
                    }
                    a += " ); if (isAdditional" + s + ") { ";
                }
                if ("all" == F)
                    a += " delete " + c + "[" + m + "]; ";
                else {
                    var Q = e.errorPath, U = "' + " + m + " + '";
                    if (e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(e.errorPath, m, e.opts.jsonPointers)), $)
                        if (F)
                            a += " delete " + c + "[" + m + "]; ";
                        else {
                            a += " " + p + " = false; ";
                            var V = l;
                            l = e.errSchemaPath + "/additionalProperties";
                            (re = re || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { additionalProperty: '" + U + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is an invalid additional property" : "should NOT have additional properties", a += "' "), e.opts.verbose && (a += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                            var N = a;
                            a = re.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + N + "]); " : " validate.errors = [" + N + "]; return false; " : " var err = " + N + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l = V, h && (a += " break; ");
                        }
                    else if (x)
                        if ("failing" == F) {
                            a += " var " + u + " = errors;  ";
                            var T = e.compositeRule;
                            e.compositeRule = d.compositeRule = !0, d.schema = S, d.schemaPath = e.schemaPath + ".additionalProperties", d.errSchemaPath = e.errSchemaPath + "/additionalProperties", d.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, m, e.opts.jsonPointers);
                            var M = c + "[" + m + "]";
                            d.dataPathArr[y] = m;
                            var H = e.validate(d);
                            d.baseId = O, e.util.varOccurences(H, g) < 2 ? a += " " + e.util.varReplace(H, g, M) + " " : a += " var " + g + " = " + M + "; " + H + " ", a += " if (!" + p + ") { errors = " + u + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + c + "[" + m + "]; }  ", e.compositeRule = d.compositeRule = T;
                        }
                        else {
                            d.schema = S, d.schemaPath = e.schemaPath + ".additionalProperties", d.errSchemaPath = e.errSchemaPath + "/additionalProperties", d.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, m, e.opts.jsonPointers);
                            M = c + "[" + m + "]";
                            d.dataPathArr[y] = m;
                            H = e.validate(d);
                            d.baseId = O, e.util.varOccurences(H, g) < 2 ? a += " " + e.util.varReplace(H, g, M) + " " : a += " var " + g + " = " + M + "; " + H + " ", h && (a += " if (!" + p + ") break; ");
                        }
                    e.errorPath = Q;
                }
                _ && (a += " } "), a += " }  ", h && (a += " if (" + p + ") { ", f += "}");
            } var K = e.opts.useDefaults && !e.compositeRule; if (E.length) {
                var B = E;
                if (B)
                    for (var J, Z = -1, G = B.length - 1; Z < G;) {
                        J = B[Z += 1];
                        if (e.util.schemaHasRules(ie = i[J], e.RULES.all)) {
                            var W = e.util.getProperty(J), X = (M = c + W, K && void 0 !== ie.default);
                            d.schema = ie, d.schemaPath = n + W, d.errSchemaPath = l + "/" + e.util.escapeFragment(J), d.errorPath = e.util.getPath(e.errorPath, J, e.opts.jsonPointers), d.dataPathArr[y] = e.util.toQuotedString(J);
                            H = e.validate(d);
                            if (d.baseId = O, e.util.varOccurences(H, g) < 2) {
                                H = e.util.varReplace(H, g, M);
                                var Y = M;
                            }
                            else {
                                Y = g;
                                a += " var " + g + " = " + M + "; ";
                            }
                            if (X)
                                a += " " + H + " ";
                            else {
                                if (I && I[J]) {
                                    a += " if ( " + Y + " === undefined ", j && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(J) + "') "), a += ") { " + p + " = false; ";
                                    Q = e.errorPath, V = l;
                                    var ee = e.util.escapeQuotes(J);
                                    e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(Q, J, e.opts.jsonPointers)), l = e.errSchemaPath + "/required";
                                    var re;
                                    (re = re || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + ee + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + ee + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                                    N = a;
                                    a = re.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + N + "]); " : " validate.errors = [" + N + "]; return false; " : " var err = " + N + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l = V, e.errorPath = Q, a += " } else { ";
                                }
                                else
                                    h ? (a += " if ( " + Y + " === undefined ", j && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(J) + "') "), a += ") { " + p + " = true; } else { ") : (a += " if (" + Y + " !== undefined ", j && (a += " &&   Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(J) + "') "), a += " ) { ");
                                a += " " + H + " } ";
                            }
                        }
                        h && (a += " if (" + p + ") { ", f += "}");
                    }
            } if (b.length) {
                var te = b;
                if (te)
                    for (var ae, se = -1, oe = te.length - 1; se < oe;) {
                        ae = te[se += 1];
                        var ie;
                        if (e.util.schemaHasRules(ie = w[ae], e.RULES.all)) {
                            d.schema = ie, d.schemaPath = e.schemaPath + ".patternProperties" + e.util.getProperty(ae), d.errSchemaPath = e.errSchemaPath + "/patternProperties/" + e.util.escapeFragment(ae), a += j ? " " + P + " = " + P + " || Object.keys(" + c + "); for (var " + v + "=0; " + v + "<" + P + ".length; " + v + "++) { var " + m + " = " + P + "[" + v + "]; " : " for (var " + m + " in " + c + ") { ", a += " if (" + e.usePattern(ae) + ".test(" + m + ")) { ", d.errorPath = e.util.getPathExpr(e.errorPath, m, e.opts.jsonPointers);
                            M = c + "[" + m + "]";
                            d.dataPathArr[y] = m;
                            H = e.validate(d);
                            d.baseId = O, e.util.varOccurences(H, g) < 2 ? a += " " + e.util.varReplace(H, g, M) + " " : a += " var " + g + " = " + M + "; " + H + " ", h && (a += " if (!" + p + ") break; "), a += " } ", h && (a += " else " + p + " = true; "), a += " }  ", h && (a += " if (" + p + ") { ", f += "}");
                        }
                    }
            } return h && (a += " " + f + " if (" + u + " == errors) {"), a = e.util.cleanUpCode(a); };
        }, {}], 33: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "errs__" + s, d = e.util.copy(e); d.level++; var f = "valid" + d.level; if (e.util.schemaHasRules(i, e.RULES.all)) {
                d.schema = i, d.schemaPath = n, d.errSchemaPath = l;
                var p = "key" + s, m = "idx" + s, v = "i" + s, y = "' + " + p + " + '", g = "data" + (d.dataLevel = e.dataLevel + 1), P = "dataProperties" + s, E = e.opts.ownProperties, w = e.baseId;
                a += " var " + u + " = errors; ", E && (a += " var " + P + " = undefined; "), a += E ? " " + P + " = " + P + " || Object.keys(" + c + "); for (var " + m + "=0; " + m + "<" + P + ".length; " + m + "++) { var " + p + " = " + P + "[" + m + "]; " : " for (var " + p + " in " + c + ") { ", a += " var startErrs" + s + " = errors; ";
                var b = p, S = e.compositeRule;
                e.compositeRule = d.compositeRule = !0;
                var _ = e.validate(d);
                d.baseId = w, e.util.varOccurences(_, g) < 2 ? a += " " + e.util.varReplace(_, g, b) + " " : a += " var " + g + " = " + b + "; " + _ + " ", e.compositeRule = d.compositeRule = S, a += " if (!" + f + ") { for (var " + v + "=startErrs" + s + "; " + v + "<errors; " + v + "++) { vErrors[" + v + "].propertyName = " + p + "; }   var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { propertyName: '" + y + "' } ", !1 !== e.opts.messages && (a += " , message: 'property name \\'" + y + "\\' is invalid' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && h && (a += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false; "), h && (a += " break; "), a += " } }";
            } return h && (a += "  if (" + u + " == errors) {"), a = e.util.cleanUpCode(a); };
        }, {}], 34: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s, o = " ", i = e.dataLevel, n = e.schema[r], l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (i || ""), u = "valid" + e.level; if ("#" == n || "#/" == n)
                e.isRoot ? (a = e.async, s = "validate") : (a = !0 === e.root.schema.$async, s = "root.refVal[0]");
            else {
                var d = e.resolveRef(e.baseId, n, e.isRoot);
                if (void 0 === d) {
                    var f = e.MissingRefError.message(e.baseId, n);
                    if ("fail" == e.opts.missingRefs) {
                        e.logger.error(f);
                        (y = y || []).push(o), o = "", !1 !== e.createErrors ? (o += " { keyword: '$ref' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { ref: '" + e.util.escapeQuotes(n) + "' } ", !1 !== e.opts.messages && (o += " , message: 'can\\'t resolve reference " + e.util.escapeQuotes(n) + "' "), e.opts.verbose && (o += " , schema: " + e.util.toQuotedString(n) + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), o += " } ") : o += " {} ";
                        var p = o;
                        o = y.pop(), o += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + p + "]); " : " validate.errors = [" + p + "]; return false; " : " var err = " + p + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", h && (o += " if (false) { ");
                    }
                    else {
                        if ("ignore" != e.opts.missingRefs)
                            throw new e.MissingRefError(e.baseId, n, f);
                        e.logger.warn(f), h && (o += " if (true) { ");
                    }
                }
                else if (d.inline) {
                    var m = e.util.copy(e);
                    m.level++;
                    var v = "valid" + m.level;
                    m.schema = d.schema, m.schemaPath = "", m.errSchemaPath = n;
                    o += " " + e.validate(m).replace(/validate\.schema/g, d.code) + " ", h && (o += " if (" + v + ") { ");
                }
                else
                    a = !0 === d.$async || e.async && !1 !== d.$async, s = d.code;
            } if (s) {
                var y;
                (y = y || []).push(o), o = "", o += e.opts.passContext ? " " + s + ".call(this, " : " " + s + "( ", o += " " + c + ", (dataPath || '')", '""' != e.errorPath && (o += " + " + e.errorPath);
                var g = o += " , " + (i ? "data" + (i - 1 || "") : "parentData") + " , " + (i ? e.dataPathArr[i] : "parentDataProperty") + ", rootData)  ";
                if (o = y.pop(), a) {
                    if (!e.async)
                        throw new Error("async schema referenced by sync schema");
                    h && (o += " var " + u + "; "), o += " try { await " + g + "; ", h && (o += " " + u + " = true; "), o += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ", h && (o += " " + u + " = false; "), o += " } ", h && (o += " if (" + u + ") { ");
                }
                else
                    o += " if (!" + g + ") { if (vErrors === null) vErrors = " + s + ".errors; else vErrors = vErrors.concat(" + s + ".errors); errors = vErrors.length; } ", h && (o += " else { ");
            } return o; };
        }, {}], 35: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, c = "data" + (o || ""), u = "valid" + s, d = e.opts.$data && i && i.$data; d && (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; "); var f = "schema" + s; if (!d)
                if (i.length < e.opts.loopRequired && e.schema.properties && Object.keys(e.schema.properties).length) {
                    var p = [], m = i;
                    if (m)
                        for (var v, y = -1, g = m.length - 1; y < g;) {
                            v = m[y += 1];
                            var P = e.schema.properties[v];
                            P && e.util.schemaHasRules(P, e.RULES.all) || (p[p.length] = v);
                        }
                }
                else
                    p = i; if (d || p.length) {
                var E = e.errorPath, w = d || p.length >= e.opts.loopRequired, b = e.opts.ownProperties;
                if (h)
                    if (a += " var missing" + s + "; ", w) {
                        d || (a += " var " + f + " = validate.schema" + n + "; ");
                        var S = "' + " + (j = "schema" + s + "[" + (x = "i" + s) + "]") + " + '";
                        e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(E, j, e.opts.jsonPointers)), a += " var " + u + " = true; ", d && (a += " if (schema" + s + " === undefined) " + u + " = true; else if (!Array.isArray(schema" + s + ")) " + u + " = false; else {"), a += " for (var " + x + " = 0; " + x + " < " + f + ".length; " + x + "++) { " + u + " = " + c + "[" + f + "[" + x + "]] !== undefined ", b && (a += " &&   Object.prototype.hasOwnProperty.call(" + c + ", " + f + "[" + x + "]) "), a += "; if (!" + u + ") break; } ", d && (a += "  }  "), a += "  if (!" + u + ") {   ";
                        (R = R || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + S + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                        var _ = a;
                        a = R.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + _ + "]); " : " validate.errors = [" + _ + "]; return false; " : " var err = " + _ + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else { ";
                    }
                    else {
                        a += " if ( ";
                        var $ = p;
                        if ($)
                            for (var x = -1, F = $.length - 1; x < F;) {
                                D = $[x += 1], x && (a += " || ");
                                a += " ( ( " + (L = c + (k = e.util.getProperty(D))) + " === undefined ", b && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(D) + "') "), a += ") && (missing" + s + " = " + e.util.toQuotedString(e.opts.jsonPointers ? D : k) + ") ) ";
                            }
                        a += ") {  ";
                        S = "' + " + (j = "missing" + s) + " + '";
                        e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(E, j, !0) : E + " + " + j);
                        var R;
                        (R = R || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + S + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ";
                        _ = a;
                        a = R.pop(), a += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + _ + "]); " : " validate.errors = [" + _ + "]; return false; " : " var err = " + _ + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else { ";
                    }
                else if (w) {
                    d || (a += " var " + f + " = validate.schema" + n + "; ");
                    var j;
                    S = "' + " + (j = "schema" + s + "[" + (x = "i" + s) + "]") + " + '";
                    e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(E, j, e.opts.jsonPointers)), d && (a += " if (" + f + " && !Array.isArray(" + f + ")) {  var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + S + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + f + " !== undefined) { "), a += " for (var " + x + " = 0; " + x + " < " + f + ".length; " + x + "++) { if (" + c + "[" + f + "[" + x + "]] === undefined ", b && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", " + f + "[" + x + "]) "), a += ") {  var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + S + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ", d && (a += "  }  ");
                }
                else {
                    var O = p;
                    if (O)
                        for (var D, I = -1, A = O.length - 1; I < A;) {
                            D = O[I += 1];
                            var k = e.util.getProperty(D), L = (S = e.util.escapeQuotes(D), c + k);
                            e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(E, D, e.opts.jsonPointers)), a += " if ( " + L + " === undefined ", b && (a += " || ! Object.prototype.hasOwnProperty.call(" + c + ", '" + e.util.escapeQuotes(D) + "') "), a += ") {  var err =   ", !1 !== e.createErrors ? (a += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + S + "' } ", !1 !== e.opts.messages && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                        }
                }
                e.errorPath = E;
            }
            else
                h && (a += " if (true) {"); return a; };
        }, {}], 36: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + e.util.getProperty(r), h = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, u = "data" + (i || ""), d = "valid" + o, f = e.opts.$data && n && n.$data; if (f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, (n || f) && !1 !== e.opts.uniqueItems) {
                f && (s += " var " + d + "; if (" + a + " === false || " + a + " === undefined) " + d + " = true; else if (typeof " + a + " != 'boolean') " + d + " = false; else { "), s += " var i = " + u + ".length , " + d + " = true , j; if (i > 1) { ";
                var p = e.schema.items && e.schema.items.type;
                s += p && "object" != p && "array" != p ? " var itemIndices = {}, item; for (;i--;) { var item = " + u + "[i]; if (typeof item != '" + p + "') continue; if (itemIndices[item] !== undefined) { " + d + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } " : " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + u + "[i], " + u + "[j])) { " + d + " = false; break outer; } } } ", s += " } ", f && (s += "  }  "), s += " if (!" + d + ") {   ";
                var m = m || [];
                m.push(s), s = "", !1 !== e.createErrors ? (s += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(h) + " , params: { i: i, j: j } ", !1 !== e.opts.messages && (s += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
                var v = s;
                s = m.pop(), s += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + v + "]); " : " validate.errors = [" + v + "]; return false; " : " var err = " + v + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } ", c && (s += " else { ");
            }
            else
                c && (s += " if (true) { "); return s; };
        }, {}], 37: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t) { var a = "", s = !0 === e.schema.$async, o = e.util.schemaHasRulesExcept(e.schema, e.RULES.all, "$ref"), i = e.self._getId(e.schema); if (e.isTop && (a += " var validate = ", s && (e.async = !0, a += "async "), a += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ", i && (e.opts.sourceCode || e.opts.processCode) && (a += " /*# sourceURL=" + i + " */ ")), "boolean" == typeof e.schema || !o && !e.schema.$ref) {
                var n = e.level, l = e.dataLevel, h = e.schema[r = "false schema"], c = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, d = !e.opts.allErrors, f = "data" + (l || ""), p = "valid" + n;
                if (!1 === e.schema) {
                    e.isTop ? d = !0 : a += " var " + p + " = false; ";
                    (J = J || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: '" + (y || "false schema") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", !1 !== e.opts.messages && (a += " , message: 'boolean schema is false' "), e.opts.verbose && (a += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), a += " } ") : a += " {} ";
                    var m = a;
                    a = J.pop(), a += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                else
                    a += e.isTop ? s ? " return data; " : " validate.errors = null; return true; " : " var " + p + " = true; ";
                return e.isTop && (a += " }; return validate; "), a;
            } if (e.isTop) {
                var v = e.isTop;
                n = e.level = 0, l = e.dataLevel = 0, f = "data";
                e.rootId = e.resolve.fullPath(e.self._getId(e.root.schema)), e.baseId = e.baseId || e.rootId, delete e.isTop, e.dataPathArr = [void 0], a += " var vErrors = null; ", a += " var errors = 0;     ", a += " if (rootData === undefined) rootData = data; ";
            }
            else {
                n = e.level, f = "data" + ((l = e.dataLevel) || "");
                if (i && (e.baseId = e.resolve.url(e.baseId, i)), s && !e.async)
                    throw new Error("async schema in sync schema");
                a += " var errs_" + n + " = errors;";
            } p = "valid" + n, d = !e.opts.allErrors; var y, g = "", P = "", E = e.schema.type, w = Array.isArray(E); if (w && 1 == E.length && (E = E[0], w = !1), e.schema.$ref && o) {
                if ("fail" == e.opts.extendRefs)
                    throw new Error('$ref: validation keywords used in schema at path "' + e.errSchemaPath + '" (see option extendRefs)');
                !0 !== e.opts.extendRefs && (o = !1, e.logger.warn('$ref: keywords ignored in schema at path "' + e.errSchemaPath + '"'));
            } if (e.schema.$comment && e.opts.$comment && (a += " " + e.RULES.all.$comment.code(e, "$comment")), E) {
                if (e.opts.coerceTypes)
                    var b = e.util.coerceToTypes(e.opts.coerceTypes, E);
                var S = e.RULES.types[E];
                if (b || w || !0 === S || S && !Z(S)) {
                    c = e.schemaPath + ".type", u = e.errSchemaPath + "/type", c = e.schemaPath + ".type", u = e.errSchemaPath + "/type";
                    if (a += " if (" + e.util[w ? "checkDataTypes" : "checkDataType"](E, f, !0) + ") { ", b) {
                        var _ = "dataType" + n, $ = "coerced" + n;
                        a += " var " + _ + " = typeof " + f + "; ", "array" == e.opts.coerceTypes && (a += " if (" + _ + " == 'object' && Array.isArray(" + f + ")) " + _ + " = 'array'; "), a += " var " + $ + " = undefined; ";
                        var x = "", F = b;
                        if (F)
                            for (var R, j = -1, O = F.length - 1; j < O;)
                                R = F[j += 1], j && (a += " if (" + $ + " === undefined) { ", x += "}"), "array" == e.opts.coerceTypes && "array" != R && (a += " if (" + _ + " == 'array' && " + f + ".length == 1) { " + $ + " = " + f + " = " + f + "[0]; " + _ + " = typeof " + f + ";  } "), "string" == R ? a += " if (" + _ + " == 'number' || " + _ + " == 'boolean') " + $ + " = '' + " + f + "; else if (" + f + " === null) " + $ + " = ''; " : "number" == R || "integer" == R ? (a += " if (" + _ + " == 'boolean' || " + f + " === null || (" + _ + " == 'string' && " + f + " && " + f + " == +" + f + " ", "integer" == R && (a += " && !(" + f + " % 1)"), a += ")) " + $ + " = +" + f + "; ") : "boolean" == R ? a += " if (" + f + " === 'false' || " + f + " === 0 || " + f + " === null) " + $ + " = false; else if (" + f + " === 'true' || " + f + " === 1) " + $ + " = true; " : "null" == R ? a += " if (" + f + " === '' || " + f + " === 0 || " + f + " === false) " + $ + " = null; " : "array" == e.opts.coerceTypes && "array" == R && (a += " if (" + _ + " == 'string' || " + _ + " == 'number' || " + _ + " == 'boolean' || " + f + " == null) " + $ + " = [" + f + "]; ");
                        a += " " + x + " if (" + $ + " === undefined) {   ";
                        (J = J || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: '" + (y || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { type: '", a += w ? "" + E.join(",") : "" + E, a += "' } ", !1 !== e.opts.messages && (a += " , message: 'should be ", a += w ? "" + E.join(",") : "" + E, a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + c + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), a += " } ") : a += " {} ";
                        m = a;
                        a = J.pop(), a += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else {  ";
                        var D = l ? "data" + (l - 1 || "") : "parentData";
                        a += " " + f + " = " + $ + "; ", l || (a += "if (" + D + " !== undefined)"), a += " " + D + "[" + (l ? e.dataPathArr[l] : "parentDataProperty") + "] = " + $ + "; } ";
                    }
                    else {
                        (J = J || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: '" + (y || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { type: '", a += w ? "" + E.join(",") : "" + E, a += "' } ", !1 !== e.opts.messages && (a += " , message: 'should be ", a += w ? "" + E.join(",") : "" + E, a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + c + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), a += " } ") : a += " {} ";
                        m = a;
                        a = J.pop(), a += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    a += " } ";
                }
            } if (e.schema.$ref && !o)
                a += " " + e.RULES.all.$ref.code(e, "$ref") + " ", d && (a += " } if (errors === ", a += v ? "0" : "errs_" + n, a += ") { ", P += "}");
            else {
                var I = e.RULES;
                if (I)
                    for (var A = -1, k = I.length - 1; A < k;)
                        if (Z(S = I[A += 1])) {
                            if (S.type && (a += " if (" + e.util.checkDataType(S.type, f) + ") { "), e.opts.useDefaults && !e.compositeRule)
                                if ("object" == S.type && e.schema.properties) {
                                    h = e.schema.properties;
                                    var L = Object.keys(h);
                                    if (L)
                                        for (var q, z = -1, C = L.length - 1; z < C;) {
                                            if (void 0 !== (U = h[q = L[z += 1]]).default) {
                                                a += "  if (" + (N = f + e.util.getProperty(q)) + " === undefined) " + N + " = ", a += "shared" == e.opts.useDefaults ? " " + e.useDefault(U.default) + " " : " " + JSON.stringify(U.default) + " ", a += "; ";
                                            }
                                        }
                                }
                                else if ("array" == S.type && Array.isArray(e.schema.items)) {
                                    var Q = e.schema.items;
                                    if (Q) {
                                        j = -1;
                                        for (var U, V = Q.length - 1; j < V;)
                                            if (void 0 !== (U = Q[j += 1]).default) {
                                                var N;
                                                a += "  if (" + (N = f + "[" + j + "]") + " === undefined) " + N + " = ", a += "shared" == e.opts.useDefaults ? " " + e.useDefault(U.default) + " " : " " + JSON.stringify(U.default) + " ", a += "; ";
                                            }
                                    }
                                }
                            var T = S.rules;
                            if (T)
                                for (var M, H = -1, K = T.length - 1; H < K;)
                                    if (G(M = T[H += 1])) {
                                        var B = M.code(e, M.keyword, S.type);
                                        B && (a += " " + B + " ", d && (g += "}"));
                                    }
                            if (d && (a += " " + g + " ", g = ""), S.type && (a += " } ", E && E === S.type && !b)) {
                                a += " else { ";
                                var J;
                                c = e.schemaPath + ".type", u = e.errSchemaPath + "/type";
                                (J = J || []).push(a), a = "", !1 !== e.createErrors ? (a += " { keyword: '" + (y || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { type: '", a += w ? "" + E.join(",") : "" + E, a += "' } ", !1 !== e.opts.messages && (a += " , message: 'should be ", a += w ? "" + E.join(",") : "" + E, a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + c + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), a += " } ") : a += " {} ";
                                m = a;
                                a = J.pop(), a += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ";
                            }
                            d && (a += " if (errors === ", a += v ? "0" : "errs_" + n, a += ") { ", P += "}");
                        }
            } d && (a += " " + P + " "), v ? (s ? (a += " if (errors === 0) return data;           ", a += " else throw new ValidationError(vErrors); ") : (a += " validate.errors = vErrors; ", a += " return errors === 0;       "), a += " }; return validate;") : a += " var " + p + " = errors === errs_" + n + ";", a = e.util.cleanUpCode(a), v && (a = e.util.finalCleanUpCode(a, s)); function Z(e) { for (var r = e.rules, t = 0; t < r.length; t++)
                if (G(r[t]))
                    return !0; } function G(r) { return void 0 !== e.schema[r.keyword] || r.implements && function (r) { for (var t = r.implements, a = 0; a < t.length; a++)
                if (void 0 !== e.schema[t[a]])
                    return !0; }(r); } return a; };
        }, {}], 38: [function (e, r, t) {
            "use strict";
            var a = /^[a-z_$][a-z0-9_$-]*$/i, s = e("./dotjs/custom");
            r.exports = { add: function (e, r) { var t = this.RULES; if (t.keywords[e])
                    throw new Error("Keyword " + e + " is already defined"); if (!a.test(e))
                    throw new Error("Keyword " + e + " is not a valid identifier"); if (r) {
                    if (r.macro && void 0 !== r.valid)
                        throw new Error('"valid" option cannot be used with macro keywords');
                    var o = r.type;
                    if (Array.isArray(o)) {
                        var i, n = o.length;
                        for (i = 0; i < n; i++)
                            u(o[i]);
                        for (i = 0; i < n; i++)
                            c(e, o[i], r);
                    }
                    else
                        o && u(o), c(e, o, r);
                    var l = !0 === r.$data && this._opts.$data;
                    if (l && !r.validate)
                        throw new Error('$data support: "validate" function is not defined');
                    var h = r.metaSchema;
                    h && (l && (h = { anyOf: [h, { $ref: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#" }] }), r.validateSchema = this.compile(h, !0));
                } t.keywords[e] = t.all[e] = !0; function c(e, r, a) { for (var o, i = 0; i < t.length; i++) {
                    var n = t[i];
                    if (n.type == r) {
                        o = n;
                        break;
                    }
                } o || t.push(o = { type: r, rules: [] }); var l = { keyword: e, definition: a, custom: !0, code: s, implements: a.implements }; o.rules.push(l), t.custom[e] = l; } function u(e) { if (!t.types[e])
                    throw new Error("Unknown type " + e); } return this; }, get: function (e) { var r = this.RULES.custom[e]; return r ? r.definition : this.RULES.keywords[e] || !1; }, remove: function (e) { var r = this.RULES; delete r.keywords[e], delete r.all[e], delete r.custom[e]; for (var t = 0; t < r.length; t++)
                    for (var a = r[t].rules, s = 0; s < a.length; s++)
                        if (a[s].keyword == e) {
                            a.splice(s, 1);
                            break;
                        } return this; } };
        }, { "./dotjs/custom": 21 }], 39: [function (e, r, t) { r.exports = { $schema: "http://json-schema.org/draft-07/schema#", $id: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#", description: "Meta-schema for $data reference (JSON Schema extension proposal)", type: "object", required: ["$data"], properties: { $data: { type: "string", anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }] } }, additionalProperties: !1 }; }, {}], 40: [function (e, r, t) { r.exports = { $schema: "http://json-schema.org/draft-07/schema#", $id: "http://json-schema.org/draft-07/schema#", title: "Core schema meta-schema", definitions: { schemaArray: { type: "array", minItems: 1, items: { $ref: "#" } }, nonNegativeInteger: { type: "integer", minimum: 0 }, nonNegativeIntegerDefault0: { allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }] }, simpleTypes: { enum: ["array", "boolean", "integer", "null", "number", "object", "string"] }, stringArray: { type: "array", items: { type: "string" }, uniqueItems: !0, default: [] } }, type: ["object", "boolean"], properties: { $id: { type: "string", format: "uri-reference" }, $schema: { type: "string", format: "uri" }, $ref: { type: "string", format: "uri-reference" }, $comment: { type: "string" }, title: { type: "string" }, description: { type: "string" }, default: !0, readOnly: { type: "boolean", default: !1 }, examples: { type: "array", items: !0 }, multipleOf: { type: "number", exclusiveMinimum: 0 }, maximum: { type: "number" }, exclusiveMaximum: { type: "number" }, minimum: { type: "number" }, exclusiveMinimum: { type: "number" }, maxLength: { $ref: "#/definitions/nonNegativeInteger" }, minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, pattern: { type: "string", format: "regex" }, additionalItems: { $ref: "#" }, items: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }], default: !0 }, maxItems: { $ref: "#/definitions/nonNegativeInteger" }, minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, uniqueItems: { type: "boolean", default: !1 }, contains: { $ref: "#" }, maxProperties: { $ref: "#/definitions/nonNegativeInteger" }, minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" }, required: { $ref: "#/definitions/stringArray" }, additionalProperties: { $ref: "#" }, definitions: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, properties: { type: "object", additionalProperties: { $ref: "#" }, default: {} }, patternProperties: { type: "object", additionalProperties: { $ref: "#" }, propertyNames: { format: "regex" }, default: {} }, dependencies: { type: "object", additionalProperties: { anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }] } }, propertyNames: { $ref: "#" }, const: !0, enum: { type: "array", items: !0, minItems: 1, uniqueItems: !0 }, type: { anyOf: [{ $ref: "#/definitions/simpleTypes" }, { type: "array", items: { $ref: "#/definitions/simpleTypes" }, minItems: 1, uniqueItems: !0 }] }, format: { type: "string" }, contentMediaType: { type: "string" }, contentEncoding: { type: "string" }, if: { $ref: "#" }, then: { $ref: "#" }, else: { $ref: "#" }, allOf: { $ref: "#/definitions/schemaArray" }, anyOf: { $ref: "#/definitions/schemaArray" }, oneOf: { $ref: "#/definitions/schemaArray" }, not: { $ref: "#" } }, default: !0 }; }, {}], 41: [function (e, r, t) {
            "use strict";
            r.exports = function e(r, t) { if (r === t)
                return !0; var a, s = Array.isArray(r), o = Array.isArray(t); if (s && o) {
                if (r.length != t.length)
                    return !1;
                for (a = 0; a < r.length; a++)
                    if (!e(r[a], t[a]))
                        return !1;
                return !0;
            } if (s != o)
                return !1; if (r && t && "object" == typeof r && "object" == typeof t) {
                var i = Object.keys(r);
                if (i.length !== Object.keys(t).length)
                    return !1;
                var n = r instanceof Date, l = t instanceof Date;
                if (n && l)
                    return r.getTime() == t.getTime();
                if (n != l)
                    return !1;
                var h = r instanceof RegExp, c = t instanceof RegExp;
                if (h && c)
                    return r.toString() == t.toString();
                if (h != c)
                    return !1;
                for (a = 0; a < i.length; a++)
                    if (!Object.prototype.hasOwnProperty.call(t, i[a]))
                        return !1;
                for (a = 0; a < i.length; a++)
                    if (!e(r[i[a]], t[i[a]]))
                        return !1;
                return !0;
            } return !1; };
        }, {}], 42: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r) { r || (r = {}), "function" == typeof r && (r = { cmp: r }); var t, a = "boolean" == typeof r.cycles && r.cycles, s = r.cmp && (t = r.cmp, function (e) { return function (r, a) { return t({ key: r, value: e[r] }, { key: a, value: e[a] }); }; }), o = []; return function e(r) { if (r && r.toJSON && "function" == typeof r.toJSON && (r = r.toJSON()), void 0 !== r) {
                if ("number" == typeof r)
                    return isFinite(r) ? "" + r : "null";
                if ("object" != typeof r)
                    return JSON.stringify(r);
                var t, i;
                if (Array.isArray(r)) {
                    for (i = "[", t = 0; t < r.length; t++)
                        t && (i += ","), i += e(r[t]) || "null";
                    return i + "]";
                }
                if (null === r)
                    return "null";
                if (-1 !== o.indexOf(r)) {
                    if (a)
                        return JSON.stringify("__cycle__");
                    throw new TypeError("Converting circular structure to JSON");
                }
                var n = o.push(r) - 1, l = Object.keys(r).sort(s && s(r));
                for (i = "", t = 0; t < l.length; t++) {
                    var h = l[t], c = e(r[h]);
                    c && (i && (i += ","), i += JSON.stringify(h) + ":" + c);
                }
                return o.splice(n, 1), "{" + i + "}";
            } }(e); };
        }, {}], 43: [function (e, r, t) {
            "use strict";
            var a = r.exports = function (e, r, t) { "function" == typeof r && (t = r, r = {}), function e(r, t, s, o, i, n, l, h, c) { if (s && "object" == typeof s && !Array.isArray(s)) {
                t(s, o, i, n, l, h, c);
                for (var u in s) {
                    var d = s[u];
                    if (Array.isArray(d)) {
                        if (u in a.arrayKeywords)
                            for (var f = 0; f < d.length; f++)
                                e(r, t, d[f], o + "/" + u + "/" + f, i, o, u, s, f);
                    }
                    else if (u in a.propsKeywords) {
                        if (d && "object" == typeof d)
                            for (var p in d)
                                e(r, t, d[p], o + "/" + u + "/" + (m = p, m.replace(/~/g, "~0").replace(/\//g, "~1")), i, o, u, s, p);
                    }
                    else
                        (u in a.keywords || r.allKeys && !(u in a.skipKeywords)) && e(r, t, d, o + "/" + u, i, o, u, s);
                }
            } var m; }(r, t, e, "", e); };
            a.keywords = { additionalItems: !0, items: !0, contains: !0, additionalProperties: !0, propertyNames: !0, not: !0 }, a.arrayKeywords = { items: !0, allOf: !0, anyOf: !0, oneOf: !0 }, a.propsKeywords = { definitions: !0, properties: !0, patternProperties: !0, dependencies: !0 }, a.skipKeywords = { enum: !0, const: !0, required: !0, maximum: !0, minimum: !0, exclusiveMaximum: !0, exclusiveMinimum: !0, multipleOf: !0, maxLength: !0, minLength: !0, pattern: !0, format: !0, maxItems: !0, minItems: !0, uniqueItems: !0, maxProperties: !0, minProperties: !0 };
        }, {}], 44: [function (e, r, t) { (function (e) { !function (a) { var s = "object" == typeof t && t && !t.nodeType && t, o = "object" == typeof r && r && !r.nodeType && r, i = "object" == typeof e && e; i.global !== i && i.window !== i && i.self !== i || (a = i); var n, l, h = 2147483647, c = 36, u = 1, d = 26, f = 38, p = 700, m = 72, v = 128, y = "-", g = /^xn--/, P = /[^\x20-\x7E]/, E = /[\x2E\u3002\uFF0E\uFF61]/g, w = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, b = c - u, S = Math.floor, _ = String.fromCharCode; function $(e) { throw new RangeError(w[e]); } function x(e, r) { for (var t = e.length, a = []; t--;)
            a[t] = r(e[t]); return a; } function F(e, r) { var t = e.split("@"), a = ""; t.length > 1 && (a = t[0] + "@", e = t[1]); return a + x((e = e.replace(E, ".")).split("."), r).join("."); } function R(e) { for (var r, t, a = [], s = 0, o = e.length; s < o;)
            (r = e.charCodeAt(s++)) >= 55296 && r <= 56319 && s < o ? 56320 == (64512 & (t = e.charCodeAt(s++))) ? a.push(((1023 & r) << 10) + (1023 & t) + 65536) : (a.push(r), s--) : a.push(r); return a; } function j(e) { return x(e, function (e) { var r = ""; return e > 65535 && (r += _((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), r += _(e); }).join(""); } function O(e, r) { return e + 22 + 75 * (e < 26) - ((0 != r) << 5); } function D(e, r, t) { var a = 0; for (e = t ? S(e / p) : e >> 1, e += S(e / r); e > b * d >> 1; a += c)
            e = S(e / b); return S(a + (b + 1) * e / (e + f)); } function I(e) { var r, t, a, s, o, i, n, l, f, p, g = [], P = e.length, E = 0, w = v, b = m; for ((t = e.lastIndexOf(y)) < 0 && (t = 0), a = 0; a < t; ++a)
            e.charCodeAt(a) >= 128 && $("not-basic"), g.push(e.charCodeAt(a)); for (s = t > 0 ? t + 1 : 0; s < P;) {
            for (o = E, i = 1, n = c; s >= P && $("invalid-input"), ((l = (_ = e.charCodeAt(s++)) - 48 < 10 ? _ - 22 : _ - 65 < 26 ? _ - 65 : _ - 97 < 26 ? _ - 97 : c) >= c || l > S((h - E) / i)) && $("overflow"), E += l * i, !(l < (f = n <= b ? u : n >= b + d ? d : n - b)); n += c)
                i > S(h / (p = c - f)) && $("overflow"), i *= p;
            b = D(E - o, r = g.length + 1, 0 == o), S(E / r) > h - w && $("overflow"), w += S(E / r), E %= r, g.splice(E++, 0, w);
        } var _; return j(g); } function A(e) { var r, t, a, s, o, i, n, l, f, p, g, P, E, w, b, x = []; for (P = (e = R(e)).length, r = v, t = 0, o = m, i = 0; i < P; ++i)
            (g = e[i]) < 128 && x.push(_(g)); for (a = s = x.length, s && x.push(y); a < P;) {
            for (n = h, i = 0; i < P; ++i)
                (g = e[i]) >= r && g < n && (n = g);
            for (n - r > S((h - t) / (E = a + 1)) && $("overflow"), t += (n - r) * E, r = n, i = 0; i < P; ++i)
                if ((g = e[i]) < r && ++t > h && $("overflow"), g == r) {
                    for (l = t, f = c; !(l < (p = f <= o ? u : f >= o + d ? d : f - o)); f += c)
                        x.push(_(O(p + (b = l - p) % (w = c - p), 0))), l = S(b / w);
                    x.push(_(O(l, 0))), o = D(t, E, a == s), t = 0, ++a;
                }
            ++t, ++r;
        } return x.join(""); } if (n = { version: "1.4.1", ucs2: { decode: R, encode: j }, decode: I, encode: A, toASCII: function (e) { return F(e, function (e) { return P.test(e) ? "xn--" + A(e) : e; }); }, toUnicode: function (e) { return F(e, function (e) { return g.test(e) ? I(e.slice(4).toLowerCase()) : e; }); } }, s && o)
            if (r.exports == s)
                o.exports = n;
            else
                for (l in n)
                    n.hasOwnProperty(l) && (s[l] = n[l]);
        else
            a.punycode = n; }(this); }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}); }, {}], 45: [function (e, r, t) {
            "use strict";
            r.exports = function (e, r, t, s) { r = r || "&", t = t || "="; var o = {}; if ("string" != typeof e || 0 === e.length)
                return o; var i = /\+/g; e = e.split(r); var n = 1e3; s && "number" == typeof s.maxKeys && (n = s.maxKeys); var l = e.length; n > 0 && l > n && (l = n); for (var h = 0; h < l; ++h) {
                var c, u, d, f, p = e[h].replace(i, "%20"), m = p.indexOf(t);
                m >= 0 ? (c = p.substr(0, m), u = p.substr(m + 1)) : (c = p, u = ""), d = decodeURIComponent(c), f = decodeURIComponent(u), Object.prototype.hasOwnProperty.call(o, d) ? a(o[d]) ? o[d].push(f) : o[d] = [o[d], f] : o[d] = f;
            } return o; };
            var a = Array.isArray || function (e) { return "[object Array]" === Object.prototype.toString.call(e); };
        }, {}], 46: [function (e, r, t) {
            "use strict";
            var a = function (e) { switch (typeof e) {
                case "string": return e;
                case "boolean": return e ? "true" : "false";
                case "number": return isFinite(e) ? e : "";
                default: return "";
            } };
            r.exports = function (e, r, t, n) { return r = r || "&", t = t || "=", null === e && (e = void 0), "object" == typeof e ? o(i(e), function (i) { var n = encodeURIComponent(a(i)) + t; return s(e[i]) ? o(e[i], function (e) { return n + encodeURIComponent(a(e)); }).join(r) : n + encodeURIComponent(a(e[i])); }).join(r) : n ? encodeURIComponent(a(n)) + t + encodeURIComponent(a(e)) : ""; };
            var s = Array.isArray || function (e) { return "[object Array]" === Object.prototype.toString.call(e); };
            function o(e, r) { if (e.map)
                return e.map(r); for (var t = [], a = 0; a < e.length; a++)
                t.push(r(e[a], a)); return t; }
            var i = Object.keys || function (e) { var r = []; for (var t in e)
                Object.prototype.hasOwnProperty.call(e, t) && r.push(t); return r; };
        }, {}], 47: [function (e, r, t) {
            "use strict";
            t.decode = t.parse = e("./decode"), t.encode = t.stringify = e("./encode");
        }, { "./decode": 45, "./encode": 46 }], 48: [function (e, r, t) {
            "use strict";
            var a = e("punycode"), s = e("./util");
            t.parse = P, t.resolve = function (e, r) { return P(e, !1, !0).resolve(r); }, t.resolveObject = function (e, r) { return e ? P(e, !1, !0).resolveObject(r) : r; }, t.format = function (e) { s.isString(e) && (e = P(e)); return e instanceof o ? e.format() : o.prototype.format.call(e); }, t.Url = o;
            function o() { this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null; }
            var i = /^([a-z0-9.+-]+:)/i, n = /:[0-9]*$/, l = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, h = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]), c = ["'"].concat(h), u = ["%", "/", "?", ";", "#"].concat(c), d = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m = { javascript: !0, "javascript:": !0 }, v = { javascript: !0, "javascript:": !0 }, y = { http: !0, https: !0, ftp: !0, gopher: !0, file: !0, "http:": !0, "https:": !0, "ftp:": !0, "gopher:": !0, "file:": !0 }, g = e("querystring");
            function P(e, r, t) { if (e && s.isObject(e) && e instanceof o)
                return e; var a = new o; return a.parse(e, r, t), a; }
            o.prototype.parse = function (e, r, t) { if (!s.isString(e))
                throw new TypeError("Parameter 'url' must be a string, not " + typeof e); var o = e.indexOf("?"), n = -1 !== o && o < e.indexOf("#") ? "?" : "#", h = e.split(n); h[0] = h[0].replace(/\\/g, "/"); var P = e = h.join(n); if (P = P.trim(), !t && 1 === e.split("#").length) {
                var E = l.exec(P);
                if (E)
                    return this.path = P, this.href = P, this.pathname = E[1], E[2] ? (this.search = E[2], this.query = r ? g.parse(this.search.substr(1)) : this.search.substr(1)) : r && (this.search = "", this.query = {}), this;
            } var w = i.exec(P); if (w) {
                var b = (w = w[0]).toLowerCase();
                this.protocol = b, P = P.substr(w.length);
            } if (t || w || P.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                var S = "//" === P.substr(0, 2);
                !S || w && v[w] || (P = P.substr(2), this.slashes = !0);
            } if (!v[w] && (S || w && !y[w])) {
                for (var _ = -1, $ = 0; $ < d.length; $++) {
                    -1 !== (R = P.indexOf(d[$])) && (-1 === _ || R < _) && (_ = R);
                }
                var x, F;
                -1 !== (F = -1 === _ ? P.lastIndexOf("@") : P.lastIndexOf("@", _)) && (x = P.slice(0, F), P = P.slice(F + 1), this.auth = decodeURIComponent(x)), _ = -1;
                for ($ = 0; $ < u.length; $++) {
                    var R;
                    -1 !== (R = P.indexOf(u[$])) && (-1 === _ || R < _) && (_ = R);
                }
                -1 === _ && (_ = P.length), this.host = P.slice(0, _), P = P.slice(_), this.parseHost(), this.hostname = this.hostname || "";
                var j = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
                if (!j)
                    for (var O = this.hostname.split(/\./), D = ($ = 0, O.length); $ < D; $++) {
                        var I = O[$];
                        if (I && !I.match(f)) {
                            for (var A = "", k = 0, L = I.length; k < L; k++)
                                I.charCodeAt(k) > 127 ? A += "x" : A += I[k];
                            if (!A.match(f)) {
                                var q = O.slice(0, $), z = O.slice($ + 1), C = I.match(p);
                                C && (q.push(C[1]), z.unshift(C[2])), z.length && (P = "/" + z.join(".") + P), this.hostname = q.join(".");
                                break;
                            }
                        }
                    }
                this.hostname = this.hostname.length > 255 ? "" : this.hostname.toLowerCase(), j || (this.hostname = a.toASCII(this.hostname));
                var Q = this.port ? ":" + this.port : "";
                this.host = (this.hostname || "") + Q, this.href += this.host, j && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== P[0] && (P = "/" + P));
            } if (!m[b])
                for ($ = 0, D = c.length; $ < D; $++) {
                    var U = c[$];
                    if (-1 !== P.indexOf(U)) {
                        var V = encodeURIComponent(U);
                        V === U && (V = escape(U)), P = P.split(U).join(V);
                    }
                } var N = P.indexOf("#"); -1 !== N && (this.hash = P.substr(N), P = P.slice(0, N)); var T = P.indexOf("?"); if (-1 !== T ? (this.search = P.substr(T), this.query = P.substr(T + 1), r && (this.query = g.parse(this.query)), P = P.slice(0, T)) : r && (this.search = "", this.query = {}), P && (this.pathname = P), y[b] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
                this.path = (Q = this.pathname || "") + (this.search || "");
            } return this.href = this.format(), this; };
            o.prototype.format = function () { var e = this.auth || ""; e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@"); var r = this.protocol || "", t = this.pathname || "", a = this.hash || "", o = !1, i = ""; this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && s.isObject(this.query) && Object.keys(this.query).length && (i = g.stringify(this.query)); var n = this.search || i && "?" + i || ""; return r && ":" !== r.substr(-1) && (r += ":"), this.slashes || (!r || y[r]) && !1 !== o ? (o = "//" + (o || ""), t && "/" !== t.charAt(0) && (t = "/" + t)) : o || (o = ""), a && "#" !== a.charAt(0) && (a = "#" + a), n && "?" !== n.charAt(0) && (n = "?" + n), r + o + (t = t.replace(/[?#]/g, function (e) { return encodeURIComponent(e); })) + (n = n.replace("#", "%23")) + a; };
            o.prototype.resolve = function (e) { return this.resolveObject(P(e, !1, !0)).format(); };
            o.prototype.resolveObject = function (e) { if (s.isString(e)) {
                var r = new o;
                r.parse(e, !1, !0), e = r;
            } for (var t = new o, a = Object.keys(this), i = 0; i < a.length; i++) {
                var n = a[i];
                t[n] = this[n];
            } if (t.hash = e.hash, "" === e.href)
                return t.href = t.format(), t; if (e.slashes && !e.protocol) {
                for (var l = Object.keys(e), h = 0; h < l.length; h++) {
                    var c = l[h];
                    "protocol" !== c && (t[c] = e[c]);
                }
                return y[t.protocol] && t.hostname && !t.pathname && (t.path = t.pathname = "/"), t.href = t.format(), t;
            } if (e.protocol && e.protocol !== t.protocol) {
                if (!y[e.protocol]) {
                    for (var u = Object.keys(e), d = 0; d < u.length; d++) {
                        var f = u[d];
                        t[f] = e[f];
                    }
                    return t.href = t.format(), t;
                }
                if (t.protocol = e.protocol, e.host || v[e.protocol])
                    t.pathname = e.pathname;
                else {
                    for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift());)
                        ;
                    e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), t.pathname = p.join("/");
                }
                if (t.search = e.search, t.query = e.query, t.host = e.host || "", t.auth = e.auth, t.hostname = e.hostname || e.host, t.port = e.port, t.pathname || t.search) {
                    t.path = (t.pathname || "") + (t.search || "");
                }
                return t.slashes = t.slashes || e.slashes, t.href = t.format(), t;
            } var m = t.pathname && "/" === t.pathname.charAt(0), g = e.host || e.pathname && "/" === e.pathname.charAt(0), P = g || m || t.host && e.pathname, E = P, w = t.pathname && t.pathname.split("/") || [], b = (p = e.pathname && e.pathname.split("/") || [], t.protocol && !y[t.protocol]); if (b && (t.hostname = "", t.port = null, t.host && ("" === w[0] ? w[0] = t.host : w.unshift(t.host)), t.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), P = P && ("" === p[0] || "" === w[0])), g)
                t.host = e.host || "" === e.host ? e.host : t.host, t.hostname = e.hostname || "" === e.hostname ? e.hostname : t.hostname, t.search = e.search, t.query = e.query, w = p;
            else if (p.length)
                w || (w = []), w.pop(), w = w.concat(p), t.search = e.search, t.query = e.query;
            else if (!s.isNullOrUndefined(e.search)) {
                if (b) {
                    t.hostname = t.host = w.shift();
                    (R = !!(t.host && t.host.indexOf("@") > 0) && t.host.split("@")) && (t.auth = R.shift(), t.host = t.hostname = R.shift());
                }
                return t.search = e.search, t.query = e.query, s.isNull(t.pathname) && s.isNull(t.search) || (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.href = t.format(), t;
            } if (!w.length)
                return t.pathname = null, t.path = t.search ? "/" + t.search : null, t.href = t.format(), t; for (var S = w.slice(-1)[0], _ = (t.host || e.host || w.length > 1) && ("." === S || ".." === S) || "" === S, $ = 0, x = w.length; x >= 0; x--)
                "." === (S = w[x]) ? w.splice(x, 1) : ".." === S ? (w.splice(x, 1), $++) : $ && (w.splice(x, 1), $--); if (!P && !E)
                for (; $--; $)
                    w.unshift(".."); !P || "" === w[0] || w[0] && "/" === w[0].charAt(0) || w.unshift(""), _ && "/" !== w.join("/").substr(-1) && w.push(""); var F = "" === w[0] || w[0] && "/" === w[0].charAt(0); if (b) {
                t.hostname = t.host = F ? "" : w.length ? w.shift() : "";
                var R;
                (R = !!(t.host && t.host.indexOf("@") > 0) && t.host.split("@")) && (t.auth = R.shift(), t.host = t.hostname = R.shift());
            } return (P = P || t.host && w.length) && !F && w.unshift(""), w.length ? t.pathname = w.join("/") : (t.pathname = null, t.path = null), s.isNull(t.pathname) && s.isNull(t.search) || (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.auth = e.auth || t.auth, t.slashes = t.slashes || e.slashes, t.href = t.format(), t; }, o.prototype.parseHost = function () { var e = this.host, r = n.exec(e); r && (":" !== (r = r[0]) && (this.port = r.substr(1)), e = e.substr(0, e.length - r.length)), e && (this.hostname = e); };
        }, { "./util": 49, punycode: 44, querystring: 47 }], 49: [function (e, r, t) {
            "use strict";
            r.exports = { isString: function (e) { return "string" == typeof e; }, isObject: function (e) { return "object" == typeof e && null !== e; }, isNull: function (e) { return null === e; }, isNullOrUndefined: function (e) { return null == e; } };
        }, {}], ajv: [function (e, r, t) {
            "use strict";
            var a = e("./compile"), s = e("./compile/resolve"), o = e("./cache"), i = e("./compile/schema_obj"), n = e("fast-json-stable-stringify"), l = e("./compile/formats"), h = e("./compile/rules"), c = e("./data"), u = e("./compile/util");
            r.exports = y, y.prototype.validate = function (e, r) { var t; if ("string" == typeof e) {
                if (!(t = this.getSchema(e)))
                    throw new Error('no schema with key or ref "' + e + '"');
            }
            else {
                var a = this._addSchema(e);
                t = a.validate || this._compile(a);
            } var s = t(r); !0 !== t.$async && (this.errors = t.errors); return s; }, y.prototype.compile = function (e, r) { var t = this._addSchema(e, void 0, r); return t.validate || this._compile(t); }, y.prototype.addSchema = function (e, r, t, a) { if (Array.isArray(e)) {
                for (var o = 0; o < e.length; o++)
                    this.addSchema(e[o], void 0, t, a);
                return this;
            } var i = this._getId(e); if (void 0 !== i && "string" != typeof i)
                throw new Error("schema id must be string"); return S(this, r = s.normalizeId(r || i)), this._schemas[r] = this._addSchema(e, t, a, !0), this; }, y.prototype.addMetaSchema = function (e, r, t) { return this.addSchema(e, r, t, !0), this; }, y.prototype.validateSchema = function (e, r) { var t = e.$schema; if (void 0 !== t && "string" != typeof t)
                throw new Error("$schema must be a string"); if (!(t = t || this._opts.defaultMeta || function (e) { var r = e._opts.meta; return e._opts.defaultMeta = "object" == typeof r ? e._getId(r) || r : e.getSchema(p) ? p : void 0, e._opts.defaultMeta; }(this)))
                return this.logger.warn("meta-schema not available"), this.errors = null, !0; var a = this._formats.uri; this._formats.uri = "function" == typeof a ? this._schemaUriFormatFunc : this._schemaUriFormat; var s; try {
                s = this.validate(t, e);
            }
            finally {
                this._formats.uri = a;
            } if (!s && r) {
                var o = "schema is invalid: " + this.errorsText();
                if ("log" != this._opts.validateSchema)
                    throw new Error(o);
                this.logger.error(o);
            } return s; }, y.prototype.getSchema = function (e) { var r = g(this, e); switch (typeof r) {
                case "object": return r.validate || this._compile(r);
                case "string": return this.getSchema(r);
                case "undefined": return function (e, r) { var t = s.schema.call(e, { schema: {} }, r); if (t) {
                    var o = t.schema, n = t.root, l = t.baseId, h = a.call(e, o, n, void 0, l);
                    return e._fragments[r] = new i({ ref: r, fragment: !0, schema: o, root: n, baseId: l, validate: h }), h;
                } }(this, e);
            } }, y.prototype.removeSchema = function (e) { if (e instanceof RegExp)
                return P(this, this._schemas, e), P(this, this._refs, e), this; switch (typeof e) {
                case "undefined": return P(this, this._schemas), P(this, this._refs), this._cache.clear(), this;
                case "string":
                    var r = g(this, e);
                    return r && this._cache.del(r.cacheKey), delete this._schemas[e], delete this._refs[e], this;
                case "object":
                    var t = this._opts.serialize, a = t ? t(e) : e;
                    this._cache.del(a);
                    var o = this._getId(e);
                    o && (o = s.normalizeId(o), delete this._schemas[o], delete this._refs[o]);
            } return this; }, y.prototype.addFormat = function (e, r) { "string" == typeof r && (r = new RegExp(r)); return this._formats[e] = r, this; }, y.prototype.errorsText = function (e, r) { if (!(e = e || this.errors))
                return "No errors"; for (var t = void 0 === (r = r || {}).separator ? ", " : r.separator, a = void 0 === r.dataVar ? "data" : r.dataVar, s = "", o = 0; o < e.length; o++) {
                var i = e[o];
                i && (s += a + i.dataPath + " " + i.message + t);
            } return s.slice(0, -t.length); }, y.prototype._addSchema = function (e, r, t, a) { if ("object" != typeof e && "boolean" != typeof e)
                throw new Error("schema should be object or boolean"); var o = this._opts.serialize, n = o ? o(e) : e, l = this._cache.get(n); if (l)
                return l; a = a || !1 !== this._opts.addUsedSchema; var h = s.normalizeId(this._getId(e)); h && a && S(this, h); var c, u = !1 !== this._opts.validateSchema && !r; u && !(c = h && h == s.normalizeId(e.$schema)) && this.validateSchema(e, !0); var d = s.ids.call(this, e), f = new i({ id: h, schema: e, localRefs: d, cacheKey: n, meta: t }); "#" != h[0] && a && (this._refs[h] = f); this._cache.put(n, f), u && c && this.validateSchema(e, !0); return f; }, y.prototype._compile = function (e, r) { if (e.compiling)
                return e.validate = o, o.schema = e.schema, o.errors = null, o.root = r || o, !0 === e.schema.$async && (o.$async = !0), o; e.compiling = !0; var t; e.meta && (t = this._opts, this._opts = this._metaOpts); var s; try {
                s = a.call(this, e.schema, r, e.localRefs);
            }
            finally {
                e.compiling = !1, e.meta && (this._opts = t);
            } return e.validate = s, e.refs = s.refs, e.refVal = s.refVal, e.root = s.root, s; function o() { var r = e.validate, t = r.apply(null, arguments); return o.errors = r.errors, t; } }, y.prototype.compileAsync = e("./compile/async");
            var d = e("./keyword");
            y.prototype.addKeyword = d.add, y.prototype.getKeyword = d.get, y.prototype.removeKeyword = d.remove;
            var f = e("./compile/error_classes");
            y.ValidationError = f.Validation, y.MissingRefError = f.MissingRef, y.$dataMetaSchema = c;
            var p = "http://json-schema.org/draft-07/schema", m = ["removeAdditional", "useDefaults", "coerceTypes"], v = ["/properties"];
            function y(r) { if (!(this instanceof y))
                return new y(r); r = this._opts = u.copy(r) || {}, function (e) { var r = e._opts.logger; if (!1 === r)
                e.logger = { log: _, warn: _, error: _ };
            else {
                if (void 0 === r && (r = console), !("object" == typeof r && r.log && r.warn && r.error))
                    throw new Error("logger must implement log, warn and error methods");
                e.logger = r;
            } }(this), this._schemas = {}, this._refs = {}, this._fragments = {}, this._formats = l(r.format); var t = this._schemaUriFormat = this._formats["uri-reference"]; this._schemaUriFormatFunc = function (e) { return t.test(e); }, this._cache = r.cache || new o, this._loadingSchemas = {}, this._compilations = [], this.RULES = h(), this._getId = function (e) { switch (e.schemaId) {
                case "auto": return b;
                case "id": return E;
                default: return w;
            } }(r), r.loopRequired = r.loopRequired || 1 / 0, "property" == r.errorDataPath && (r._errorDataPathProperty = !0), void 0 === r.serialize && (r.serialize = n), this._metaOpts = function (e) { for (var r = u.copy(e._opts), t = 0; t < m.length; t++)
                delete r[m[t]]; return r; }(this), r.formats && function (e) { for (var r in e._opts.formats) {
                var t = e._opts.formats[r];
                e.addFormat(r, t);
            } }(this), function (r) { var t; r._opts.$data && (t = e("./refs/data.json"), r.addMetaSchema(t, t.$id, !0)); if (!1 === r._opts.meta)
                return; var a = e("./refs/json-schema-draft-07.json"); r._opts.$data && (a = c(a, v)); r.addMetaSchema(a, p, !0), r._refs["http://json-schema.org/schema"] = p; }(this), "object" == typeof r.meta && this.addMetaSchema(r.meta), function (e) { var r = e._opts.schemas; if (!r)
                return; if (Array.isArray(r))
                e.addSchema(r);
            else
                for (var t in r)
                    e.addSchema(r[t], t); }(this); }
            function g(e, r) { return r = s.normalizeId(r), e._schemas[r] || e._refs[r] || e._fragments[r]; }
            function P(e, r, t) { for (var a in r) {
                var s = r[a];
                s.meta || t && !t.test(a) || (e._cache.del(s.cacheKey), delete r[a]);
            } }
            function E(e) { return e.$id && this.logger.warn("schema $id ignored", e.$id), e.id; }
            function w(e) { return e.id && this.logger.warn("schema id ignored", e.id), e.$id; }
            function b(e) { if (e.$id && e.id && e.$id != e.id)
                throw new Error("schema $id is different from id"); return e.$id || e.id; }
            function S(e, r) { if (e._schemas[r] || e._refs[r])
                throw new Error('schema with key or id "' + r + '" already exists'); }
            function _() { }
        }, { "./cache": 1, "./compile": 5, "./compile/async": 2, "./compile/error_classes": 3, "./compile/formats": 4, "./compile/resolve": 6, "./compile/rules": 7, "./compile/schema_obj": 8, "./compile/util": 10, "./data": 11, "./keyword": 38, "./refs/data.json": 39, "./refs/json-schema-draft-07.json": 40, "fast-json-stable-stringify": 42 }] }, {}, [])("ajv"); })();
//# sourceMappingURL=index.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var vc_dragAndDrop_lib_constants_namespaceObject = {};
__webpack_require__.r(vc_dragAndDrop_lib_constants_namespaceObject);
__webpack_require__.d(vc_dragAndDrop_lib_constants_namespaceObject, "POSITION", function() { return constants_POSITION; });
__webpack_require__.d(vc_dragAndDrop_lib_constants_namespaceObject, "CLASS", function() { return constants_CLASS; });
__webpack_require__.d(vc_dragAndDrop_lib_constants_namespaceObject, "EVENT", function() { return lib_constants_EVENT; });
__webpack_require__.d(vc_dragAndDrop_lib_constants_namespaceObject, "TYPE", function() { return constants_TYPE; });
__webpack_require__.d(vc_dragAndDrop_lib_constants_namespaceObject, "ATTRIBUTE", function() { return constants_ATTRIBUTE; });
var vui_reg_namespaceObject = {};
__webpack_require__.r(vui_reg_namespaceObject);
var permission_namespaceObject = {};
__webpack_require__.r(permission_namespaceObject);
__webpack_require__.d(permission_namespaceObject, "editable", function() { return permission_editable; });
__webpack_require__.d(permission_namespaceObject, "filter", function() { return permission_filter; });
__webpack_require__.d(permission_namespaceObject, "freezeColumns", function() { return freezeColumns; });
__webpack_require__.d(permission_namespaceObject, "freezeRows", function() { return permission_freezeRows; });
__webpack_require__.d(permission_namespaceObject, "fullscreen", function() { return fullscreen; });
__webpack_require__.d(permission_namespaceObject, "group", function() { return permission_group; });
__webpack_require__.d(permission_namespaceObject, "infinite", function() { return permission_infinite; });
__webpack_require__.d(permission_namespaceObject, "mark", function() { return permission_mark; });
__webpack_require__.d(permission_namespaceObject, "nonFreezeColumns", function() { return nonFreezeColumns; });
__webpack_require__.d(permission_namespaceObject, "order", function() { return permission_order; });
__webpack_require__.d(permission_namespaceObject, "resize", function() { return resize; });
__webpack_require__.d(permission_namespaceObject, "search", function() { return permission_search; });
__webpack_require__.d(permission_namespaceObject, "sort", function() { return permission_sort; });
__webpack_require__.d(permission_namespaceObject, "summary", function() { return permission_summary; });
__webpack_require__.d(permission_namespaceObject, "checkEnabled", function() { return checkEnabled; });
var types_namespaceObject = {};
__webpack_require__.r(types_namespaceObject);
__webpack_require__.d(types_namespaceObject, "button", function() { return button_CellButton; });
__webpack_require__.d(types_namespaceObject, "progressbar", function() { return progressbar_CellProgressBar; });
__webpack_require__.d(types_namespaceObject, "checkbox", function() { return checkbox_CellCheckbox; });
__webpack_require__.d(types_namespaceObject, "group", function() { return group_CellGroup; });
__webpack_require__.d(types_namespaceObject, "link", function() { return link_CellLink; });
__webpack_require__.d(types_namespaceObject, "multiselect", function() { return multiselect_CellMultiselect; });
__webpack_require__.d(types_namespaceObject, "select", function() { return select_CellSelect; });
__webpack_require__.d(types_namespaceObject, "date", function() { return date_CellDate; });
__webpack_require__.d(types_namespaceObject, "custom", function() { return custom_CellCustom; });
__webpack_require__.d(types_namespaceObject, "graphic", function() { return graphic_CellGraphic; });
__webpack_require__.d(types_namespaceObject, "number", function() { return number_CellNumber; });
__webpack_require__.d(types_namespaceObject, "text", function() { return text_CellText; });
__webpack_require__.d(types_namespaceObject, "currency", function() { return currency_CellCurrency; });
__webpack_require__.d(types_namespaceObject, "cellDefault", function() { return CellRaw; });
var validators_namespaceObject = {};
__webpack_require__.r(validators_namespaceObject);
__webpack_require__.d(validators_namespaceObject, "text", function() { return text_TextValidator; });
__webpack_require__.d(validators_namespaceObject, "number", function() { return number_NumberValidator; });
__webpack_require__.d(validators_namespaceObject, "checkbox", function() { return checkbox_CheckboxValidator; });
__webpack_require__.d(validators_namespaceObject, "select", function() { return select_SelectValidator; });
__webpack_require__.d(validators_namespaceObject, "progressbar", function() { return progressbar_ProgressBarValidator; });
__webpack_require__.d(validators_namespaceObject, "button", function() { return button_ButtonValidator; });
__webpack_require__.d(validators_namespaceObject, "date", function() { return date_DateValidator; });
__webpack_require__.d(validators_namespaceObject, "graphic", function() { return graphic_GraphicValidator; });
__webpack_require__.d(validators_namespaceObject, "link", function() { return link_LinkValidator; });
__webpack_require__.d(validators_namespaceObject, "multiselect", function() { return multiselect_MultiselectValidator; });
__webpack_require__.d(validators_namespaceObject, "currency", function() { return currency_CurrencyValidator; });
var cell_types_namespaceObject = {};
__webpack_require__.r(cell_types_namespaceObject);
__webpack_require__.d(cell_types_namespaceObject, "custom", function() { return types_custom_Custom; });
__webpack_require__.d(cell_types_namespaceObject, "checkbox", function() { return types_checkbox_Checkbox; });
__webpack_require__.d(cell_types_namespaceObject, "currency", function() { return types_currency_Currency; });
__webpack_require__.d(cell_types_namespaceObject, "graphic", function() { return types_graphic_Graphic; });
__webpack_require__.d(cell_types_namespaceObject, "group", function() { return group_Group; });
__webpack_require__.d(cell_types_namespaceObject, "number", function() { return number_NumberCell; });
__webpack_require__.d(cell_types_namespaceObject, "select", function() { return types_select_Select; });
__webpack_require__.d(cell_types_namespaceObject, "text", function() { return types_text_Text; });
__webpack_require__.d(cell_types_namespaceObject, "date", function() { return types_date_CellDate; });
__webpack_require__.d(cell_types_namespaceObject, "link", function() { return types_link_Link; });
__webpack_require__.d(cell_types_namespaceObject, "button", function() { return types_button_Button; });
__webpack_require__.d(cell_types_namespaceObject, "multiselect", function() { return types_multiselect_Multiselect; });
__webpack_require__.d(cell_types_namespaceObject, "progressbar", function() { return types_progressbar_ProgressBar; });
__webpack_require__.d(cell_types_namespaceObject, "harveyBall", function() { return types_harveyBall_HarveyBall; });
__webpack_require__.d(cell_types_namespaceObject, "trend", function() { return types_trend_Trend; });
__webpack_require__.d(cell_types_namespaceObject, "action", function() { return action_Action; });
__webpack_require__.d(cell_types_namespaceObject, "rowMark", function() { return rowMark_RowMark; });
__webpack_require__.d(cell_types_namespaceObject, "rowGroup", function() { return rowGroup_RowGroup; });
__webpack_require__.d(cell_types_namespaceObject, "cellDefault", function() { return types_text_Text; });
var row_types_namespaceObject = {};
__webpack_require__.r(row_types_namespaceObject);
__webpack_require__.d(row_types_namespaceObject, "normal", function() { return normal_Normal; });
__webpack_require__.d(row_types_namespaceObject, "group", function() { return types_group_Group; });
__webpack_require__.d(row_types_namespaceObject, "loader", function() { return loader_Loader; });
__webpack_require__.d(row_types_namespaceObject, "removed", function() { return removed_Removed; });
__webpack_require__.d(row_types_namespaceObject, "empty", function() { return empty_Empty; });
var aggregation_namespaceObject = {};
__webpack_require__.r(aggregation_namespaceObject);
__webpack_require__.d(aggregation_namespaceObject, "average", function() { return aggregation_average; });
__webpack_require__.d(aggregation_namespaceObject, "countAvg", function() { return countAvg; });
__webpack_require__.d(aggregation_namespaceObject, "countMode", function() { return countMode; });
__webpack_require__.d(aggregation_namespaceObject, "_median", function() { return _median; });
__webpack_require__.d(aggregation_namespaceObject, "countMedian", function() { return countMedian; });
__webpack_require__.d(aggregation_namespaceObject, "countQuantity", function() { return countQuantity; });
__webpack_require__.d(aggregation_namespaceObject, "maximum", function() { return maximum; });
__webpack_require__.d(aggregation_namespaceObject, "countMax", function() { return countMax; });
__webpack_require__.d(aggregation_namespaceObject, "minimum", function() { return minimum; });
__webpack_require__.d(aggregation_namespaceObject, "countMin", function() { return countMin; });
__webpack_require__.d(aggregation_namespaceObject, "range", function() { return aggregation_range; });
__webpack_require__.d(aggregation_namespaceObject, "countSum", function() { return countSum; });
__webpack_require__.d(aggregation_namespaceObject, "isCurrencyNaN", function() { return isCurrencyNaN; });
__webpack_require__.d(aggregation_namespaceObject, "countCurrencyData", function() { return countCurrencyData; });
__webpack_require__.d(aggregation_namespaceObject, "onmessage", function() { return onmessage; });

// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.browser.js
class UtilitiesBrowser {
    static isIEdge() {
        return navigator.userAgent.indexOf('Edge') > -1;
    }
    static isIE11() {
        let rv = -1;
        if (navigator.appName === 'Netscape') {
            let ua = navigator.userAgent;
            let re = new RegExp('Trident/.*rv:([0-9]{1,}[\.0-9]{0,})');
            if (re.exec(ua) != null) {
                rv = parseFloat(RegExp.$1);
            }
        }
        return rv !== -1;
    }
    static removeAllSelections() {
        window.getSelection().removeAllRanges();
    }
}
//# sourceMappingURL=utilities.browser.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/constants.js
const SVG = {
    NAMESPACE: 'http://www.w3.org/2000/svg',
    WIDTH: 150,
    HEIGHT: 5
};
const EVENT = {
    MOUSEMOVE: 'mousemove',
    MOUSELEAVE: 'mouseleave'
};
const POSITION = {
    AFTER: 'after',
    BEFORE: 'before',
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
};
const ELEMENT = {
    DIV: 'div'
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.dom.js


class utilities_dom_UtilitiesDOM {
    static create(type, classList) {
        let element = document.createElement(type);
        if (classList) {
            utilities_dom_UtilitiesDOM.addClass(element, classList);
        }
        return element;
    }
    static createNS(type, attributes = {}, classList) {
        let element = document.createElementNS(SVG.NAMESPACE, type);
        Object.keys(attributes).forEach((key) => {
            element.setAttributeNS(null, `${key}`, `${attributes[key]}`);
        });
        if (classList) {
            utilities_dom_UtilitiesDOM.addClass(element, classList);
        }
        return element;
    }
    static addClass(element, tokens = []) {
        if (UtilitiesBrowser.isIE11()) {
            if (element.classList) {
                tokens.forEach((token) => element.classList.add(token));
            }
            else {
                let attribute = element.getAttribute('class') || '';
                let classes = attribute.split(' ');
                tokens.forEach((token) => {
                    if (classes.indexOf(token) === -1) {
                        classes.push(token);
                    }
                });
                element.setAttributeNS(null, 'class', classes.join(' '));
            }
        }
        else {
            element.classList.add(...tokens);
        }
    }
    static toggleClass(state, element, tokens = []) {
        if (state) {
            utilities_dom_UtilitiesDOM.addClass(element, tokens);
        }
        else {
            utilities_dom_UtilitiesDOM.removeClass(element, tokens);
        }
    }
    static removeClass(element, tokens = []) {
        if (UtilitiesBrowser.isIE11()) {
            if (element.classList) {
                tokens.forEach((token) => element.classList.remove(token));
            }
            else {
                let attribute = element.getAttribute('class') || '';
                let classes = attribute.split(' ');
                tokens.forEach((token) => {
                    let index = classes.indexOf(token);
                    if (index > -1) {
                        classes.splice(index, 1);
                    }
                });
                element.setAttributeNS(null, 'class', classes.join(' '));
            }
        }
        else {
            element.classList.remove(...tokens);
        }
    }
    static insertAfter(element, target) {
        if (element === target.nextSibling) {
            return void 0;
        }
        return target.parentNode.insertBefore(element, target.nextSibling);
    }
    static removeChildren(element) {
        while (element.lastChild) {
            element.removeChild(element.lastChild);
        }
    }
    static removeElement(element) {
        if (element && element.parentElement) {
            element.parentElement.removeChild(element);
        }
    }
    static isInDescendants(needle, haystack) {
        if (needle === haystack) {
            return true;
        }
        for (let i = 0; i < haystack.children.length; i += 1) {
            if (utilities_dom_UtilitiesDOM.isInDescendants(needle, haystack.children[i])) {
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=utilities.dom.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.delay.js
class UtilitiesDelay {
    static queue(callback, delay = 0) {
        return window.setTimeout(() => {
            window.requestAnimationFrame(callback);
        }, delay);
    }
    static clear(timer) {
        clearTimeout(timer);
    }
    static debounce(callback, delay) {
        let animationHandler, start;
        function step(args) {
            if (Date.now() - start > delay) {
                callback(...args);
            }
            else {
                animationHandler = window.requestAnimationFrame(step.bind(this, args));
            }
        }
        return function (...args) {
            start = Date.now();
            window.cancelAnimationFrame(animationHandler);
            animationHandler = window.requestAnimationFrame(step.bind(this, args));
        };
    }
    static throttle(callback, delay) {
        let wait = false;
        return function () {
            if (!wait) {
                callback.apply(null, arguments);
                wait = true;
                setTimeout(() => {
                    wait = false;
                }, delay);
            }
        };
    }
}
//# sourceMappingURL=utilities.delay.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.array.js
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class UtilitiesArray {
    static equals(a, b) {
        return a.length === b.length && a.every((item, index) => b[index] === item);
    }
    static forEachAsync(array, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let index = 0; index < array.length; index += 1) {
                yield callback(array[index], index, array);
            }
        });
    }
    static wrapInArray(data) {
        return !Array.isArray(data) ? [data] : data;
    }
    static isEmptyArray(array) {
        return Array.isArray(array) && array.length === 0;
    }
    static getDuplicates(data) {
        return data.filter((value, index, self) => self.indexOf(value) !== index);
    }
    static unique(array) {
        return array.filter((element, position) => {
            return array.indexOf(element) === position;
        });
    }
    static uniqueDeep(array) {
        let set = new Set();
        return array.filter((item, i) => {
            let stringified = array[i].join(' ');
            if (set.has(stringified)) {
                return false;
            }
            set.add(stringified);
            return true;
        });
    }
    static zip(arrays) {
        const maxLength = Math.max(...arrays.map((x) => x.length));
        return Array.from({ length: maxLength }).map((_, i) => {
            return Array.from({ length: arrays.length }, (_, k) => arrays[k][i]);
        });
    }
    static sort(array) {
        if (!UtilitiesArray.isArrayNumber(array)) {
            return array.sort();
        }
        else {
            return array.sort((a, b) => a - b);
        }
    }
    static isArrayNumber(array) {
        return array.every((value) => typeof value === 'number');
    }
    static isArrayOfArray(array) {
        return array.every((item) => Array.isArray(item));
    }
}
//# sourceMappingURL=utilities.array.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.canvas.js
class UtilitiesCanvas {
    static measureText(text, options = {}, stylingHost = document.body) {
        let padding = options.padding || 0;
        let multiply = options.multiply || 1;
        let style = window.getComputedStyle(stylingHost);
        let canvas = (document.createElement(`canvas`));
        let context = (canvas.getContext(`2d`));
        context.font = `${style.fontSize} ${style.fontFamily}`;
        return (context.measureText(text).width * multiply) + padding;
    }
}
//# sourceMappingURL=utilities.canvas.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.worker.js
class UtilitiesWorker {
    constructor(module) {
        let stringified = '';
        Object.keys(module).forEach((proprty) => {
            if (proprty === 'onmessage') {
                stringified += `onmessage = `;
            }
            stringified += `${module[proprty].toString()};`;
        });
        let blob = new Blob([stringified], { type: 'text/javascript' });
        let url = URL.createObjectURL(blob);
        this.worker = new Worker(url);
    }
    terminate() {
        this.worker.terminate();
    }
    postMessage(message) {
        this.worker.postMessage(message);
    }
    onResponse(response) {
        this.worker.addEventListener('message', response.bind(this));
    }
}
//# sourceMappingURL=utilities.worker.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.value.js
class UtilitiesValue {
    static isEmpty(a) {
        return typeof a === 'undefined' || a === null;
    }
}
//# sourceMappingURL=utilities.value.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.string.js
class UtilitiesString {
    static isString(value) {
        return typeof value === 'string' || value instanceof String;
    }
    static generateUId() {
        return Math.random().toString(36).substring(7);
    }
    static rangesToNumbers(ranges) {
        let indexes = [];
        ranges.forEach((index) => {
            let current = (String(index)).split('-');
            if (current.length === 2 && parseInt(current[0], 10) < parseInt(current[1], 10)) {
                for (let i = parseInt(current[0], 10); i <= parseInt(current[1], 10); i += 1) {
                    indexes.push(i);
                }
            }
            else {
                indexes.push(parseInt(current[0], 10));
            }
        });
        return indexes;
    }
    static isRangeStart(isRangeStarted, isNextInRange) {
        return !isRangeStarted && isNextInRange;
    }
    static isRangeEnd(isRangeStarted, isNextInRange, nextDataIndex) {
        return isRangeStarted && (!isNextInRange || nextDataIndex === undefined);
    }
    static numbersToRanges(numbers) {
        let ranges = [];
        let rangeStart = undefined;
        numbers.forEach((dataIndex, index) => {
            let nextDataIndex = numbers[String(index + 1)];
            let isRangeStarted = rangeStart !== undefined;
            let isNextInRange = nextDataIndex === dataIndex + 1;
            if (UtilitiesString.isRangeStart(isRangeStarted, isNextInRange)) {
                rangeStart = dataIndex;
                return void 0;
            }
            if (UtilitiesString.isRangeEnd(isRangeStarted, isNextInRange, nextDataIndex)) {
                ranges.push(`${rangeStart}-${dataIndex}`);
                rangeStart = undefined;
                return;
            }
            if (!isRangeStarted) {
                ranges.push(dataIndex);
            }
        });
        return ranges;
    }
}
//# sourceMappingURL=utilities.string.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.object.js
class UtilitiesObject {
    static isObject(value) {
        return value && typeof value === 'object';
    }
    static getPropertyValue(properties, descriptor) {
        properties.split('.').forEach((propertyName) => {
            if (descriptor !== undefined) {
                descriptor = descriptor[propertyName];
            }
        });
        return descriptor;
    }
}
//# sourceMappingURL=utilities.object.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-script/lib/props.js
const props = {
    a: 'a',
    href: 'href',
    script: 'script',
    module: 'module',
    mime: 'text/javascript',
    exports: 'exports',
    require: 'require'
};
//# sourceMappingURL=props.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-script/lib/script.es6.js
class ScriptES6 {
    constructor() {
        this._property = ScriptES6.getUniqueProperty();
    }
    static getUniqueProperty() {
        let random = `Script$${Math.random().toString(32).slice(2)}`;
        return window[random] ? ScriptES6.getUniqueProperty() : random;
    }
    get() {
        return window[this._property];
    }
    initialize(blobPart) {
        blobPart.push(`window.${this._property} = module`);
    }
    die() {
        delete window[this._property];
    }
}
//# sourceMappingURL=script.es6.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-script/lib/script.umd.js

class script_umd_ScriptUMD {
    get() {
        let exportedUMD = window[props.module].exports;
        return exportedUMD && exportedUMD.__esModule ? exportedUMD : undefined;
    }
    initialize() {
        window[props.exports] = window[props.exports] || {};
        window[props.module] = window[props.module] || {};
        window[props.module][props.exports] = window[props.module][props.exports] || {};
    }
    die() {
        return void 0;
    }
}
//# sourceMappingURL=script.umd.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-script/lib/script.js
var script_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class script_Script {
    static import(src) {
        return script_awaiter(this, void 0, void 0, function* () {
            let scriptES6 = new ScriptES6();
            let scriptUMD = new script_umd_ScriptUMD();
            const flush = (script, cbk) => {
                cbk();
                script_Script._die(script);
                scriptES6.die();
                scriptUMD.die();
            };
            return new Promise((resolve, reject) => {
                let script = document.createElement(props.script);
                let blobParts = [];
                scriptES6.initialize(blobParts);
                blobParts.push(`import * as module from "${script_Script.getAbsolutePath(src)}"`);
                scriptUMD.initialize();
                script.type = props.module;
                script.onerror = () => {
                    flush(script, () => reject(new Error(`Cannot load '${src}'`)));
                };
                script.onload = () => {
                    flush(script, () => resolve(scriptUMD.get() || scriptES6.get()));
                };
                script.src = URL.createObjectURL(new Blob([blobParts.join(';')], { type: props.mime }));
                document.head.appendChild(script);
            });
        });
    }
    static getAbsolutePath(src) {
        let a = document.createElement(props.a);
        a.setAttribute(props.href, src);
        return a.cloneNode(false).href;
    }
    static getFullPath(src) {
        return `${window.location.href.split('/').slice(0, -1).join('/')}/${src}`;
    }
    static _die(script) {
        script.onerror = null;
        script.onload = null;
        script.remove();
        URL.revokeObjectURL(script.src);
        script.src = '';
    }
}
//# sourceMappingURL=script.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-script/index.js


//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.resource.js

class utilities_resource_UtilsResource {
    static getResourceSync(path) {
        let request = new XMLHttpRequest();
        request.open('GET', path, false);
        request.send();
        return request.responseText;
    }
    static checkIfResourceExistSync(path) {
        let request = new XMLHttpRequest();
        request.open('HEAD', path, false);
        request.send();
        return request.status !== 404;
    }
    static getResource(paths, callback) {
        return fetch(script_Script.getFullPath(paths.shift()))
            .then((resp) => {
            if (resp.ok) {
                return callback(resp);
            }
            else {
                throw new Error('Something went wrong.');
            }
        })
            .catch((e) => {
            if (paths.length > 0) {
                return utilities_resource_UtilsResource.getResource(paths, callback);
            }
            else {
                console.error(e.message);
                return void 0;
            }
        });
    }
}
//# sourceMappingURL=utilities.resource.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/lib/utilities.text.js
class utilities_text_Text {
    constructor(multiply = 1) {
        this.multiply = multiply;
        this.style = window.getComputedStyle(document.body);
        this.canvas = document.createElement(`canvas`);
        this.context = this.canvas.getContext(`2d`);
        this.setFont(this.style.fontSize, this.style.fontFamily);
    }
    setFont(size, family) {
        this.context.font = `${size} ${family}`;
    }
    setMultiply(value) {
        this.multiply = value;
    }
    measure(text, padding = 0) {
        return (this.context.measureText(text).width * this.multiply) + padding;
    }
}
//# sourceMappingURL=utilities.text.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-utilities/index.js












//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-components/lib/vui.js

const getHasStyleDefined = (cfg) => cfg && cfg.style;
const getHasTemplateDefined = (cfg) => cfg && cfg.html;
const getBasePath = (cfg) => cfg && cfg.basePath || './';
const VUI = (tag, cfg) => {
    let basePath = getBasePath(cfg);
    return (target) => {
        let template = document.createElement('template');
        let styles = getHasStyleDefined(cfg)
            ? cfg.style
            : `@import "${basePath}styles/${tag}.css"`;
        let tmpl = getHasTemplateDefined(cfg)
            ? cfg.html
            : utilities_resource_UtilsResource.getResourceSync(`${basePath}templates/${tag}.html`);
        template.innerHTML = `<style>${styles}</style><div class="host">${tmpl}</div>`;
        let coreStyle = document.createElement('style');
        coreStyle.innerText = styles;
        target.styles = coreStyle;
        target.template = template;
        target.tag = tag;
    };
};
//# sourceMappingURL=vui.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-components/lib/component.js
const _SHARED_VIEW = Symbol('view');
const _SHARED_STATE = Symbol('state');
const _SHARED_EVENTS = Symbol('events');
const _VIEW = Symbol('view');
const _STATE = Symbol('state');
const _EVENTS = Symbol('events');
const _PRIVATE = Symbol('private');
const _MVVM_EVENTS = Symbol('mvvm_events');
const EVENTS = {
    COMPONENT_LOADED: 'componentLoaded',
    CHANGED: 'Changed'
};
class Component extends HTMLElement {
    constructor(__view__, __state__, __events__) {
        super();
        this._observer = null;
        this[_PRIVATE] = {
            _updateDOM: () => {
                if (this.visible) {
                    this.bindView();
                }
                this.style.display = this.visible ? 'block' : 'none';
            },
            _isAttributeChangeable: (groups) => groups
                && this[_SHARED_VIEW]
                && this[this[_SHARED_VIEW]]
                && this[this[_SHARED_VIEW]][groups[1]]
                && this[this[_SHARED_VIEW]][groups[1]].setAttribute,
            _dynAPIBindSelf: () => {
                if (!this[_SHARED_VIEW]) {
                    throw `dynamic api can't be created for "${this.tagName}"`;
                }
                this.observables.concat(['visible']).filter((prop) => /^[^-]*$/ig.test(prop))
                    .forEach((prop) => Object.defineProperty(this, prop, this[_PRIVATE]._dynAPIInitDescriptors(prop)));
            },
            _dynAPIBindChildren: () => {
                if (!this[_SHARED_VIEW]) {
                    throw `dynamic api can't be created for "${this.tagName}"`;
                }
                let _view = this[this[_SHARED_VIEW]] || {};
                Object.keys(_view).forEach((key) => {
                    let inst = _view[key];
                    if (inst && inst.addEventListener) {
                        this[_MVVM_EVENTS][key] = {
                            bind: (event) => this[_PRIVATE]._dynAPIParseChildren(event, key),
                            host: inst,
                            key: key
                        };
                        inst.addEventListener(EVENTS.COMPONENT_LOADED, this[_MVVM_EVENTS][key].bind);
                    }
                });
            },
            _dynAPIParseChildren: (e, key) => {
                let component = e.target;
                component.observables
                    .filter((prop) => /^[^-]*$/ig.test(prop))
                    .concat(['visible'])
                    .forEach((el) => {
                    let prop = `${key}-${el}`;
                    let api = `${key}${el[0].toUpperCase() + el.slice(1)}`;
                    Object.defineProperty(this, api, this[_PRIVATE]._dynAPIInitDescriptors(prop));
                    this[_MVVM_EVENTS][el] = {
                        bind: (event) => this.set(prop, event.detail),
                        host: component,
                        key: el
                    };
                    component.addEventListener(`${el}${EVENTS.CHANGED}`, this[_MVVM_EVENTS][el].bind);
                });
            },
            _dynAPIInitDescriptors: (prop) => {
                let propDesc = this[_PRIVATE]._traverseInheritance(this, prop);
                let desc = {
                    get: () => this.get(prop, prop === 'visible' ? true : undefined),
                    set: (newValue) => {
                        this.set(prop, newValue);
                    },
                    enumerable: true,
                    configurable: true
                };
                if (propDesc) {
                    desc.get = propDesc.get || desc.get;
                    desc.set = propDesc.set || desc.set;
                }
                return desc;
            },
            _traverseInheritance: (obj, prop, desc = {}) => {
                let propDesc = Object.getOwnPropertyDescriptor(obj, prop);
                if (propDesc) {
                    desc.get = desc.get || propDesc.get;
                    desc.set = desc.set || propDesc.set;
                }
                const doExit = () => desc.get !== undefined && desc.set !== undefined
                    || Object.getPrototypeOf(obj) === null;
                if (doExit()) {
                    return desc;
                }
                return this[_PRIVATE]._traverseInheritance(Object.getPrototypeOf(obj), prop, desc);
            }
        };
        this[_MVVM_EVENTS] = {};
        this.prepare(__view__, __state__, __events__);
        this[_PRIVATE]._dynAPIBindSelf();
        this[_PRIVATE]._dynAPIBindChildren();
    }
    observeMutation() {
        let config = { subtree: true, characterData: true };
        if (!this._observer) {
            this._observer = new MutationObserver((mutations) => {
                for (let mutation of mutations) {
                    if (mutation.type === 'characterData') {
                        this.bindView();
                    }
                }
            });
        }
        this._observer.observe(this, config);
    }
    detachMutationObserver() {
        if (this._observer) {
            this._observer.disconnect();
        }
    }
    static get observedAttributes() {
        return this.prototype.observables.concat(['visible']);
    }
    get visible() {
        return this.get('visible', true);
    }
    set visible(value) {
        this.set('visible', value);
    }
    reconnectEvents() {
        if (this.visible && this[this[_SHARED_VIEW]]) {
            this.attachEvents();
        }
        else if (this[this[_SHARED_VIEW]]) {
            this.detachEvents();
        }
    }
    addListener(element, eventName, callback) {
        if (element) {
            element.addEventListener(eventName, callback);
        }
    }
    removeListener(element, eventName, callback) {
        if (element) {
            element.removeEventListener(eventName, callback);
        }
    }
    serialize(input) {
        if (Array.isArray(input)) {
            return input.join(',');
        }
        else {
            return Object.keys(input).map((key) => `${key}:${input[key]}`).join(',');
        }
    }
    deserializeDict(value, to = 'list') {
        let EXPR_DICTIONARY = /(?:([a-zA-Z0-9/]*):(true|false|[a-zA-Z0-9\s.:]*))/gi;
        let resArr = [], resDict = {}, _;
        while (_ = EXPR_DICTIONARY.exec(value)) {
            if (to === 'list') {
                resArr.push({ key: _[1], value: _[2] === 'undefined' ? false : this.parseValue(_[2]) });
            }
            else {
                resDict[_[1]] = this.parseValue(_[2]);
            }
        }
        return (to === 'list' ? resArr : resDict);
    }
    deserializeList(value) {
        return value.split(',').map(this.parseValue.bind(this));
    }
    get(key, defaultValue) {
        let attrVal = this.getAttribute(key);
        let val = this.parseValue(attrVal);
        return val === null || val === 'undefined' ? defaultValue : val;
    }
    parseValue(value) {
        return /^false$|^true$|^(0|[1-9]+\d*)([.]\d+)?$/g.test(value) ? JSON.parse(value) : value;
    }
    set(key, value) {
        this.setAttribute(key, value);
    }
    bubble(eventName, originalEvent) {
        this.dispatchEvent(new CustomEvent(eventName, originalEvent));
    }
    attributeChangedCallback(qualifiedName, oldValue, newValue) {
        if (oldValue === newValue) {
            return;
        }
        let groups = /([^-]*)-(.*)/g.exec(qualifiedName);
        if (this[_PRIVATE]._isAttributeChangeable(groups)) {
            this[this[_SHARED_VIEW]][groups[1]].setAttribute(groups[2], newValue);
        }
        else {
            this[qualifiedName] = newValue;
            this.dispatchEvent(new CustomEvent(`${qualifiedName}${EVENTS.CHANGED}`, { detail: this.get(qualifiedName), bubbles: true }));
        }
        this[_PRIVATE]._updateDOM();
    }
    connectedCallback() {
        this.reconnectEvents();
        this[_PRIVATE]._updateDOM();
        setTimeout(() => this.dispatchEvent(new CustomEvent(EVENTS.COMPONENT_LOADED)), 0);
    }
    disconnectedCallback() {
        this.reconnectEvents();
        if (this.visible) {
            this.detachMutationObserver();
            Object.keys(this[_MVVM_EVENTS]).forEach((key) => {
                let entry = this[_MVVM_EVENTS][key];
                entry.host.removeEventListener(entry.key, entry.bind);
            });
            this[_MVVM_EVENTS] = {};
        }
    }
    initState() {
        return void 0;
    }
    initEvents() {
        return void 0;
    }
    attachEvents() {
        return void 0;
    }
    detachEvents() {
        return void 0;
    }
    bindView() {
        return void 0;
    }
    prepare(__view__, __state__, __events__) {
        this[_SHARED_VIEW] = __view__ || _VIEW;
        this[_SHARED_STATE] = __state__ || _STATE;
        this[_SHARED_EVENTS] = __events__ || _EVENTS;
        this.attachShadow({ mode: 'open' });
        this.initEvents();
        this.initView();
        this.initState();
    }
}
//# sourceMappingURL=component.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-components/lib/widget.js

class widget_Widget extends Component {
    constructor(shared) {
        super(shared);
    }
}
//# sourceMappingURL=widget.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-components/index.js




//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-expression/component/vui-arithmetics-expression.js
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiArithmeticsExpression_1;


const vui_arithmetics_expression_VIEW = Symbol('view');
const vui_arithmetics_expression_STATE = Symbol('state');
const vui_arithmetics_expression_EVENTS = Symbol('events');
const _OPERANDS_EVENTS = Symbol('operands_events');
const vui_arithmetics_expression_ELEMENT = {
    DIV: 'div',
    ARITHMETICS_OPERAND: 'vui-arithmetics-operand',
    DROP_AREA: 'vui-drop-area'
};
const CLASS = {
    ELEMENT: 'host',
    OPERANDS: {
        ELEMENT: 'host__operands'
    },
    SIGN: {
        ELEMENT: 'host__sign'
    },
    BRACKET: {
        ELEMENT: 'host__bracket',
        MOD: {
            HIDDEN: 'host__bracket--hidden',
            SCOPED: 'host__bracket--scoped'
        },
        LEFT: {
            ELEMENT: 'host__bracket__left'
        },
        RIGHT: {
            ELEMENT: 'host__bracket__right'
        }
    },
    TEMPLATE: {
        ELEMENT: 'template#operator'
    }
};
const vui_arithmetics_expression_EVENT = {
    OPERAND_SORT: 'operandSort',
    OPERAND_DELETE: 'operandDelete',
    ARITHMETIC_SORTED: 'arithmeticSorted',
    ARITHMETIC_MUTATED: 'arithmeticMutated',
    ARITHMETIC_EXPRESSION_CREATE: 'arithmeticExpressionCreate',
    MOUSE_OVER: 'mouseover',
    MOUSE_OUT: 'mouseout',
    CLICK: 'click'
};
const DROP_AREA_RELATION = {
    SELF: 'self',
    CHILD: 'child',
    PARENT: 'parent'
};
const DROP_IDENT = 'key';
const MAX_OPERANDS_COUNT = 20;
const DBCLICK_INTERVAL = 200;
let vui_arithmetics_expression_VuiArithmeticsExpression = VuiArithmeticsExpression_1 = class VuiArithmeticsExpression extends widget_Widget {
    constructor() {
        super(vui_arithmetics_expression_VIEW);
        this.callbacks = {
            over: this[vui_arithmetics_expression_EVENTS].onDragOverBind,
            drop: this[vui_arithmetics_expression_EVENTS].onDropBind,
            end: this[vui_arithmetics_expression_EVENTS].onDragEndBind
        };
        this[_OPERANDS_EVENTS] = {};
    }
    get observables() {
        return ['max', 'min', 'operand', 'bracketing'];
    }
    get operand() {
        return this.get('operand', vui_arithmetics_expression_ELEMENT.ARITHMETICS_OPERAND);
    }
    get bracketing() {
        return this.get('bracketing', true);
    }
    get max() {
        return this.get('max');
    }
    get min() {
        return this.get('min', 0);
    }
    die() {
        this[vui_arithmetics_expression_STATE].childExpressions.forEach((child) => child.die());
        this._unsetDrags();
        this._flushNodes();
        this[vui_arithmetics_expression_STATE].dropAreasXRef = this[vui_arithmetics_expression_STATE].dropAreasXRef.filter((da) => da.type !== DROP_AREA_RELATION.CHILD);
    }
    attach(dragXRefs, dragAndDrop, dropAreasXRef, cbk) {
        let externalDragXRefs = dropAreasXRef
            ? dropAreasXRef.map((el) => {
                return { element: el, type: DROP_AREA_RELATION.PARENT };
            })
            : [];
        this[vui_arithmetics_expression_STATE].dropAreasXRef = externalDragXRefs.concat({
            element: this[vui_arithmetics_expression_VIEW].dropArea,
            type: DROP_AREA_RELATION.SELF
        });
        this[vui_arithmetics_expression_STATE].dragAndDropXRef = dragAndDrop;
        this[vui_arithmetics_expression_STATE].dragsXRef = dragXRefs;
        this[vui_arithmetics_expression_STATE].dragAndDropXRef.setDrop(this[vui_arithmetics_expression_VIEW].dropArea, this.callbacks);
        if (cbk) {
            cbk(this[vui_arithmetics_expression_VIEW].dropArea);
        }
    }
    refresh(expression) {
        if (expression) {
            this[vui_arithmetics_expression_STATE].expression = Object.assign({}, expression);
            this[vui_arithmetics_expression_STATE].expression.expressions = this[vui_arithmetics_expression_STATE].expression.expressions || [];
        }
        this.die();
        this._refreshDropArea();
        this._setDrags();
        this.bindView();
    }
    initEvents() {
        this[vui_arithmetics_expression_EVENTS] = {
            onDragOverBind: this._onDragOver.bind(this),
            onDropBind: this._onDrop.bind(this),
            onDragEndBind: this._onDragEnd.bind(this),
            onBracketingLeaveBind: this._onBracketingLeave.bind(this),
            onBracketingOverBind: this._onBracketingOver.bind(this),
            onDoubleClickedBind: this._onDoubleClicked.bind(this)
        };
    }
    initState() {
        this[vui_arithmetics_expression_STATE] = {
            registered: false,
            operators: [],
            childExpressions: [],
            draggable: [],
            dragsXRef: [],
            dragAndDropXRef: undefined,
            dropAreasXRef: [],
            expression: {
                operands: []
            }
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiArithmeticsExpression_1.template.content.cloneNode(true));
        this[vui_arithmetics_expression_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${CLASS.ELEMENT}`),
            placeholder: this.shadowRoot.querySelector(vui_arithmetics_expression_ELEMENT.DROP_AREA),
            dropArea: this.shadowRoot.querySelector(`.${CLASS.OPERANDS.ELEMENT}`),
            sign: this.shadowRoot.querySelector(`.${CLASS.SIGN.ELEMENT}`),
            leftBracket: this.shadowRoot.querySelector(`.${CLASS.BRACKET.LEFT.ELEMENT}`),
            rightBracket: this.shadowRoot.querySelector(`.${CLASS.BRACKET.RIGHT.ELEMENT}`),
            operatorTemplate: this.shadowRoot.querySelector(CLASS.TEMPLATE.ELEMENT)
        };
    }
    bindView() {
        let shouldSignBeHidden = this[vui_arithmetics_expression_STATE].expression.sign === undefined || this[vui_arithmetics_expression_STATE].expression.sign;
        this[vui_arithmetics_expression_VIEW].sign.visible = !shouldSignBeHidden;
        utilities_dom_UtilitiesDOM.toggleClass(!this.bracketing, this[vui_arithmetics_expression_VIEW].leftBracket, [CLASS.BRACKET.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(!this.bracketing, this[vui_arithmetics_expression_VIEW].rightBracket, [CLASS.BRACKET.MOD.HIDDEN]);
        this._togglePlaceholder();
        this._resetPlaceholder();
    }
    attachEvents() {
        this[vui_arithmetics_expression_VIEW].xRef.addEventListener(vui_arithmetics_expression_EVENT.CLICK, this[vui_arithmetics_expression_EVENTS].onDoubleClickedBind);
        this[vui_arithmetics_expression_VIEW].xRef.addEventListener(vui_arithmetics_expression_EVENT.MOUSE_OVER, this[vui_arithmetics_expression_EVENTS].onBracketingOverBind);
        this[vui_arithmetics_expression_VIEW].xRef.addEventListener(vui_arithmetics_expression_EVENT.MOUSE_OUT, this[vui_arithmetics_expression_EVENTS].onBracketingLeaveBind);
    }
    _flushNodes() {
        Object.keys(this[_OPERANDS_EVENTS] || {}).forEach((key) => {
            let entry = this[_OPERANDS_EVENTS][key];
            entry.host.removeEventListener(entry.key, entry.bind);
        });
        this[vui_arithmetics_expression_STATE].draggable.forEach(utilities_dom_UtilitiesDOM.removeElement.bind(this));
        this[vui_arithmetics_expression_STATE].operators.forEach(utilities_dom_UtilitiesDOM.removeElement.bind(this));
        this[vui_arithmetics_expression_STATE].childExpressions.forEach(utilities_dom_UtilitiesDOM.removeElement.bind(this));
    }
    _refreshDropArea() {
        this[vui_arithmetics_expression_STATE].draggable = this[vui_arithmetics_expression_STATE].expression.operands.map(this._bindOperand.bind(this));
        this[vui_arithmetics_expression_STATE].childExpressions = this[vui_arithmetics_expression_STATE].expression.expressions.map(this._bindExpression.bind(this));
        this[vui_arithmetics_expression_STATE].childExpressions.forEach((expr, idx) => {
            this[vui_arithmetics_expression_VIEW].dropArea.insertBefore(expr, this[vui_arithmetics_expression_VIEW].placeholder);
            this._addOperator(idx < this[vui_arithmetics_expression_STATE].childExpressions.length);
        });
        this[vui_arithmetics_expression_STATE].draggable.forEach((operand, idx) => {
            this[vui_arithmetics_expression_VIEW].dropArea.insertBefore(operand, this[vui_arithmetics_expression_VIEW].placeholder);
            operand.deletable = this[vui_arithmetics_expression_STATE].draggable.length > this.min;
            this._addOperator(idx < this[vui_arithmetics_expression_STATE].draggable.length - 1, operand.order + 2);
        });
    }
    _addOperator(condition, order) {
        if (condition && this[vui_arithmetics_expression_STATE].expression.operator) {
            let operator = this._createOperator(this[vui_arithmetics_expression_STATE].expression.operator, order);
            this[vui_arithmetics_expression_VIEW].dropArea.insertBefore(operator, this[vui_arithmetics_expression_VIEW].placeholder);
            this[vui_arithmetics_expression_STATE].operators.push(this[vui_arithmetics_expression_VIEW].placeholder.previousSibling);
        }
    }
    _createOperator(label, order) {
        let operator = this[vui_arithmetics_expression_VIEW].operatorTemplate.content.cloneNode(true);
        let el = operator.querySelector(vui_arithmetics_expression_ELEMENT.DIV);
        if (order) {
            el.style.order = `${order}`;
        }
        el.innerText = label;
        return operator;
    }
    _setDrags() {
        this[vui_arithmetics_expression_STATE].dragsXRef.forEach((dragXRef) => this[vui_arithmetics_expression_STATE].dragAndDropXRef.connect(dragXRef, this[vui_arithmetics_expression_VIEW].dropArea));
        this[vui_arithmetics_expression_STATE].draggable.forEach((dragXRef) => {
            this[vui_arithmetics_expression_STATE].dragAndDropXRef.setDrag(dragXRef, this.callbacks);
            this[vui_arithmetics_expression_STATE].dropAreasXRef.forEach((dropXRef) => this[vui_arithmetics_expression_STATE].dragAndDropXRef.connect(dragXRef, dropXRef.element));
        });
        this[vui_arithmetics_expression_STATE].registered = true;
    }
    _unsetDrags() {
        if (!this[vui_arithmetics_expression_STATE].registered) {
            return;
        }
        this[vui_arithmetics_expression_STATE].dragsXRef.forEach((dragXRef) => this[vui_arithmetics_expression_STATE].dragAndDropXRef.disconnect(dragXRef, this[vui_arithmetics_expression_VIEW].dropArea));
        this[vui_arithmetics_expression_STATE].draggable.forEach((dragXRef) => {
            this[vui_arithmetics_expression_STATE].dropAreasXRef.forEach((dropXRef) => this[vui_arithmetics_expression_STATE].dragAndDropXRef.disconnect(dragXRef, dropXRef.element));
            this[vui_arithmetics_expression_STATE].dragAndDropXRef.unsetDrag(dragXRef);
        });
    }
    _bindExpression(expression) {
        let expressionDOM = document.createElement(VuiArithmeticsExpression_1.tag);
        expressionDOM.operand = this.operand;
        expressionDOM.attach(this[vui_arithmetics_expression_STATE].dragsXRef, this[vui_arithmetics_expression_STATE].dragAndDropXRef, this[vui_arithmetics_expression_STATE].dropAreasXRef.map((el) => el.element), (childDropArea) => this[vui_arithmetics_expression_STATE].dropAreasXRef.push({
            element: childDropArea,
            type: DROP_AREA_RELATION.CHILD
        }));
        expressionDOM.refresh(expression);
        return Object.assign(expressionDOM);
    }
    _orderStep(idx) {
        return this[vui_arithmetics_expression_STATE].expression.operator ? (idx * 4 + 1) : (idx * 2 + 1);
    }
    _bindOperand(operand, idx) {
        let operandDOM = document.createElement(this.operand);
        operandDOM.key = operand.key;
        operandDOM.order = this._orderStep(idx);
        operandDOM.label = operand.label;
        if (operand.value) {
            operandDOM.value = operand.value;
        }
        if (operand.operator) {
            operandDOM.operator = operand.operator;
        }
        if (operand.sort) {
            operandDOM.sort = operand.sort;
        }
        this[_OPERANDS_EVENTS][`SORT_${operand.key}`] = {
            bind: (e) => {
                this.dispatchEvent(new CustomEvent(vui_arithmetics_expression_EVENT.ARITHMETIC_SORTED, { detail: e.detail, composed: true, bubbles: true }));
            },
            host: operandDOM,
            key: operand.key
        };
        this[_OPERANDS_EVENTS][`DELETE_${operand.key}`] = {
            bind: (e) => {
                let updatedOrder = this._sortByOrder(this[vui_arithmetics_expression_VIEW].dropArea.children)
                    .map((element) => element.getAttribute(DROP_IDENT))
                    .filter((attribute) => !!attribute && attribute !== e.detail);
                this.dispatchEvent(new CustomEvent(vui_arithmetics_expression_EVENT.ARITHMETIC_MUTATED, { detail: updatedOrder, composed: true, bubbles: true }));
            },
            host: operandDOM,
            key: operand.key
        };
        operandDOM.addEventListener(vui_arithmetics_expression_EVENT.OPERAND_SORT, this[_OPERANDS_EVENTS][`SORT_${operand.key}`].bind);
        operandDOM.addEventListener(vui_arithmetics_expression_EVENT.OPERAND_DELETE, this[_OPERANDS_EVENTS][`DELETE_${operand.key}`].bind);
        return Object.assign(operandDOM);
    }
    _togglePlaceholder() {
        let placeholderHidden = this[vui_arithmetics_expression_STATE].draggable.length === 0 || this[vui_arithmetics_expression_STATE].draggable.length >= this.max;
        this[vui_arithmetics_expression_VIEW].placeholder.visible = !placeholderHidden;
    }
    _onDragOver(params) {
        params.event.preventDefault();
        params.event.stopImmediatePropagation();
        let target = params.event.target;
        if (!(new RegExp(`^${this.operand}$`, 'gi').test(target.tagName))
            || params.event.target === params.dragElement) {
            return;
        }
        let targetPosition = parseInt(target.style.order, MAX_OPERANDS_COUNT);
        if (this._compareMousePositionX(params.event) === -1) {
            this[vui_arithmetics_expression_VIEW].placeholder.style.order = `${targetPosition - 1}`;
        }
        else if (this._compareMousePositionX(params.event) === 1) {
            this[vui_arithmetics_expression_VIEW].placeholder.style.order = `${targetPosition + 1}`;
        }
    }
    _compareMousePositionX(event) {
        let target = event.target;
        let rect = target.getBoundingClientRect();
        let targetMiddlePosition = (rect.left + rect.right) / 2;
        return this._compareMousePosition(event.clientX, targetMiddlePosition);
    }
    _compareMousePosition(position, targetMiddlePosition) {
        if (position > targetMiddlePosition) {
            return 1;
        }
        else if (position < targetMiddlePosition) {
            return -1;
        }
        return 0;
    }
    _onDrop(params) {
        params.event.preventDefault();
        params.event.stopImmediatePropagation();
        this[vui_arithmetics_expression_VIEW].placeholder.setAttribute(DROP_IDENT, params.event.dataTransfer.getData('text') || params.dragElement['key']);
        let updatedOrder = this._sortByOrder(this[vui_arithmetics_expression_VIEW].dropArea.children, params.dragElement)
            .map((element) => element.getAttribute(DROP_IDENT))
            .filter((attribute) => !!attribute);
        this._resetPlaceholder();
        this.dispatchEvent(new CustomEvent(vui_arithmetics_expression_EVENT.ARITHMETIC_MUTATED, { detail: updatedOrder, bubbles: true }));
    }
    _onDragEnd() {
        this.refresh();
        this[vui_arithmetics_expression_STATE].childExpressions.forEach((child) => child.refresh());
    }
    _sortByOrder(collection, xRef) {
        let children = [].slice.call(collection);
        let fChildren = children.filter((el) => !xRef || el !== xRef);
        fChildren.sort((a, b) => {
            let aO = parseInt(a.style.order, 10);
            let bO = parseInt(b.style.order, 10);
            if (aO < bO) {
                return -1;
            }
            else if (aO > bO) {
                return 1;
            }
            return 0;
        });
        return fChildren;
    }
    _resetPlaceholder() {
        this[vui_arithmetics_expression_VIEW].placeholder.setAttribute(DROP_IDENT, '');
        this[vui_arithmetics_expression_VIEW].placeholder.style.order = `${this._orderStep(this[vui_arithmetics_expression_STATE].draggable.length)}`;
    }
    _onBracketingOver(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        utilities_dom_UtilitiesDOM.addClass(this[vui_arithmetics_expression_VIEW].leftBracket, [CLASS.BRACKET.MOD.SCOPED]);
        utilities_dom_UtilitiesDOM.addClass(this[vui_arithmetics_expression_VIEW].rightBracket, [CLASS.BRACKET.MOD.SCOPED]);
        utilities_dom_UtilitiesDOM.addClass(this[vui_arithmetics_expression_VIEW].sign, [CLASS.BRACKET.MOD.SCOPED]);
    }
    _onBracketingLeave(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        utilities_dom_UtilitiesDOM.removeClass(this[vui_arithmetics_expression_VIEW].leftBracket, [CLASS.BRACKET.MOD.SCOPED]);
        utilities_dom_UtilitiesDOM.removeClass(this[vui_arithmetics_expression_VIEW].rightBracket, [CLASS.BRACKET.MOD.SCOPED]);
        utilities_dom_UtilitiesDOM.removeClass(this[vui_arithmetics_expression_VIEW].sign, [CLASS.BRACKET.MOD.SCOPED]);
    }
    _onDoubleClicked(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        this._updateDoubleClicked();
        this._clickEndTime = Date.now();
        let target = e.target;
        if (!this._isDoubleClicked) {
            setTimeout(() => {
                if (this._isDoubleClicked) {
                    this.dispatchEvent(new CustomEvent(vui_arithmetics_expression_EVENT.ARITHMETIC_EXPRESSION_CREATE, { detail: target.key }));
                }
            }, DBCLICK_INTERVAL);
        }
    }
    _updateDoubleClicked() {
        this._isDoubleClicked = this._clickEndTime && Date.now() - this._clickEndTime < DBCLICK_INTERVAL;
    }
};
vui_arithmetics_expression_VuiArithmeticsExpression = VuiArithmeticsExpression_1 = __decorate([
    VUI('vui-arithmetics-expression', {html: "<div class=\"host__wrapper\">    <div class=\"host__sign\">        <vui-icon-negation visible=\"false\" hoverable=\"false\"></vui-icon-negation>    </div>    <div class=\"host_wrapper\">        <div class=\"host__bracket host__bracket__left\">(</div>    </div>    <div class=\"host__operands\">        <vui-drop-area mode=\"rounded\"></vui-drop-area>    </div>    <div class=\"host_wrapper\">        <div class=\"host__bracket host__bracket__right\">)</div>    </div></div><template id=\"operator\">    <div class=\"host__operator\"></div></template>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host .host__wrapper, .host .host__sign, .host .host__operands, .host .host__operator, .host .host__bracket {  display: flex; }  .host, .host .host__operator, .host .host__bracket {    justify-content: center; }  .host, .host .host__operator, .host .host__bracket {    height: 100%;    flex-direction: column; }.host .host__bracket--hidden {  display: none !important; }  .host .host__bracket {    font-size: 20px; }  .host .host__bracket {    font-weight: 800; }.host .host__sign {  cursor: default; }.host .host__operands {  cursor: default;  margin-left: 4px; }  .host .host__operands * {    margin-right: 4px; }.host .host__operator {  cursor: default;  margin: 0 5px; }.host .host__bracket {  color: var(--vc-color--light, #bbb);  cursor: default; }  .host .host__bracket--scoped {    color: var(--vc-color--highlight, #4680FE); }"}),
    __metadata("design:paramtypes", [])
], vui_arithmetics_expression_VuiArithmeticsExpression);

//# sourceMappingURL=vui-arithmetics-expression.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-expression/index.js

if (customElements.get(vui_arithmetics_expression_VuiArithmeticsExpression.tag) === undefined) {
    customElements.define(vui_arithmetics_expression_VuiArithmeticsExpression.tag, vui_arithmetics_expression_VuiArithmeticsExpression);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-operand/component/vui-arithmetics-operand.js
var vui_arithmetics_operand_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_arithmetics_operand_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiArithmeticsOperand_1;


const vui_arithmetics_operand_VIEW = Symbol('view');
const vui_arithmetics_operand_EVENTS = Symbol('events');
const vui_arithmetics_operand_ELEMENT = {
    ICON_CLOSE: 'vui-icon-close',
    ICON_UP: 'vui-icon-chevron-up',
    ICON_DOWN: 'vui-icon-chevron-down'
};
const vui_arithmetics_operand_CLASS = {
    ELEMENT: 'host',
    TITLE: {
        ELEMENT: 'host__title'
    }
};
const vui_arithmetics_operand_EVENT = {
    CLICK: 'click',
    OPERAND_SORT: 'operandSort',
    OPERAND_DELETE: 'operandDelete'
};
const ICO_SIZE = 'medium';
const ICO_ACCENT = 2;
const ASC = 'asc';
const DESC = 'desc';
let vui_arithmetics_operand_VuiArithmeticsOperand = VuiArithmeticsOperand_1 = class VuiArithmeticsOperand extends Component {
    constructor() {
        super(vui_arithmetics_operand_VIEW);
    }
    get observables() {
        return ['label', 'sort', 'key', 'order', 'deletable'];
    }
    get deletable() {
        return this.get('deletable', true);
    }
    get label() {
        return this.get('label');
    }
    get sort() {
        return this.get('sort');
    }
    get order() {
        return this.get('order');
    }
    get key() {
        return this.get('key');
    }
    initView() {
        this.shadowRoot.appendChild(VuiArithmeticsOperand_1.template.content.cloneNode(true));
        this[vui_arithmetics_operand_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_CLASS.ELEMENT}`),
            label: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_CLASS.TITLE.ELEMENT}`),
            remove: this.shadowRoot.querySelector(vui_arithmetics_operand_ELEMENT.ICON_CLOSE),
            chevronUp: this.shadowRoot.querySelector(vui_arithmetics_operand_ELEMENT.ICON_UP),
            chevronDown: this.shadowRoot.querySelector(vui_arithmetics_operand_ELEMENT.ICON_DOWN)
        };
        this[vui_arithmetics_operand_VIEW].xRef.draggable = true;
    }
    bindView() {
        this._bindSort();
        this._bindDelete();
        this[vui_arithmetics_operand_VIEW].label.innerText = this.label;
        if (this.order) {
            this.style.order = `${this.order}`;
        }
    }
    initEvents() {
        this[vui_arithmetics_operand_EVENTS] = {
            onClickSortGroupBind: this._onClickSortGroup.bind(this),
            onClickRemoveGroupBind: this._onClickRemoveGroup.bind(this)
        };
    }
    attachEvents() {
        this.addEventListener(vui_arithmetics_operand_EVENT.CLICK, this[vui_arithmetics_operand_EVENTS].onClickSortGroupBind);
        if (this[vui_arithmetics_operand_VIEW].remove) {
            this[vui_arithmetics_operand_VIEW].remove.addEventListener(vui_arithmetics_operand_EVENT.CLICK, this[vui_arithmetics_operand_EVENTS].onClickRemoveGroupBind);
        }
    }
    detachEvents() {
        this.removeEventListener(vui_arithmetics_operand_EVENT.CLICK, this[vui_arithmetics_operand_EVENTS].onClickSortGroupBind);
        if (this[vui_arithmetics_operand_VIEW].remove) {
            this[vui_arithmetics_operand_VIEW].remove.removeEventListener(vui_arithmetics_operand_EVENT.CLICK, this[vui_arithmetics_operand_EVENTS].onClickRemoveGroupBind);
        }
    }
    _bindDelete() {
        if (!this.deletable) {
            this._removeDelete();
        }
        else if (!this[vui_arithmetics_operand_VIEW].remove) {
            this._addDelete();
        }
    }
    _bindSort() {
        if (this.sort === undefined) {
            this._removeSort();
        }
        else if (!this[vui_arithmetics_operand_VIEW].chevronDown && !this[vui_arithmetics_operand_VIEW].chevronUp) {
            this._addSort();
        }
        else {
            this._ascDesc();
        }
    }
    _ascDesc() {
        this[vui_arithmetics_operand_VIEW].chevronDown.visible = this.sort === DESC;
        this[vui_arithmetics_operand_VIEW].chevronUp.visible = this.sort === ASC;
    }
    _addDelete() {
        this[vui_arithmetics_operand_VIEW].remove = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_ELEMENT.ICON_CLOSE);
        this[vui_arithmetics_operand_VIEW].remove.accent = ICO_ACCENT;
        this[vui_arithmetics_operand_VIEW].remove.size = ICO_SIZE;
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_VIEW].remove, this[vui_arithmetics_operand_VIEW].label);
    }
    _removeDelete() {
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_VIEW].remove);
        this[vui_arithmetics_operand_VIEW].remove = null;
    }
    _addSort() {
        this[vui_arithmetics_operand_VIEW].chevronDown = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_ELEMENT.ICON_DOWN);
        this[vui_arithmetics_operand_VIEW].chevronDown.accent = ICO_ACCENT;
        this[vui_arithmetics_operand_VIEW].chevronDown.size = ICO_SIZE;
        this[vui_arithmetics_operand_VIEW].chevronDown.visible = false;
        this[vui_arithmetics_operand_VIEW].chevronDown.hoverable = false;
        this[vui_arithmetics_operand_VIEW].chevronUp = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_ELEMENT.ICON_UP);
        this[vui_arithmetics_operand_VIEW].chevronUp.accent = ICO_ACCENT;
        this[vui_arithmetics_operand_VIEW].chevronUp.size = ICO_SIZE;
        this[vui_arithmetics_operand_VIEW].chevronUp.visible = false;
        this[vui_arithmetics_operand_VIEW].chevronUp.hoverable = false;
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_VIEW].chevronDown, this[vui_arithmetics_operand_VIEW].label);
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_VIEW].chevronUp, this[vui_arithmetics_operand_VIEW].chevronDown);
        this._ascDesc();
    }
    _removeSort() {
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_VIEW].chevronDown);
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_VIEW].chevronUp);
        this[vui_arithmetics_operand_VIEW].chevronDown = null;
        this[vui_arithmetics_operand_VIEW].chevronUp = null;
    }
    _onClickSortGroup() {
        this.dispatchEvent(new CustomEvent(vui_arithmetics_operand_EVENT.OPERAND_SORT, { detail: this.key, bubbles: true }));
    }
    _onClickRemoveGroup(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        this.dispatchEvent(new CustomEvent(vui_arithmetics_operand_EVENT.OPERAND_DELETE, { detail: this.key, bubbles: true }));
    }
};
vui_arithmetics_operand_VuiArithmeticsOperand = VuiArithmeticsOperand_1 = vui_arithmetics_operand_decorate([
    VUI('vui-arithmetics-operand', {html: "<div class=\"host__wrapper\">    <div class=\"host__title\"></div>    <vui-icon-chevron-up accent=\"2\" size=\"medium\" visible=\"false\" hoverable=\"false\"></vui-icon-chevron-up>    <vui-icon-chevron-down accent=\"2\" size=\"medium\" visible=\"false\" hoverable=\"false\"></vui-icon-chevron-down>    <vui-icon-close accent=\"2\" size=\"medium\"></vui-icon-close></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host .host__wrapper {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }.host {  border: 1px solid rgba(0, 0, 0, 0.1);  border-radius: var(--vc-pill-border-radius, 20px);  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  height: 20px;  padding: 2px 10px;  margin: 5px 0;  cursor: default; }  .host {    background: var(--vc-color--highlight, #4680FE);    color: var(--vc-capsule-color, white); }  .host:hover {    box-shadow: 0 7px 5px -5px var(--vc-color--highlight, #4680FE);    cursor: pointer;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host {    font-weight: 500; }.host .host__title {  flex-shrink: 0;  display: inline-block;  width: auto;  width: max-content;  width: -moz-max-content; }"}),
    vui_arithmetics_operand_metadata("design:paramtypes", [])
], vui_arithmetics_operand_VuiArithmeticsOperand);

//# sourceMappingURL=vui-arithmetics-operand.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-operand/index.js

if (customElements.get(vui_arithmetics_operand_VuiArithmeticsOperand.tag) === undefined) {
    customElements.define(vui_arithmetics_operand_VuiArithmeticsOperand.tag, vui_arithmetics_operand_VuiArithmeticsOperand);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-operand-tuple/component/vui-arithmetics-operand-tuple.js
var vui_arithmetics_operand_tuple_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_arithmetics_operand_tuple_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiArithmeticsOperandTuple_1;


const vui_arithmetics_operand_tuple_VIEW = Symbol('view');
const vui_arithmetics_operand_tuple_EVENTS = Symbol('events');
const vui_arithmetics_operand_tuple_ELEMENT = {
    ICON_CLOSE: 'vui-icon-close',
    ICON_UP: 'vui-icon-chevron-up',
    ICON_DOWN: 'vui-icon-chevron-down'
};
const vui_arithmetics_operand_tuple_CLASS = {
    ELEMENT: 'host',
    LABEL: {
        ELEMENT: 'host__label'
    },
    COMP: {
        ELEMENT: 'host__comp'
    },
    VALUE: {
        ELEMENT: 'host__value'
    }
};
const vui_arithmetics_operand_tuple_EVENT = {
    CLICK: 'click',
    OPERAND_SORT: 'operandSort',
    OPERAND_DELETE: 'operandDelete'
};
const vui_arithmetics_operand_tuple_ICO_SIZE = 'medium';
const vui_arithmetics_operand_tuple_ICO_ACCENT = 2;
const vui_arithmetics_operand_tuple_ASC = 'asc';
const vui_arithmetics_operand_tuple_DESC = 'desc';
let vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple = VuiArithmeticsOperandTuple_1 = class VuiArithmeticsOperandTuple extends Component {
    constructor() {
        super(vui_arithmetics_operand_tuple_VIEW);
    }
    get observables() {
        return ['label', 'sort', 'key', 'order', 'deletable', 'operator', 'value'];
    }
    get deletable() {
        return this.get('deletable', true);
    }
    get label() {
        return this.get('label');
    }
    get sort() {
        return this.get('sort');
    }
    get order() {
        return this.get('order');
    }
    get key() {
        return this.get('key');
    }
    get value() {
        return this.get('value');
    }
    get operator() {
        return this.get('operator');
    }
    initView() {
        this.shadowRoot.appendChild(VuiArithmeticsOperandTuple_1.template.content.cloneNode(true));
        this[vui_arithmetics_operand_tuple_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_tuple_CLASS.ELEMENT}`),
            label: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_tuple_CLASS.LABEL.ELEMENT}`),
            comp: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_tuple_CLASS.COMP.ELEMENT}`),
            value: this.shadowRoot.querySelector(`.${vui_arithmetics_operand_tuple_CLASS.VALUE.ELEMENT}`),
            remove: this.shadowRoot.querySelector(vui_arithmetics_operand_tuple_ELEMENT.ICON_CLOSE),
            chevronUp: this.shadowRoot.querySelector(vui_arithmetics_operand_tuple_ELEMENT.ICON_UP),
            chevronDown: this.shadowRoot.querySelector(vui_arithmetics_operand_tuple_ELEMENT.ICON_DOWN)
        };
        this[vui_arithmetics_operand_tuple_VIEW].xRef.draggable = true;
    }
    bindView() {
        this._bindSort();
        this._bindDelete();
        this[vui_arithmetics_operand_tuple_VIEW].label.innerText = `${this.label}`;
        this[vui_arithmetics_operand_tuple_VIEW].comp.innerText = this.operator;
        this[vui_arithmetics_operand_tuple_VIEW].value.innerText = this.value;
        if (this.order) {
            this.style.order = `${this.order}`;
        }
    }
    initEvents() {
        this[vui_arithmetics_operand_tuple_EVENTS] = {
            onClickSortGroupBind: this._onClickSortGroup.bind(this),
            onClickRemoveGroupBind: this._onClickRemoveGroup.bind(this)
        };
    }
    attachEvents() {
        this.addEventListener(vui_arithmetics_operand_tuple_EVENT.CLICK, this[vui_arithmetics_operand_tuple_EVENTS].onClickSortGroupBind);
        if (this[vui_arithmetics_operand_tuple_VIEW].remove) {
            this[vui_arithmetics_operand_tuple_VIEW].remove.addEventListener(vui_arithmetics_operand_tuple_EVENT.CLICK, this[vui_arithmetics_operand_tuple_EVENTS].onClickRemoveGroupBind);
        }
    }
    detachEvents() {
        this.removeEventListener(vui_arithmetics_operand_tuple_EVENT.CLICK, this[vui_arithmetics_operand_tuple_EVENTS].onClickSortGroupBind);
        if (this[vui_arithmetics_operand_tuple_VIEW].remove) {
            this[vui_arithmetics_operand_tuple_VIEW].remove.removeEventListener(vui_arithmetics_operand_tuple_EVENT.CLICK, this[vui_arithmetics_operand_tuple_EVENTS].onClickRemoveGroupBind);
        }
    }
    _bindDelete() {
        if (!this.deletable) {
            this._removeDelete();
        }
        else if (!this[vui_arithmetics_operand_tuple_VIEW].remove) {
            this._addDelete();
        }
    }
    _bindSort() {
        if (this.sort === undefined) {
            this._removeSort();
        }
        else if (!this[vui_arithmetics_operand_tuple_VIEW].chevronDown && !this[vui_arithmetics_operand_tuple_VIEW].chevronUp) {
            this._addSort();
        }
        else {
            this._ascDesc();
        }
    }
    _ascDesc() {
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown.visible = this.sort === vui_arithmetics_operand_tuple_DESC;
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp.visible = this.sort === vui_arithmetics_operand_tuple_ASC;
    }
    _addDelete() {
        this[vui_arithmetics_operand_tuple_VIEW].remove = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_tuple_ELEMENT.ICON_CLOSE);
        this[vui_arithmetics_operand_tuple_VIEW].remove.accent = vui_arithmetics_operand_tuple_ICO_ACCENT;
        this[vui_arithmetics_operand_tuple_VIEW].remove.size = vui_arithmetics_operand_tuple_ICO_SIZE;
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_tuple_VIEW].remove, this[vui_arithmetics_operand_tuple_VIEW].label);
    }
    _removeDelete() {
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_tuple_VIEW].remove);
        this[vui_arithmetics_operand_tuple_VIEW].remove = null;
    }
    _addSort() {
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_tuple_ELEMENT.ICON_DOWN);
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown.accent = vui_arithmetics_operand_tuple_ICO_ACCENT;
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown.size = vui_arithmetics_operand_tuple_ICO_SIZE;
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown.visible = false;
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp = utilities_dom_UtilitiesDOM.create(vui_arithmetics_operand_tuple_ELEMENT.ICON_UP);
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp.accent = vui_arithmetics_operand_tuple_ICO_ACCENT;
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp.size = vui_arithmetics_operand_tuple_ICO_SIZE;
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp.visible = false;
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_tuple_VIEW].chevronDown, this[vui_arithmetics_operand_tuple_VIEW].label);
        utilities_dom_UtilitiesDOM.insertAfter(this[vui_arithmetics_operand_tuple_VIEW].chevronUp, this[vui_arithmetics_operand_tuple_VIEW].label);
        this._ascDesc();
    }
    _removeSort() {
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_tuple_VIEW].chevronDown);
        utilities_dom_UtilitiesDOM.removeElement(this[vui_arithmetics_operand_tuple_VIEW].chevronUp);
        this[vui_arithmetics_operand_tuple_VIEW].chevronDown = null;
        this[vui_arithmetics_operand_tuple_VIEW].chevronUp = null;
    }
    _onClickSortGroup() {
        this.dispatchEvent(new CustomEvent(vui_arithmetics_operand_tuple_EVENT.OPERAND_SORT, { detail: this.key, bubbles: true }));
    }
    _onClickRemoveGroup(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        this.dispatchEvent(new CustomEvent(vui_arithmetics_operand_tuple_EVENT.OPERAND_DELETE, { detail: this.key, bubbles: true }));
    }
};
vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple = VuiArithmeticsOperandTuple_1 = vui_arithmetics_operand_tuple_decorate([
    VUI('vui-arithmetics-operand-tuple', {html: "<div class=\"host__wrapper\">    <div class=\"host__title\">        <div class=\"host__label\"></div>        <div class=\"host__comp\">            <vui-select slot=\"select\"                        textnothingselected=\"-\" list-mode=\"single\" search-visible=\"false\"                        popup-position=\"top\" popup-autohide=\"true\" popup-locked=\"true\" popup-closeonfocuslost=\"true\">            </vui-select>        </div>        <div class=\"host__value\"></div>    </div>    <vui-icon-chevron-up accent=\"2\" size=\"medium\" visible=\"false\"></vui-icon-chevron-up>    <vui-icon-chevron-down accent=\"2\" size=\"medium\" visible=\"false\"></vui-icon-chevron-down>    <vui-icon-close accent=\"2\" size=\"medium\"></vui-icon-close></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host .host__wrapper {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }.host {  border: 1px solid rgba(0, 0, 0, 0.1);  border-radius: var(--vc-pill-border-radius, 20px);  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  height: 20px;  padding: 2px 10px;  margin: 5px 0;  cursor: default; }  .host {    background: var(--vc-color--highlight, #4680FE);    color: var(--vc-capsule-color, white); }  .host:hover {    box-shadow: 0 7px 5px -5px var(--vc-color--highlight, #4680FE);    cursor: pointer;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host {    font-weight: 500; }  .host .host__comp {    font-weight: 300; }.host .host__label,.host .host__value {  display: inline-block;  width: auto;  width: max-content;  width: -moz-max-content; }.host .host__comp {  display: inline-block;  width: auto;  width: max-content;  width: -moz-max-content; }.host .host__title {  flex-shrink: 0;  display: inline-block;  width: auto;  width: max-content;  width: -moz-max-content; }"}),
    vui_arithmetics_operand_tuple_metadata("design:paramtypes", [])
], vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple);

//# sourceMappingURL=vui-arithmetics-operand-tuple.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-arithmetics-operand-tuple/index.js

if (customElements.get(vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple.tag) === undefined) {
    customElements.define(vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple.tag, vui_arithmetics_operand_tuple_VuiArithmeticsOperandTuple);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-button/component/vui-button.js
var vui_button_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_button_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiButton_1;


const vui_button_VIEW = Symbol('view');
const vui_button_EVENTS = Symbol('event');
const vui_button_STATE = Symbol('state');
const vui_button_ELEMENT = {
    BUTTON: 'button'
};
const vui_button_EVENT = {
    CLICK: 'click'
};
const vui_button_CLASS = {
    BUTTON: {
        MOD: {
            DISABLED: 'host__button--disabled'
        }
    }
};
let vui_button_VuiButton = VuiButton_1 = class VuiButton extends Component {
    constructor() {
        super(vui_button_VIEW);
    }
    get disabled() {
        return this.get('disabled', false);
    }
    get key() {
        return this.get('key', '');
    }
    get observables() {
        return ['key', 'disabled'];
    }
    initEvents() {
        this[vui_button_EVENTS] = {
            onClickBind: this._onClick.bind(this)
        };
    }
    attachEvents() {
        this.addEventListener(vui_button_EVENT.CLICK, this[vui_button_EVENTS].onClickBind);
    }
    detachEvents() {
        this.removeEventListener(vui_button_EVENT.CLICK, this[vui_button_EVENTS].onClickBind);
    }
    initView() {
        this.shadowRoot.appendChild(VuiButton_1.template.content.cloneNode(true));
        this[vui_button_VIEW] = {
            button: this.shadowRoot.querySelector(vui_button_ELEMENT.BUTTON),
            child: this.shadowRoot.querySelector('slot').assignedElements()[0]
        };
    }
    initState() {
        this[vui_button_STATE] = {};
    }
    bindView() {
        utilities_dom_UtilitiesDOM.toggleClass(this.disabled, this[vui_button_VIEW].button, [vui_button_CLASS.BUTTON.MOD.DISABLED]);
        this[vui_button_VIEW].button.disabled = this.disabled;
        if (this[vui_button_VIEW].child) {
            if (this.disabled) {
                this[vui_button_STATE].icoHoverabledSnapshot = this[vui_button_VIEW].child.hoverable;
                this[vui_button_STATE].icoAccentSnapshot = this[vui_button_VIEW].child.accent;
                this[vui_button_VIEW].child.hoverable = !this.disabled;
                this[vui_button_VIEW].child.accent = 3;
            }
            else {
                if (this[vui_button_STATE].icoHoverabledSnapshot !== undefined) {
                    this[vui_button_VIEW].child.hoverable = this[vui_button_STATE].icoHoverabledSnapshot;
                }
                if (this[vui_button_STATE].icoAccentSnapshot !== undefined) {
                    this[vui_button_VIEW].child.accent = this[vui_button_STATE].icoAccentSnapshot;
                }
            }
        }
    }
    _onClick(event) {
        if (this.disabled) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    }
};
vui_button_VuiButton = VuiButton_1 = vui_button_decorate([
    VUI('vui-button', {html: "<button class=\"host__button\">    <slot></slot></button>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host__button {  background: transparent;  border-radius: var(--vc-grid-border-radius, 20px);  border: 0;  cursor: pointer;  color: var(--vc-color--default, #666);  display: inline-block;  font-weight: 500;  height: 30px;  letter-spacing: 1px;  overflow: hidden;  padding: 4px 8px;  position: relative;  text-transform: uppercase;  text-decoration: none;  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  width: auto; }  .host__button:focus {    outline: 0; }  .host__button--disabled, .host__button[disabled] {    color: #bbb;    cursor: default; }.host__button {  text-align: center; }.host__button {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }"}),
    vui_button_metadata("design:paramtypes", [])
], vui_button_VuiButton);

//# sourceMappingURL=vui-button.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-button/index.js

if (customElements.get(vui_button_VuiButton.tag) === undefined) {
    customElements.define(vui_button_VuiButton.tag, vui_button_VuiButton);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-calendar/component/vui-calendar.js
var vui_calendar_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_calendar_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiCalendar_1;

const vui_calendar_VIEW = Symbol('view');
const vui_calendar_EVENTS = Symbol('event');
const vui_calendar_ELEMENT = {
    TABLE: 'table',
    DIV: 'div'
};
const vui_calendar_CLASS = {
    ELEMENT: 'host',
    TITLE: {
        ELEMENT: 'host__title'
    },
    NAVIGATION: {
        ELEMENT: 'host__navigation'
    },
    TODAY: {
        ELEMENT: 'host__today'
    },
    MONTH: {
        ELEMENT: 'host__month'
    },
    YEAR: {
        ELEMENT: 'host__year'
    },
    CURRENT: {
        ELEMENT: 'host__current'
    },
    NEXT: {
        ELEMENT: 'host__next'
    },
    PREV: {
        ELEMENT: 'host__prev'
    },
    OUT_OF_RANGE: {
        ELEMENT: 'host__out-of-range'
    }
};
const vui_calendar_EVENT = {
    CLICK: 'click',
    DATESELECTED: 'dateSelected'
};
const ATTRIBUTE = {
    TITLE: 'title'
};
const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const DAYS_SHORT = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
const MONTHS = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
];
const MONTHS_SHORT = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
const LABEL = {
    NEXT: 'Next',
    TODAY: 'Today',
    PREV: 'Prev'
};
const VIEW = {
    TYPE: {
        DAYS: 'days',
        MONTHS: 'months',
        YEARS: 'years'
    }
};
const STEPS = {
    YEARS: 20
};
const DAYS_ROWS_QTY = 6;
let vui_calendar_VuiCalendar = VuiCalendar_1 = class VuiCalendar extends Component {
    constructor() {
        super(vui_calendar_VIEW);
    }
    get date() {
        return this.get('date');
    }
    get view() {
        return this.get('view', VIEW.TYPE.DAYS);
    }
    set date(value) {
        let valDate = new Date(value);
        if (!this.isDateValid(valDate)) {
            console.error(`Date is invalid`);
        }
        else {
            this.set('date', value);
            this._date = valDate;
        }
    }
    set view(value) {
        this.set('view', value);
    }
    get observables() {
        return ['date', 'view'];
    }
    initEvents() {
        this[vui_calendar_EVENTS] = {
            onDayPickBind: this._onDayPick.bind(this)
        };
    }
    bindView() {
        this.refresh();
    }
    initView() {
        this.shadowRoot.appendChild(VuiCalendar_1.template.content.cloneNode(true));
        this[vui_calendar_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_calendar_CLASS.ELEMENT}`)
        };
    }
    isDateValid(date) {
        return date && date instanceof Date && !isNaN(date.getTime());
    }
    safeRefresh() {
        setTimeout(this.refresh.bind(this));
    }
    refresh() {
        this[vui_calendar_VIEW].xRef.innerHTML = '';
        this[vui_calendar_VIEW].xRef.appendChild(this.getTitle());
        this[vui_calendar_VIEW].xRef.appendChild(this.getNavigation());
        switch (this.view) {
            case VIEW.TYPE.YEARS:
                this[vui_calendar_VIEW].xRef.appendChild(this.getYearsView());
                break;
            case VIEW.TYPE.MONTHS:
                this[vui_calendar_VIEW].xRef.appendChild(this.getMonthsView());
                break;
            case VIEW.TYPE.DAYS:
            default:
                this[vui_calendar_VIEW].xRef.appendChild(this.getDaysView());
        }
    }
    getFirstDayOfMonth(date) {
        date = new Date(date);
        date.setDate(1);
        return date;
    }
    isPrevPossible() {
        switch (this.view) {
            case VIEW.TYPE.YEARS:
                return this._date.getFullYear() >= STEPS.YEARS;
            case VIEW.TYPE.MONTHS:
                return this._date.getFullYear() >= 1;
            case VIEW.TYPE.DAYS:
            default:
                return this._date.getMonth() >= 1 || this._date.getFullYear() >= 1;
        }
    }
    onNavigationPrev(event) {
        if (!this.isPrevPossible()) {
            console.warn(`Cannot go to previous period`);
            return void 0;
        }
        switch (this.view) {
            case VIEW.TYPE.YEARS:
                this._date.setFullYear(this._date.getFullYear() - STEPS.YEARS);
                break;
            case VIEW.TYPE.MONTHS:
                this._date.setFullYear(this._date.getFullYear() - 1);
                break;
            case VIEW.TYPE.DAYS:
            default:
                this._date.setMonth(this._date.getMonth() - 1);
        }
        this.safeRefresh();
        event.stopImmediatePropagation();
    }
    onNavigationToday(event) {
        this._date = new Date();
        this.date = this._date.toISOString();
        this.setViewType(VIEW.TYPE.DAYS, event);
        this.safeRefresh();
        event.stopImmediatePropagation();
    }
    onNavigationNext(event) {
        switch (this.view) {
            case VIEW.TYPE.YEARS:
                this._date.setFullYear(this._date.getFullYear() + STEPS.YEARS);
                break;
            case VIEW.TYPE.MONTHS:
                this._date.setFullYear(this._date.getFullYear() + 1);
                break;
            case VIEW.TYPE.DAYS:
            default:
                this._date.setMonth(this._date.getMonth() + 1);
        }
        this.safeRefresh();
        event.stopImmediatePropagation();
    }
    getNavigation() {
        let navigation = document.createElement(vui_calendar_ELEMENT.DIV);
        let prev = document.createElement(vui_calendar_ELEMENT.DIV);
        let today = document.createElement(vui_calendar_ELEMENT.DIV);
        let next = document.createElement(vui_calendar_ELEMENT.DIV);
        prev.classList.add(vui_calendar_CLASS.PREV.ELEMENT);
        today.classList.add(vui_calendar_CLASS.TODAY.ELEMENT);
        next.classList.add(vui_calendar_CLASS.NEXT.ELEMENT);
        prev.innerText = LABEL.PREV;
        today.innerText = LABEL.TODAY;
        next.innerText = LABEL.NEXT;
        prev.addEventListener(vui_calendar_EVENT.CLICK, this.onNavigationPrev.bind(this));
        today.addEventListener(vui_calendar_EVENT.CLICK, this.onNavigationToday.bind(this));
        next.addEventListener(vui_calendar_EVENT.CLICK, this.onNavigationNext.bind(this));
        navigation.classList.add(vui_calendar_CLASS.NAVIGATION.ELEMENT);
        navigation.appendChild(prev);
        navigation.appendChild(today);
        navigation.appendChild(next);
        return navigation;
    }
    setViewType(viewType, event) {
        this.view = viewType;
        this.safeRefresh();
        event.stopImmediatePropagation();
    }
    setYear(year, event) {
        this._date.setFullYear(year);
        this.setViewType(VIEW.TYPE.MONTHS, event);
    }
    setMonth(month, event) {
        this._date.setMonth(month);
        this.setViewType(VIEW.TYPE.DAYS, event);
    }
    appendTitleMonths(title) {
        let month = document.createElement(vui_calendar_ELEMENT.DIV);
        month.classList.add(vui_calendar_CLASS.MONTH.ELEMENT);
        month.innerText = MONTHS[this._date.getMonth()];
        month.addEventListener(vui_calendar_EVENT.CLICK, this.setViewType.bind(this, VIEW.TYPE.MONTHS));
        title.appendChild(month);
    }
    appendTitleYears(title) {
        let year = document.createElement(vui_calendar_ELEMENT.DIV);
        year.classList.add(vui_calendar_CLASS.YEAR.ELEMENT);
        year.innerText = `${this._date.getFullYear()}`;
        year.addEventListener(vui_calendar_EVENT.CLICK, this.setViewType.bind(this, VIEW.TYPE.YEARS));
        title.appendChild(year);
    }
    getTitle() {
        let title = document.createElement(vui_calendar_ELEMENT.DIV);
        title.classList.add(vui_calendar_CLASS.TITLE.ELEMENT);
        switch (this.view) {
            case VIEW.TYPE.YEARS:
                break;
            default:
            case VIEW.TYPE.DAYS:
                this.appendTitleMonths(title);
                this.appendTitleYears(title);
                break;
            case VIEW.TYPE.MONTHS:
                this.appendTitleYears(title);
        }
        return title;
    }
    getYearsView() {
        let table = document.createElement(vui_calendar_ELEMENT.TABLE);
        let tBody = table.createTBody();
        let row;
        let startYear = this._date.getFullYear() - (this._date.getFullYear() % STEPS.YEARS);
        table.classList.add(`host__${this.view}`);
        for (let year = 0; year < STEPS.YEARS; year += 1) {
            if (year % 4 === 0) {
                row = tBody.insertRow();
            }
            let cell = row.insertCell();
            let yearValue = startYear + year;
            if (yearValue < 0) {
                cell.innerHTML = '&nbsp;';
                cell.classList.add(vui_calendar_CLASS.OUT_OF_RANGE.ELEMENT);
                continue;
            }
            if (yearValue === this._date.getFullYear()) {
                cell.classList.add(vui_calendar_CLASS.CURRENT.ELEMENT);
            }
            cell.innerText = yearValue;
            cell.addEventListener(vui_calendar_EVENT.CLICK, this.setYear.bind(this, yearValue));
        }
        return table;
    }
    getMonthsView() {
        let table = document.createElement(vui_calendar_ELEMENT.TABLE);
        let tBody = table.createTBody();
        let row;
        table.classList.add(`host__${this.view}`);
        for (let month = 0; month < 12; month += 1) {
            if (month % 3 === 0) {
                row = tBody.insertRow();
            }
            let cell = row.insertCell();
            if (month === this._date.getMonth()) {
                cell.classList.add(vui_calendar_CLASS.CURRENT.ELEMENT);
            }
            cell.innerText = MONTHS_SHORT[month];
            cell.setAttribute(ATTRIBUTE.TITLE, MONTHS[month]);
            cell.addEventListener(vui_calendar_EVENT.CLICK, this.setMonth.bind(this, month));
        }
        return table;
    }
    _onDayPick(year, month, day, event) {
        let date = new Date(year, month, day);
        if (year < 100) {
            // UTC before 100 year fix
            date.setFullYear(year);
        }
        this.dispatchEvent(new CustomEvent(vui_calendar_EVENT.DATESELECTED, { detail: date }));
        event.stopImmediatePropagation();
    }
    setCalendarDayAttributes(cell, isPreviousMonth, currentDay, weekDay, currentDate) {
        if (!isPreviousMonth || (isPreviousMonth && this.isPrevPossible())) {
            cell.innerText = `${currentDay}`;
            cell.setAttribute(ATTRIBUTE.TITLE, `${DAYS[weekDay]}, ${currentDate.toLocaleDateString()}`);
            // if (this.params.onDayPick) {
            cell.addEventListener(vui_calendar_EVENT.CLICK, this._onDayPick
                .bind(this, currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()));
            // }
        }
        else {
            cell.classList.add(vui_calendar_CLASS.OUT_OF_RANGE.ELEMENT);
            cell.innerHTML = '&nbsp';
        }
    }
    addCellClasses(cell, isPreviousMonth, nextMonth, currentDay) {
        if (isPreviousMonth) {
            cell.classList.add(vui_calendar_CLASS.PREV.ELEMENT);
        }
        else if (nextMonth) {
            cell.classList.add(vui_calendar_CLASS.NEXT.ELEMENT);
        }
        else if (currentDay === this._date.getDate()) {
            cell.classList.add(vui_calendar_CLASS.CURRENT.ELEMENT);
        }
    }
    isPreviousMonth(firstRow, currentDay, weekDay) {
        return firstRow && currentDay > (weekDay + 1);
    }
    isNextMonth(firstRow, nextMonth, currentDay, currentDate) {
        return !firstRow && !nextMonth && currentDay > currentDate.getDate();
    }
    getDaysView() {
        let table = document.createElement(vui_calendar_ELEMENT.TABLE);
        let tHeadRow = (table.createTHead()).insertRow(0);
        let tBody = table.createTBody();
        table.classList.add(`host__${this.view}`);
        DAYS_SHORT.forEach((weekDay, index) => {
            let cell = tHeadRow.insertCell(index);
            cell.innerText = weekDay;
            cell.setAttribute(ATTRIBUTE.TITLE, DAYS[index]);
        });
        let firstRow = true;
        let nextMonth = false;
        let currentDate = this.getFirstDayOfMonth(this._date);
        let currentDay;
        currentDate.setDate(currentDate.getDate() - currentDate.getDay());
        for (let rowNumber = 0; rowNumber < DAYS_ROWS_QTY; rowNumber += 1) {
            let row = tBody.insertRow();
            for (let weekDay = 0; weekDay <= 6; weekDay += 1) {
                let cell = row.insertCell();
                currentDay = currentDate.getDate();
                let isPreviousMonth = this.isPreviousMonth(firstRow, currentDay, weekDay);
                this.setCalendarDayAttributes(cell, isPreviousMonth, currentDay, weekDay, currentDate);
                this.addCellClasses(cell, isPreviousMonth, nextMonth, currentDay);
                currentDate.setDate(currentDay + 1);
                if (this.isNextMonth(firstRow, nextMonth, currentDay, currentDate)) {
                    nextMonth = true;
                }
            }
            if (firstRow) {
                firstRow = false;
            }
        }
        return table;
    }
};
vui_calendar_VuiCalendar = VuiCalendar_1 = vui_calendar_decorate([
    VUI('vui-calendar', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host table.host__days tbody td.host__current {  background: var(--vc-color--highlight, #4680FE);  color: white;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host__title, .host__navigation, .host table tr, .host table.host__months, .host table.host__years, .host table.host__months tbody td, .host table.host__years tbody td {  display: flex; }  .host table tr {    justify-content: center; }  .host table.host__months tbody td, .host table.host__years tbody td {    justify-content: space-around; }.host__title > *:first-child {  text-align: left; }.host__title > *:last-child {  text-align: right; }.host, .host table.host__days thead td, .host table.host__days tbody td {  text-align: center; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }@keyframes ripple {  0% {    transform: scale(0, 0);    opacity: 1; }  20% {    transform: scale(25, 25);    opacity: 1; }  100% {    opacity: 0;    transform: scale(40, 40); } }@-webkit-keyframes sk-foldCubeAngle {  0%, 10% {    -webkit-transform: perspective(140px) rotateX(-180deg);    transform: perspective(140px) rotateX(-180deg);    opacity: 0; }  25%, 75% {    -webkit-transform: perspective(140px) rotateX(0deg);    transform: perspective(140px) rotateX(0deg);    opacity: 1; }  90%, 100% {    -webkit-transform: perspective(140px) rotateY(180deg);    transform: perspective(140px) rotateY(180deg);    opacity: 0; } }@keyframes popup-slide-up {  0% {    opacity: 0;    margin-top: -10px; }  100% {    opacity: 1;    margin-top: 0; } }@keyframes bounce {  0% {    transform: scale(0.9); }  50% {    transform: scale(1.05); }  100% {    transform: scale(0.95); } }@-webkit-keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@-webkit-keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }@keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }.host {  padding: 12px 0 10px 0;  width: 200px; }  .host__title {    font-size: 1.4em;    padding: 0 6px; }    .host__title > * {      flex: 1;      position: relative;      cursor: pointer;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }      .host__title > *:first-child {        padding-left: 15px; }      .host__title > *:last-child {        padding-right: 15px; }      .host__title > *:hover {        color: var(--vc-color--highlight, #4680FE);        transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host__navigation {    padding: 0 2px;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host__navigation > * {      color: var(--vc-color--highlight, #4680FE);      cursor: pointer;      flex: 1;      font-size: 1.1em;      padding: 5px 0;      position: relative;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }      .host__navigation > *:hover {        color: rgba(70, 128, 254, 0.7);        transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host table tr {    width: 100%; }  .host table thead td {    font-weight: 500; }  .host table tbody td {    color: var(--vc-color--default, #666);    padding: 2px 4px;    transition: background-color .2s ease-in-out; }    .host table tbody td:not(.host__out-of-range) {      cursor: pointer; }    .host table tbody td.host__prev, .host table tbody td.host__next {      color: #cccbcb; }  .host table.host__months, .host table.host__years {    padding: 5px 10px;    box-sizing: border-box;    width: 100%; }    .host table.host__months tbody, .host table.host__years tbody {      width: 100%; }      .host table.host__months tbody td, .host table.host__years tbody td {        padding: 5px 0;        transition: all var(--vc-transition-time, 0.2s) ease-in-out;        width: 100%; }        .host table.host__months tbody td:hover, .host table.host__years tbody td:hover {          color: var(--vc-color--highlight, #4680FE);          transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host table.host__days {    width: 100%; }    .host table.host__days thead td {      width: 24px;      padding: 4px 0; }    .host table.host__days tbody td {      color: #999;      border-radius: 50%;      line-height: 16px;      box-sizing: border-box;      padding: 4px 0;      position: relative;      height: 24px;      width: 24px;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }      .host table.host__days tbody td.host__prev, .host table.host__days tbody td.host__next {        color: #cccbcb; }      .host table.host__days tbody td.host__current {        box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.15); }        .host table.host__days tbody td.host__current:hover {          animation: bounce var(--vc-transition-time, 0.2s) ease-in-out; }      .host table.host__days tbody td:hover:not(.host__current) {        color: var(--vc-color--highlight, #4680FE);        background: #eee;        transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_calendar_metadata("design:paramtypes", [])
], vui_calendar_VuiCalendar);

//# sourceMappingURL=vui-calendar.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-calendar/index.js

if (customElements.get(vui_calendar_VuiCalendar.tag) === undefined) {
    customElements.define(vui_calendar_VuiCalendar.tag, vui_calendar_VuiCalendar);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-checkbox/component/vui-checkbox.js
var vui_checkbox_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_checkbox_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiCheckbox_1;


const vui_checkbox_VIEW = Symbol('view');
const vui_checkbox_EVENTS = Symbol('events');
const vui_checkbox_ELEMENT = {
    LABEL: 'label',
    SPAN: 'span'
};
const vui_checkbox_CLASS = {
    ELEMENT: 'host',
    MOD: {
        LABELED: 'host--labeled'
    },
    LABEL: {
        ELEMENT: 'host__label'
    },
    CHECK: {
        MOD: {
            CHECKED: 'host__check--checked'
        }
    }
};
const component_vui_checkbox_EVENTS = {
    CLICK: 'click',
    CHANGE: 'change'
};
let vui_checkbox_VuiCheckbox = VuiCheckbox_1 = class VuiCheckbox extends Component {
    constructor() {
        super(vui_checkbox_VIEW);
    }
    get observables() {
        return ['checked', 'name', 'disabled', 'value'];
    }
    get name() {
        return this.get('name');
    }
    get value() {
        return this.get('value');
    }
    get checked() {
        return this.hasAttribute('checked');
    }
    get disabled() {
        return this.hasAttribute('disabled');
    }
    set checked(value) {
        value
            ? this.setAttribute('checked', 'true')
            : this.removeAttribute('checked');
    }
    set disabled(value) {
        if (Boolean(value)) {
            this.setAttribute('disabled', 'true');
        }
        else {
            this.removeAttribute('disabled');
        }
    }
    initEvents() {
        this[vui_checkbox_EVENTS] = {
            onToggleClickBind: this._onToggleClick.bind(this),
        };
    }
    attachEvents() {
        this.addEventListener(component_vui_checkbox_EVENTS.CLICK, this[vui_checkbox_EVENTS].onToggleClickBind);
    }
    detachEvents() {
        this.removeEventListener(component_vui_checkbox_EVENTS.CLICK, this[vui_checkbox_EVENTS].onToggleClickBind);
    }
    initView() {
        this.shadowRoot.appendChild(VuiCheckbox_1.template.content.cloneNode(true));
        this[vui_checkbox_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_checkbox_CLASS.ELEMENT}`),
            root: this.shadowRoot.querySelector(vui_checkbox_ELEMENT.LABEL),
            check: this.shadowRoot.querySelector(vui_checkbox_ELEMENT.SPAN),
            label: this.shadowRoot.querySelector(`.${vui_checkbox_CLASS.LABEL.ELEMENT}`)
        };
    }
    bindView() {
        if (this.name) {
            this[vui_checkbox_VIEW].label.innerText = this.name;
            utilities_dom_UtilitiesDOM.addClass(this[vui_checkbox_VIEW].xRef, [vui_checkbox_CLASS.MOD.LABELED]);
        }
        else {
            utilities_dom_UtilitiesDOM.removeClass(this[vui_checkbox_VIEW].xRef, [vui_checkbox_CLASS.MOD.LABELED]);
        }
        utilities_dom_UtilitiesDOM.toggleClass(this.checked, this[vui_checkbox_VIEW].check, [vui_checkbox_CLASS.CHECK.MOD.CHECKED]);
    }
    _onToggleClick() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.bindView();
            this.dispatchEvent(new CustomEvent(component_vui_checkbox_EVENTS.CHANGE, {
                detail: {
                    checked: this.checked,
                    value: this.value
                },
                bubbles: true,
            }));
        }
    }
};
vui_checkbox_VuiCheckbox = VuiCheckbox_1 = vui_checkbox_decorate([
    VUI('vui-checkbox', {html: "<span class=\"host__check\">    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">        <defs>            <style>                .cls-1 {                    fill: none;                    stroke: #fff;                    stroke-linecap: round;                    stroke-linejoin: round;                    stroke-width: 2px;                }            </style>        </defs>        <g id=\"tick\">            <polyline class=\"cls-1\" points=\"6.34 11.29 10.59 15.54 17.66 8.46\"/>        </g>    </svg></span><label class=\"host__label\"></label>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host__check.host__check--checked {  background: var(--vc-color--highlight, #4680FE);  color: white;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host, .host__check {  display: flex; }  .host, .host__check {    justify-content: center; }  .host.host--labeled {    justify-content: flex-start; }  .host__check {    height: 100%;    flex-direction: column; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }.host.host--labeled .host__label {  margin-left: 10px; }.host__check {  background: transparent;  border: 1px solid rgba(0, 0, 0, 0.1);  border-radius: 3px;  width: 18px;  height: 18px;  cursor: pointer;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_checkbox_metadata("design:paramtypes", [])
], vui_checkbox_VuiCheckbox);

//# sourceMappingURL=vui-checkbox.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-checkbox/index.js

if (customElements.get(vui_checkbox_VuiCheckbox.tag) === undefined) {
    customElements.define(vui_checkbox_VuiCheckbox.tag, vui_checkbox_VuiCheckbox);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-counter/component/vui-counter.js
var vui_counter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_counter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiCounter_1;


const vui_counter_VIEW = Symbol('view');
const vui_counter_CLASS = {
    ELEMENT: 'host',
    MOD: {
        CIRCLED: 'host--circled'
    },
    COUNT: {
        ELEMENT: 'host__count'
    },
    LABEL: {
        ELEMENT: 'host__label'
    },
    MORE: {
        ELEMENT: 'host__more',
        MOD: {
            HIDDEN: 'host__more--hidden'
        }
    }
};
let vui_counter_VuiCounter = VuiCounter_1 = class VuiCounter extends Component {
    constructor() {
        super(vui_counter_VIEW);
    }
    get observables() {
        return ['count', 'label', 'max', 'circled'];
    }
    get visible() {
        return this.get('visible', false);
    }
    get circled() {
        return this.get('circled', false);
    }
    get max() {
        return this.get('max', 99);
    }
    get count() {
        return this.get('count', 0);
    }
    get label() {
        return this.get('label');
    }
    initView() {
        this.shadowRoot.appendChild(VuiCounter_1.template.content.cloneNode(true));
        this[vui_counter_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_counter_CLASS.ELEMENT}`),
            label: this.shadowRoot.querySelector(`.${vui_counter_CLASS.LABEL.ELEMENT}`),
            count: this.shadowRoot.querySelector(`.${vui_counter_CLASS.COUNT.ELEMENT}`),
            more: this.shadowRoot.querySelector(`.${vui_counter_CLASS.MORE.ELEMENT}`)
        };
    }
    bindView() {
        if (this.label) {
            this[vui_counter_VIEW].label.innerHTML = this.label;
        }
        if (this.circled) {
            utilities_dom_UtilitiesDOM.toggleClass(this.count <= this.max, this[vui_counter_VIEW].more, [vui_counter_CLASS.MORE.MOD.HIDDEN]);
        }
        this[vui_counter_VIEW].count.innerHTML = `${this.circled && this.count > this.max ? this.max : this.count}`;
        utilities_dom_UtilitiesDOM.toggleClass(this.circled, this[vui_counter_VIEW].xRef, [vui_counter_CLASS.MOD.CIRCLED]);
    }
};
vui_counter_VuiCounter = VuiCounter_1 = vui_counter_decorate([
    VUI('vui-counter', {html: "<div class=\"host__label\"></div><div class=\"host__count\"></div><div class=\"host__more host__more--hidden\">    <vui-icon-add size=\"medium\" activer=\"true\"></vui-icon-add></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host__count {  display: flex; }  .host, .host__count {    justify-content: center; }  .host__count {    height: 100%;    flex-direction: column; }.host.host--circled {  text-align: center; }.host__more.host__more--hidden {  display: none !important; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }  .host {    color: var(--vc-color--default, #666); }.host__more {  position: absolute;  top: -6px;  right: -7px; }.host.host--circled {  border-radius: 50%;  background: #fff;  font-size: 12px;  position: relative;  width: 10px;  height: 10px;  padding: 4px;  border: 1px solid var(--vc-grid-vertical-border, #eaeaea); }"}),
    vui_counter_metadata("design:paramtypes", [])
], vui_counter_VuiCounter);

//# sourceMappingURL=vui-counter.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-counter/index.js

if (customElements.get(vui_counter_VuiCounter.tag) === undefined) {
    customElements.define(vui_counter_VuiCounter.tag, vui_counter_VuiCounter);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-dementor/component/vui-dementor.js
var vui_dementor_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_dementor_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiDementor_1;

const vui_dementor_VIEW = Symbol('view');
const vui_dementor_EVENTS = Symbol('events');
const vui_dementor_ELEMENT = {
    BUTTON: 'vui-button',
    ICON_ERROR: 'vui-icon-error',
    POPUP: 'vui-popup',
    SELECTLIST: 'vui-selectlist',
    TOOLTIP: 'vui-tooltip'
};
const vui_dementor_EVENT = {
    CLICK: 'click',
    LIST_ELEMENT_CLICKED: 'listItemSelected',
    ERROR_SELECTED: 'errorSelected'
};
let vui_dementor_VuiDementor = VuiDementor_1 = class VuiDementor extends Component {
    constructor() {
        super(vui_dementor_VIEW);
    }
    get observables() {
        return ['label', 'errors', 'disabled'];
    }
    get disabled() {
        return this.get('disabled', false);
    }
    set disabled(value) {
        this.set('disabled', value);
        if (this.disabled && this[vui_dementor_VIEW].popup.isOpened()) {
            this[vui_dementor_VIEW].popup.close();
        }
    }
    get label() {
        return this.get('label', 'View errors');
    }
    get errors() {
        return this.get('errors', '');
    }
    set visible(value) {
        if (this[vui_dementor_VIEW]) {
            this[vui_dementor_VIEW].popup.close();
        }
        else {
            this.initView();
        }
        this.reconnectEvents();
        this.set('visible', value);
    }
    initView() {
        this.shadowRoot.appendChild(VuiDementor_1.template.content.cloneNode(true));
        this[vui_dementor_VIEW] = {
            trigger: this.shadowRoot.querySelector(vui_dementor_ELEMENT.BUTTON),
            triggerIcon: this.shadowRoot.querySelector(vui_dementor_ELEMENT.ICON_ERROR),
            popup: this.shadowRoot.querySelector(vui_dementor_ELEMENT.POPUP),
            list: this.shadowRoot.querySelector(vui_dementor_ELEMENT.SELECTLIST),
            tooltip: this.shadowRoot.querySelector(vui_dementor_ELEMENT.TOOLTIP)
        };
    }
    bindView() {
        this[vui_dementor_VIEW].trigger.title = this.label;
        this[vui_dementor_VIEW].triggerIcon.title = this.label;
        this[vui_dementor_VIEW].tooltip.attach(this[vui_dementor_VIEW].trigger);
        this[vui_dementor_VIEW].tooltip.attach(this[vui_dementor_VIEW].triggerIcon);
        this[vui_dementor_VIEW].list.options = this.errors;
        this[vui_dementor_VIEW].trigger.disabled = this.disabled;
    }
    initEvents() {
        this[vui_dementor_EVENTS] = {
            onTriggerClickedBind: this.onTriggerClicked.bind(this),
            onOptionSingleClickedBind: this.bubble.bind(this, vui_dementor_EVENT.ERROR_SELECTED)
        };
    }
    attachEvents() {
        this[vui_dementor_VIEW].trigger.addEventListener(vui_dementor_EVENT.CLICK, this[vui_dementor_EVENTS].onTriggerClickedBind);
        this[vui_dementor_VIEW].list.addEventListener(vui_dementor_EVENT.LIST_ELEMENT_CLICKED, this[vui_dementor_EVENTS].onOptionSingleClickedBind);
    }
    detachEvents() {
        this[vui_dementor_VIEW].trigger.removeEventListener(vui_dementor_EVENT.CLICK, this[vui_dementor_EVENTS].onTriggerClickedBind);
        this[vui_dementor_VIEW].list.removeEventListener(vui_dementor_EVENT.LIST_ELEMENT_CLICKED, this[vui_dementor_EVENTS].onOptionSingleClickedBind);
    }
    onTriggerClicked(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        if (!this[vui_dementor_VIEW].popup.isOpened()) {
            this[vui_dementor_VIEW].list.selected = undefined;
        }
        this[vui_dementor_VIEW].popup.toggle(this[vui_dementor_VIEW].trigger);
    }
};
vui_dementor_VuiDementor = VuiDementor_1 = vui_dementor_decorate([
    VUI('vui-dementor', {html: "<vui-button>    <vui-icon-error hoverable=\"true\" size=\"large\"></vui-icon-error></vui-button><vui-popup closeondocumentmousedown=\"true\" position=\"bottom\" locked=\"false\" autohide=\"true\">    <vui-selectlist mode=\"select\" justification=\"left\"></vui-selectlist></vui-popup><vui-tooltip></vui-tooltip>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }"}),
    vui_dementor_metadata("design:paramtypes", [])
], vui_dementor_VuiDementor);

//# sourceMappingURL=vui-dementor.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-dementor/index.js

if (customElements.get(vui_dementor_VuiDementor.tag) === undefined) {
    customElements.define(vui_dementor_VuiDementor.tag, vui_dementor_VuiDementor);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-drop-area/component/vui-drop-area.js
var vui_drop_area_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_drop_area_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiDropArea_1;


const vui_drop_area_VIEW = Symbol('view');
const vui_drop_area_CLASS = {
    ELEMENT: 'host',
    MOD: {
        LINEAR: 'host--linear',
        ROUNDED: 'host--rounded'
    }
};
let vui_drop_area_VuiDropArea = VuiDropArea_1 = class VuiDropArea extends Component {
    constructor() {
        super(vui_drop_area_VIEW);
    }
    get observables() {
        return ['label', 'mode'];
    }
    get label() {
        return this.get('label', '-');
    }
    get mode() {
        return this.get('mode', 'linear');
    }
    initView() {
        this.shadowRoot.appendChild(VuiDropArea_1.template.content.cloneNode(true));
        this[vui_drop_area_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_drop_area_CLASS.ELEMENT}`)
        };
    }
    bindView() {
        this[vui_drop_area_VIEW].xRef.innerHTML = this.mode === 'linear' ? this.label : '';
        utilities_dom_UtilitiesDOM.toggleClass(this.mode === 'linear', this[vui_drop_area_VIEW].xRef, [vui_drop_area_CLASS.MOD.LINEAR]);
        utilities_dom_UtilitiesDOM.toggleClass(this.mode === 'rounded', this[vui_drop_area_VIEW].xRef, [vui_drop_area_CLASS.MOD.ROUNDED]);
    }
};
vui_drop_area_VuiDropArea = VuiDropArea_1 = vui_drop_area_decorate([
    VUI('vui-drop-area', {html: "-", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  text-align: center; }.host--hiden {  display: none !important; }.host {  color: var(--vc-color--light, #bbb);  cursor: default; }  .host--linear {    padding: 12px 6px; }  .host--rounded {    display: inline-block;    pointer-events: none;    border: 1px dashed var(--vc-color--light, #bbb);    border-radius: 12px;    flex-basis: 24px;    flex-shrink: 0;    height: 24px;    width: 24px;    margin: 4px 5px 0;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host--rounded:hover {      background: var(--vc-capsule-shadow, 0 7px 5px -5px rgba(70, 128, 254, 0.7));      transition: background var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_drop_area_metadata("design:paramtypes", [])
], vui_drop_area_VuiDropArea);

//# sourceMappingURL=vui-drop-area.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-drop-area/index.js

if (customElements.get(vui_drop_area_VuiDropArea.tag) === undefined) {
    customElements.define(vui_drop_area_VuiDropArea.tag, vui_drop_area_VuiDropArea);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resizeObserver/lib/constants.js
const RESIZE_OBSERVER = 'ResizeObserver';
const constants_ELEMENT = {
    IFRAME: 'iframe'
};
const constants_EVENT = {
    RESIZE: 'resize'
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resizeObserver/lib/resize.observer.js


const iFrameStyles = {
    position: 'absolute',
    width: '100%',
    height: '100%',
    left: 0,
    top: 0,
    border: 'none',
    opacity: 0,
    pointerEvents: 'none',
    zIndex: -2147483647
};
class ResizeObserverEntryObject {
    constructor(target, contentRect = null) {
        this.target = target;
        this.contentRect = contentRect;
    }
}
class resize_observer_ResizeObserver {
    constructor(callback) {
        this.callback = callback;
        this.observationTargets = [];
        this.registeredIframes = [];
        this.requestAnimationFrameId = null;
        this.listener = () => {
            if (!this.requestAnimationFrameId) {
                this.requestAnimationFrameId = requestAnimationFrame(this.notify.bind(this));
            }
        };
        if (RESIZE_OBSERVER in window) {
            return new window[RESIZE_OBSERVER](callback);
        }
    }
    observe(target) {
        if (this.observationTargets.indexOf(target) !== -1) {
            return void 0;
        }
        let pushed = this.observationTargets.push(target);
        let element = this.renderIframe();
        element.onload = () => {
            element.contentWindow.addEventListener(constants_EVENT.RESIZE, this.listener);
            this.registeredIframes[pushed - 1] = element;
            this.listener();
        };
        if (window.getComputedStyle(target).position === 'static') {
            target.style.position = 'relative';
        }
        if (target.shadowRoot) {
            target.shadowRoot.appendChild(element);
        }
        else {
            target.appendChild(element);
        }
    }
    unobserve(target) {
        let index = this.observationTargets.indexOf(target);
        if (index === -1) {
            return void 0;
        }
        this.removeResizeEvent(this.registeredIframes[index]);
        this.observationTargets.splice(index, 1);
        this.removeIframe(this.registeredIframes[index]);
        this.registeredIframes.splice(index, 1);
    }
    disconnect() {
        this.observationTargets.forEach((target, index) => {
            this.removeResizeEvent(this.registeredIframes[index]);
            this.removeIframe(this.registeredIframes[index]);
        });
        this.observationTargets.splice(0);
    }
    notify() {
        this.requestAnimationFrameId = null;
        let entries = this.observationTargets.map((target) => {
            return new ResizeObserverEntryObject(target, target.getBoundingClientRect());
        });
        this.callback(entries, this);
    }
    renderIframe() {
        let iFrame = utilities_dom_UtilitiesDOM.create(constants_ELEMENT.IFRAME);
        Object.keys(iFrameStyles).forEach((property) => {
            iFrame.style[property] = iFrameStyles[property];
        });
        return iFrame;
    }
    removeResizeEvent(iFrame) {
        iFrame.removeEventListener(constants_EVENT.RESIZE, this.listener);
    }
    removeIframe(iFrame) {
        iFrame.parentElement.removeChild(iFrame);
    }
}
//# sourceMappingURL=resize.observer.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resizeObserver/index.js


//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-footer/component/vui-footer.js
var vui_footer_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_footer_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiFooter_1;


const vui_footer_VIEW = Symbol('view');
const vui_footer_STATE = Symbol('state');
const vui_footer_EVENTS = Symbol('events');
const vui_footer_CLASS = {
    ELEMENT: 'host'
};
const vui_footer_EVENT = {
    FOOTERSIZECHANGED: 'footerSizeChanged'
};
let vui_footer_VuiFooter = VuiFooter_1 = class VuiFooter extends Component {
    constructor() {
        super(vui_footer_VIEW);
    }
    get observables() {
        return [
            'marked-visible',
            'marked-enabled',
            'marked-count',
            'marked-label',
            'changed-visible',
            'changed-enabled',
            'changed-count',
            'changed-label',
            'pagination-visible',
            'pagination-pages',
            'pagination-current',
            'pagination-items',
            'pagination-next',
            'pagination-prev'
        ];
    }
    get visible() {
        return this.get('visible', false);
    }
    initView() {
        this.shadowRoot.appendChild(VuiFooter_1.template.content.cloneNode(true));
        this[vui_footer_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_footer_CLASS.ELEMENT}`),
            pagination: this.shadowRoot.querySelector('slot[name="pagination"]').assignedNodes()[0],
            changed: this.shadowRoot.querySelector('slot[name="changed"]').assignedNodes()[0],
            marked: this.shadowRoot.querySelector('slot[name="marked"]').assignedNodes()[0]
        };
    }
    attachEvents() {
        this[vui_footer_STATE].resizeObserver.observe(this[vui_footer_VIEW].xRef);
    }
    detachEvents() {
        this[vui_footer_STATE].resizeObserver.unobserve(this[vui_footer_VIEW].xRef);
    }
    initState() {
        this[vui_footer_STATE] = {
            height: 0,
            resizeObserver: new resize_observer_ResizeObserver((entries) => {
                let currentHeight = entries[0].contentRect ?
                    entries[0].contentRect.height : entries[0].target.getBoundingClientRect().height;
                if (currentHeight !== this[vui_footer_STATE].height) {
                    this[vui_footer_STATE].height = currentHeight;
                    this.dispatchEvent(new CustomEvent(vui_footer_EVENT.FOOTERSIZECHANGED, { bubbles: true }));
                }
            })
        };
    }
};
vui_footer_VuiFooter = VuiFooter_1 = vui_footer_decorate([
    VUI('vui-footer', {html: "<div class=\"host__status\">    <div>        <slot name=\"marked\"></slot>    </div>    <div>        <slot name=\"changed\"></slot>    </div></div><div class=\"host__pagination\">    <slot name=\"pagination\"></slot></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host__status, .host__status div, .host__pagination {  display: flex; }  .host__status div {    justify-content: center; }  .host {    justify-content: space-between; }  .host__status div {    height: 100%;    flex-direction: column; }.host__status, .host__pagination {  text-align: center; }.host {  background: var(--vc-header-background, #ffffff);  box-shadow: var(--vc-grid-layer-shadow, 0 0 20px 0 rgba(0, 0, 0, 0.1));  border-bottom-left-radius: var(--vc-grid-border-radius, 20px);  border-bottom-right-radius: var(--vc-grid-border-radius, 20px);  height: 40px; }  .host__status {    margin-left: 20px; }    .host__status div {      margin-right: 20px; }  .host__pagination {    margin-right: 20px; }"}),
    vui_footer_metadata("design:paramtypes", [])
], vui_footer_VuiFooter);

//# sourceMappingURL=vui-footer.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-footer/index.js

if (customElements.get(vui_footer_VuiFooter.tag) === undefined) {
    customElements.define(vui_footer_VuiFooter.tag, vui_footer_VuiFooter);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-gooey/component/vui-gooey.js
var vui_gooey_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_gooey_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiGooey_1;


const vui_gooey_VIEW = Symbol('view');
const vui_gooey_EVENTS = Symbol('events');
const vui_gooey_STATE = Symbol('state');
const vui_gooey_EVENT = {
    DRAG_ENTER: 'dragenter',
    DRAG_LEAVE: 'dragleave',
    SORTED: 'sorted',
    GROUPED: 'grouped',
    FILTERED: 'filtered',
    CLICKED: 'clicked',
    CLICK: 'click'
};
const vui_gooey_ELEMENT = {
    ICON_FILTER: 'vui-icon-filter',
    ICON_GROUP: 'vui-icon-group',
    ICON_SORT: 'vui-icon-sort'
};
const vui_gooey_CLASS = {
    HIDDEN: 'hidden',
    RIPPLE: 'button--click',
    HOST_MENU_ITEM_HIDDEN: 'host__menu__item--hidden'
};
const MENUITEMCLASSES = [
    'host__menu__item--1',
    'host__menu__item--2',
    'host__menu__item--3',
    'host__menu__item--4'
];
const vui_gooey_ICO_ACCENT = 2;
const ICO_ACCENT_HOVER = 1;
let vui_gooey_VuiGooey = VuiGooey_1 = class VuiGooey extends Component {
    constructor() {
        super(vui_gooey_VIEW);
    }
    get observables() {
        return ['ripple', 'settings', 'dragging', 'filterable', 'sortable', 'groupable'];
    }
    get ripple() {
        return this.get('ripple', false);
    }
    set ripple(value) {
        this.set('ripple', value);
    }
    get dragging() {
        return this.get('dragging', false);
    }
    get settings() {
        return this.get('settings', true);
    }
    get filterable() {
        return false;
        // return this.get('filterable');
    }
    get sortable() {
        return this.get('sortable');
    }
    get groupable() {
        return this.get('groupable');
    }
    attach(additionalDraggableXRefs, dragAndDrop) {
        if (this[vui_gooey_STATE].attached) {
            dragAndDrop.unsetDrop(this[vui_gooey_VIEW].filterXRef);
            dragAndDrop.unsetDrop(this[vui_gooey_VIEW].groupXRef);
            dragAndDrop.unsetDrop(this[vui_gooey_VIEW].sortXRef);
            additionalDraggableXRefs.forEach((el) => {
                dragAndDrop.disconnect(el, this[vui_gooey_VIEW].filterXRef);
                dragAndDrop.disconnect(el, this[vui_gooey_VIEW].groupXRef);
                dragAndDrop.disconnect(el, this[vui_gooey_VIEW].sortXRef);
            });
        }
        dragAndDrop.setDrop(this[vui_gooey_VIEW].filterXRef, { drop: this._onFilterDrop.bind(this) });
        dragAndDrop.setDrop(this[vui_gooey_VIEW].groupXRef, { drop: this._onGroupDrop.bind(this) });
        dragAndDrop.setDrop(this[vui_gooey_VIEW].sortXRef, { drop: this._onSortDrop.bind(this) });
        additionalDraggableXRefs.forEach((el) => {
            dragAndDrop.connect(el, this[vui_gooey_VIEW].filterXRef);
            dragAndDrop.connect(el, this[vui_gooey_VIEW].groupXRef);
            dragAndDrop.connect(el, this[vui_gooey_VIEW].sortXRef);
        });
        this[vui_gooey_STATE].attached = true;
    }
    _clear() {
        this[vui_gooey_VIEW].filterXRef.accent = vui_gooey_ICO_ACCENT;
        this[vui_gooey_VIEW].groupXRef.accent = vui_gooey_ICO_ACCENT;
        this[vui_gooey_VIEW].sortXRef.accent = vui_gooey_ICO_ACCENT;
        utilities_dom_UtilitiesDOM.removeClass(this[vui_gooey_VIEW].menuOpen, [vui_gooey_CLASS.HIDDEN]);
    }
    _onFilterDrop(params) {
        this._clear();
        this.dispatchEvent(new CustomEvent(vui_gooey_EVENT.FILTERED, { detail: params.event.dataTransfer.getData('text'), bubbles: true }));
    }
    _onGroupDrop(params) {
        this._clear();
        this.dispatchEvent(new CustomEvent(vui_gooey_EVENT.GROUPED, { detail: params.event.dataTransfer.getData('text'), bubbles: true }));
    }
    _onSortDrop(params) {
        this._clear();
        this.dispatchEvent(new CustomEvent(vui_gooey_EVENT.SORTED, { detail: params.event.dataTransfer.getData('text'), bubbles: true }));
    }
    initState() {
        this[vui_gooey_STATE] = {
            attached: false
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiGooey_1.template.content.cloneNode(true));
        this[vui_gooey_VIEW] = {
            menu: this.shadowRoot.querySelector('.host__menu'),
            menuOpen: this.shadowRoot.querySelector('.host__menu-open'),
            gooeyIcon: this.shadowRoot.querySelector('.host__icon--draggable'),
            viewSettingsIcon: this.shadowRoot.querySelector('.host__icon--clickable'),
            menuOpenButton: this.shadowRoot.querySelector('.host__menu-open__button'),
            filterXRef: this.shadowRoot.querySelector(vui_gooey_ELEMENT.ICON_FILTER).parentElement,
            groupXRef: this.shadowRoot.querySelector(vui_gooey_ELEMENT.ICON_GROUP).parentElement,
            sortXRef: this.shadowRoot.querySelector(vui_gooey_ELEMENT.ICON_SORT).parentElement
        };
        utilities_dom_UtilitiesDOM.addClass(this[vui_gooey_VIEW].gooeyIcon, [vui_gooey_CLASS.HIDDEN]);
    }
    initEvents() {
        this[vui_gooey_EVENTS] = {
            onGooeyDragEnterBind: this._onGooeyDragEnter.bind(this),
            onGooeyDragLeaveBind: this._onGooeyDragLeave.bind(this),
            onGroupDragEnterBind: this._onGroupDragEnter.bind(this),
            onGroupDragLeaveBind: this._onGroupDragLeave.bind(this),
            onSortDragEnterBind: this._onSortDragEnter.bind(this),
            onSortDragLeaveBind: this._onSortDragLeave.bind(this),
            onFilterDropBind: this._onFilterDrop.bind(this),
            onGroupDropBind: this._onGroupDrop.bind(this),
            onSortDropBind: this._onSortDrop.bind(this),
            onGooeyClickBind: this._onGooeyClick.bind(this)
        };
    }
    attachEvents() {
        this.addEventListener(vui_gooey_EVENT.CLICK, this[vui_gooey_EVENTS].onGooeyClickBind);
        this.addEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onGooeyDragEnterBind);
        this.addEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onGooeyDragLeaveBind);
        this[vui_gooey_VIEW].groupXRef.addEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onGroupDragEnterBind);
        this[vui_gooey_VIEW].groupXRef.addEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onGroupDragLeaveBind);
        this[vui_gooey_VIEW].sortXRef.addEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onSortDragEnterBind);
        this[vui_gooey_VIEW].sortXRef.addEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onSortDragLeaveBind);
    }
    detachEvents() {
        this.removeEventListener(vui_gooey_EVENT.CLICK, this[vui_gooey_EVENTS].onGooeyClickBind);
        this.removeEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onGooeyDragEnterBind);
        this.removeEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onGooeyDragLeaveBind);
        this[vui_gooey_VIEW].groupXRef.removeEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onGroupDragEnterBind);
        this[vui_gooey_VIEW].groupXRef.removeEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onGroupDragLeaveBind);
        this[vui_gooey_VIEW].sortXRef.removeEventListener(vui_gooey_EVENT.DRAG_ENTER, this[vui_gooey_EVENTS].onSortDragEnterBind);
        this[vui_gooey_VIEW].sortXRef.removeEventListener(vui_gooey_EVENT.DRAG_LEAVE, this[vui_gooey_EVENTS].onSortDragLeaveBind);
    }
    bindView() {
        utilities_dom_UtilitiesDOM.toggleClass(this._isDroppable() && this.dragging, this[vui_gooey_VIEW].menuOpenButton, [vui_gooey_CLASS.RIPPLE]);
        utilities_dom_UtilitiesDOM.toggleClass(this._isDroppable() && this.dragging, this[vui_gooey_VIEW].viewSettingsIcon, [vui_gooey_CLASS.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(this._isDroppable() && !this.dragging, this[vui_gooey_VIEW].gooeyIcon, [vui_gooey_CLASS.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(this._isDroppable() && this.dragging, this[vui_gooey_VIEW].menu, ['host__menu--active']);
        this._bindMenuItems();
    }
    _isDroppable() {
        return this.groupable || this.sortable || this.filterable;
    }
    _bindMenuItems() {
        let i = 1;
        utilities_dom_UtilitiesDOM.removeClass(this[vui_gooey_VIEW].sortXRef, MENUITEMCLASSES);
        utilities_dom_UtilitiesDOM.removeClass(this[vui_gooey_VIEW].groupXRef, MENUITEMCLASSES);
        utilities_dom_UtilitiesDOM.toggleClass(!this.groupable, this[vui_gooey_VIEW].groupXRef, [vui_gooey_CLASS.HOST_MENU_ITEM_HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(!this.sortable, this[vui_gooey_VIEW].sortXRef, [vui_gooey_CLASS.HOST_MENU_ITEM_HIDDEN]);
        if (this.groupable) {
            utilities_dom_UtilitiesDOM.addClass(this[vui_gooey_VIEW].groupXRef, [`host__menu__item--${i}`]);
            i++;
        }
        if (this.sortable) {
            utilities_dom_UtilitiesDOM.addClass(this[vui_gooey_VIEW].sortXRef, [`host__menu__item--${i}`]);
        }
    }
    _onGroupDragEnter(event) {
        event.preventDefault();
    }
    _onGroupDragLeave(event) {
        event.preventDefault();
    }
    _onSortDragEnter(event) {
        event.preventDefault();
    }
    _onSortDragLeave(event) {
        event.preventDefault();
    }
    _onGooeyDragEnter(event) {
        event.preventDefault();
        if (!this.dragging) {
            return void 0;
        }
        if (this._isDroppable()) {
            utilities_dom_UtilitiesDOM.addClass(this[vui_gooey_VIEW].menuOpen, [vui_gooey_CLASS.HIDDEN]);
        }
    }
    _onGooeyDragLeave(event) {
        event.preventDefault();
        if (!this.dragging) {
            return void 0;
        }
        if (!utilities_dom_UtilitiesDOM.isInDescendants(event.relatedTarget, event.currentTarget) && this._isDroppable()) {
            utilities_dom_UtilitiesDOM.removeClass(this[vui_gooey_VIEW].menuOpen, [vui_gooey_CLASS.HIDDEN]);
        }
    }
    _onGooeyClick() {
        if (!this.settings) {
            return void 0;
        }
        this.dispatchEvent(new CustomEvent(vui_gooey_EVENT.CLICKED));
    }
};
vui_gooey_VuiGooey = VuiGooey_1 = vui_gooey_decorate([
    VUI('vui-gooey', {html: "<nav class=\"host__menu\">    <div class=\"host__menu-open\"></div>    <div class=\"host__menu-open__button\" data-gooey>        <span class=\"host__icon--draggable\">            <span class=\"hamburger hamburger-1\"></span>            <span class=\"hamburger hamburger-2\"></span>            <span class=\"hamburger hamburger-3\"></span>        </span>        <div class=\"host__icon--clickable\">            <vui-icon-preferences accent=\"2\" size=\"medium\" hoverable=\"false\"></vui-icon-preferences>        </div>    </div>    <div class=\"host__menu__item host__menu__item--hidden host__menu__item--1\">        <vui-icon-filter accent=\"2\" size=\"medium\"></vui-icon-filter>    </div>    <div class=\"host__menu__item host__menu__item--hidden host__menu__item--2\">        <vui-icon-group accent=\"2\" size=\"medium\"></vui-icon-group>    </div>    <div class=\"host__menu__item host__menu__item--hidden host__menu__item--3\">        <vui-icon-sort accent=\"2\" size=\"medium\"></vui-icon-sort>    </div></nav><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"0\" width=\"0\">    <defs>        <filter id=\"shadowed-goo\">            <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"10\"/>            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"goo\"/>            <feGaussianBlur in=\"goo\" stdDeviation=\"3\" result=\"shadow\"/>            <feColorMatrix in=\"shadow\" mode=\"matrix\" values=\"0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 1 -0.2\"                           result=\"shadow\"/>            <feOffset in=\"shadow\" dx=\"1\" dy=\"1\" result=\"shadow\"/>            <feComposite in2=\"shadow\" in=\"goo\" result=\"goo\"/>            <feComposite in2=\"goo\" in=\"SourceGraphic\" result=\"mix\"/>        </filter>    </defs></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host .host__menu-open__button {  position: relative;  display: inline-block;  padding: 0;  border: none;  background: none;  color: #286aab;  font-size: 1.4em;  overflow: visible;  -webkit-transition: color 0.7s;  transition: color 0.7s;  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }  .host .button--click.host__menu-open__button, .host .host__menu-open__button:focus {    outline: none; }  .host .host__menu-open__button:after {    position: absolute;    top: 50%;    left: 50%;    margin: -35px 0 0 -35px;    width: 70px;    height: 70px;    border-radius: 50%;    content: '';    opacity: 0;    pointer-events: none; }  .host .host__menu-open__button:before {    position: absolute;    top: 50%;    left: 50%;    margin: -35px 0 0 -35px;    width: 70px;    height: 70px;    border-radius: 50%;    content: '';    opacity: 0;    pointer-events: none; }  .host .host__menu-open__button:before, .host .host__menu-open__button:after {    box-shadow: 0 0 0 2px rgba(111, 148, 182, 0.5); }  .host .button--click.host__menu-open__button::before {    -webkit-animation: anim-effect-ivana-1 1.5s forwards infinite;    animation: anim-effect-ivana-1 1.5s forwards infinite; }  .host .button--click.host__menu-open__button::after {    -webkit-animation: anim-effect-ivana-2 1.5s forwards infinite;    animation: anim-effect-ivana-2 1.5s forwards infinite; }.host .host__menu {  filter: url(\"#shadowed-goo\"); }.host .host__menu__item, .host .host__menu-open__button {  font-size: 10px;  background: var(--vc-color--highlight, #4680FE);  border-radius: 100%;  width: 26px;  height: 26px;  position: absolute;  top: 12px;  right: 20px;  color: white;  line-height: 28px;  transform: translate3d(0, 0, 0);  transition: transform ease-out 300ms, background 0.2s ease-in-out, box-shadow 0.2s ease-in-out; }  .host .host__menu__item:hover, .host .host__menu-open__button:hover {    box-shadow: 0 7px 5px -5px var(--vc-color--highlight, #4680FE);    transition: background 0.2s ease-in-out, box-shadow 0.2s ease-in-out;    cursor: pointer; }.host .host__menu__item {  display: flex; }  .host .host__menu__item {    justify-content: center; }.host .host__menu {  text-align: right; }.host .host__menu__item, .host .host__menu-open__button {  text-align: center; }.host .host__menu-open, .host .host__icon--draggable.hidden, .host .host__icon--clickable.hidden, .host__menu__item--hidden {  display: none !important; }@keyframes ripple {  0% {    transform: scale(0, 0);    opacity: 1; }  20% {    transform: scale(25, 25);    opacity: 1; }  100% {    opacity: 0;    transform: scale(40, 40); } }@-webkit-keyframes sk-foldCubeAngle {  0%, 10% {    -webkit-transform: perspective(140px) rotateX(-180deg);    transform: perspective(140px) rotateX(-180deg);    opacity: 0; }  25%, 75% {    -webkit-transform: perspective(140px) rotateX(0deg);    transform: perspective(140px) rotateX(0deg);    opacity: 1; }  90%, 100% {    -webkit-transform: perspective(140px) rotateY(180deg);    transform: perspective(140px) rotateY(180deg);    opacity: 0; } }@keyframes popup-slide-up {  0% {    opacity: 0;    margin-top: -10px; }  100% {    opacity: 1;    margin-top: 0; } }@keyframes bounce {  0% {    transform: scale(0.9); }  50% {    transform: scale(1.05); }  100% {    transform: scale(0.95); } }@-webkit-keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@-webkit-keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }@keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }.host .host__menu-open__button {  pointer-events: all; }.host .host__menu__item svg * {  pointer-events: none; }.host .hamburger {  pointer-events: none;  width: 10px;  height: 1.5px;  background: white;  display: block;  position: absolute;  top: 50%;  left: 50%;  margin-left: -5px;  margin-top: -0.75px;  transition: transform 300ms; }.host .hamburger-1 {  transform: translate3d(0, -4px, 0); }.host .hamburger-2 {  transform: translate3d(0, 0, 0); }.host .hamburger-3 {  transform: translate3d(0, 4px, 0); }.host .host__menu-open.hidden + .host__menu-open__button .hamburger-1 {  transform: translate3d(0, 0, 0) rotate(45deg); }.host .host__menu-open.hidden + .host__menu-open__button .hamburger-2 {  transform: translate3d(0, 0, 0) scale(0.1, 1); }.host .host__menu-open.hidden + .host__menu-open__button .hamburger-3 {  transform: translate3d(0, 0, 0) rotate(-45deg); }.host .host__menu {  pointer-events: none;  height: 40px;  box-sizing: border-box;  font-size: 20px;  position: absolute;  right: 0;  width: 200px;  z-index: 99; }  .host .host__menu--active {    pointer-events: all; }.host .host__menu__item.hover {  background: white;  color: var(--vc-color--highlight, #4680FE); }.host .host__menu__item > div {  background-position: center;  background-repeat: no-repeat;  background-size: contain;  margin: 5px auto;  position: relative;  height: 100%; }.host .host__menu__item:nth-child(3) {  transition-duration: 280ms; }.host .host__menu__item:nth-child(4) {  transition-duration: 280ms; }.host .host__menu__item:nth-child(5) {  transition-duration: 280ms; }.host .host__menu__item:nth-child(6) {  transition-duration: 280ms; }.host .host__menu-open__button {  position: relative;  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);  transition-duration: 500ms;  transform: scale(1.1, 1.1) translate3d(0, 0, 0);  z-index: 9; }.host .host__menu-open__button.hover {  transform: scale(1.2, 1.2) translate3d(0, 0, 0); }.host .host__menu-open.hidden + .host__menu-open__button {  transition-timing-function: linear;  transition-duration: 300ms;  transform: scale(0.9, 0.9) translate3d(0, 0, 0); }.host .host__menu-open.hidden ~ .host__menu__item {  transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1); }  .host .host__menu-open.hidden ~ .host__menu__item--1 {    transition-duration: 380ms;    transform: translate3d(-30px, 0, 0); }  .host .host__menu-open.hidden ~ .host__menu__item--2 {    transition-duration: 580ms;    transform: translate3d(-60px, 0, 0); }  .host .host__menu-open.hidden ~ .host__menu__item--3 {    transition-duration: 780ms;    transform: translate3d(-90px, 0, 0); }  .host .host__menu-open.hidden ~ .host__menu__item--4 {    transition-duration: 980ms;    transform: translate3d(-120px, 0, 0); }.host .host__icon--clickable {  padding: 5px;  cursor: pointer; }"}),
    vui_gooey_metadata("design:paramtypes", [])
], vui_gooey_VuiGooey);

//# sourceMappingURL=vui-gooey.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-gooey/index.js

if (customElements.get(vui_gooey_VuiGooey.tag) === undefined) {
    customElements.define(vui_gooey_VuiGooey.tag, vui_gooey_VuiGooey);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-header/component/vui-header.js
var vui_header_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_header_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiHeader_1;



const vui_header_VIEW = Symbol('view');
const vui_header_STATE = Symbol('state');
const vui_header_EVENTS = Symbol('events');
const vui_header_EVENT = {
    ARITHMETIC_MUTATED: 'arithmeticMutated',
    ARITHMETIC_SORTED: 'arithmeticSorted',
    GROUP_ARITHMETIC_MUTATED: 'groupArithmeticMutated',
    GROUP_ARITHMETIC_SORTED: 'groupArithmeticSorted',
    SORTS_ARITHMETIC_MUTATED: 'sortsArithmeticMutated',
    SORTS_ARITHMETIC_SORTED: 'sortsArithmeticSorted',
    HEADER_SIZE_CHANGED: 'headerSizeChanged',
    VALUE_CHANGED: 'valueChanged',
    SEARCH_VALUE_CHANGED: 'searchValueChanged',
    GROUPED: 'grouped',
    SORTED: 'sorted',
    FILTERED: 'filtered',
    CLICKED: 'clicked',
    GOOEYGROUPED: 'gooeyGrouped',
    GOOEYSORTED: 'gooeySorted',
    GOOEYFILTERED: 'gooeyFiltered',
    GOOEYCLICKED: 'gooeyClicked'
};
const vui_header_ELEMENT = {
    GOOEY: 'vui-gooey'
};
const vui_header_CLASS = {
    ELEMENT: 'host',
    LINE: {
        ELEMENT: 'host__line',
        MOD: {
            ARTH: 'host__line--arth',
            HIDDEN: 'host__line--hidden'
        }
    },
    ARTH: {
        MOD: {
            HIDDEN: 'host__arth--hidden'
        }
    }
};
let vui_header_VuiHeader = VuiHeader_1 = class VuiHeader extends Component {
    constructor() {
        super(vui_header_VIEW);
    }
    get observables() {
        return [
            'gooey-dragging',
            'gooey-visible',
            'gooey-settings',
            'gooey-groupable',
            'gooey-sortable',
            'gooey-filterable',
            'title-label',
            'title-all',
            'title-shown',
            'search-value',
            'search-hint',
            'search-visible',
            'toolbar-visible',
            'toolbar-save',
            'toolbar-add',
            'toolbar-delete',
            'toolbar-savable',
            'toolbar-deletable',
            'toolbar-creatable',
            'toolbar-saving',
            'toolbar-deleting',
            'toolbar-creating',
            'toolbar-visible',
            'groups-visible',
            'validation-errors',
            'validation-visible',
            'validation-disabled',
            'groups-max',
            'sorts-visible',
            'sorts-max',
            'filters-visible',
            'viewsettings-maxgroups',
            'viewsettings-visible',
            'viewsettings-groupenabled',
            'viewsettings-freezeenabled',
            'viewsettings-sortenabled',
            'viewsettings-groupsplaceholdertext',
            'viewsettings-clicked'
        ];
    }
    get visible() {
        return this.get('visible', false);
    }
    set visible(value) {
        this.reconnectEvents();
        this.set('visible', value);
    }
    initView() {
        this.shadowRoot.appendChild(VuiHeader_1.template.content.cloneNode(true));
        this[vui_header_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_header_CLASS.ELEMENT}`),
            title: this.shadowRoot.querySelector('slot[name="title"]').assignedNodes()[0],
            search: this.shadowRoot.querySelector('slot[name="quicksearch"]').assignedNodes()[0],
            toolbar: this.shadowRoot.querySelector('slot[name="toolbar"]').assignedNodes()[0],
            sorts: this.shadowRoot.querySelector('slot[name="sorts"]').assignedNodes()[0],
            groups: this.shadowRoot.querySelector('slot[name="groups"]').assignedNodes()[0],
            filters: this.shadowRoot.querySelector('slot[name="filters"]').assignedNodes()[0],
            viewsettings: this.shadowRoot.querySelector('slot[name="viewsettings"]').assignedNodes()[0],
            groupLine: this.shadowRoot.querySelector('#group_line'),
            filtersLine: this.shadowRoot.querySelector('#filters_line'),
            sortsLine: this.shadowRoot.querySelector('#sorts_line'),
            validation: this.shadowRoot.querySelector('slot[name="errors').assignedNodes()[0],
            gooey: this.shadowRoot.querySelector(vui_header_ELEMENT.GOOEY),
            lineArth: this.shadowRoot.querySelector(`.${vui_header_CLASS.LINE.MOD.ARTH}`)
        };
        utilities_dom_UtilitiesDOM.addClass(this[vui_header_VIEW].sortsLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.addClass(this[vui_header_VIEW].groupLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.addClass(this[vui_header_VIEW].filtersLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
    }
    attachGooey(additionalDraggableXRefs, dragAndDrop) {
        this[vui_header_VIEW].gooey.attach(additionalDraggableXRefs, dragAndDrop);
    }
    attachViewSettings() {
        let gooeyButton = this[vui_header_VIEW].gooey.shadowRoot.querySelector('[data-gooey]');
        this[vui_header_VIEW].viewsettings.setReference(gooeyButton);
    }
    attachFilters(additionalDraggableXRefs, dragAndDrop) {
        if (this[vui_header_VIEW].filters) {
            this[vui_header_VIEW].filters.attach(additionalDraggableXRefs, dragAndDrop);
        }
    }
    refreshFilters(arithmetics) {
        if (this[vui_header_VIEW].filters) {
            this[vui_header_STATE].showFilters = this._isFiltersVisible(arithmetics);
            this[vui_header_VIEW].filters.refresh(arithmetics);
        }
        else {
            this[vui_header_STATE].showFilters = false;
        }
        this.bindView();
    }
    attachSorts(additionalDraggableXRefs, dragAndDrop) {
        if (this[vui_header_VIEW].sorts) {
            this[vui_header_VIEW].sorts.attach(additionalDraggableXRefs, dragAndDrop);
        }
    }
    refreshSorts(arithmetics) {
        if (this[vui_header_VIEW].sorts) {
            this[vui_header_STATE].showSorts = this._isSortVisible(arithmetics);
            this[vui_header_VIEW].sorts.refresh(arithmetics);
        }
        else {
            this[vui_header_STATE].showSorts = false;
        }
        this.bindView();
    }
    attachGroups(additionalDraggableXRefs, dragAndDrop) {
        if (this[vui_header_VIEW].groups) {
            this[vui_header_VIEW].groups.attach(additionalDraggableXRefs, dragAndDrop);
        }
    }
    refreshGroups(arithmetics) {
        if (this[vui_header_VIEW].groups) {
            this[vui_header_STATE].showGroups = this._isGroupVisible(arithmetics);
            this[vui_header_VIEW].groups.refresh(arithmetics);
        }
        else {
            this[vui_header_STATE].showGroups = false;
        }
        this.bindView();
    }
    _isFiltersVisible(arithmetics) {
        return (arithmetics.operands.length > 0 || arithmetics.expressions && arithmetics.expressions.length > 0)
            && (this[vui_header_VIEW].filters && this[vui_header_VIEW].filters.visible);
    }
    _isSortVisible(arithmetics) {
        return (!!arithmetics.operands.length || arithmetics.expressions && !!arithmetics.expressions.length)
            && (this[vui_header_VIEW].sorts && this[vui_header_VIEW].sorts.visible);
    }
    _isGroupVisible(arithmetics) {
        return (!!arithmetics.operands.length || arithmetics.expressions && !!arithmetics.expressions.length)
            && (this[vui_header_VIEW].groups && this[vui_header_VIEW].groups.visible);
    }
    refreshVS(columns = [], grouped = []) {
        if (this[vui_header_VIEW].viewsettings) {
            this[vui_header_VIEW].viewsettings.setState(columns, grouped);
        }
    }
    attachEvents() {
        if (this[vui_header_VIEW].gooey) {
            this[vui_header_VIEW].gooey.addEventListener(vui_header_EVENT.GROUPED, this.bubble.bind(this, vui_header_EVENT.GOOEYGROUPED));
            this[vui_header_VIEW].gooey.addEventListener(vui_header_EVENT.SORTED, this.bubble.bind(this, vui_header_EVENT.GOOEYSORTED));
            this[vui_header_VIEW].gooey.addEventListener(vui_header_EVENT.FILTERED, this.bubble.bind(this, vui_header_EVENT.GOOEYFILTERED));
            this[vui_header_VIEW].gooey.addEventListener(vui_header_EVENT.CLICKED, this.bubble.bind(this, vui_header_EVENT.GOOEYCLICKED));
        }
        if (this[vui_header_VIEW].groups) {
            this[vui_header_VIEW].groups.addEventListener(vui_header_EVENT.ARITHMETIC_MUTATED, this[vui_header_EVENTS].onGroupsArithmeticMutatedBind);
            this[vui_header_VIEW].groups.addEventListener(vui_header_EVENT.ARITHMETIC_SORTED, this[vui_header_EVENTS].onGroupsArithmeticSortedBind);
        }
        if (this[vui_header_VIEW].sorts) {
            this[vui_header_VIEW].sorts.addEventListener(vui_header_EVENT.ARITHMETIC_MUTATED, this[vui_header_EVENTS].onSortsArithmeticMutatedBind);
            this[vui_header_VIEW].sorts.addEventListener(vui_header_EVENT.ARITHMETIC_SORTED, this[vui_header_EVENTS].onSortsArithmeticSortedBind);
        }
        if (this[vui_header_VIEW].search) {
            this[vui_header_VIEW].search.addEventListener(vui_header_EVENT.VALUE_CHANGED, this[vui_header_EVENTS].onSearchValueCHanged);
        }
        this[vui_header_STATE].resizeObserver.observe(this[vui_header_VIEW].xRef);
    }
    detachEvents() {
        if (this[vui_header_VIEW].groups) {
            this[vui_header_VIEW].groups.removeEventListener(vui_header_EVENT.ARITHMETIC_MUTATED, this[vui_header_EVENTS].onGroupsArithmeticMutatedBind);
            this[vui_header_VIEW].groups.removeEventListener(vui_header_EVENT.ARITHMETIC_SORTED, this[vui_header_EVENTS].onGroupsArithmeticSortedBind);
        }
        if (this[vui_header_VIEW].sorts) {
            this[vui_header_VIEW].sorts.removeEventListener(vui_header_EVENT.ARITHMETIC_MUTATED, this[vui_header_EVENTS].onSortsArithmeticMutatedBind);
            this[vui_header_VIEW].sorts.removeEventListener(vui_header_EVENT.ARITHMETIC_SORTED, this[vui_header_EVENTS].onSortsArithmeticSortedBind);
        }
        this[vui_header_VIEW].search.removeEventListener(vui_header_EVENT.VALUE_CHANGED, this[vui_header_EVENTS].onSearchValueCHanged);
        this[vui_header_STATE].resizeObserver.unobserve(this[vui_header_VIEW].xRef);
    }
    bindView() {
        let toggleSortsVisibility = !this[vui_header_STATE].showSorts || !this[vui_header_VIEW].sorts.visible;
        let toggleGroupsVisibility = !this[vui_header_STATE].showGroups || !this[vui_header_VIEW].groups.visible;
        let toggleFiltersVisibility = !this[vui_header_STATE].showFilters || !this[vui_header_VIEW].filters.visible;
        this._adjustVisibility(toggleSortsVisibility, toggleGroupsVisibility, toggleFiltersVisibility);
    }
    _adjustVisibility(sorts, groups, filters) {
        utilities_dom_UtilitiesDOM.toggleClass(sorts, this[vui_header_VIEW].sortsLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(groups, this[vui_header_VIEW].groupLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(filters, this[vui_header_VIEW].filtersLine, [vui_header_CLASS.ARTH.MOD.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(filters && groups && sorts, this[vui_header_VIEW].lineArth, [vui_header_CLASS.LINE.MOD.HIDDEN]);
    }
    initEvents() {
        this[vui_header_EVENTS] = {
            onGroupsArithmeticMutatedBind: this.bubble.bind(this, vui_header_EVENT.GROUP_ARITHMETIC_MUTATED),
            onGroupsArithmeticSortedBind: this.bubble.bind(this, vui_header_EVENT.GROUP_ARITHMETIC_SORTED),
            onSortsArithmeticMutatedBind: this.bubble.bind(this, vui_header_EVENT.SORTS_ARITHMETIC_MUTATED),
            onSortsArithmeticSortedBind: this.bubble.bind(this, vui_header_EVENT.SORTS_ARITHMETIC_SORTED),
            onSearchValueCHanged: this.bubble.bind(this, vui_header_EVENT.SEARCH_VALUE_CHANGED)
        };
    }
    initState() {
        this[vui_header_STATE] = {
            height: 0,
            resizeObserver: new resize_observer_ResizeObserver((entries) => {
                let currentHeight = entries[0].contentRect ?
                    entries[0].contentRect.height : entries[0].target.getBoundingClientRect().height;
                if (currentHeight !== this[vui_header_STATE].height) {
                    this[vui_header_STATE].height = currentHeight;
                    this.dispatchEvent(new CustomEvent(vui_header_EVENT.HEADER_SIZE_CHANGED, { bubbles: true }));
                }
            }),
            showFilters: false,
            showGroups: false,
            showSorts: false
        };
    }
};
vui_header_VuiHeader = VuiHeader_1 = vui_header_decorate([
    VUI('vui-header', {html: "<div class=\"host__line host__line--title\">    <div>        <slot name=\"title\"/>    </div>    <div class=\"host__artifacts\">        <div class=\"host__toolbar\">            <slot name=\"quicksearch\"></slot>            <slot name=\"toolbar\"></slot>            <slot name=\"errors\"></slot>            <slot name=\"viewsettings\"></slot>        </div>        <vui-gooey></vui-gooey>    </div></div><div class=\"host__line host__line--arth\">    <div class=\"host__arth\" id=\"sorts_line\">        <div class=\"host__icon\">            <vui-icon-sort size=\"medium\"></vui-icon-sort>        </div>        <div class=\"host__long\">            <slot name=\"sorts\"></slot>        </div>    </div>    <div class=\"host__arth\" id=\"group_line\">        <div class=\"host__icon\">            <vui-icon-group size=\"medium\"></vui-icon-group>        </div>        <div class=\"host__long\">            <slot name=\"groups\"></slot>        </div>    </div>    <div class=\"host__arth\" id=\"filters_line\">        <div class=\"host__icon\">            <vui-icon-filter size=\"medium\"></vui-icon-filter>        </div>        <div class=\"host__long\">            <slot name=\"filters\"></slot>        </div>    </div></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host__line--title, .host .host__artifacts, .host .host__toolbar, .host .host__arth, .host .host__icon {  display: flex; }  .host__line--title {    justify-content: space-between; }.host__line--hidden, .host .host__arth--hidden {  display: none !important; }.host .host__long::-webkit-scrollbar-thumb {  background: rgba(0, 0, 0, 0.15);  border-radius: 1px; }.host .host__long::-webkit-scrollbar-track {  background: transparent; }.host .host__long::-webkit-scrollbar {  height: 7px;  width: 7px; }.host .host__long {  overflow-x: auto;  overflow-y: hidden; }.host {  background: var(--vc-header-background, #ffffff);  border-top-left-radius: var(--vc-grid-border-radius, 20px);  border-top-right-radius: var(--vc-grid-border-radius, 20px);  position: relative; }  .host__line--title {    border-top-left-radius: var(--vc-grid-border-radius, 20px);    border-top-right-radius: var(--vc-grid-border-radius, 20px);    box-shadow: var(--vc-grid-layer-shadow, 0 0 20px 0 rgba(0, 0, 0, 0.1));    padding-left: 20px;    min-height: 40px; }  .host__line--arth {    padding: 10px; }  .host .host__long {    margin-left: 10px; }  .host .host__toolbar {    margin-right: 60px; }"}),
    vui_header_metadata("design:paramtypes", [])
], vui_header_VuiHeader);

//# sourceMappingURL=vui-header.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-header/index.js

if (customElements.get(vui_header_VuiHeader.tag) === undefined) {
    customElements.define(vui_header_VuiHeader.tag, vui_header_VuiHeader);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/lib/vui-icon.js


const __shared__ = Symbol('shared');
const vui_icon_EVENTS = Symbol('events');
const vui_icon_STATE = Symbol('state');
const vui_icon_EVENT = {
    DRAG_OVER: 'dragover',
    DRAG_LEAVE: 'dragleave',
    DROP: 'drop',
    MOUSE_ENTER: 'mouseenter',
    MOUSE_LEAVE: 'mouseleave'
};
const vui_icon_ELEMENT = {
    SVG: 'svg'
};
const SUPPORTED_SIZES = [`small`, `medium`, `large`];
const SUPPORTED_ACCENTS = [1, 2, 3];
class vui_icon_VuiIcon extends Component {
    constructor(__view_symbol__) {
        super(__view_symbol__);
        this.__view_symbol__ = __view_symbol__;
        this[__shared__] = __view_symbol__;
        this._initView();
    }
    get observables() {
        return ['accent', 'size', 'hoverable', 'title', 'activer'];
    }
    get accent() {
        return this.get('accent', 1);
    }
    get size() {
        return this.get('size', 'medium');
    }
    get hoverable() {
        return this.get('hoverable', false);
    }
    get activer() {
        return this.get('activer', false);
    }
    set activer(value) {
        this.set('activer', value);
        if (this.hoverable && !this.activer) {
            this.attachEvents();
        }
        else {
            this.detachEvents();
        }
        utilities_dom_UtilitiesDOM.toggleClass(this.activer, this[this[__shared__]].xRef, [`host--accent-${this.accent}--hover`]);
    }
    set hoverable(value) {
        this.set('hoverable', value);
        if (this.hoverable && !this.activer) {
            this.attachEvents();
        }
        else {
            this.detachEvents();
        }
    }
    initState() {
        this[vui_icon_STATE] = {
            hoverableBehaviorOn: false
        };
    }
    initEvents() {
        this[vui_icon_EVENTS] = {
            onHoverOnBind: this._onHoverOn.bind(this),
            onHoverOffBind: this._onHoverOff.bind(this)
        };
    }
    detachEvents() {
        this.removeEventListener(vui_icon_EVENT.DRAG_OVER, this[vui_icon_EVENTS].onHoverOnBind);
        this.removeEventListener(vui_icon_EVENT.MOUSE_ENTER, this[vui_icon_EVENTS].onHoverOnBind);
        this.removeEventListener(vui_icon_EVENT.DRAG_LEAVE, this[vui_icon_EVENTS].onHoverOffBind);
        this.removeEventListener(vui_icon_EVENT.DROP, this[vui_icon_EVENTS].onHoverOffBind);
        this.removeEventListener(vui_icon_EVENT.MOUSE_LEAVE, this[vui_icon_EVENTS].onHoverOffBind);
        this[vui_icon_STATE].hoverableBehaviorOn = false;
    }
    attachEvents() {
        this.addEventListener(vui_icon_EVENT.DRAG_OVER, this[vui_icon_EVENTS].onHoverOnBind);
        this.addEventListener(vui_icon_EVENT.MOUSE_ENTER, this[vui_icon_EVENTS].onHoverOnBind);
        this.addEventListener(vui_icon_EVENT.DRAG_LEAVE, this[vui_icon_EVENTS].onHoverOffBind);
        this.addEventListener(vui_icon_EVENT.DROP, this[vui_icon_EVENTS].onHoverOffBind);
        this.addEventListener(vui_icon_EVENT.MOUSE_LEAVE, this[vui_icon_EVENTS].onHoverOffBind);
        this[vui_icon_STATE].hoverableBehaviorOn = true;
    }
    bindView() {
        utilities_dom_UtilitiesDOM.removeClass(this[this[__shared__]].xRef, SUPPORTED_ACCENTS.map((_) => `host--accent-${_}`));
        utilities_dom_UtilitiesDOM.addClass(this[this[__shared__]].xRef, [`host--accent-${this.accent}`]);
        if (SUPPORTED_SIZES.find((el) => this.size === el)) {
            utilities_dom_UtilitiesDOM.removeClass(this[this[__shared__]].xRef, SUPPORTED_ACCENTS.map((_) => `host--${_}`));
            utilities_dom_UtilitiesDOM.addClass(this[this[__shared__]].xRef, [`host--${this.size}`]);
        }
    }
    _onHoverOn() {
        utilities_dom_UtilitiesDOM.addClass(this[this[__shared__]].xRef, [`host--accent-${this.accent}--hover`]);
    }
    _onHoverOff() {
        utilities_dom_UtilitiesDOM.removeClass(this[this[__shared__]].xRef, [`host--accent-${this.accent}--hover`]);
    }
    _initView() {
        this[this[__shared__]] = {
            xRef: this.shadowRoot.querySelector(`.host`),
            svg: this.shadowRoot.querySelector(vui_icon_ELEMENT.SVG)
        };
    }
}
//# sourceMappingURL=vui-icon.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-add.js
var vui_icon_add_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_add_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconAdd_1;


const vui_icon_add_VIEW = Symbol('view');
let vui_icon_add_VuiIconAdd = VuiIconAdd_1 = class VuiIconAdd extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_add_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconAdd_1.template.content.cloneNode(true));
    }
};
vui_icon_add_VuiIconAdd = VuiIconAdd_1 = vui_icon_add_decorate([
    VUI('vui-icon-add', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-miterlimit: 10;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"add\">        <path class=\"cls-1\" d=\"M12,6V18m6-6H6\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_add_metadata("design:paramtypes", [])
], vui_icon_add_VuiIconAdd);

//# sourceMappingURL=vui-icon-add.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-avg.js
var vui_icon_avg_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_avg_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconAvg_1;


const vui_icon_avg_VIEW = Symbol('view');
let vui_icon_avg_VuiIconAvg = VuiIconAvg_1 = class VuiIconAvg extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_avg_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconAvg_1.template.content.cloneNode(true));
    }
};
vui_icon_avg_VuiIconAvg = VuiIconAvg_1 = vui_icon_avg_decorate([
    VUI('vui-icon-avg', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"1 0 18 15\">    <title>Layer 1</title>    <defs>        <style>            .cls-1 {                fill: none;                stroke: currentColor;                stroke-linecap: square;                stroke-width: 1px;            }        </style>    </defs>    <g id=\"Layer_2\" data-name=\"Layer 2\">        <g id=\"Layer_1-2\" data-name=\"Layer 1\">            <path  class=\"cls-1\" d=\"M6.92,7.46H4.33V6.59H6.92Zm4.33-.87H8.66v.87h2.59Zm-8.65,0H0v.87H2.6Zm13,0H13v.87h2.59Zm4.33,0H17.32v.87h2.59ZM.06,1.5.83,2.62A5.5,5.5,0,0,1,4.91,1.4C7,2,8.52,4.86,8.71,5.73c0,0,1.45,0,1.46,0C10.1,4.79,8.37,1,5.37.18,2.67-.63.06,1.5.06,1.5ZM20.33,12.56l-.77-1.13a5.52,5.52,0,0,1-4.08,1.22c-2.06-.57-3.61-3.46-3.81-4.32H10.22c.07.93,1.8,4.74,4.8,5.54C17.72,14.68,20.33,12.56,20.33,12.56Z\"/>        </g>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_avg_metadata("design:paramtypes", [])
], vui_icon_avg_VuiIconAvg);

//# sourceMappingURL=vui-icon-avg.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-chevron-down.js
var vui_icon_chevron_down_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_chevron_down_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconChevronDown_1;


const vui_icon_chevron_down_VIEW = Symbol('view');
let vui_icon_chevron_down_VuiIconChevronDown = VuiIconChevronDown_1 = class VuiIconChevronDown extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_chevron_down_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconChevronDown_1.template.content.cloneNode(true));
    }
};
vui_icon_chevron_down_VuiIconChevronDown = VuiIconChevronDown_1 = vui_icon_chevron_down_decorate([
    VUI('vui-icon-chevron-down', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>.cls-1 {            stroke-linecap: round;            stroke-linejoin: round;            stroke-width: 2px;        }</style>    </defs>    <g id=\"chevron_down_mini\">        <path class=\"cls-1\" d=\"M16,10l-4,4L8,10\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_chevron_down_metadata("design:paramtypes", [])
], vui_icon_chevron_down_VuiIconChevronDown);

//# sourceMappingURL=vui-icon-chevron-down.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-chevron-right.js
var vui_icon_chevron_right_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_chevron_right_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconChevronRight_1;


const vui_icon_chevron_right_VIEW = Symbol('view');
let vui_icon_chevron_right_VuiIconChevronRight = VuiIconChevronRight_1 = class VuiIconChevronRight extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_chevron_right_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconChevronRight_1.template.content.cloneNode(true));
    }
};
vui_icon_chevron_right_VuiIconChevronRight = VuiIconChevronRight_1 = vui_icon_chevron_right_decorate([
    VUI('vui-icon-chevron-right', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"chevron_right_mini\">        <path class=\"cls-1\" d=\"M10,8l4,4-4,4\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_chevron_right_metadata("design:paramtypes", [])
], vui_icon_chevron_right_VuiIconChevronRight);

//# sourceMappingURL=vui-icon-chevron-right.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-chevron-up.js
var vui_icon_chevron_up_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_chevron_up_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconChevronUp_1;


const vui_icon_chevron_up_VIEW = Symbol('view');
let vui_icon_chevron_up_VuiIconChevronUp = VuiIconChevronUp_1 = class VuiIconChevronUp extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_chevron_up_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconChevronUp_1.template.content.cloneNode(true));
    }
};
vui_icon_chevron_up_VuiIconChevronUp = VuiIconChevronUp_1 = vui_icon_chevron_up_decorate([
    VUI('vui-icon-chevron-up', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"chevron_up_mini\">        <path class=\"cls-1\" d=\"M8,14l4-4,4,4\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_chevron_up_metadata("design:paramtypes", [])
], vui_icon_chevron_up_VuiIconChevronUp);

//# sourceMappingURL=vui-icon-chevron-up.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-close.js
var vui_icon_close_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_close_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconClose_1;


const vui_icon_close_VIEW = Symbol('view');
let vui_icon_close_VuiIconClose = VuiIconClose_1 = class VuiIconClose extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_close_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconClose_1.template.content.cloneNode(true));
    }
};
vui_icon_close_VuiIconClose = VuiIconClose_1 = vui_icon_close_decorate([
    VUI('vui-icon-close', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"close\">        <path class=\"cls-1\" d=\"M7,7,17,17\"/>        <path class=\"cls-1\" d=\"M17,7,7,17\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_close_metadata("design:paramtypes", [])
], vui_icon_close_VuiIconClose);

//# sourceMappingURL=vui-icon-close.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-count.js
var vui_icon_count_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_count_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconCount_1;


const vui_icon_count_VIEW = Symbol('view');
let vui_icon_count_VuiIconCount = VuiIconCount_1 = class VuiIconCount extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_count_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconCount_1.template.content.cloneNode(true));
    }
};
vui_icon_count_VuiIconCount = VuiIconCount_1 = vui_icon_count_decorate([
    VUI('vui-icon-count', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                stroke-linecap: round;                stroke-miterlimit: 10;                stroke-width: 2px;            }        </style>    </defs>    <g>        <path class=\"cls-1\" d=\"M2,7,23,7\"/>        <path class=\"cls-1\" d=\"M1,17,22,17\"/>        <path class=\"cls-1\" d=\"M9,2,5,22\"/>        <path class=\"cls-1\" d=\"M19,2,15,22\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_count_metadata("design:paramtypes", [])
], vui_icon_count_VuiIconCount);

//# sourceMappingURL=vui-icon-count.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-dnd-multiple.js
var vui_icon_dnd_multiple_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_dnd_multiple_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconDragAndDropMultiple_1;


const vui_icon_dnd_multiple_VIEW = Symbol('view');
let vui_icon_dnd_multiple_VuiIconDragAndDropMultiple = VuiIconDragAndDropMultiple_1 = class VuiIconDragAndDropMultiple extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_dnd_multiple_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconDragAndDropMultiple_1.template.content.cloneNode(true));
    }
};
vui_icon_dnd_multiple_VuiIconDragAndDropMultiple = VuiIconDragAndDropMultiple_1 = vui_icon_dnd_multiple_decorate([
    VUI('vui-icon-dnd-multiple', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2, .cls-3 {                fill: none;                stroke: #000;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }            .cls-3 {                stroke-dasharray: 23;            }        </style>    </defs>    <g>        <rect class=\"cls-1\" x=\"3\" y=\"5\" width=\"12\" height=\"12\"/>        <rect class=\"cls-2\" x=\"3\" y=\"3\" width=\"12\" height=\"12\"/>        <rect class=\"cls-2\" x=\"9\" y=\"9\" width=\"12\" height=\"12\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_dnd_multiple_metadata("design:paramtypes", [])
], vui_icon_dnd_multiple_VuiIconDragAndDropMultiple);

//# sourceMappingURL=vui-icon-dnd-multiple.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-dnd-single.js
var vui_icon_dnd_single_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_dnd_single_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconDragAndDropSingle_1;


const vui_icon_dnd_single_VIEW = Symbol('view');
let vui_icon_dnd_single_VuiIconDragAndDropSingle = VuiIconDragAndDropSingle_1 = class VuiIconDragAndDropSingle extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_dnd_single_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconDragAndDropSingle_1.template.content.cloneNode(true));
    }
};
vui_icon_dnd_single_VuiIconDragAndDropSingle = VuiIconDragAndDropSingle_1 = vui_icon_dnd_single_decorate([
    VUI('vui-icon-dnd-single', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2, .cls-3 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }            .cls-3 {                stroke-dasharray: 23;            }        </style>    </defs>    <g>        <rect class=\"cls-1\" x=\"3\" y=\"5\" width=\"12\" height=\"12\"/>        <rect class=\"cls-2\" x=\"3\" y=\"3\" width=\"12\" height=\"12\"/>        <polyline class=\"cls-2\" points=\"21 19 21 21 19 21\"/>        <line class=\"cls-3\" x1=\"16\" y1=\"21\" x2=\"12.5\" y2=\"21\"/>        <polyline class=\"cls-2\" points=\"11 21 9 21 9 19\"/>        <line class=\"cls-3\" x1=\"9\" y1=\"16\" x2=\"9\" y2=\"15\"/>        <polyline class=\"cls-2\" points=\"9 11 9 9 11 9\"/>        <line class=\"cls-3\" x1=\"15\" y1=\"9\" x2=\"16\" y2=\"9\"/>        <polyline class=\"cls-2\" points=\"19 9 21 9 21 11\"/>        <line class=\"cls-3\" x1=\"21\" y1=\"14\" x2=\"21\" y2=\"17.5\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_dnd_single_metadata("design:paramtypes", [])
], vui_icon_dnd_single_VuiIconDragAndDropSingle);

//# sourceMappingURL=vui-icon-dnd-single.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-edit.js
var vui_icon_edit_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_edit_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconEdit_1;


const vui_icon_edit_VIEW = Symbol('view');
let vui_icon_edit_VuiIconEdit = VuiIconEdit_1 = class VuiIconEdit extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_edit_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconEdit_1.template.content.cloneNode(true));
    }
};
vui_icon_edit_VuiIconEdit = VuiIconEdit_1 = vui_icon_edit_decorate([
    VUI('vui-icon-edit', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>.cls-1, .cls-2 {            fill: none;            stroke: #000;            stroke-linecap: round;            stroke-linejoin: round;        }        .cls-1 {            stroke-width: 2px;        }</style>    </defs>    <title>edit</title>    <g id=\"edit\">        <polygon class=\"cls-1\" points=\"16 5 19 8 8 19 5 19 5 16 16 5\"/>        <line class=\"cls-2\" x1=\"13\" y1=\"8\" x2=\"16\" y2=\"11\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_edit_metadata("design:paramtypes", [])
], vui_icon_edit_VuiIconEdit);

//# sourceMappingURL=vui-icon-edit.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-error.js
var vui_icon_error_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_error_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconError_1;


const vui_icon_error_VIEW = Symbol('view');
let vui_icon_error_VuiIconError = VuiIconError_1 = class VuiIconError extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_error_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconError_1.template.content.cloneNode(true));
    }
};
vui_icon_error_VuiIconError = VuiIconError_1 = vui_icon_error_decorate([
    VUI('vui-icon-error', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1, .cls-2 {                fill: none;                stroke-miterlimit: 10;                stroke-width: 2px;            }            .cls-2 {                stroke-linecap: round;            }        </style>    </defs>    <g id=\"info\">        <circle class=\"cls-1\" cx=\"12\" cy=\"12\" r=\"7\"/>        <line class=\"cls-2\" x1=\"12\" y1=\"15\" x2=\"12\" y2=\"12\"/>        <line class=\"cls-2\" x1=\"12\" y1=\"9\" x2=\"12\" y2=\"9\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_error_metadata("design:paramtypes", [])
], vui_icon_error_VuiIconError);

//# sourceMappingURL=vui-icon-error.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-expressions.js
var vui_icon_expressions_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_expressions_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconExpressions_1;


const vui_icon_expressions_VIEW = Symbol('view');
let vui_icon_expressions_VuiIconExpressions = VuiIconExpressions_1 = class VuiIconExpressions extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_expressions_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconExpressions_1.template.content.cloneNode(true));
    }
};
vui_icon_expressions_VuiIconExpressions = VuiIconExpressions_1 = vui_icon_expressions_decorate([
    VUI('vui-icon-expressions', {html: "<svg viewBox=\"0 0 512 512\" width=\"24px\" height=\"24px\" xmlns=\"http://www.w3.org/2000/svg\">    <defs>        <style>            .cls-1 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 10px;            }        </style>    </defs>    <g>        <path class=\"cls-1\"              d=\"m45.105469 311.0625c-12.039063 54.648438-2.738281 100.683594 26.199219 129.617188 30.765624 30.765624 73.886718 33.441406 104.648437 30.265624 10.980469-1.125 20.8125 6.851563 21.945313 17.839844 1.136718 10.984375-6.851563 20.808594-17.835938 21.945313-7.992188.824219-15.835938 1.234375-23.5 1.234375-18.222656 0-35.46875-2.324219-51.496094-6.960938-24.273437-7.019531-45.148437-19.144531-62.046875-36.042968-19.972656-19.972657-33.1875-45.28125-39.273437-75.226563-5.671875-27.894531-4.898438-58.605469 2.300781-91.277344 3.410156-15.46875 8.195313-31.011719 14.238281-46.472656-6.042968-15.460937-10.828125-31.007813-14.238281-46.472656-7.199219-32.675781-7.972656-63.382813-2.300781-91.28125 6.085937-29.941407 19.300781-55.253907 39.273437-75.226563 16.652344-16.652344 37.183594-28.679687 61.023438-35.742187 22.378906-6.632813 47.183593-8.734375 73.71875-6.25 10.996093 1.027343 19.074219 10.777343 18.046875 21.773437s-10.777344 19.074219-21.773438 18.046875c-30.15625-2.824219-72.449218.171875-102.730468 30.453125-28.9375 28.9375-38.238282 74.96875-26.195313 129.617188.203125.921875.425781 1.847656.640625 2.769531 18.304688-31.277344 41.605469-61.386719 69.078125-88.859375 16.460937-16.457031 34.085937-31.613281 52.394531-45.054688 8.902344-6.535156 21.417969-4.613281 27.953125 4.289063 6.535157 8.902344 4.617188 21.417969-4.285156 27.953125-16.675781 12.242188-32.75 26.070312-47.777344 41.09375-34.496093 34.496094-61.671875 73.296875-79.488281 112.890625 17.816406 39.589844 44.992188 78.390625 79.488281 112.886719 14.757813 14.757812 30.535157 28.363281 46.886719 40.441406 8.886719 6.558594 10.769531 19.078125 4.207031 27.964844-3.917969 5.3125-9.96875 8.121094-16.101562 8.121094-4.125 0-8.289063-1.273438-11.863281-3.914063-17.949219-13.253906-35.246094-28.167969-51.410157-44.332031-27.472656-27.472656-50.777343-57.582032-69.078125-88.859375-.21875.921875-.445312 1.847656-.648437 2.769531zm446.609375-55.082031c6.042968-15.460938 10.828125-31.003907 14.238281-46.472657 7.199219-32.671874 7.976563-63.382812 2.304687-91.277343-6.089843-29.945313-19.304687-55.253907-39.277343-75.226563-16.652344-16.652344-37.183594-28.679687-61.019531-35.742187-22.378907-6.632813-47.179688-8.734375-73.71875-6.25-11 1.027343-19.078126 10.777343-18.050782 21.773437s10.785156 19.082032 21.773438 18.046875c30.15625-2.820312 72.453125.171875 102.734375 30.453125 28.933593 28.9375 38.238281 74.96875 26.195312 129.617188-.207031.921875-.429687 1.847656-.644531 2.773437-18.304688-31.277343-41.605469-61.390625-69.082031-88.863281-16.453125-16.457031-34.082031-31.613281-52.386719-45.050781-8.90625-6.539063-21.417969-4.617188-27.957031 4.285156-6.535157 8.902344-4.617188 21.417969 4.285156 27.957031 16.679687 12.242188 32.753906 26.066406 47.777344 41.09375 34.496093 34.496094 61.671875 73.296875 79.492187 112.886719-17.820312 39.589844-44.996094 78.390625-79.492187 112.886719-14.691407 14.691406-30.390625 28.242187-46.664063 40.277344-8.882812 6.566406-10.757812 19.085937-4.1875 27.96875 3.921875 5.304687 9.96875 8.109374 16.09375 8.109374 4.132813 0 8.296875-1.277343 11.875-3.921874 17.863282-13.207032 35.078125-28.0625 51.164063-44.148438 27.476562-27.476562 50.777343-57.585938 69.082031-88.863281.214844.925781.4375 1.847656.640625 2.773437 12.042969 54.648438 2.742187 100.679688-26.195313 129.613282-31.265624 31.269531-75.25 33.601562-106.644531 30.050781-10.976562-1.25-20.878906 6.648437-22.117187 17.621093-1.242188 10.976563 6.644531 20.878907 17.621094 22.121094 8.691406.984375 17.203124 1.46875 25.523437 1.46875 45.980469 0 85.800781-14.875 113.902344-42.976562 19.972656-19.972656 33.1875-45.285156 39.273437-75.226563 5.671875-27.894531 4.898438-58.609375-2.304687-91.28125-3.40625-15.46875-8.195313-31.011719-14.234375-46.476562zm-235.597656 185.988281c-11.042969 0-20 8.953125-20 19.996094 0 11.046875 8.957031 20 20 20 11.046874 0 20-8.953125 20-20 0-11.042969-8.953126-19.996094-20-19.996094zm1-375.96875c11.046874 0 20-8.953125 20-20 0-11.042969-8.953126-19.996094-20-19.996094-11.042969 0-20 8.953125-20 19.996094 0 11.046875 8.957031 20 20 20zm65.191406 209.027344c-8.691406 14.570312-16.195313 27.15625-16.195313 40.402344v24.734374c0 18.371094-12.84375 33.789063-30.023437 37.789063-.566406 10.589844-10.257813 19.019531-20.972656 19.019531-10.699219 0-18.472657-8.410156-18.953126-18.972656-17.175781-3.925781-30.042968-19.394531-30.042968-37.835938v-24.734374c0-14.011719-8.703125-28.277344-17.921875-43.378907-11.125-18.230469-23.710938-38.855469-24.066407-64.167969-.003906-.1875-.007812-.375-.007812-.5625v-.539062c0-.164062.003906-.328125.007812-.492188.277344-24.265624 10.496094-45.4375 28.839844-59.71875 16.449219-12.808593 38.246094-19.578124 63.027344-19.578124 53.523438 0 89.605469 31.835937 90.105469 79.328124.003906.152344.003906.308594.003906.460938v.539062c0 .15625 0 .308594-.003906.464844-.292969 27.828125-12.769531 48.753906-23.796875 67.242188zm-76.191406 43.949218v20h20v-20zm59.996093-111.929687c-.175781-36.148437-35.085937-40.058594-50.113281-40.058594-25 0-51.703125 10.527344-51.878906 40.042969.101562 14.492188 8.902344 28.914062 18.21875 44.183594 5.273437 8.636718 10.871094 17.816406 15.3125 27.765625h37c3.949218-8.746094 8.761718-16.820313 13.304687-24.441407 9.691407-16.253906 18.070313-30.300781 18.15625-47.492187zm0 0\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_expressions_metadata("design:paramtypes", [])
], vui_icon_expressions_VuiIconExpressions);

//# sourceMappingURL=vui-icon-expressions.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-filter.js
var vui_icon_filter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_filter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconFilter_1;


const vui_icon_filter_VIEW = Symbol('view');
let vui_icon_filter_VuiIconFilter = VuiIconFilter_1 = class VuiIconFilter extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_filter_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconFilter_1.template.content.cloneNode(true));
    }
};
vui_icon_filter_VuiIconFilter = VuiIconFilter_1 = vui_icon_filter_decorate([
    VUI('vui-icon-filter', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"filter_tt\">        <path class=\"cls-1\" d=\"M4,5H20V8l-6,6v7a2,2,0,0,1-4,0V14L4,8Z\"/>        <path class=\"cls-2\" d=\"M4,3H20V6l-6,6v7a2,2,0,0,1-4,0V12L5,7\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_filter_metadata("design:paramtypes", [])
], vui_icon_filter_VuiIconFilter);

//# sourceMappingURL=vui-icon-filter.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-grid.js
var vui_icon_grid_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_grid_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconGrid_1;


const vui_icon_grid_VIEW = Symbol('view');
let vui_icon_grid_VuiIconGrid = VuiIconGrid_1 = class VuiIconGrid extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_grid_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconGrid_1.template.content.cloneNode(true));
    }
};
vui_icon_grid_VuiIconGrid = VuiIconGrid_1 = vui_icon_grid_decorate([
    VUI('vui-icon-grid', {html: "<svg viewBox=\"0 0 512 512\" width=\"24px\" height=\"24px\" xmlns=\"http://www.w3.org/2000/svg\">    <defs>        <style>            .cls-1 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 10px;            }        </style>    </defs>    <g>        <path class=\"cls-1\"              d=\"m472 120h20c11.046875 0 20-8.953125 20-20v-80c0-11.046875-8.953125-20-20-20h-80c-11.046875 0-20 8.953125-20 20v20h-272v-20c0-11.046875-8.953125-20-20-20h-80c-11.046875 0-20 8.953125-20 20v80c0 11.046875 8.953125 20 20 20h20v272h-20c-11.046875 0-20 8.953125-20 20v80c0 11.046875 8.953125 20 20 20h80c11.046875 0 20-8.953125 20-20v-20h272v20c0 11.046875 8.953125 20 20 20h80c11.046875 0 20-8.953125 20-20v-80c0-11.046875-8.953125-20-20-20h-80c-11.046875 0-20 8.953125-20 20v20h-50v-90h110c11.046875 0 20-8.953125 20-20 0-1.550781-.191406-3.050781-.527344-4.5.335938-1.449219.527344-2.949219.527344-4.5zm-40 312h40v40h-40zm0-392h40v40h-40zm-20 80h20v50h-90v-90h50v20c0 11.046875 8.953125 20 20 20zm-332 90h90v92h-90zm130 0h92v92h-92zm0-40v-90h92v90zm-170-130h40v40h-40zm60 80c11.046875 0 20-8.953125 20-20v-20h50v90h-90v-50zm-20 352h-40v-40h40zm20-80h-20v-50h90v90h-50v-20c0-11.046875-8.953125-20-20-20zm202 40h-92v-90h92zm40-222h90v92h-90zm0 0\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_grid_metadata("design:paramtypes", [])
], vui_icon_grid_VuiIconGrid);

//# sourceMappingURL=vui-icon-grid.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-group.js
var vui_icon_group_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_group_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconGroup_1;


const vui_icon_group_VIEW = Symbol('view');
let vui_icon_group_VuiIconGroup = VuiIconGroup_1 = class VuiIconGroup extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_group_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconGroup_1.template.content.cloneNode(true));
    }
};
vui_icon_group_VuiIconGroup = VuiIconGroup_1 = vui_icon_group_decorate([
    VUI('vui-icon-group', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"state_tt\">        <circle class=\"cls-1\" cx=\"12\" cy=\"14\" r=\"8\"/>        <path class=\"cls-2\" d=\"M7.53,5.37a7.44,7.44,0,0,1,1.36-.74,8.19,8.19,0,0,1,1.5-.47\"/>        <path class=\"cls-2\" d=\"M4.16,10.39a8.19,8.19,0,0,1,.47-1.5,7.44,7.44,0,0,1,.74-1.36\"/>        <path class=\"cls-2\" d=\"M5.37,16.47a7.44,7.44,0,0,1-.74-1.36,8.19,8.19,0,0,1-.47-1.5\"/>        <path class=\"cls-2\" d=\"M10.39,19.84a8.19,8.19,0,0,1-1.5-.47,7.44,7.44,0,0,1-1.36-.74\"/>        <path class=\"cls-2\" d=\"M16.47,18.63a7.44,7.44,0,0,1-1.36.74,8.19,8.19,0,0,1-1.5.47\"/>        <path class=\"cls-2\" d=\"M19.84,13.61a8.19,8.19,0,0,1-.47,1.5,7.44,7.44,0,0,1-.74,1.36\"/>        <line class=\"cls-2\" x1=\"17\" y1=\"4\" x2=\"17\" y2=\"10\"/>        <line class=\"cls-2\" x1=\"20\" y1=\"7\" x2=\"14\" y2=\"7\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_group_metadata("design:paramtypes", [])
], vui_icon_group_VuiIconGroup);

//# sourceMappingURL=vui-icon-group.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-max.js
var vui_icon_max_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_max_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconMax_1;


const vui_icon_max_VIEW = Symbol('view');
let vui_icon_max_VuiIconMax = VuiIconMax_1 = class VuiIconMax extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_max_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconMax_1.template.content.cloneNode(true));
    }
};
vui_icon_max_VuiIconMax = VuiIconMax_1 = vui_icon_max_decorate([
    VUI('vui-icon-max', {html: "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 779 705\">    <defs>        <style>            .cls-1 {                fill: none;            }            .cls-1, .cls-2 {                stroke: #000;                stroke-miterlimit: 10;                stroke-width: 18px;            }        </style>    </defs>    <g>        <rect class=\"cls-1\" x=\"207\" y=\"398\" width=\"140\" height=\"298\"/>        <rect class=\"cls-1\" x=\"417\" y=\"198\" width=\"140\" height=\"498\"/>        <rect class=\"cls-2\" x=\"630\" y=\"9\" width=\"140\" height=\"687\"/>        <rect class=\"cls-1\" x=\"9\" y=\"556\" width=\"140\" height=\"140\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_max_metadata("design:paramtypes", [])
], vui_icon_max_VuiIconMax);

//# sourceMappingURL=vui-icon-max.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-min.js
var vui_icon_min_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_min_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconMin_1;


const vui_icon_min_VIEW = Symbol('view');
let vui_icon_min_VuiIconMin = VuiIconMin_1 = class VuiIconMin extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_min_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconMin_1.template.content.cloneNode(true));
    }
};
vui_icon_min_VuiIconMin = VuiIconMin_1 = vui_icon_min_decorate([
    VUI('vui-icon-min', {html: "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\" viewBox=\"0 0 774 705\">    <defs>        <style>            .cls-1 {                fill: none;                stroke: #000;                stroke-miterlimit: 10;                stroke-width: 18px;            }        </style>    </defs>    <g>        <rect y=\"564\" width=\"140\" height=\"140\"/>        <rect class=\"cls-1\" x=\"202\" y=\"398\" width=\"140\" height=\"298\"/>        <rect class=\"cls-1\" x=\"412\" y=\"198\" width=\"140\" height=\"498\"/>        <rect class=\"cls-1\" x=\"625\" y=\"9\" width=\"140\" height=\"687\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_min_metadata("design:paramtypes", [])
], vui_icon_min_VuiIconMin);

//# sourceMappingURL=vui-icon-min.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-more.js
var vui_icon_more_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_more_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconMore_1;


const vui_icon_more_VIEW = Symbol('view');
let vui_icon_more_VuiIconMore = VuiIconMore_1 = class VuiIconMore extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_more_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconMore_1.template.content.cloneNode(true));
    }
};
vui_icon_more_VuiIconMore = VuiIconMore_1 = vui_icon_more_decorate([
    VUI('vui-icon-more', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <g id=\"more\">        <path d=\"M12,11a1,1,0,1,0,1,1,1,1,0,0,0-1-1Z\"/>        <path d=\"M12,7a1,1,0,1,0,1,1,1,1,0,0,0-1-1Z\"/>        <path d=\"M12,15a1,1,0,1,0,1,1,1,1,0,0,0-1-1Z\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_more_metadata("design:paramtypes", [])
], vui_icon_more_VuiIconMore);

//# sourceMappingURL=vui-icon-more.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-negation.js
var vui_icon_negation_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_negation_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconNegation_1;


const vui_icon_negation_VIEW = Symbol('view');
let vui_icon_negation_VuiIconNegation = VuiIconNegation_1 = class VuiIconNegation extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_negation_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconNegation_1.template.content.cloneNode(true));
    }
};
vui_icon_negation_VuiIconNegation = VuiIconNegation_1 = vui_icon_negation_decorate([
    VUI('vui-icon-negation', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g>        <rect width=\"3\" height=\"13\" rx=\"1.5\" ry=\"1.5\" x=\"4.5\" y=\"1\" class=\"cls-1\"/>        <rect width=\"3\" height=\"4\" rx=\"1.5\" ry=\"1.5\" x=\"4.5\" y=\"17\" class=\"cls-1\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_negation_metadata("design:paramtypes", [])
], vui_icon_negation_VuiIconNegation);

//# sourceMappingURL=vui-icon-negation.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-pin.js
var vui_icon_pin_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_pin_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconPin_1;


const vui_icon_pin_VIEW = Symbol('view');
let vui_icon_pin_VuiIconPin = VuiIconPin_1 = class VuiIconPin extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_pin_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconPin_1.template.content.cloneNode(true));
    }
};
vui_icon_pin_VuiIconPin = VuiIconPin_1 = vui_icon_pin_decorate([
    VUI('vui-icon-pin', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;            }            .cls-2 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"pin_tt\">        <!--<path class=\"cls-1\" d=\"M9,6h6v5l4,4,1,1a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1l1-1,4-4Z\"/>-->        <line class=\"cls-2\" x1=\"7\" y1=\"4\" x2=\"17\" y2=\"4\"/>        <line class=\"cls-2\" x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"/>        <polyline class=\"cls-2\" points=\"9 4 9 11 5 15\"/>        <polyline class=\"cls-2\" points=\"19 15 15 11 15 4\"/>        <line class=\"cls-2\" x1=\"12\" y1=\"15\" x2=\"12\" y2=\"20\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_pin_metadata("design:paramtypes", [])
], vui_icon_pin_VuiIconPin);

//# sourceMappingURL=vui-icon-pin.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-pivot.js
var vui_icon_pivot_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_pivot_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconPivot_1;


const vui_icon_pivot_VIEW = Symbol('view');
let vui_icon_pivot_VuiIconPivot = VuiIconPivot_1 = class VuiIconPivot extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_pivot_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconPivot_1.template.content.cloneNode(true));
    }
};
vui_icon_pivot_VuiIconPivot = VuiIconPivot_1 = vui_icon_pivot_decorate([
    VUI('vui-icon-pivot', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2, .cls-3 {                fill: none;                stroke: #000;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g>        <rect class=\"cls-1\" x=\"3\" y=\"5\" width=\"16\" height=\"15\"/>        <rect class=\"cls-2\" x=\"3\" y=\"3\" width=\"6\" height=\"6\"/>        <rect class=\"cls-2\" x=\"9\" y=\"3\" width=\"12\" height=\"6\"/>        <!--<rect class=\"cls-2\" x=\"9\" y=\"9\" width=\"12\" height=\"12\"/>-->        <polyline class=\"cls-2\" points=\"21 19 21 21 19 21\"/>        <line class=\"cls-3\" x1=\"16\" y1=\"21\" x2=\"12.5\" y2=\"21\"/>        <line class=\"cls-3\" x1=\"21\" y1=\"14\" x2=\"21\" y2=\"16\"/>        <!--<line class=\"cls-3\" x1=\"21\" y1=\"9\" x2=\"21\" y2=\"21\"/>-->        <rect class=\"cls-2\" x=\"3\" y=\"9\" width=\"6\" height=\"12\"/>        <!--<polyline class=\"cls-2\" points=\"14 15 16 12 18 15\"/>-->        <!--<polyline class=\"cls-2\" points=\"13 18 16 18 16 14\"/>-->    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_pivot_metadata("design:paramtypes", [])
], vui_icon_pivot_VuiIconPivot);

//# sourceMappingURL=vui-icon-pivot.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-preferences.js
var vui_icon_preferences_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_preferences_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconPreferences_1;


const vui_icon_preferences_VIEW = Symbol('view');
let vui_icon_preferences_VuiIconPreferences = VuiIconPreferences_1 = class VuiIconPreferences extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_preferences_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconPreferences_1.template.content.cloneNode(true));
    }
};
vui_icon_preferences_VuiIconPreferences = VuiIconPreferences_1 = vui_icon_preferences_decorate([
    VUI('vui-icon-preferences', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2 {                fill: none;                stroke-linecap: round;                stroke-miterlimit: 10;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"preferences_tt\">        <path class=\"cls-1\" d=\"M10,8a2,2,0,1,1,2,2A2,2,0,0,1,10,8Z\"/>        <path class=\"cls-1\" d=\"M14,14a2,2,0,1,1,2,2A2,2,0,0,1,14,14Z\"/>        <path class=\"cls-1\" d=\"M6,20a2,2,0,1,1,2,2A2,2,0,0,1,6,20Z\"/>        <path class=\"cls-2\" d=\"M14,12H3\"/>        <path class=\"cls-2\" d=\"M21,12H18\"/>        <path class=\"cls-2\" d=\"M6,18H3\"/>        <path class=\"cls-2\" d=\"M21,18H10\"/>        <path class=\"cls-2\" d=\"M14,6h7\"/>        <path class=\"cls-2\" d=\"M3,6h7\"/>        <path class=\"cls-2\" d=\"M18,12a2,2,0,1,1-2-2A2,2,0,0,1,18,12Z\"/>        <path class=\"cls-2\" d=\"M10,18a2,2,0,1,1-2-2A2,2,0,0,1,10,18Z\"/>        <path class=\"cls-2\" d=\"M10,6a2,2,0,1,1,2,2A2,2,0,0,1,10,6Z\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_preferences_metadata("design:paramtypes", [])
], vui_icon_preferences_VuiIconPreferences);

//# sourceMappingURL=vui-icon-preferences.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-refresh.js
var vui_icon_refresh_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_refresh_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconRefresh_1;


const vui_icon_refresh_VIEW = Symbol('view');
let vui_icon_refresh_VuiIconRefresh = VuiIconRefresh_1 = class VuiIconRefresh extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_refresh_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconRefresh_1.template.content.cloneNode(true));
    }
};
vui_icon_refresh_VuiIconRefresh = VuiIconRefresh_1 = vui_icon_refresh_decorate([
    VUI('vui-icon-refresh', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1, .cls-2 {                fill: none;                stroke-linecap: round;                stroke-width: 2px;            }            .cls-1 {                stroke-miterlimit: 10;            }            .cls-2 {                stroke-linejoin: round;            }        </style>    </defs>    <g id=\"refresh\">        <path class=\"cls-1\" d=\"M7.76,7.76a6,6,0,1,1,0,8.48\"/>        <polyline class=\"cls-2\" points=\"7 4.98 7 8.98 11 8.98\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_refresh_metadata("design:paramtypes", [])
], vui_icon_refresh_VuiIconRefresh);

//# sourceMappingURL=vui-icon-refresh.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-range.js
var vui_icon_range_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_range_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconRange_1;


const vui_icon_range_VIEW = Symbol('view');
let vui_icon_range_VuiIconRange = VuiIconRange_1 = class VuiIconRange extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_range_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconRange_1.template.content.cloneNode(true));
    }
};
vui_icon_range_VuiIconRange = VuiIconRange_1 = vui_icon_range_decorate([
    VUI('vui-icon-range', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 28\">\t<g id=\"Layer_2\" data-name=\"Layer 2\">\t\t<g id=\"Layer_1-2\" data-name=\"Layer 1\">\t\t\t<rect width=\"3\" height=\"28\"/>\t\t\t<rect x=\"19\" width=\"3\" height=\"28\"/>\t\t\t<rect x=\"2\" width=\"4\" height=\"3\"/>\t\t\t<rect x=\"16\" width=\"4\" height=\"3\"/>\t\t\t<rect x=\"2\" y=\"25\" width=\"4\" height=\"3\"/>\t\t\t<rect x=\"16\" y=\"25\" width=\"4\" height=\"3\"/>\t\t</g>\t</g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_range_metadata("design:paramtypes", [])
], vui_icon_range_VuiIconRange);

//# sourceMappingURL=vui-icon-range.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-save.js
var vui_icon_save_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_save_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSave_1;


const vui_icon_save_VIEW = Symbol('view');
let vui_icon_save_VuiIconSave = VuiIconSave_1 = class VuiIconSave extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_save_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSave_1.template.content.cloneNode(true));
    }
};
vui_icon_save_VuiIconSave = VuiIconSave_1 = vui_icon_save_decorate([
    VUI('vui-icon-save', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill-opacity: 0.2;                fill: #000;                stroke-width: 0;            }            .cls-2, .cls-3 {                fill: none;                stroke-linejoin: round;            }            .cls-2 {                stroke-width: 2px;            }        </style>    </defs>    <g id=\"save_tt\">        <path class=\"cls-1\"              d=\"M16,5v5H8V6H5a1,1,0,0,0-.39.08.94.94,0,0,0-.53.53A1,1,0,0,0,4,7V21a1,1,0,0,0,.08.39.94.94,0,0,0,.53.53A1,1,0,0,0,5,22H19a1,1,0,0,0,.39-.08.94.94,0,0,0,.53-.53A1,1,0,0,0,20,21V9ZM12,18a3,3,0,1,1,3-3A3,3,0,0,1,12,18Z\"/>        <path class=\"cls-2\"              d=\"M19,20H5a1,1,0,0,1-.39-.08.94.94,0,0,1-.53-.53A1,1,0,0,1,4,19V5a1,1,0,0,1,.08-.39.94.94,0,0,1,.53-.53A1,1,0,0,1,5,4H15.5L20,8.5V19a1,1,0,0,1-.08.39.94.94,0,0,1-.53.53A1,1,0,0,1,19,20Z\"/>        <polyline class=\"cls-3\" points=\"15.5 4 15.5 8.5 8.5 8.5 8.5 4\"/>        <circle class=\"cls-3\" cx=\"12\" cy=\"14\" r=\"2.5\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_save_metadata("design:paramtypes", [])
], vui_icon_save_VuiIconSave);

//# sourceMappingURL=vui-icon-save.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-search.js
var vui_icon_search_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_search_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSearch_1;


const vui_icon_search_VIEW = Symbol('view');
let vui_icon_search_VuiIconSearch = VuiIconSearch_1 = class VuiIconSearch extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_search_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSearch_1.template.content.cloneNode(true));
    }
};
vui_icon_search_VuiIconSearch = VuiIconSearch_1 = vui_icon_search_decorate([
    VUI('vui-icon-search', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-miterlimit: 10;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"search\">        <circle class=\"cls-1\" cx=\"10.5\" cy=\"10.5\" r=\"5.5\"/>        <line class=\"cls-1\" x1=\"15\" y1=\"15\" x2=\"19\" y2=\"19\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_search_metadata("design:paramtypes", [])
], vui_icon_search_VuiIconSearch);

//# sourceMappingURL=vui-icon-search.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-sort.js
var vui_icon_sort_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_sort_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSort_1;


const vui_icon_sort_VIEW = Symbol('view');
let vui_icon_sort_VuiIconSort = VuiIconSort_1 = class VuiIconSort extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_sort_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSort_1.template.content.cloneNode(true));
    }
};
vui_icon_sort_VuiIconSort = VuiIconSort_1 = vui_icon_sort_decorate([
    VUI('vui-icon-sort', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"download\">        <polyline class=\"cls-1\" points=\"7 5 7 16 11 12\"/>        <line class=\"cls-1\" x1=\"7\" y1=\"16\" x2=\"3\" y2=\"12\"/>        <polyline class=\"cls-1\" points=\"14 9 18 5 18 16\"/>        <line class=\"cls-1\" x1=\"18\" y1=\"5\" x2=\"22\" y2=\"9\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_sort_metadata("design:paramtypes", [])
], vui_icon_sort_VuiIconSort);

//# sourceMappingURL=vui-icon-sort.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-substract.js
var vui_icon_substract_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_substract_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSubstract_1;


const vui_icon_substract_VIEW = Symbol('view');
let vui_icon_substract_VuiIconSubstract = VuiIconSubstract_1 = class VuiIconSubstract extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_substract_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSubstract_1.template.content.cloneNode(true));
    }
};
vui_icon_substract_VuiIconSubstract = VuiIconSubstract_1 = vui_icon_substract_decorate([
    VUI('vui-icon-substract', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1 {                fill: none;                stroke-linecap: round;                stroke-miterlimit: 10;                stroke-width: 2px;            }        </style>    </defs>    <g id=\"add\">        <path class=\"cls-1\" d=\"M12,18m6-6H6\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_substract_metadata("design:paramtypes", [])
], vui_icon_substract_VuiIconSubstract);

//# sourceMappingURL=vui-icon-substract.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-sum.js
var vui_icon_sum_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_sum_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSum_1;


const vui_icon_sum_VIEW = Symbol('view');
let vui_icon_sum_VuiIconSum = VuiIconSum_1 = class VuiIconSum extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_sum_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSum_1.template.content.cloneNode(true));
    }
};
vui_icon_sum_VuiIconSum = VuiIconSum_1 = vui_icon_sum_decorate([
    VUI('vui-icon-sum', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24\" height=\"24\" viewBox=\"0 0 484.21 484.21\"\t style=\"enable-background:new 0 0 484.21 484.21;\" xml:space=\"preserve\">\t  <defs>        <style>            .cls-1 {                fill: currentColor;                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 20px;            }        </style>    </defs><g>\t<path class=\"cls-1\" d=\"M395.527,97.043V55.352H124.537l159.46,171.507c9.983,10.749,9.848,27.458-0.319,38.026L126.017,428.861h269.504v-25.18\t\tc0-15.256,12.413-27.668,27.674-27.668c15.256,0,27.681,12.412,27.681,27.668v52.848c0,15.262-12.419,27.681-27.681,27.681H61.014\t\tc-11.106,0-21.107-6.603-25.464-16.834c-4.359-10.226-2.189-22.012,5.509-30.026l184.584-191.964L40.743,46.521\t\tc-7.492-8.068-9.496-19.798-5.101-29.899C40.042,6.525,50.005,0,61.014,0h362.188c15.255,0,27.68,12.413,27.68,27.68v69.363\t\tc0,15.259-12.419,27.677-27.68,27.677C407.94,124.72,395.527,112.308,395.527,97.043z\"/></g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_sum_metadata("design:paramtypes", [])
], vui_icon_sum_VuiIconSum);

//# sourceMappingURL=vui-icon-sum.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-synopsis.js
var vui_icon_synopsis_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_synopsis_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconSynopsis_1;


const vui_icon_synopsis_VIEW = Symbol('view');
let vui_icon_synopsis_VuiIconSynopsis = VuiIconSynopsis_1 = class VuiIconSynopsis extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_synopsis_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconSynopsis_1.template.content.cloneNode(true));
    }
};
vui_icon_synopsis_VuiIconSynopsis = VuiIconSynopsis_1 = vui_icon_synopsis_decorate([
    VUI('vui-icon-synopsis', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\" viewBox=\"0 0 512 512\" xml:space=\"preserve\">\t<defs>\t\t<style>\t\t\t.cls-1 {                stroke-linecap: round;                stroke-linejoin: round;                stroke-width: 10px;            }\t\t</style>\t</defs>\t<g>\t\t<path class=\"cls-1\" d=\"M437.021,74.979C388.669,26.628,324.382,0,256.003,0c-68.381,0-132.67,26.628-181.022,74.979\t\t\tC26.629,123.331,0,187.618,0,255.998c0,68.382,26.629,132.67,74.981,181.022C123.333,485.372,187.621,512,256.003,512h100.413\t\t\tc52.567,0,95.334-42.766,95.334-95.333v-74.873H497c8.284,0,15-6.716,15-15v-70.796C512,187.618,485.372,123.331,437.021,74.979z\t\t\t M482,311.794h-45.25c-8.284,0-15,6.716-15,15v89.873c0,36.025-29.309,65.333-65.334,65.333H256.003\t\t\tC131.384,482,30,380.616,30,255.998C30,131.382,131.384,30,256.003,30C380.618,30,482,131.382,482,256.002V311.794z\"/>\t\t<path class=\"cls-1\" d=\"M336.333,192.798h-35.014c-1.555-6.358-4.061-12.347-7.379-17.793l24.765-24.764c5.858-5.858,5.858-15.355,0-21.213\t\t\tc-5.857-5.857-15.355-5.858-21.213,0l-24.766,24.765c-5.445-3.319-11.436-5.825-17.794-7.379v-35.013c0-8.284-6.716-15-15-15\t\t\ts-15,6.716-15,15v35.013c-6.359,1.555-12.348,4.061-17.794,7.38l-24.765-24.765c-5.857-5.858-15.355-5.858-21.213,0\t\t\tc-5.858,5.858-5.858,15.355,0,21.213l24.765,24.765c-3.319,5.446-5.825,11.435-7.379,17.793h-35.014c-8.284,0-15,6.716-15,15\t\t\ts6.716,15,15,15h35.014c1.554,6.359,4.061,12.349,7.38,17.795l-24.765,24.765c-5.858,5.858-5.858,15.355,0,21.213\t\t\tc2.929,2.929,6.768,4.394,10.607,4.394c3.839,0,7.678-1.464,10.606-4.394l24.766-24.766c5.445,3.319,11.434,5.825,17.792,7.379\t\t\tV304.2c0,8.284,6.716,15,15,15s15-6.716,15-15v-35.014c6.358-1.554,12.347-4.06,17.792-7.378l24.768,24.766\t\t\tc2.929,2.929,6.768,4.393,10.606,4.393c3.839,0,7.678-1.465,10.607-4.394c5.858-5.858,5.857-15.355,0-21.213l-24.767-24.765\t\t\tc3.32-5.446,5.826-11.436,7.381-17.795h35.014c8.284,0,15-6.716,15-15C351.333,199.514,344.617,192.798,336.333,192.798z\t\t\t M239.933,240.998c-18.306,0-33.199-14.893-33.199-33.2c0-18.306,14.893-33.199,33.199-33.199c18.307,0,33.2,14.893,33.2,33.199\t\t\tC273.133,226.105,258.239,240.998,239.933,240.998z\"/>\t</g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_synopsis_metadata("design:paramtypes", [])
], vui_icon_synopsis_VuiIconSynopsis);

//# sourceMappingURL=vui-icon-synopsis.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-trend-down.js
var vui_icon_trend_down_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_trend_down_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconTrendDown_1;


const vui_icon_trend_down_VIEW = Symbol('view');
let vui_icon_trend_down_VuiIconTrendDown = VuiIconTrendDown_1 = class VuiIconTrendDown extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_trend_down_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconTrendDown_1.template.content.cloneNode(true));
    }
};
vui_icon_trend_down_VuiIconTrendDown = VuiIconTrendDown_1 = vui_icon_trend_down_decorate([
    VUI('vui-icon-trend-down', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>            .cls-1, .cls-2 {                fill: none;                stroke-linecap: round;                stroke-linejoin: round;            }            .cls-1 {                stroke-width: 2px;            }        </style>    </defs>    <title>edit</title>    <g id=\"edit\">        <polygon class=\"cls-1\" points=\"16 5 19 8 8 19 5 19 5 16 16 5\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_trend_down_metadata("design:paramtypes", [])
], vui_icon_trend_down_VuiIconTrendDown);

//# sourceMappingURL=vui-icon-trend-down.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-trend-right.js
var vui_icon_trend_right_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_trend_right_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconTrendRight_1;


const vui_icon_trend_right_VIEW = Symbol('view');
let vui_icon_trend_right_VuiIconTrendRight = VuiIconTrendRight_1 = class VuiIconTrendRight extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_trend_right_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconTrendRight_1.template.content.cloneNode(true));
    }
};
vui_icon_trend_right_VuiIconTrendRight = VuiIconTrendRight_1 = vui_icon_trend_right_decorate([
    VUI('vui-icon-trend-right', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>.cls-1, .cls-2 {            fill: none;            stroke: #000;            stroke-linecap: round;            stroke-linejoin: round;        }        .cls-1 {            stroke-width: 2px;        }</style>    </defs>    <g>        <g transform=\"rotate(-135 12,12) \" id=\"edit\">            <polygon id=\"svg_1\" points=\"16 5 19 8 8 19 5 19 5 16 16 5\" class=\"cls-1\"/>        </g>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_trend_right_metadata("design:paramtypes", [])
], vui_icon_trend_right_VuiIconTrendRight);

//# sourceMappingURL=vui-icon-trend-right.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-trend-up.js
var vui_icon_trend_up_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_trend_up_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconTrendUp_1;


const vui_icon_trend_up_VIEW = Symbol('view');
let vui_icon_trend_up_VuiIconTrendUp = VuiIconTrendUp_1 = class VuiIconTrendUp extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_trend_up_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconTrendUp_1.template.content.cloneNode(true));
    }
};
vui_icon_trend_up_VuiIconTrendUp = VuiIconTrendUp_1 = vui_icon_trend_up_decorate([
    VUI('vui-icon-trend-up', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>.cls-1, .cls-2 {            fill: none;            stroke-linecap: round;            stroke-linejoin: round;        }        .cls-1 {            stroke-width: 2px;        }</style>    </defs>    <g>        <g transform=\"rotate(-180 12,12) \" id=\"edit\">            <polygon id=\"svg_1\" points=\"16 5 19 8 8 19 5 19 5 16 16 5\" class=\"cls-1\"/>        </g>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_trend_up_metadata("design:paramtypes", [])
], vui_icon_trend_up_VuiIconTrendUp);

//# sourceMappingURL=vui-icon-trend-up.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/component/vui-icon-visibility.js
var vui_icon_visibility_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_icon_visibility_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiIconVisibility_1;


const vui_icon_visibility_VIEW = Symbol('view');
let vui_icon_visibility_VuiIconVisibility = VuiIconVisibility_1 = class VuiIconVisibility extends vui_icon_VuiIcon {
    constructor() {
        super(vui_icon_visibility_VIEW);
    }
    initView() {
        this.shadowRoot.appendChild(VuiIconVisibility_1.template.content.cloneNode(true));
    }
};
vui_icon_visibility_VuiIconVisibility = VuiIconVisibility_1 = vui_icon_visibility_decorate([
    VUI('vui-icon-visibility', {html: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">    <defs>        <style>.cls-1, .cls-2 {            fill: none;            stroke: currentColor;        }        .cls-1 {            stroke-linejoin: round;            stroke-width: 2px;        }        .cls-2 {            stroke-miterlimit: 10;        }        </style>    </defs>    <title>preview</title>    <g id=\"preview\">        <path class=\"cls-1\" d=\"M5,12s3-5,7-5,7,5,7,5-3,5-7,5S5,12,5,12Z\"/>        <circle class=\"cls-2\" cx=\"12\" cy=\"12\" r=\"2.5\"/>    </g></svg>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }svg g {  fill: transparent; }.host.host--small svg {  width: 12px;  height: 12px; }.host.host--medium svg {  width: 16px;  height: 16px; }.host.host--large svg {  width: 24px;  height: 24px; }.host.host--accent-1 svg g > * {  stroke: var(--vc-color--default, #666);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-1--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2 svg g > * {  stroke: #fff;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-2--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3 svg g > * {  stroke: var(--vc-color--light, #bbb);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host.host--accent-3--hover svg g > * {  stroke: var(--vc-color--highlight, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_icon_visibility_metadata("design:paramtypes", [])
], vui_icon_visibility_VuiIconVisibility);

//# sourceMappingURL=vui-icon-visibility.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-icons/index.js


































if (customElements.get(vui_icon_add_VuiIconAdd.tag) === undefined) {
    customElements.define(vui_icon_add_VuiIconAdd.tag, Object.freeze(vui_icon_add_VuiIconAdd));
}
if (customElements.get(vui_icon_avg_VuiIconAvg.tag) === undefined) {
    customElements.define(vui_icon_avg_VuiIconAvg.tag, Object.freeze(vui_icon_avg_VuiIconAvg));
}
if (customElements.get(vui_icon_chevron_down_VuiIconChevronDown.tag) === undefined) {
    customElements.define(vui_icon_chevron_down_VuiIconChevronDown.tag, Object.freeze(vui_icon_chevron_down_VuiIconChevronDown));
}
if (customElements.get(vui_icon_chevron_right_VuiIconChevronRight.tag) === undefined) {
    customElements.define(vui_icon_chevron_right_VuiIconChevronRight.tag, Object.freeze(vui_icon_chevron_right_VuiIconChevronRight));
}
if (customElements.get(vui_icon_chevron_up_VuiIconChevronUp.tag) === undefined) {
    customElements.define(vui_icon_chevron_up_VuiIconChevronUp.tag, Object.freeze(vui_icon_chevron_up_VuiIconChevronUp));
}
if (customElements.get(vui_icon_close_VuiIconClose.tag) === undefined) {
    customElements.define(vui_icon_close_VuiIconClose.tag, Object.freeze(vui_icon_close_VuiIconClose));
}
if (customElements.get(vui_icon_count_VuiIconCount.tag) === undefined) {
    customElements.define(vui_icon_count_VuiIconCount.tag, Object.freeze(vui_icon_count_VuiIconCount));
}
if (customElements.get(vui_icon_dnd_multiple_VuiIconDragAndDropMultiple.tag) === undefined) {
    customElements.define(vui_icon_dnd_multiple_VuiIconDragAndDropMultiple.tag, Object.freeze(vui_icon_dnd_multiple_VuiIconDragAndDropMultiple));
}
if (customElements.get(vui_icon_dnd_single_VuiIconDragAndDropSingle.tag) === undefined) {
    customElements.define(vui_icon_dnd_single_VuiIconDragAndDropSingle.tag, Object.freeze(vui_icon_dnd_single_VuiIconDragAndDropSingle));
}
if (customElements.get(vui_icon_edit_VuiIconEdit.tag) === undefined) {
    customElements.define(vui_icon_edit_VuiIconEdit.tag, Object.freeze(vui_icon_edit_VuiIconEdit));
}
if (customElements.get(vui_icon_error_VuiIconError.tag) === undefined) {
    customElements.define(vui_icon_error_VuiIconError.tag, Object.freeze(vui_icon_error_VuiIconError));
}
if (customElements.get(vui_icon_expressions_VuiIconExpressions.tag) === undefined) {
    customElements.define(vui_icon_expressions_VuiIconExpressions.tag, Object.freeze(vui_icon_expressions_VuiIconExpressions));
}
if (customElements.get(vui_icon_filter_VuiIconFilter.tag) === undefined) {
    customElements.define(vui_icon_filter_VuiIconFilter.tag, Object.freeze(vui_icon_filter_VuiIconFilter));
}
if (customElements.get(vui_icon_grid_VuiIconGrid.tag) === undefined) {
    customElements.define(vui_icon_grid_VuiIconGrid.tag, Object.freeze(vui_icon_grid_VuiIconGrid));
}
if (customElements.get(vui_icon_group_VuiIconGroup.tag) === undefined) {
    customElements.define(vui_icon_group_VuiIconGroup.tag, Object.freeze(vui_icon_group_VuiIconGroup));
}
if (customElements.get(vui_icon_max_VuiIconMax.tag) === undefined) {
    customElements.define(vui_icon_max_VuiIconMax.tag, Object.freeze(vui_icon_max_VuiIconMax));
}
if (customElements.get(vui_icon_min_VuiIconMin.tag) === undefined) {
    customElements.define(vui_icon_min_VuiIconMin.tag, Object.freeze(vui_icon_min_VuiIconMin));
}
if (customElements.get(vui_icon_more_VuiIconMore.tag) === undefined) {
    customElements.define(vui_icon_more_VuiIconMore.tag, Object.freeze(vui_icon_more_VuiIconMore));
}
if (customElements.get(vui_icon_negation_VuiIconNegation.tag) === undefined) {
    customElements.define(vui_icon_negation_VuiIconNegation.tag, Object.freeze(vui_icon_negation_VuiIconNegation));
}
if (customElements.get(vui_icon_pin_VuiIconPin.tag) === undefined) {
    customElements.define(vui_icon_pin_VuiIconPin.tag, Object.freeze(vui_icon_pin_VuiIconPin));
}
if (customElements.get(vui_icon_pivot_VuiIconPivot.tag) === undefined) {
    customElements.define(vui_icon_pivot_VuiIconPivot.tag, Object.freeze(vui_icon_pivot_VuiIconPivot));
}
if (customElements.get(vui_icon_preferences_VuiIconPreferences.tag) === undefined) {
    customElements.define(vui_icon_preferences_VuiIconPreferences.tag, Object.freeze(vui_icon_preferences_VuiIconPreferences));
}
if (customElements.get(vui_icon_refresh_VuiIconRefresh.tag) === undefined) {
    customElements.define(vui_icon_refresh_VuiIconRefresh.tag, Object.freeze(vui_icon_refresh_VuiIconRefresh));
}
if (customElements.get(vui_icon_range_VuiIconRange.tag) === undefined) {
    customElements.define(vui_icon_range_VuiIconRange.tag, Object.freeze(vui_icon_range_VuiIconRange));
}
if (customElements.get(vui_icon_save_VuiIconSave.tag) === undefined) {
    customElements.define(vui_icon_save_VuiIconSave.tag, Object.freeze(vui_icon_save_VuiIconSave));
}
if (customElements.get(vui_icon_search_VuiIconSearch.tag) === undefined) {
    customElements.define(vui_icon_search_VuiIconSearch.tag, Object.freeze(vui_icon_search_VuiIconSearch));
}
if (customElements.get(vui_icon_sort_VuiIconSort.tag) === undefined) {
    customElements.define(vui_icon_sort_VuiIconSort.tag, Object.freeze(vui_icon_sort_VuiIconSort));
}
if (customElements.get(vui_icon_substract_VuiIconSubstract.tag) === undefined) {
    customElements.define(vui_icon_substract_VuiIconSubstract.tag, Object.freeze(vui_icon_substract_VuiIconSubstract));
}
if (customElements.get(vui_icon_sum_VuiIconSum.tag) === undefined) {
    customElements.define(vui_icon_sum_VuiIconSum.tag, Object.freeze(vui_icon_sum_VuiIconSum));
}
if (customElements.get(vui_icon_synopsis_VuiIconSynopsis.tag) === undefined) {
    customElements.define(vui_icon_synopsis_VuiIconSynopsis.tag, Object.freeze(vui_icon_synopsis_VuiIconSynopsis));
}
if (customElements.get(vui_icon_trend_down_VuiIconTrendDown.tag) === undefined) {
    customElements.define(vui_icon_trend_down_VuiIconTrendDown.tag, Object.freeze(vui_icon_trend_down_VuiIconTrendDown));
}
if (customElements.get(vui_icon_trend_right_VuiIconTrendRight.tag) === undefined) {
    customElements.define(vui_icon_trend_right_VuiIconTrendRight.tag, Object.freeze(vui_icon_trend_right_VuiIconTrendRight));
}
if (customElements.get(vui_icon_trend_up_VuiIconTrendUp.tag) === undefined) {
    customElements.define(vui_icon_trend_up_VuiIconTrendUp.tag, Object.freeze(vui_icon_trend_up_VuiIconTrendUp));
}
if (customElements.get(vui_icon_visibility_VuiIconVisibility.tag) === undefined) {
    customElements.define(vui_icon_visibility_VuiIconVisibility.tag, Object.freeze(vui_icon_visibility_VuiIconVisibility));
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-layouts/component/vui-layout-stacked.js
var vui_layout_stacked_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_layout_stacked_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiLayoutStacked_1;


const vui_layout_stacked_VIEW = Symbol('view');
const vui_layout_stacked_STATE = Symbol('state');
const vui_layout_stacked_ELEMENT = {
    DIV: 'div',
    SLOT: 'slot'
};
const vui_layout_stacked_CLASS = {
    ELEMENT: 'host',
    MOD: {
        HEIGHT: 'host--height',
        BORDER: 'host--border',
        VERTICAL: 'host--vertical',
        HORIZONTAL: 'host--horizontal'
    },
    ITEM: {
        ELEMENT: 'host__item'
    }
};
let vui_layout_stacked_VuiLayoutStacked = VuiLayoutStacked_1 = class VuiLayoutStacked extends Component {
    constructor() {
        super(vui_layout_stacked_VIEW);
    }
    get justification() {
        return this.get('justification', 'center');
    }
    get direction() {
        return this.get('direction', 'vertical');
    }
    get observables() {
        return ['justification', 'height', 'border', 'direction'];
    }
    get border() {
        return this.get('border');
    }
    get height() {
        return this.get('height');
    }
    initState() {
        this[vui_layout_stacked_STATE] = {
            slotMutationObserver: new MutationObserver((mutations) => {
                let frag = document.createDocumentFragment();
                mutations.forEach((mutation) => {
                    mutation.addedNodes.forEach((node) => {
                        let wrap = utilities_dom_UtilitiesDOM.create(vui_layout_stacked_ELEMENT.DIV, [vui_layout_stacked_CLASS.ITEM.ELEMENT, `host--${this.justification}`]);
                        frag.appendChild(wrap);
                        wrap.appendChild(node);
                    });
                });
                this[vui_layout_stacked_VIEW].slot.appendChild(frag);
            })
        };
    }
    attachEvents() {
        this[vui_layout_stacked_STATE].slotMutationObserver.observe(this, { childList: true });
    }
    detachEvents() {
        this[vui_layout_stacked_STATE].slotMutationObserver.disconnect();
    }
    initView() {
        this.shadowRoot.appendChild(VuiLayoutStacked_1.template.content.cloneNode(true));
        this[vui_layout_stacked_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_layout_stacked_CLASS.ELEMENT}`),
            slot: this.shadowRoot.querySelector(vui_layout_stacked_ELEMENT.SLOT)
        };
    }
    bindView() {
        this.reconnectEvents();
        if (this.height) {
            this[vui_layout_stacked_VIEW].xRef.style.height = `${this.height}px`;
        }
        utilities_dom_UtilitiesDOM.toggleClass(this.height !== undefined, this[vui_layout_stacked_VIEW].xRef, [vui_layout_stacked_CLASS.MOD.HEIGHT]);
        utilities_dom_UtilitiesDOM.toggleClass(this.border !== undefined, this[vui_layout_stacked_VIEW].xRef, [vui_layout_stacked_CLASS.MOD.BORDER]);
        utilities_dom_UtilitiesDOM.toggleClass(this.direction === 'vertical', this[vui_layout_stacked_VIEW].xRef, [vui_layout_stacked_CLASS.MOD.VERTICAL]);
        utilities_dom_UtilitiesDOM.toggleClass(this.direction === 'horizontal', this[vui_layout_stacked_VIEW].xRef, [vui_layout_stacked_CLASS.MOD.HORIZONTAL]);
    }
};
vui_layout_stacked_VuiLayoutStacked = VuiLayoutStacked_1 = vui_layout_stacked_decorate([
    VUI('vui-layout-stacked', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host__item {  display: flex; }  .host__item, .host--center {    justify-content: center; }  .host--left {    justify-content: flex-start; }  .host--right {    justify-content: flex-end; }  .host--vertical {    height: 100%;    flex-direction: column; }  .host--horizontal {    width: 100%;    flex-direction: row; }.host--height::-webkit-scrollbar-thumb {  background: rgba(0, 0, 0, 0.15);  border-radius: 1px; }.host--height::-webkit-scrollbar-track {  background: transparent; }.host--height::-webkit-scrollbar {  height: 7px;  width: 7px; }.host--height {  overflow-x: hidden;  overflow-y: auto; }.host__item > * {  width: 100%; }.host__item:not(:last-child) {  padding-bottom: 5px; }  .host__item:not(:last-child) > * {    width: 100%; }.host--border {  border-bottom: 1px solid #e7e7e7; }"}),
    vui_layout_stacked_metadata("design:paramtypes", [])
], vui_layout_stacked_VuiLayoutStacked);

//# sourceMappingURL=vui-layout-stacked.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-layouts/index.js

if (customElements.get(vui_layout_stacked_VuiLayoutStacked.tag) === undefined) {
    customElements.define(vui_layout_stacked_VuiLayoutStacked.tag, vui_layout_stacked_VuiLayoutStacked);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-loader/component/vui-loader.js
var vui_loader_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_loader_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiLoader_1;

const vui_loader_VIEW = Symbol('view');
const vui_loader_CLASS = {
    ELEMENT: 'host'
};
let vui_loader_VuiLoader = VuiLoader_1 = class VuiLoader extends Component {
    constructor() {
        super(vui_loader_VIEW);
    }
    get visible() {
        return this.get('visible', false);
    }
    get observables() {
        return [];
    }
    initView() {
        this.shadowRoot.appendChild(VuiLoader_1.template.content.cloneNode(true));
        this[vui_loader_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_loader_CLASS.ELEMENT}`)
        };
    }
};
vui_loader_VuiLoader = VuiLoader_1 = vui_loader_decorate([
    VUI('vui-loader', {html: "<div class=\"host__cube host__cube4\"></div><div class=\"host__cube host__cube3\"></div><div class=\"host__cube host__cube2\"></div><div class=\"host__cube host__cube1\"></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");@keyframes ripple {  0% {    transform: scale(0, 0);    opacity: 1; }  20% {    transform: scale(25, 25);    opacity: 1; }  100% {    opacity: 0;    transform: scale(40, 40); } }@-webkit-keyframes sk-foldCubeAngle {  0%, 10% {    -webkit-transform: perspective(140px) rotateX(-180deg);    transform: perspective(140px) rotateX(-180deg);    opacity: 0; }  25%, 75% {    -webkit-transform: perspective(140px) rotateX(0deg);    transform: perspective(140px) rotateX(0deg);    opacity: 1; }  90%, 100% {    -webkit-transform: perspective(140px) rotateY(180deg);    transform: perspective(140px) rotateY(180deg);    opacity: 0; } }@keyframes popup-slide-up {  0% {    opacity: 0;    margin-top: -10px; }  100% {    opacity: 1;    margin-top: 0; } }@keyframes bounce {  0% {    transform: scale(0.9); }  50% {    transform: scale(1.05); }  100% {    transform: scale(0.95); } }@-webkit-keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@-webkit-keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }@keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }.host {  background-color: var(--vc-color--highlight, #4680FE);  width: 40px;  height: 40px;  -webkit-transform: rotateZ(45deg);  transform: rotateZ(45deg); }  .host__cube {    float: left;    width: 50%;    height: 50%;    position: relative;    -webkit-transform: scale(1.1);    -ms-transform: scale(1.1);    transform: scale(1.1); }    .host__cube:before {      content: \"\";      position: absolute;      top: 0;      left: 0;      width: 100%;      height: 100%;      background-color: #333;      -webkit-animation: sk-foldCubeAngle 2.4s infinite linear both;      animation: sk-foldCubeAngle 2.4s infinite linear both;      -webkit-transform-origin: 100% 100%;      -ms-transform-origin: 100% 100%;      transform-origin: 100% 100%; }  .host__cube2 {    -webkit-transform: scale(1.1) rotateZ(90deg);    transform: scale(1.1) rotateZ(90deg); }    .host__cube2:before {      -webkit-animation-delay: 0.3s;      animation-delay: 0.3s; }  .host__cube3 {    -webkit-transform: scale(1.1) rotateZ(180deg);    transform: scale(1.1) rotateZ(180deg); }    .host__cube3:before {      -webkit-animation-delay: 0.6s;      animation-delay: 0.6s; }  .host__cube4 {    -webkit-transform: scale(1.1) rotateZ(270deg);    transform: scale(1.1) rotateZ(270deg); }    .host__cube4:before {      -webkit-animation-delay: 0.9s;      animation-delay: 0.9s; }"}),
    vui_loader_metadata("design:paramtypes", [])
], vui_loader_VuiLoader);

//# sourceMappingURL=vui-loader.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-loader/index.js

if (customElements.get(vui_loader_VuiLoader.tag) === undefined) {
    customElements.define(vui_loader_VuiLoader.tag, vui_loader_VuiLoader);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-pagination/component/vui-pagination.js
var vui_pagination_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_pagination_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiPagination_1;

const vui_pagination_VIEW = Symbol('view');
const vui_pagination_EVENTS = Symbol('events');
const vui_pagination_STATE = Symbol('state');
const PAGINATION = {
    DEFAULT_PAGES: { 10: 10, 20: 20, 25: 25, 50: 50, 100: 100, 200: 200 }
};
const vui_pagination_EVENT = {
    CLICK: 'click',
    PREVCLICKED: 'prevClicked',
    NEXTCLICKED: 'nextClicked',
    ITEMSCHANGED: 'itemsChanged',
    OPTIONSINGLECHANGED: 'optionsinglechanged'
};
const vui_pagination_ELEMENT = {
    SELECT: 'vui-select'
};
let vui_pagination_VuiPagination = VuiPagination_1 = class VuiPagination extends Component {
    constructor() {
        super(vui_pagination_VIEW);
    }
    get observables() {
        return ['pages', 'current', 'items', 'prev', 'next'];
    }
    get visible() {
        return this.get('visible', false);
    }
    get pages() {
        return this.get('pages', 1);
    }
    get current() {
        return this.get('current', 1);
    }
    get items() {
        return this.get('items', PAGINATION.DEFAULT_PAGES[10]);
    }
    get next() {
        return this.get('next', 'Next');
    }
    get prev() {
        return this.get('prev', 'Prev');
    }
    set pages(value) {
        this.set('pages', value);
        this.reconnectEvents();
    }
    initState() {
        this[vui_pagination_STATE] = {
            pagesList: PAGINATION.DEFAULT_PAGES
        };
    }
    initEvents() {
        this[vui_pagination_EVENTS] = {
            onPrevClickedBind: this._onPrevClicked.bind(this),
            onPerPageSplitChangedBind: this._onPerPageSplitChanged.bind(this),
            onNextClickedBind: this._onNextClicked.bind(this),
        };
    }
    attachEvents() {
        this[vui_pagination_VIEW].prev.addEventListener(vui_pagination_EVENT.CLICK, this[vui_pagination_EVENTS].onPrevClickedBind);
        this[vui_pagination_VIEW].select.addEventListener(vui_pagination_EVENT.OPTIONSINGLECHANGED, this[vui_pagination_EVENTS].onPerPageSplitChangedBind);
        this[vui_pagination_VIEW].next.addEventListener(vui_pagination_EVENT.CLICK, this[vui_pagination_EVENTS].onNextClickedBind);
    }
    detachEvents() {
        this[vui_pagination_VIEW].prev.removeEventListener(vui_pagination_EVENT.CLICK, this[vui_pagination_EVENTS].onPrevClickedBind);
        this[vui_pagination_VIEW].select.removeEventListener(vui_pagination_EVENT.OPTIONSINGLECHANGED, this[vui_pagination_EVENTS].onPerPageSplitChangedBind);
        this[vui_pagination_VIEW].next.removeEventListener(vui_pagination_EVENT.CLICK, this[vui_pagination_EVENTS].onNextClickedBind);
    }
    initView() {
        this.shadowRoot.appendChild(VuiPagination_1.template.content.cloneNode(true));
        this[vui_pagination_VIEW] = {
            prev: this.shadowRoot.querySelector('.host__button--prev'),
            counter: this.shadowRoot.querySelector('.host__button--pages'),
            select: this.shadowRoot.querySelector(vui_pagination_ELEMENT.SELECT),
            next: this.shadowRoot.querySelector('.host__button--next')
        };
    }
    bindView() {
        this._refreshPagesSelector();
        this[vui_pagination_VIEW].prev.innerText = this.prev;
        this[vui_pagination_VIEW].prev.disabled = !(this.current > 1);
        this[vui_pagination_VIEW].counter.innerHTML = `${this.current} / ${this.pages}`;
        this[vui_pagination_VIEW].next.innerText = this.next;
        this[vui_pagination_VIEW].next.disabled = !(this.current < this.pages);
    }
    _refreshPagesSelector() {
        if (this[vui_pagination_VIEW].select.options === '') {
            this[vui_pagination_VIEW].select.options = Object.keys(this[vui_pagination_STATE].pagesList)
                .map((key) => `${key}:${this[vui_pagination_STATE].pagesList[key]},`).join(',');
            this[vui_pagination_VIEW].select.selected = this.items.toString();
        }
        else if (this[vui_pagination_VIEW].select.options) {
            this[vui_pagination_STATE].pagesList[this.items.toString()] = this.items.toString();
        }
    }
    _onPrevClicked() {
        this.dispatchEvent(new CustomEvent(vui_pagination_EVENT.PREVCLICKED, { bubbles: true }));
    }
    _onPerPageSplitChanged(event) {
        this.dispatchEvent(new CustomEvent(vui_pagination_EVENT.ITEMSCHANGED, { detail: parseInt(PAGINATION.DEFAULT_PAGES[event.detail[0]], 10), bubbles: true }));
    }
    _onNextClicked() {
        this.dispatchEvent(new CustomEvent(vui_pagination_EVENT.NEXTCLICKED, { bubbles: true }));
    }
};
vui_pagination_VuiPagination = VuiPagination_1 = vui_pagination_decorate([
    VUI('vui-pagination', {html: "<div class=\"host__wrapper\">    <vui-button class=\"host__button--prev\">-</vui-button>    <vui-button disabled=\"true\" class=\"host__button--pages host__button--disabled\">-</vui-button>    <vui-select></vui-select>    <vui-button class=\"host__button--next\">-</vui-button></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host .host__wrapper {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }  .host {    color: var(--vc-color--default, #666); }"}),
    vui_pagination_metadata("design:paramtypes", [])
], vui_pagination_VuiPagination);

//# sourceMappingURL=vui-pagination.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-pagination/index.js

if (customElements.get(vui_pagination_VuiPagination.tag) === undefined) {
    customElements.define(vui_pagination_VuiPagination.tag, vui_pagination_VuiPagination);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-popup/component/vui-popup.js
var vui_popup_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_popup_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiPopup_1;



const vui_popup_CLASS = {
    ELEMENT: 'host',
    MOD: {
        HIDDEN: 'host--hidden',
        ANIMATE: 'host--animate'
    }
};
const vui_popup_EVENT = {
    MOUSEDOWN: 'mousedown',
    CLICK: 'click',
    SCROLL: 'scroll',
    CLOSED: 'closed',
    OPENED: 'opened'
};
const vui_popup_POSITION = {
    LEFT: 'left',
    RIGHT: 'right',
    TOP: 'top',
    BOTTOM: 'bottom',
    CENTER: 'center'
};
const vui_popup_VIEW = Symbol('view');
const vui_popup_STATE = Symbol('state');
const vui_popup_EVENTS = Symbol('events');
let vui_popup_VuiPopup = VuiPopup_1 = class VuiPopup extends widget_Widget {
    constructor() {
        super(vui_popup_VIEW);
    }
    static addDocumentClick(cb) {
        VuiPopup_1.documentClickEvents.forEach((callback) => document.body.removeEventListener(vui_popup_EVENT.CLICK, callback));
        VuiPopup_1.documentClickEvents.unshift(cb);
        VuiPopup_1.documentClickEvents.forEach((callback) => document.body.addEventListener(vui_popup_EVENT.CLICK, callback));
    }
    static removeDocumentClick(callback) {
        document.body.removeEventListener(vui_popup_EVENT.CLICK, callback);
        VuiPopup_1.documentClickEvents.splice(VuiPopup_1.documentClickEvents.indexOf(callback), 1);
    }
    get observables() {
        return [
            'position',
            'positiondetails',
            'autohide',
            'locked',
            'closeonfocuslost',
            'closeondocumentmousedown'
        ];
    }
    get position() {
        return this.get('position', vui_popup_POSITION.BOTTOM);
    }
    get positiondetails() {
        return this.get('positiondetails', vui_popup_POSITION.CENTER);
    }
    get autohide() {
        return this.get('autohide', false);
    }
    get locked() {
        return this.get('locked', false);
    }
    get closeonfocuslost() {
        return this.get('closeonfocuslost', false);
    }
    set closeonfocuslost(value) {
        this.set('closeonfocuslost', value);
        if (this.closeonfocuslost) {
            VuiPopup_1.addDocumentClick(this[vui_popup_EVENTS].onDocumentClickBind);
        }
        else {
            VuiPopup_1.removeDocumentClick(this[vui_popup_EVENTS].onDocumentClickBind);
        }
    }
    get closeondocumentmousedown() {
        return this.get('closeondocumentmousedown', false);
    }
    set closeondocumentmousedown(value) {
        this.set('closeondocumentmousedown', value);
        if (this.closeondocumentmousedown) {
            document.addEventListener(vui_popup_EVENT.MOUSEDOWN, this[vui_popup_EVENTS].onDocumentMouseDownBind, true);
        }
        else {
            document.removeEventListener(vui_popup_EVENT.MOUSEDOWN, this[vui_popup_EVENTS].onDocumentMouseDownBind, true);
        }
    }
    isOpened() {
        return document.body.contains(this) && this.parentNode === document.body;
    }
    open(target) {
        if (this.isOpened()) {
            return this;
        }
        this._prepareViewportRects();
        document.body.appendChild(this);
        this[vui_popup_STATE].target = target;
        this[vui_popup_STATE].targetRect = this[vui_popup_STATE].target.getBoundingClientRect();
        this[vui_popup_STATE].elementRect = this[vui_popup_VIEW].xRef.getBoundingClientRect();
        this._trackTarget(true);
        // necessary getter for animation reflow
        let reflow = this[vui_popup_VIEW].xRef.offsetWidth;
        utilities_dom_UtilitiesDOM.addClass(this[vui_popup_VIEW].xRef, [vui_popup_CLASS.MOD.ANIMATE]);
        this.dispatchEvent(new CustomEvent(vui_popup_EVENT.OPENED));
        return this;
    }
    close() {
        if (!this.isOpened()) {
            return this;
        }
        this[vui_popup_STATE].target = undefined;
        this[vui_popup_STATE].positionLocked = undefined;
        this[vui_popup_STATE].targetRect = undefined;
        this[vui_popup_STATE].elementRect = undefined;
        document.body.removeChild(this);
        utilities_dom_UtilitiesDOM.removeClass(this[vui_popup_VIEW].xRef, [vui_popup_CLASS.MOD.ANIMATE]);
        this.dispatchEvent(new CustomEvent(vui_popup_EVENT.CLOSED));
        return this;
    }
    toggle(target) {
        if (this.isOpened()) {
            this.close();
        }
        else {
            this.open(target);
        }
        return this;
    }
    attach(viewports) {
        if (!viewports) {
            return void 0;
        }
        this[vui_popup_STATE].boundingElements = viewports;
    }
    initState() {
        this[vui_popup_STATE] = {
            boundingElements: [document.body],
            positionLocked: undefined,
            boundingRects: [document.body.getBoundingClientRect()],
            visible: true,
            resizeObserver: new resize_observer_ResizeObserver(this._onResize.bind(this)),
            target: undefined,
            targetRect: undefined,
            elementRect: undefined
        };
    }
    initEvents() {
        this[vui_popup_EVENTS] = {
            onDocumentMouseDownBind: this._onDocumentMouseDown.bind(this),
            onDocumentClickBind: this._onDocumentClick.bind(this),
            onDocumentScrollBind: this._onDocumentScroll.bind(this)
        };
    }
    attachEvents() {
        document.addEventListener(vui_popup_EVENT.SCROLL, this[vui_popup_EVENTS].onDocumentScrollBind);
        this[vui_popup_STATE].resizeObserver.observe(this[vui_popup_VIEW].xRef);
    }
    detachEvents() {
        document.removeEventListener(vui_popup_EVENT.SCROLL, this[vui_popup_EVENTS].onDocumentScrollBind);
        this[vui_popup_STATE].resizeObserver.unobserve(this[vui_popup_VIEW].xRef);
    }
    initView() {
        this.shadowRoot.appendChild(VuiPopup_1.template.content.cloneNode(true));
        this[vui_popup_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_popup_CLASS.ELEMENT}`),
            content: this.shadowRoot.querySelector(`.${vui_popup_CLASS.ELEMENT}`).children
        };
        utilities_dom_UtilitiesDOM.addClass(this[vui_popup_VIEW].xRef, [vui_popup_CLASS.MOD.HIDDEN]);
    }
    _prepareViewportRects() {
        this[vui_popup_STATE].boundingRects = this[vui_popup_STATE].boundingElements
            .map((viewport) => viewport.getBoundingClientRect());
    }
    _getValidPositions(rawPositions) {
        let raws = rawPositions.replace(/[\s?]/g, '').split(',');
        Object.keys(vui_popup_POSITION).forEach((position) => {
            if (raws.indexOf(vui_popup_POSITION[position]) === -1) {
                raws.push(vui_popup_POSITION[position]);
            }
        });
        return raws.join(',');
    }
    _update(position) {
        if (this._isVisible()) {
            this._updatePosition(position);
        }
        this._updateElementVisibility();
    }
    _getAvailablePosition() {
        let positionIndex = 0;
        let pos = this._getValidPositions(this.position).split(',');
        while (pos[positionIndex]) {
            if (pos[positionIndex] === vui_popup_POSITION.CENTER) {
                return vui_popup_POSITION.CENTER;
            }
            else if (this._willFit(pos[positionIndex])) {
                return pos[positionIndex];
            }
            positionIndex += 1;
        }
        return vui_popup_POSITION.BOTTOM;
    }
    _getAvailablePositionDetails(checkHorizontal) {
        let index = 0;
        let positionDetails = this._getValidPositions(this.positiondetails).split(',');
        positionDetails = this._removeUnnecessaryData(checkHorizontal, positionDetails);
        while (positionDetails[index]) {
            if (positionDetails[index] === vui_popup_POSITION.CENTER) {
                if (this._willFitCenter(checkHorizontal)) {
                    return vui_popup_POSITION.CENTER;
                }
            }
            else {
                let name = positionDetails[index].charAt(0).toUpperCase() + positionDetails[index].slice(1);
                if (this[`_willFit${name}`]()) {
                    return positionDetails[index];
                }
            }
            index += 1;
        }
        return vui_popup_POSITION.CENTER;
    }
    _removeUnnecessaryData(checkHorizontal, positionDetails) {
        return (checkHorizontal)
            ? positionDetails.filter((elem) => elem !== vui_popup_POSITION.TOP && elem !== vui_popup_POSITION.BOTTOM)
            : positionDetails.filter((elem) => elem !== vui_popup_POSITION.RIGHT && elem !== vui_popup_POSITION.LEFT);
    }
    _willFitCenter(checkHorizontal) {
        return checkHorizontal ? this._willFitCenterHorizontal() : this._willFitCenterVertical();
    }
    _updatePosition(position) {
        let horizontal, vertical;
        switch (position) {
            case vui_popup_POSITION.LEFT:
            case vui_popup_POSITION.RIGHT:
                vertical = this._getAvailablePositionVertical();
                horizontal = this._countCoordinatesHorizontal(position);
                break;
            case vui_popup_POSITION.TOP:
            case vui_popup_POSITION.BOTTOM:
                vertical = this._countCoordinatesVertical(position);
                horizontal = this._getAvailablePositionHorizontal();
                break;
            case vui_popup_POSITION.CENTER:
                vertical = document.body.clientHeight / 2 - this[vui_popup_STATE].elementRect.height / 2;
                horizontal = document.body.clientWidth / 2 - this[vui_popup_STATE].elementRect.width / 2;
        }
        this[vui_popup_VIEW].xRef.style.left = `${horizontal}px`;
        this[vui_popup_VIEW].xRef.style.top = `${vertical}px`;
        //     this[_VIEW].xRef.style.transform = `translate3d(${horizontal}px, ${vertical}px, 0)`;
    }
    _countCoordinatesHorizontal(position) {
        return position === vui_popup_POSITION.LEFT ?
            this[vui_popup_STATE].targetRect.left - this[vui_popup_STATE].elementRect.width + window.pageXOffset :
            this[vui_popup_STATE].targetRect.right + window.pageXOffset;
    }
    _countCoordinatesVertical(position) {
        return position === vui_popup_POSITION.TOP ?
            this[vui_popup_STATE].targetRect.top - this[vui_popup_STATE].elementRect.height + window.pageYOffset :
            this[vui_popup_STATE].targetRect.bottom + window.pageYOffset;
    }
    _getAvailablePositionVertical() {
        if (!this._userDefinePositionDetails()) {
            return this._getOptimalTop();
        }
        let position = this._getAvailablePositionDetails(false);
        switch (position) {
            case vui_popup_POSITION.CENTER:
                return this._centerCoordinatesVertical() - this[vui_popup_STATE].elementRect.height / 2 + window.pageYOffset;
            case vui_popup_POSITION.TOP:
                return this[vui_popup_STATE].targetRect.bottom - this[vui_popup_STATE].elementRect.height + window.pageYOffset;
            case vui_popup_POSITION.BOTTOM:
                return this[vui_popup_STATE].targetRect.top + window.pageYOffset;
        }
        return 0;
    }
    _getAvailablePositionHorizontal() {
        if (!this._userDefinePositionDetails()) {
            return this._getOptimalLeft();
        }
        let position = this._getAvailablePositionDetails(true);
        switch (position) {
            case vui_popup_POSITION.CENTER:
                return this._centerCoordinatesHorizontal() - this[vui_popup_STATE].elementRect.width / 2 + window.pageXOffset;
            case vui_popup_POSITION.LEFT:
                return this[vui_popup_STATE].targetRect.right - this[vui_popup_STATE].elementRect.width + window.pageXOffset;
            case vui_popup_POSITION.RIGHT:
                return this[vui_popup_STATE].targetRect.left + window.pageXOffset;
        }
        return -1;
    }
    _userDefinePositionDetails() {
        return this._getValidPositions(this.positiondetails).split(',').length !== 1;
    }
    _getOptimalTop() {
        if (this._willFitTop()) {
            return this[vui_popup_STATE].targetRect.bottom - this[vui_popup_STATE].elementRect.height + window.pageYOffset;
        }
        else if (this._willFitCenterVertical()) {
            return this[vui_popup_STATE].targetRect.bottom - this[vui_popup_STATE].elementRect.height / 2 + window.pageYOffset;
        }
        else {
            return this[vui_popup_STATE].targetRect.top + window.pageYOffset;
        }
    }
    _getOptimalLeft() {
        if (this._willFitLeft()) {
            return this[vui_popup_STATE].targetRect.right - this[vui_popup_STATE].elementRect.width + window.pageXOffset;
        }
        else if (this._willFitCenterHorizontal()) {
            return this[vui_popup_STATE].targetRect.right - this[vui_popup_STATE].elementRect.width / 2 + window.pageXOffset;
        }
        else {
            return this[vui_popup_STATE].targetRect.left + window.pageXOffset;
        }
    }
    _getBoundingLeft() {
        return Math.max(...this[vui_popup_STATE].boundingRects.map((rect) => rect.left));
    }
    _getBoundingTop() {
        return Math.max(...this[vui_popup_STATE].boundingRects.map((rect) => rect.top));
    }
    _getBoundingRight() {
        return Math.min(...this[vui_popup_STATE].boundingRects.map((rect) => rect.right));
    }
    _getBoundingBottom() {
        return Math.min(...this[vui_popup_STATE].boundingRects.map((rect) => rect.bottom));
    }
    _isVisible() {
        if (this.autohide === false) {
            return true;
        }
        return this._getBoundingLeft() <= this[vui_popup_STATE].targetRect.right
            && this._getBoundingRight() >= this[vui_popup_STATE].targetRect.left
            && this._getBoundingTop() <= this[vui_popup_STATE].targetRect.bottom
            && this._getBoundingBottom() >= this[vui_popup_STATE].targetRect.top;
    }
    _isFullyHeightVisible() {
        return this._getBoundingTop() <= this[vui_popup_STATE].targetRect.top
            && this._getBoundingBottom() >= this[vui_popup_STATE].targetRect.bottom;
    }
    _isFullyWidthVisible() {
        return this._getBoundingLeft() <= this[vui_popup_STATE].targetRect.left
            && this._getBoundingRight() >= this[vui_popup_STATE].targetRect.right;
    }
    _updateElementVisibility() {
        let visible = this._isVisible();
        if (this.visible && !visible) {
            utilities_dom_UtilitiesDOM.addClass(this[vui_popup_VIEW].xRef, [vui_popup_CLASS.MOD.HIDDEN]);
        }
        else if (this.visible && visible) {
            utilities_dom_UtilitiesDOM.removeClass(this[vui_popup_VIEW].xRef, [vui_popup_CLASS.MOD.HIDDEN]);
        }
        this[vui_popup_STATE].visible = visible;
    }
    _updateLockedPosition(position) {
        if (this.locked && this[vui_popup_STATE].positionLocked !== position) {
            this[vui_popup_STATE].positionLocked = position;
        }
    }
    _trackTarget(isOpening = false) {
        if (!this[vui_popup_STATE].target) {
            return void 0;
        }
        let targetRect = this[vui_popup_STATE].target.getBoundingClientRect();
        if (isOpening
            || this[vui_popup_STATE].targetRect.left !== targetRect.left
            || this[vui_popup_STATE].targetRect.top !== targetRect.top) {
            let position = this._getAvailablePosition();
            this._updateLockedPosition(position);
            this[vui_popup_STATE].targetRect = targetRect;
            this._update(position);
        }
        window.requestAnimationFrame(this._trackTarget.bind(this, false));
    }
    _willFitTop() {
        return this._getBoundingTop() <= this[vui_popup_STATE].targetRect.top - this[vui_popup_STATE].elementRect.height;
    }
    _willFitCenterVertical() {
        return this._getBoundingTop() <= this._centerCoordinatesVertical() - this[vui_popup_STATE].elementRect.height / 2
            && this._getBoundingBottom() >= this._centerCoordinatesVertical() + this[vui_popup_STATE].elementRect.height / 2;
    }
    _willFitLeft() {
        return this._getBoundingLeft() <= this[vui_popup_STATE].targetRect.left - this[vui_popup_STATE].elementRect.width;
    }
    _willFitCenterHorizontal() {
        return this._getBoundingLeft() <= this._centerCoordinatesHorizontal() - this[vui_popup_STATE].elementRect.width / 2
            && this._getBoundingRight() >= this._centerCoordinatesHorizontal() + this[vui_popup_STATE].elementRect.width / 2;
    }
    _centerCoordinatesVertical() {
        return this[vui_popup_STATE].targetRect.bottom - this[vui_popup_STATE].targetRect.height / 2;
    }
    _centerCoordinatesHorizontal() {
        return this[vui_popup_STATE].targetRect.right - this[vui_popup_STATE].targetRect.width / 2;
    }
    _willFitRight() {
        return this._getBoundingRight() >= this[vui_popup_STATE].targetRect.right + this[vui_popup_STATE].elementRect.width;
    }
    _willFitBottom() {
        return this._getBoundingBottom() >= this[vui_popup_STATE].targetRect.bottom + this[vui_popup_STATE].elementRect.height;
    }
    _willFitHeight(position) {
        return this._isFullyHeightVisible() && (position === vui_popup_POSITION.LEFT
            ? this._willFitLeft()
            : this._willFitRight());
    }
    _willFitWidth(position) {
        return this._isFullyWidthVisible() && (position === vui_popup_POSITION.TOP
            ? this._willFitTop()
            : this._willFitBottom());
    }
    _willFit(position) {
        switch (position) {
            case vui_popup_POSITION.LEFT:
            case vui_popup_POSITION.RIGHT:
                return this._willFitHeight(position);
            case vui_popup_POSITION.TOP:
            case vui_popup_POSITION.BOTTOM:
                return this._willFitWidth(position);
        }
        return false;
    }
    _isTriggerNotInDescendants(event) {
        if (!this[vui_popup_STATE].target) {
            return true;
        }
        let path = event.path || (event.composedPath && event.composedPath());
        if (path) {
            return path.indexOf(this[vui_popup_STATE].target) === -1;
        }
        else {
            return !utilities_dom_UtilitiesDOM.isInDescendants(event.target, this[vui_popup_STATE].target);
        }
    }
    _onResize() {
        if (!this[vui_popup_STATE].target) {
            return void 0;
        }
        this[vui_popup_STATE].elementRect = this[vui_popup_VIEW].xRef.getBoundingClientRect();
        if (this.locked && !this[vui_popup_STATE].positionLocked) {
            this[vui_popup_STATE].positionLocked = this._getAvailablePosition();
        }
        this._update(this[vui_popup_STATE].positionLocked);
    }
    _isNotInDescendants(event) {
        return !utilities_dom_UtilitiesDOM.isInDescendants(event.target, this);
    }
    _close(event) {
        if (this.isOpened()
            && this[vui_popup_STATE].visible
            && this._isNotInDescendants(event)
            && this._isTriggerNotInDescendants(event)) {
            event.stopImmediatePropagation();
            this.close();
        }
    }
    _onDocumentClick(event) {
        this._close(event);
    }
    _onDocumentMouseDown(event) {
        this._close(event);
    }
    _onDocumentScroll() {
        if (this.isOpened() && this[vui_popup_STATE].visible) {
            this._prepareViewportRects();
        }
    }
};
vui_popup_VuiPopup.documentClickEvents = [];
vui_popup_VuiPopup = VuiPopup_1 = vui_popup_decorate([
    VUI('vui-popup', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host--hidden {  opacity: 0;  pointer-events: none; }.host {  position: absolute; }  .host {    z-index: 1000; }.host {  color: var(--vc-popup-color, #666);  background: var(--vc-popup-background, #ffffff);  border-radius: var(--vc-popup-border-radius, 8px);  box-shadow: var(--vc-popup-shadow, 0 5px 30px 0 rgba(0, 0, 0, 0.1), 0 30px 50px -15px rgba(0, 0, 0, 0.1));  box-sizing: border-box;  overflow: hidden;  left: 0;  top: 1px; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }@keyframes slide-down {  0% {    opacity: 0;    margin-top: -10px; }  100% {    opacity: 1;    margin-top: 0; } }.host * {  box-sizing: border-box; }.host.host--animate {  animation: slide-down var(--vc-transition-time, 0.2s) ease-in-out;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }"}),
    vui_popup_metadata("design:paramtypes", [])
], vui_popup_VuiPopup);

//# sourceMappingURL=vui-popup.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-popup/index.js

if (customElements.get(vui_popup_VuiPopup.tag) === undefined) {
    customElements.define(vui_popup_VuiPopup.tag, vui_popup_VuiPopup);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-accords/lib/constants.js

const KEY_BIND = {
    COMBINATION: '+',
    SEPARATOR: ',',
    COMBINATION_KEYS: {
        ' ': ' ',
        SHIFT: 'shiftKey',
        CTRL: 'ctrlKey',
        ALT: 'altKey',
        OPTION: 'altKey',
        COMMAND: 'metaKey'
    },
    COMBINATION_NOT_FOUND: 'Combination key not found',
    HELP_DESCRIPTION: 'Show key bindings in console',
    NO_DESCRIPTION: '- no description -',
    NEXT_STEP_TIME: 1000
};
const discrepancies = UtilitiesBrowser.isIE11() ? {
    ESCAPE: 'esc',
    TOP: 'Up',
    RIGHT: 'Right',
    DOWN: 'Down',
    LEFT: 'Left',
    SPACE: 'Spacebar',
} : UtilitiesBrowser.isIEdge() ? {
    ESCAPE: 'Esc',
    SPACE: ' ',
    TOP: 'Up',
    RIGHT: 'Right',
    DOWN: 'Down',
    LEFT: 'Left',
} : {
    ESCAPE: 'Escape',
    TOP: 'ArrowUp',
    RIGHT: 'ArrowRight',
    DOWN: 'ArrowDown',
    LEFT: 'ArrowLeft',
    SPACE: 'Space'
};
const MAP_KEYS_MODIFICABLE = {
    BracketLeft: 'BracketLeft',
    BracketRight: 'BracketRight',
    Backslash: 'Backslash',
    Semicolon: 'Semicolon',
    Quote: 'Quote',
    Comma: 'Comma',
    Period: 'Period',
    Slash: 'Slash',
    Backquote: 'Backquote',
    Q: 'KeyQ',
    W: 'KeyW',
    E: 'KeyE',
    R: 'KeyR',
    T: 'KeyT',
    Y: 'KeyY',
    U: 'KeyU',
    I: 'KeyI',
    O: 'KeyO',
    P: 'KeyP',
    A: 'KeyA',
    S: 'KeyS',
    D: 'KeyD',
    F: 'KeyF',
    G: 'KeyG',
    H: 'KeyH',
    J: 'KeyJ',
    K: 'KeyK',
    L: 'KeyL',
    Z: 'KeyZ',
    X: 'KeyX',
    C: 'KeyC',
    V: 'KeyV',
    B: 'KeyB',
    N: 'KeyN',
    M: 'KeyM',
    '1': 'Digit1',
    '2': 'Digit2',
    '3': 'Digit3',
    '4': 'Digit4',
    '5': 'Digit5',
    '6': 'Digit6',
    '7': 'Digit7',
    '8': 'Digit8',
    '9': 'Digit9',
    '0': 'Digit0'
};
const MAP_KEYS = Object.assign({
    TAB: 'Tab',
    ENTER: 'Enter',
    HELP: 'F1',
    SHIFT: 'Shift',
    ALT: 'Alt',
    CTRL: 'Ctrl'
}, discrepancies, MAP_KEYS_MODIFICABLE);
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-accords/lib/honda.tire.js

class honda_tire_HondaTire {
    constructor(queueItem, incomingParams) {
        this.queueItem = queueItem;
        this.incomingParams = incomingParams;
        this._keyList = [];
        this._nextStep = 0;
        this._prepare();
    }
    getKey() {
        return this.queueItem.key;
    }
    getCallback() {
        return this.queueItem.callback;
    }
    getParams() {
        return this.params;
    }
    call(event) {
        let key = this._keyList[this._nextStep];
        let eventKey = this._cleanKey(event.code) || this._cleanKey(event.key);
        this._clearNextStepHandler();
        if (eventKey && eventKey.toLowerCase() === key.key.toLowerCase() && this._checkCombination(key, event)) {
            this._callEvent(event);
        }
        else {
            this._clearNextStep();
            return false;
        }
        return true;
    }
    _cleanKey(key) {
        return key && (key.length > 1 ? key.trim() : key).toUpperCase();
    }
    _remapCombination(key) {
        key = this._cleanKey(key);
        if (!KEY_BIND.COMBINATION_KEYS[key]) {
            console.warn(`${KEY_BIND.COMBINATION_NOT_FOUND} : ${key}`);
            return key;
        }
        return KEY_BIND.COMBINATION_KEYS[key];
    }
    _remapKey(key) {
        key = this._cleanKey(key);
        return MAP_KEYS[key] ? MAP_KEYS[key].toLowerCase() : key;
    }
    _keyNormalize() {
        let key = this.queueItem.key.split(KEY_BIND.SEPARATOR);
        for (let i = 0; i < key.length; i += 1) {
            let original = key[i];
            let combination = original.indexOf(KEY_BIND.COMBINATION);
            this._keyList[i] = {
                original,
                key: '',
                combination: ''
            };
            if (combination !== -1) {
                this._keyList[i].key = this._remapKey(original.substr(combination + 1));
                this._keyList[i].combination = this._remapCombination(original.substr(0, combination));
            }
            else {
                this._keyList[i].key = this._remapKey(this._keyList[i].original);
            }
        }
    }
    _clearNextStepHandler() {
        if (this._nextStep) {
            window.clearTimeout(this._nextStepHandler);
        }
    }
    _clearNextStep() {
        this._nextStep = 0;
    }
    _callEvent(event) {
        if (this._keyList.length - 1 === this._nextStep) {
            event.preventDefault();
            this._clearNextStep();
            this.queueItem.callback(event);
            if (this.params.once && this.params.after) {
                this.params.after();
            }
        }
        else {
            this._nextStep += 1;
            this._nextStepHandler = window.setTimeout(this._clearNextStep.bind(this), KEY_BIND.NEXT_STEP_TIME);
        }
    }
    _checkCombination(key, event) {
        if (key.combination) {
            return event[key.combination];
        }
        else {
            return !Object.keys(KEY_BIND.COMBINATION_KEYS).some((combinationKey) => event[KEY_BIND.COMBINATION_KEYS[combinationKey]]);
        }
    }
    _prepareParams() {
        this.params = {
            description: this.incomingParams.description || KEY_BIND.NO_DESCRIPTION,
            stopPropagation: this.incomingParams.stopPropagation || false,
            once: this.incomingParams.once || false,
            after: this.incomingParams.after || undefined
        };
    }
    _prepare() {
        this._prepareParams();
        this._keyNormalize();
    }
}
//# sourceMappingURL=honda.tire.js.map
// EXTERNAL MODULE: ./dist-es/__vc-particles/vc-reflect-metadata/index.js
var vc_reflect_metadata = __webpack_require__(3);

// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-di/lib/lifetime.js
var Lifetime;
(function (Lifetime) {
    Lifetime[Lifetime["Transient"] = 0] = "Transient";
    Lifetime[Lifetime["Scoped"] = 1] = "Scoped";
})(Lifetime || (Lifetime = {}));
//# sourceMappingURL=lifetime.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-di/lib/injectable.js


const Injectable = (lifetime = Lifetime.Transient) => {
    return (target) => {
        Reflect.defineMetadata('di:lifetime', lifetime, target);
    };
};
//# sourceMappingURL=injectable.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-di/lib/container.js



class container_Container {
    constructor(_contract) {
        this._contract = _contract;
        this._scopedDependencies = new WeakMap();
    }
    get key() {
        return this._contract;
    }
    static get() {
        let contract = UtilitiesString.generateUId();
        return (container_Container._instances[contract] = new container_Container(contract)) && container_Container._instances[contract];
    }
    resolve(token) {
        if (!this._scopedDependencies) {
            console.error('container already destroyed');
            return void 0;
        }
        return this._resolve(token);
    }
    die() {
        delete this._scopedDependencies;
        delete this._contract;
        delete container_Container._instances[this.key];
    }
    _resolve(token) {
        let lifetime = Reflect.getMetadata('di:lifetime', token);
        return (lifetime === Lifetime.Transient ? this._getTransient(token) : this._getScoped(token));
    }
    _parseTarget(target) {
        let func = new RegExp(/(function|constructor)[^(]*\(([^)]*)\)/).exec(target.toString());
        return {
            params: func && func[2].length && func[2].split(',') || [],
            name: func && func[0]
        };
    }
    _resolveInjections(target) {
        let tokens = Reflect.getMetadata('design:paramtypes', target) || [];
        let { params, name } = this._parseTarget(target);
        if (tokens.some((token) => !token) || params.length > tokens.length) {
            let msg = `${name}: missing of an obligatory injection for some of ${params}`;
            console.warn(`${msg}, values:`, tokens);
            throw msg;
        }
        return new target(...tokens.map(this._resolve.bind(this)));
    }
    _getScoped(token) {
        if (this._scopedDependencies.has(token)) {
            return this._scopedDependencies.get(token);
        }
        else {
            this._scopedDependencies.set(token, this._resolveInjections(token));
        }
        return this._scopedDependencies.get(token);
    }
    _getTransient(token) {
        return this._resolveInjections(token);
    }
}
container_Container._instances = {};

//# sourceMappingURL=container.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-di/index.js



//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-accords/lib/honda.js
var honda_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var honda_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Honda_1;



let honda_Honda = Honda_1 = class Honda {
    constructor() {
        this._catchkeyAccord = this._catchKey.bind(this);
        this._bindings = [];
        this._queue = [];
        this._inProgress = false;
        this._prepare();
        this.live();
    }
    remove(key, callback) {
        if (this._inProgress) {
            this.addToQueue({ key, callback });
        }
        else {
            this.reduceBinding(key, callback);
        }
    }
    die() {
        this._bindings = [];
        window.removeEventListener(Honda_1._KEYDOWN, this._catchkeyAccord);
    }
    _prepare() {
        this.add(MAP_KEYS.HELP, this._showBindings.bind(this), {
            description: KEY_BIND.HELP_DESCRIPTION
        });
    }
    _flushQueue() {
        while (this._queue.length) {
            let last = this._queue.pop();
            this.remove(last.key, last.callback);
        }
    }
    _catchKey(event) {
        this._inProgress = true;
        for (let i = 0; i < this._bindings.length; i += 1) {
            this._bindings[i].call(event);
        }
        this._inProgress = false;
        this._flushQueue();
    }
    _showBindings() {
        let help = [];
        for (let i = 0; i < this._bindings.length; i += 1) {
            help.push({
                keys: this._bindings[i].getKey(),
                description: this._bindings[i].getParams().description,
                once: !!this._bindings[i].getParams().once
            });
        }
        console.table(help);
    }
    addToQueue(queueItem) {
        this._queue.unshift(queueItem);
    }
    addInputable(callback, params = {}) {
        Object.keys(MAP_KEYS_MODIFICABLE).forEach((key) => {
            this.add(MAP_KEYS_MODIFICABLE[key], callback, params);
            this.add(`Shift + ${MAP_KEYS_MODIFICABLE[key]}`, callback, params);
        });
    }
    removeInputable(callback) {
        Object.keys(MAP_KEYS_MODIFICABLE).forEach((key) => {
            this.remove(MAP_KEYS_MODIFICABLE[key], callback);
            this.remove(`Shift + ${MAP_KEYS_MODIFICABLE[key]}`, callback);
        });
    }
    add(keys, callback, params = {}) {
        if (!(keys instanceof Array)) {
            keys = [keys];
        }
        for (let i = 0; i < keys.length; i += 1) {
            if (params.once) {
                params.after = this.addToQueue.bind(this, { key: keys[i], callback });
            }
            this._bindings.push(new honda_tire_HondaTire({ key: keys[i], callback }, params));
        }
    }
    reduceBinding(key, callback) {
        for (let i = 0; i < this._bindings.length; i += 1) {
            if (this._bindings[i].getKey() === key &&
                (!callback || this._bindings[i].getCallback() === callback)) {
                this._bindings.splice(i, 1);
                i -= 1;
            }
        }
    }
    live() {
        window.addEventListener(Honda_1._KEYDOWN, this._catchkeyAccord);
    }
};
honda_Honda._KEYDOWN = 'keydown';
honda_Honda = Honda_1 = honda_decorate([
    Injectable(Lifetime.Scoped),
    honda_metadata("design:paramtypes", [])
], honda_Honda);

//# sourceMappingURL=honda.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-accords/index.js



//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-quicksearch/component/vui-quicksearch.js
var vui_quicksearch_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_quicksearch_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiQuicksearch_1;



const vui_quicksearch_VIEW = Symbol('view');
const vui_quicksearch_EVENTS = Symbol('events');
const vui_quicksearch_ELEMENT = {
    DIV: 'div',
    INPUT: 'input'
};
const vui_quicksearch_CLASS = {
    ELEMENT: 'host',
    MOD: {
        EXPANDED: 'host--expanded',
        ACTIVE: 'host--active'
    },
    HINTS: {
        ELEMENT: 'host__hints',
        MOD: {
            HIDDEN: 'host__hints--hidden'
        }
    }
};
const vui_quicksearch_EVENT = {
    SEARCH_LIST_ITEM_CLICKED: 'searchListItemClicked',
    CLICK: 'click',
    KEYUP: 'keyup'
};
const SEPARATOR = {
    SEARCH: ' ',
    SEARCH_GROUP: '|'
};
const SEARCH_COLUMN_PREFIX = 'column=';
let vui_quicksearch_VuiQuicksearch = VuiQuicksearch_1 = class VuiQuicksearch extends Component {
    constructor() {
        super(vui_quicksearch_VIEW);
    }
    get observables() {
        return ['placeholder', 'value', 'expanded'];
    }
    get expanded() {
        return this.get('expanded', false);
    }
    get placeholder() {
        return this.get('placeholder', 'Search');
    }
    get value() {
        return this.get('value', '');
    }
    set value(value) {
        this.set('value', value);
    }
    get visible() {
        return this.get('visible', false);
    }
    set visible(value) {
        this.reconnectEvents();
        this.set('visible', value);
    }
    focus() {
        this[vui_quicksearch_VIEW].value.focus();
    }
    blur() {
        this[vui_quicksearch_VIEW].value.blur();
    }
    initEvents() {
        this[vui_quicksearch_EVENTS] = {
            onValueChangeBind: this._onValueChange.bind(this),
            onFocusBind: this._onFocus.bind(this)
        };
    }
    attachEvents() {
        this[vui_quicksearch_VIEW].value.addEventListener(vui_quicksearch_EVENT.KEYUP, this[vui_quicksearch_EVENTS].onValueChangeBind);
        this[vui_quicksearch_VIEW].value.addEventListener(vui_quicksearch_EVENT.CLICK, this[vui_quicksearch_EVENTS].onFocusBind);
    }
    detachEvents() {
        if (this[vui_quicksearch_VIEW] && this[vui_quicksearch_VIEW].value) {
            this[vui_quicksearch_VIEW].value.removeEventListener(vui_quicksearch_EVENT.KEYUP, this[vui_quicksearch_EVENTS].onValueChangeBind);
            this[vui_quicksearch_VIEW].value.removeEventListener(vui_quicksearch_EVENT.CLICK, this[vui_quicksearch_EVENTS].onFocusBind);
        }
    }
    initView() {
        this.shadowRoot.appendChild(VuiQuicksearch_1.template.content.cloneNode(true));
        this[vui_quicksearch_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_quicksearch_CLASS.ELEMENT}`),
            value: this.shadowRoot.querySelector(vui_quicksearch_ELEMENT.INPUT),
            list: this.shadowRoot.querySelector(`.${vui_quicksearch_CLASS.HINTS.ELEMENT}`)
        };
    }
    bindView() {
        this[vui_quicksearch_VIEW].value.value = this.value;
        this[vui_quicksearch_VIEW].value.placeholder = this.placeholder;
        utilities_dom_UtilitiesDOM.toggleClass(this.value !== '', this[vui_quicksearch_VIEW].xRef, [vui_quicksearch_CLASS.MOD.ACTIVE]);
        utilities_dom_UtilitiesDOM.toggleClass(this.expanded, this[vui_quicksearch_VIEW].xRef, [vui_quicksearch_CLASS.MOD.EXPANDED]);
        utilities_dom_UtilitiesDOM.toggleClass(this.expanded, this[vui_quicksearch_VIEW].value, [vui_quicksearch_CLASS.MOD.EXPANDED]);
    }
    _onFocus(event) {
        event.stopPropagation();
    }
    _onValueChange(event) {
        this.value = event.key === MAP_KEYS.ESCAPE
            ? ''
            : event.target.value.trim();
        this.setHints([], '');
    }
    clear() {
        utilities_dom_UtilitiesDOM.removeChildren(this[vui_quicksearch_VIEW].list);
        utilities_dom_UtilitiesDOM.removeClass(this[vui_quicksearch_VIEW].xRef, [vui_quicksearch_CLASS.MOD.ACTIVE]);
    }
    setHints(values, columnLabel) {
        utilities_dom_UtilitiesDOM.toggleClass(values.length === 0, this[vui_quicksearch_VIEW].list, [vui_quicksearch_CLASS.HINTS.MOD.HIDDEN]);
        let sameAsValue = this._isSameAsValue(values);
        utilities_dom_UtilitiesDOM.toggleClass(!sameAsValue, this[vui_quicksearch_VIEW].xRef, [vui_quicksearch_CLASS.MOD.ACTIVE]);
        if (sameAsValue) {
            return void 0;
        }
        if (!values.length) {
            this.clear();
        }
        else {
            values.forEach((value) => {
                let item = utilities_dom_UtilitiesDOM.create(vui_quicksearch_ELEMENT.DIV);
                item.innerText = Array.isArray(value) ? value.join(SEPARATOR.SEARCH) : value && value.toString();
                item.addEventListener(vui_quicksearch_EVENT.CLICK, this._onItemClick.bind(this, value, columnLabel));
                this[vui_quicksearch_VIEW].list.appendChild(item);
            });
        }
    }
    _isSameAsValue(values) {
        if (values.length !== 1) {
            return false;
        }
        let value = UtilitiesArray.isArrayOfArray(values) ? values[0].join(SEPARATOR.SEARCH_GROUP) : values[0];
        return this.value === value;
    }
    _onHintListItemClick(value, columnLabel) {
        this.dispatchEvent(new CustomEvent(vui_quicksearch_EVENT.SEARCH_LIST_ITEM_CLICKED, {
            detail: `${SEARCH_COLUMN_PREFIX}'${columnLabel}' ${value}`,
            bubbles: true
        }));
    }
    _onItemClick(value, columnLabel) {
        this.value = Array.isArray(value) ? value.join(SEPARATOR.SEARCH_GROUP) : value.toString();
        this._onHintListItemClick(this.value, columnLabel);
        this.clear();
    }
};
vui_quicksearch_VuiQuicksearch = VuiQuicksearch_1 = vui_quicksearch_decorate([
    VUI('vui-quicksearch', {html: "<div class=\"host__search\">    <vui-icon-search size=\"large\" hoverable=\"true\" class=\"host__trigger\"></vui-icon-search>    <input placeholder=\"Search\" class=\"host__input\" value=\"\"></div><div class=\"host__hints host__hints--hidden\"></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host__input {  background: transparent;  border: 1px solid transparent;  color: var(--vc-color--default, #666);  display: inline-block;  height: calc(100% - 1px);  padding: 0 4px;  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  width: 100%; }  .host__input:focus {    outline: 0;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host, .host__trigger:hover ~ .host__input, .host.host--active .host__input,.host.host--expanded .host__input, .host__input:hover, .host__input:focus, .host__search, .host .host__hints {  display: flex; }  .host {    justify-content: center; }  .host__search {    justify-content: flex-end; }  .host, .host .host__hints {    height: 100%;    flex-direction: column; }.host__input {  text-align: right; }.host .host__hints--hidden {  display: none !important; }.host__input {  position: absolute; }  .host__input {    z-index: 1; }.host__input {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }.host {  position: relative; }  .host--expanded {    min-width: 116px; }  .host__trigger {    z-index: 2;    padding: 4px 8px; }    .host__trigger:hover ~ .host__input {      opacity: 1;      transition: all var(--vc-transition-time, 0.2s) ease-in-out;      width: 140px; }  .host__input {    border: 0;    border-bottom: 1px solid rgba(0, 0, 0, 0.05);    color: var(--vc-color--default, #666);    height: auto;    margin: 2px 10px 2px 5px;    opacity: 0;    padding: 5px 25px 4px 5px;    right: 4px;    transition: all 0.2s ease-in-out;    width: 0; }    .host.host--active .host__input,    .host.host--expanded .host__input, .host__input:hover, .host__input:focus {      opacity: 1;      width: 140px;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host__input::placeholder {      color: var(--vc-color--light, #bbb); }  .host .host__hints {    box-shadow: inset 0 2px 18px -2px rgba(0, 0, 0, 0.08);    max-height: 130px;    overflow: auto; }    .host .host__hints > div {      cursor: pointer;      padding: 6px 12px;      transition: background 0.2s ease-in-out;      font-style: italic;      height: 28px;      font-size: .9em;      box-sizing: border-box; }      .host .host__hints > div:hover {        background: #efefef; }"}),
    vui_quicksearch_metadata("design:paramtypes", [])
], vui_quicksearch_VuiQuicksearch);

//# sourceMappingURL=vui-quicksearch.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-quicksearch/index.js

if (customElements.get(vui_quicksearch_VuiQuicksearch.tag) === undefined) {
    customElements.define(vui_quicksearch_VuiQuicksearch.tag, vui_quicksearch_VuiQuicksearch);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-select/component/vui-select.js
var vui_select_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_select_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiSelect_1;


const vui_select_VIEW = Symbol('view');
const vui_select_EVENTS = Symbol('events');
const vui_select_STATE = Symbol('state');
const vui_select_ELEMENT = {
    BUTTON: 'button',
    QUICKSEARCH: 'vui-quicksearch',
    SELECTLIST: 'vui-selectlist',
    POPUP: 'vui-popup',
    DEFAULTTRIGGER: 'vui-select-default-trigger',
    SLOT: 'slot'
};
const vui_select_CLASS = {
    ELEMENT: 'host'
};
const vui_select_EVENT = {
    CLICK: 'click',
    KEYDOWN: 'keydown',
    LISTELEMENTSELECTED: 'listItemSelected',
    VALUECHANGED: 'valueChanged',
    OPTIONSINGLECHANGED: 'optionsinglechanged',
    CLOSED: 'closed',
    OPENED: 'opened'
};
const TYPE = {
    SINGLE: 'single',
    MULTISELECT: 'multi'
};
const DICT_DESERIALIZATION = 'dict';
const DISABLED_PROP = 'disabled';
let vui_select_VuiSelect = VuiSelect_1 = class VuiSelect extends Component {
    constructor() {
        super(vui_select_VIEW);
    }
    get observables() {
        return [
            'disabled',
            'blank',
            'options',
            'mode',
            'selected',
            'search'
        ];
    }
    get disabled() {
        return this.get('disabled', false);
    }
    get search() {
        return this.get('search', false);
    }
    get options() {
        return this.get('options', '');
    }
    get selected() {
        return this.get('selected', '');
    }
    get blank() {
        return this.get('blank');
    }
    get mode() {
        return this.get('mode', TYPE.SINGLE);
    }
    set selected(value) {
        this.set('selected', value);
        this[vui_select_VIEW].list.selected = value;
    }
    initState() {
        this[vui_select_STATE] = {
            buttonText: '',
            previousChoice: '',
            allOptions: {},
            visibleOptions: {},
        };
    }
    initEvents() {
        this[vui_select_EVENTS] = {
            onToggleClickBind: this._onToggleClick.bind(this),
            onSearchValueChangedBind: this._onSearchValueChanged.bind(this),
            onOptionSingleClickedBind: this._onListElementClicked.bind(this),
            onKeysUpDownPressBind: this._onKeysUpDownPress.bind(this),
            onPopupClosedBind: this._onPopupClosed.bind(this),
            onPopupOpenedBind: this._onPopupOpened.bind(this)
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiSelect_1.template.content.cloneNode(true));
        this[vui_select_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_select_CLASS.ELEMENT}`),
            trigger: this.shadowRoot.querySelector(vui_select_ELEMENT.SLOT).assignedNodes()[0]
                || this.shadowRoot.querySelector(vui_select_ELEMENT.DEFAULTTRIGGER),
            list: this.shadowRoot.querySelector(vui_select_ELEMENT.SELECTLIST),
            popup: this.shadowRoot.querySelector(vui_select_ELEMENT.POPUP)
        };
    }
    attachEvents() {
        this[vui_select_VIEW].trigger.addEventListener(vui_select_EVENT.CLICK, this[vui_select_EVENTS].onToggleClickBind);
        this[vui_select_VIEW].list.addEventListener(vui_select_EVENT.LISTELEMENTSELECTED, this[vui_select_EVENTS].onOptionSingleClickedBind);
        this[vui_select_VIEW].list.addEventListener(vui_select_EVENT.VALUECHANGED, this[vui_select_EVENTS].onSearchValueChangedBind);
        this[vui_select_VIEW].popup.addEventListener(vui_select_EVENT.OPENED, this[vui_select_EVENTS].onPopupOpenedBind);
        this[vui_select_VIEW].popup.addEventListener(vui_select_EVENT.CLOSED, this[vui_select_EVENTS].onPopupClosedBind);
    }
    detachEvents() {
        this[vui_select_VIEW].trigger.removeEventListener(vui_select_EVENT.CLICK, this[vui_select_EVENTS].onToggleClickBind);
        this[vui_select_VIEW].list.removeEventListener(vui_select_EVENT.LISTELEMENTSELECTED, this[vui_select_EVENTS].onOptionSingleClickedBind);
        this[vui_select_VIEW].list.removeEventListener(vui_select_EVENT.VALUECHANGED, this[vui_select_EVENTS].onSearchValueChangedBind);
        this[vui_select_VIEW].popup.removeEventListener(vui_select_EVENT.OPENED, this[vui_select_EVENTS].onPopupOpenedBind);
        this[vui_select_VIEW].popup.removeEventListener(vui_select_EVENT.CLOSED, this[vui_select_EVENTS].onPopupClosedBind);
    }
    bindView() {
        let opts = this.deserializeDict(this.options, DICT_DESERIALIZATION);
        this[vui_select_STATE].allOptions = opts;
        this[vui_select_STATE].visibleOptions = opts;
        this[vui_select_STATE].buttonText = this[vui_select_VIEW].list.selected;
        this[vui_select_VIEW].trigger.value = this[vui_select_STATE].buttonText || this.blank;
        this[vui_select_VIEW].list.blank = this.blank;
        this[vui_select_VIEW].list.mode = this.mode;
        this[vui_select_VIEW].list.selected = this.selected;
        this[vui_select_VIEW].list.options = this.options;
        this[vui_select_VIEW].list.search = this.search;
        if (this.disabled) {
            this[vui_select_VIEW].trigger.setAttribute(DISABLED_PROP, '');
        }
        else {
            if (this[vui_select_VIEW].trigger.hasAttribute(DISABLED_PROP)) {
                this[vui_select_VIEW].trigger.removeAttribute(DISABLED_PROP);
            }
        }
    }
    _onPopupClosed() {
        this[vui_select_VIEW].list.blur();
        this[vui_select_VIEW].trigger.triggered = false;
    }
    _onPopupOpened() {
        this[vui_select_VIEW].trigger.triggered = true;
        this[vui_select_VIEW].list.focus();
    }
    _onKeysUpDownPress(event) {
        if (!this._properKeyPressed(event.key)) {
            return void 0;
        }
        if (event.key === MAP_KEYS.ENTER) {
            this._closePopup();
        }
        else if (event.key === MAP_KEYS.ESCAPE) {
            this[vui_select_VIEW].trigger.value = this[vui_select_STATE].previousChoice;
            this.selected = this[vui_select_STATE].previousChoice;
            this._closePopup();
        }
    }
    _properKeyPressed(eventKey) {
        return eventKey === MAP_KEYS.ENTER || eventKey === MAP_KEYS.ESCAPE;
    }
    _closePopup() {
        window.removeEventListener(vui_select_EVENT.KEYDOWN, this[vui_select_EVENTS].onKeysUpDownPressBind);
        this[vui_select_VIEW].popup.close();
    }
    _onToggleClick(event) {
        this[vui_select_VIEW].popup.toggle(this[vui_select_VIEW].trigger);
        if (this.mode !== TYPE.SINGLE) {
            return void 0;
        }
        this[vui_select_STATE].previousChoice = this[vui_select_STATE].buttonText;
        this[vui_select_VIEW].popup.isOpened()
            ? window.addEventListener(vui_select_EVENT.KEYDOWN, this[vui_select_EVENTS].onKeysUpDownPressBind)
            : window.removeEventListener(vui_select_EVENT.KEYDOWN, this[vui_select_EVENTS].onKeysUpDownPressBind);
        event.stopImmediatePropagation();
        event.preventDefault();
    }
    _onSearchValueChanged(event) {
        this._recalculateVisibleOptions(event.detail);
    }
    _onListElementClicked(event) {
        this.selected = event.detail;
        if (this.mode === TYPE.SINGLE) {
            this._closePopup();
        }
        this.dispatchEvent(new CustomEvent(vui_select_EVENT.OPTIONSINGLECHANGED, { detail: event.detail, bubbles: true }));
    }
    _recalculateVisibleOptions(searchValue) {
        let searchResults = {};
        Object.keys(this[vui_select_STATE].allOptions).forEach((key) => {
            if (this[vui_select_STATE].allOptions[key].toString().includes(searchValue)) {
                searchResults[key] = this[vui_select_STATE].allOptions[key];
            }
        });
        Object.keys(searchResults).length !== 0 ?
            this[vui_select_STATE].visibleOptions = searchResults :
            this[vui_select_STATE].visibleOptions = {};
        this[vui_select_VIEW].list.options = this.serialize(this[vui_select_STATE].visibleOptions);
    }
};
vui_select_VuiSelect = VuiSelect_1 = vui_select_decorate([
    VUI('vui-select', {html: "<slot>    <vui-select-default-trigger></vui-select-default-trigger></slot><vui-popup position=\"left\"           positiondetails=\"right\"           autohide=\"true\"           closeonfocuslost=\"true\"           closeondocumentmousedown=\"true\">    <vui-selectlist></vui-selectlist></vui-popup>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }"}),
    vui_select_metadata("design:paramtypes", [])
], vui_select_VuiSelect);

//# sourceMappingURL=vui-select.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-select/component/vui-select-default-trigger.js
var vui_select_default_trigger_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_select_default_trigger_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiSelectDefaultTrigger_1;


const vui_select_default_trigger_VIEW = Symbol('view');
const vui_select_default_trigger_ELEMENT = {
    SPAN: 'span',
    CHEVRON_DOWN: 'vui-icon-chevron-down'
};
const vui_select_default_trigger_CLASS = {
    ELEMENT: 'host',
    MOD: {
        TRIGGERED: 'host--triggered'
    },
    TRIGGER: {
        ELEMENT: 'host__trigger'
    },
    VALUE: {
        ELEMENT: 'host__value'
    }
};
let vui_select_default_trigger_VuiSelectDefaultTrigger = VuiSelectDefaultTrigger_1 = class VuiSelectDefaultTrigger extends Component {
    constructor() {
        super(vui_select_default_trigger_VIEW);
    }
    get observables() {
        return ['value', 'triggered'];
    }
    get value() {
        return this.get('value');
    }
    get triggered() {
        return this.get('triggered', false);
    }
    initView() {
        this.shadowRoot.appendChild(VuiSelectDefaultTrigger_1.template.content.cloneNode(true));
        this[vui_select_default_trigger_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_select_default_trigger_CLASS.ELEMENT}`),
            value: this.shadowRoot.querySelector(`.${vui_select_default_trigger_CLASS.TRIGGER.ELEMENT}`),
            chevron: this.shadowRoot.querySelector(vui_select_default_trigger_ELEMENT.CHEVRON_DOWN)
        };
    }
    bindView() {
        this[vui_select_default_trigger_VIEW].value.innerHTML = this.value;
        utilities_dom_UtilitiesDOM.toggleClass(this.triggered, this[vui_select_default_trigger_VIEW].xRef, [vui_select_default_trigger_CLASS.MOD.TRIGGERED]);
    }
};
vui_select_default_trigger_VuiSelectDefaultTrigger = VuiSelectDefaultTrigger_1 = vui_select_default_trigger_decorate([
    VUI('vui-select-default-trigger', {html: "<vui-button class=\"host__trigger\">[selected value]</vui-button><vui-icon-chevron-down size=\"medium\" hoverable=\"false\"></vui-icon-chevron-down>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }.host.host--triggered .host__trigger + * {  transform: rotate3d(1, 0, 0, -180deg); }"}),
    vui_select_default_trigger_metadata("design:paramtypes", [])
], vui_select_default_trigger_VuiSelectDefaultTrigger);

//# sourceMappingURL=vui-select-default-trigger.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-select/index.js


if (customElements.get(vui_select_VuiSelect.tag) === undefined) {
    customElements.define(vui_select_VuiSelect.tag, vui_select_VuiSelect);
}
if (customElements.get(vui_select_default_trigger_VuiSelectDefaultTrigger.tag) === undefined) {
    customElements.define(vui_select_default_trigger_VuiSelectDefaultTrigger.tag, vui_select_default_trigger_VuiSelectDefaultTrigger);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-selectlist/component/vui-selectlist.js
var vui_selectlist_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_selectlist_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiSelectList_1;



const vui_selectlist_DICT_DESERIALIZATION = 'dict';
const vui_selectlist_VIEW = Symbol('view');
const vui_selectlist_STATE = Symbol('state');
const vui_selectlist_EVENTS = Symbol('events');
const vui_selectlist_SHARED_VIEW = Symbol('view');
const vui_selectlist_SHARED_STATE = Symbol('state');
const vui_selectlist_SHARED_EVENTS = Symbol('events');
const vui_selectlist_ELEMENT = {
    DIV: 'div',
    CHECKBOX: 'vui-checkbox',
    QUICKSEARCH: 'vui-quicksearch'
};
const vui_selectlist_CLASS = {
    ELEMENT: 'host',
    MOD: {
        SEARCHABLE: 'host--searchable',
        LEFT: 'host--left',
        RIGHT: 'host--right',
        CENTER: 'host--center'
    },
    LIST: {
        ELEMENT: 'host__list',
        ITEM: {
            ELEMENT: 'host__list__item',
            MOD: {
                SELECTED: 'host__list__item--selected'
            }
        }
    },
    TITLE: {
        ELEMENT: 'host__title',
        MOD: {
            HIDDEN: 'host__title--hidden'
        }
    }
};
const vui_selectlist_EVENT = {
    CLICK: 'click',
    VALUECHANGED: 'valueChanged',
    LISTELEMENTSELECTED: 'listItemSelected',
    CHECKED: 'checked',
    KEYDOWN: 'keydown'
};
const AVAILABLE_JUSTIFICATIONS = [vui_selectlist_CLASS.MOD.LEFT, vui_selectlist_CLASS.MOD.RIGHT, vui_selectlist_CLASS.MOD.CENTER];
const KEY = 'key';
const vui_selectlist_TYPE = {
    SINGLE: 'single',
    MULTISELECT: 'multi'
};
let vui_selectlist_VuiSelectList = VuiSelectList_1 = class VuiSelectList extends Component {
    constructor(__view__ = vui_selectlist_VIEW, __state__ = vui_selectlist_STATE, __events__ = vui_selectlist_EVENTS) {
        super(__view__, __state__, __events__);
        this.BLANK_OPTION = {
            KEY: 'blankOption',
            VALUE: 'blank'
        };
    }
    prepare(__view__, __state__, __events__) {
        this[vui_selectlist_SHARED_VIEW] = __view__;
        this[vui_selectlist_SHARED_STATE] = __state__;
        this[vui_selectlist_SHARED_EVENTS] = __events__;
        super.prepare(__view__, __state__, __events__);
    }
    get observables() {
        return [
            'blank',
            'mode',
            'options',
            'selected',
            'title',
            'search-value',
            'search',
            'justification'
        ];
    }
    get justification() {
        return this.get('justification', 'right');
    }
    get search() {
        return this.get('search', false);
    }
    get blank() {
        return this.get('blank');
    }
    get mode() {
        return this.get('mode', vui_selectlist_TYPE.SINGLE);
    }
    get options() {
        return this.get('options', '');
    }
    get selected() {
        return this.get('selected', this.BLANK_OPTION.KEY).toString();
    }
    get title() {
        return this.get('title', '');
    }
    get searchValue() {
        return this.get('search-value', '');
    }
    set selected(value) {
        this.set('selected', value);
    }
    set options(value) {
        this.set('options', value);
    }
    set searchValue(value) {
        this.set('search-value', value);
    }
    setSearchHints(values, columnLabel) {
        if (this.search) {
            this[this[vui_selectlist_SHARED_VIEW]].search.setHints(values, columnLabel);
        }
    }
    focus() {
        if (this.mode === vui_selectlist_TYPE.SINGLE) {
            window.addEventListener(vui_selectlist_EVENT.KEYDOWN, this[this[vui_selectlist_SHARED_EVENTS]].onKeysUpDownPressBind);
        }
        this[this[vui_selectlist_SHARED_STATE]].currentSel = undefined;
    }
    blur() {
        if (this.mode === vui_selectlist_TYPE.SINGLE) {
            window.removeEventListener(vui_selectlist_EVENT.KEYDOWN, this[this[vui_selectlist_SHARED_EVENTS]].onKeysUpDownPressBind);
        }
        this[this[vui_selectlist_SHARED_STATE]].currentSel = undefined;
    }
    initState() {
        this[this[vui_selectlist_SHARED_STATE]] = {
            options: {},
            currentSel: undefined
        };
    }
    initEvents() {
        this[this[vui_selectlist_SHARED_EVENTS]] = {
            onListElementSingleClickedBind: this._onListElementSingleClicked.bind(this),
            onListElementMultiClickedBind: this._onListElementMultiClicked.bind(this),
            onKeysUpDownPressBind: this._onKeyDown.bind(this),
            onSearchValueChangedBind: this._onValueChanged.bind(this)
        };
    }
    attachEvents() {
        this[this[vui_selectlist_SHARED_VIEW]].search.addEventListener(vui_selectlist_EVENT.VALUECHANGED, this[vui_selectlist_EVENTS].onSearchValueChangedBind);
    }
    detachEvents() {
        this[this[vui_selectlist_SHARED_VIEW]].search.removeEventListener(vui_selectlist_EVENT.VALUECHANGED, this[vui_selectlist_EVENTS].onSearchValueChangedBind);
    }
    initView() {
        this.shadowRoot.appendChild(VuiSelectList_1.template.content.cloneNode(true));
        this[this[vui_selectlist_SHARED_VIEW]] = {
            xRef: this.shadowRoot.querySelector(`.${vui_selectlist_CLASS.ELEMENT}`),
            list: this.shadowRoot.querySelector(`.${vui_selectlist_CLASS.LIST.ELEMENT}`),
            title: this.shadowRoot.querySelector(`.${vui_selectlist_CLASS.TITLE.ELEMENT}`),
            search: this.shadowRoot.querySelector(vui_selectlist_ELEMENT.QUICKSEARCH)
        };
    }
    bindView() {
        super.bindView();
        this[this[vui_selectlist_SHARED_STATE]].options = this.deserializeDict(this.options, vui_selectlist_DICT_DESERIALIZATION);
        this[vui_selectlist_VIEW].search.visible = this.search;
        if (this.title === '') {
            utilities_dom_UtilitiesDOM.addClass(this[this[vui_selectlist_SHARED_VIEW]].title, [vui_selectlist_CLASS.TITLE.MOD.HIDDEN]);
        }
        else {
            utilities_dom_UtilitiesDOM.removeClass(this[this[vui_selectlist_SHARED_VIEW]].title, [vui_selectlist_CLASS.TITLE.MOD.HIDDEN]);
            this[this[vui_selectlist_SHARED_VIEW]].title.innerText = this.title;
        }
        utilities_dom_UtilitiesDOM.removeClass(this[this[vui_selectlist_SHARED_VIEW]].xRef, AVAILABLE_JUSTIFICATIONS);
        utilities_dom_UtilitiesDOM.addClass(this[this[vui_selectlist_SHARED_VIEW]].xRef, [`host--${this.justification}`]);
        utilities_dom_UtilitiesDOM.toggleClass(this.search, this[this[vui_selectlist_SHARED_VIEW]].xRef, [vui_selectlist_CLASS.MOD.SEARCHABLE]);
        this._createList();
        this[vui_selectlist_VIEW].search.focus();
    }
    _onValueChanged(event) {
        this[this[vui_selectlist_SHARED_STATE]].currentSel = undefined;
        this.bubble(vui_selectlist_EVENT.VALUECHANGED, event);
    }
    _onKeyDown(event) {
        if (this._properKeyPressed(event.key)) {
            let availableOptions = Object.keys(this[this[vui_selectlist_SHARED_STATE]].options);
            if (this[this[vui_selectlist_SHARED_STATE]].currentSel === undefined) {
                let keySelected = this.selected.toString();
                let listIndex = availableOptions.indexOf(keySelected);
                this[this[vui_selectlist_SHARED_STATE]].currentSel = this._getCurrentPointerIndex(listIndex);
            }
            this._moveSelection(event.key, availableOptions.length + (this.blank !== undefined ? 1 : 0));
            this[this[vui_selectlist_SHARED_VIEW]].search.focus();
        }
    }
    _properKeyPressed(eventKey) {
        return (eventKey === MAP_KEYS.DOWN
            || eventKey === MAP_KEYS.TOP
            || eventKey === MAP_KEYS.ENTER);
    }
    _moveSelection(eventKey, poitnerArrayLength) {
        let currentPointerIndex = this[this[vui_selectlist_SHARED_STATE]].currentSel;
        let newPointerIndex = currentPointerIndex;
        if (eventKey === MAP_KEYS.ENTER) {
            let listIndex = this._getCurrentListIndex(newPointerIndex);
            this._fireSelection([Object.keys(this[this[vui_selectlist_SHARED_STATE]].options)[listIndex]], event);
            // Tip: to prevent any native ENTERS on any form elements
            event.preventDefault();
        }
        else if (this._shouldMoveDown(eventKey, currentPointerIndex, poitnerArrayLength)) {
            newPointerIndex = currentPointerIndex + 1;
            this._refreshPointer(newPointerIndex, currentPointerIndex);
        }
        else if (this._shouldMoveUp(eventKey, currentPointerIndex)) {
            newPointerIndex = currentPointerIndex - 1;
            this._refreshPointer(newPointerIndex, currentPointerIndex);
        }
    }
    _shouldMoveDown(eventKey, currentPointerIndex, pointerArrayLength) {
        return (eventKey === MAP_KEYS.DOWN && currentPointerIndex < pointerArrayLength - 1);
    }
    _shouldMoveUp(eventKey, currentPointerIndex) {
        return (eventKey === MAP_KEYS.TOP && currentPointerIndex > 0);
    }
    _getCurrentListIndex(pointerIndex) {
        return pointerIndex - (this.blank !== undefined ? 1 : 0);
    }
    _getCurrentPointerIndex(listIndex) {
        return listIndex + (this.blank !== undefined ? 1 : 0);
    }
    _refreshPointer(newPointerIndex, currentPointerIndex) {
        this[this[vui_selectlist_SHARED_STATE]].currentSel = newPointerIndex;
        this[vui_selectlist_VIEW].list.childNodes[Math.max(0, currentPointerIndex)].className = vui_selectlist_CLASS.LIST.ITEM.ELEMENT;
        this[vui_selectlist_VIEW].list.childNodes[newPointerIndex].classList.add(vui_selectlist_CLASS.LIST.ITEM.MOD.SELECTED);
    }
    _fireSelection(selected, event) {
        this.selected = this.serialize(selected);
        this.dispatchEvent(new CustomEvent(vui_selectlist_EVENT.LISTELEMENTSELECTED, { detail: this.deserializeList(this.selected), bubbles: true }));
    }
    _createList() {
        this._detachAllListElementsEvents();
        let selected = this.deserializeList(this.selected).map((el) => el.toString());
        utilities_dom_UtilitiesDOM.removeChildren(this[this[vui_selectlist_SHARED_VIEW]].list);
        let options = this.deserializeDict(this.options);
        if (this.blank !== undefined && this.mode === vui_selectlist_TYPE.SINGLE) {
            options.unshift({ key: this.BLANK_OPTION.KEY, value: this.blank });
        }
        this.mode === vui_selectlist_TYPE.MULTISELECT ?
            this._populateListElements(selected, options, this._addElementMulti.bind(this)) :
            this._populateListElements(selected, options, this._addElementSingle.bind(this));
    }
    _detachAllListElementsEvents() {
        this[this[vui_selectlist_SHARED_VIEW]].list.childNodes.forEach((elem) => {
            this.mode === vui_selectlist_TYPE.MULTISELECT ?
                elem.removeEventListener(vui_selectlist_EVENT.CLICK, this[this[vui_selectlist_SHARED_EVENTS]].onListElementMultiClickedBind) :
                elem.removeEventListener(vui_selectlist_EVENT.CLICK, this[this[vui_selectlist_SHARED_EVENTS]].onListElementSingleClickedBind, true);
        });
    }
    _populateListElements(selected, options, addElement) {
        let fragment = document.createDocumentFragment();
        options.forEach((option) => {
            let element = addElement(option.key, option.value, selected);
            fragment.appendChild(element);
        });
        this[this[vui_selectlist_SHARED_VIEW]].list.appendChild(fragment);
    }
    _addElementSingle(key, value, selected) {
        let classes = selected.indexOf(key) !== -1
            ? [vui_selectlist_CLASS.LIST.ITEM.ELEMENT, vui_selectlist_CLASS.LIST.ITEM.MOD.SELECTED]
            : [vui_selectlist_CLASS.LIST.ITEM.ELEMENT];
        let option = utilities_dom_UtilitiesDOM.create(vui_selectlist_ELEMENT.DIV, classes);
        option.innerHTML = value;
        option.setAttribute(KEY, key);
        option.addEventListener(vui_selectlist_EVENT.CLICK, this[this[vui_selectlist_SHARED_EVENTS]].onListElementSingleClickedBind, true);
        return option;
    }
    _addElementMulti(key, value, selected) {
        let option = utilities_dom_UtilitiesDOM.create(vui_selectlist_ELEMENT.DIV, [vui_selectlist_CLASS.LIST.ITEM.ELEMENT]);
        let checkbox = document.createElement(vui_selectlist_ELEMENT.CHECKBOX);
        checkbox.name = value;
        checkbox.value = key;
        checkbox.checked = selected.indexOf(key) !== -1;
        option.addEventListener(vui_selectlist_EVENT.CLICK, this[this[vui_selectlist_SHARED_EVENTS]].onListElementMultiClickedBind);
        checkbox.addEventListener(vui_selectlist_EVENT.CLICK, this[this[vui_selectlist_SHARED_EVENTS]].onListElementMultiClickedBind);
        option.appendChild(checkbox);
        return option;
    }
    _onListElementSingleClicked(event) {
        let currentElement = event.currentTarget;
        let listChildren = this[this[vui_selectlist_SHARED_VIEW]].list.childNodes;
        listChildren.forEach((elem) => elem.className = vui_selectlist_CLASS.LIST.ITEM.ELEMENT);
        currentElement.classList.add(vui_selectlist_CLASS.LIST.ITEM.MOD.SELECTED);
        this._fireSelection([currentElement.getAttribute(KEY)], event);
        event.stopImmediatePropagation();
    }
    _onListElementMultiClicked(event) {
        let currentElement = event.currentTarget;
        let subElement = event.currentTarget.children[0];
        let selected = this.deserializeList(this.selected).map((el) => el.toString());
        let selectedIndex = selected.indexOf(subElement ? subElement.value : currentElement.value);
        selectedIndex === -1
            ? selected.push(subElement ? subElement.value : currentElement.value)
            : selected.splice(selectedIndex, 1);
        this._fireSelection(selected, event);
        event.stopImmediatePropagation();
    }
};
vui_selectlist_VuiSelectList = VuiSelectList_1 = vui_selectlist_decorate([
    VUI('vui-selectlist', {html: "<div class=\"host__title\"></div><vui-quicksearch expanded=\"true\"></vui-quicksearch><div class=\"host__list\"></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host__list__item:hover {  background: var(--vc-list-hov-background, #efefef);  color: var(--vc-list-hov-color, #4680FE);  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host__list__item--selected {  background: var(--vc-color--highlight, #4680FE);  color: white;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host {  color: initial;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host__list {    cursor: pointer;    max-height: 300px;    overflow-y: auto;    width: 100%;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host__list__item {    padding: 6px 12px;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host.host--searchable {    min-width: 140px; }    .host.host--searchable vui-quicksearch {      padding: 5px 0; }.host__list__item, .host__title {  display: flex; }  .host--center .host__list__item, .host__title {    justify-content: center; }  .host--left .host__list__item {    justify-content: flex-start; }  .host--right .host__list__item {    justify-content: flex-end; }  .host__title {    height: 100%;    flex-direction: column; }.host__title {  text-align: center; }.host__title--hidden {  display: none !important; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }  .host__title {    font-size: 10px; }  .host__title {    font-weight: 700; }.host__title {  height: 50px; }"}),
    vui_selectlist_metadata("design:paramtypes", [Object, Object, Object])
], vui_selectlist_VuiSelectList);

//# sourceMappingURL=vui-selectlist.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-selectlist/index.js

if (customElements.get(vui_selectlist_VuiSelectList.tag) === undefined) {
    customElements.define(vui_selectlist_VuiSelectList.tag, vui_selectlist_VuiSelectList);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-aggregation/component/vui-aggregation.js
var vui_aggregation_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_aggregation_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiAggregation_1;

const vui_aggregation_VIEW = Symbol('view');
const vui_aggregation_CLASS = {
    ANIMATED_CAROUSEL: {
        SCENE: 'scene',
        CONTENT: 'carousel',
        ITEM: 'carousel__cell'
    },
    AGGREGATION_GROUP: {
        TITLE: 'aggregation-title',
        ITEMS: 'aggregation-items',
        WRAPPER: 'aggregation-wrapper'
    },
    AGGREGATION: {
        TOOLTIP: {
            ELEMENT: 'tooltip',
            SELECTED: 'tooltip-selected'
        },
        ELEMENT: 'aggregation',
        GROUP: 'aggregation-group',
        ROOT: 'aggregation-root',
        ITEM: 'aggregation-item',
        LABEL: 'aggregation-label',
        VALUE: 'aggregation-value',
    }
};
const vui_aggregation_ELEMENT = {
    DIV: 'div'
};
let vui_aggregation_VuiAggregation = VuiAggregation_1 = class VuiAggregation extends Component {
    constructor() {
        super(vui_aggregation_VIEW);
    }
    get data() {
        return this.get('data', '');
    }
    set data(value) {
        this.set('data', value);
        this.dataObject = JSON.parse(value);
        this.render();
    }
    get observables() {
        return ['data'];
    }
    init(animation) {
        this.animation = animation;
    }
    render() {
        this[vui_aggregation_VIEW].scene.classList.add(vui_aggregation_CLASS.ANIMATED_CAROUSEL.SCENE);
        this[vui_aggregation_VIEW].label.classList.add(vui_aggregation_CLASS.AGGREGATION_GROUP.TITLE);
        [
            vui_aggregation_CLASS.AGGREGATION_GROUP.WRAPPER,
            vui_aggregation_CLASS.ANIMATED_CAROUSEL.CONTENT
        ].map((className) => this[vui_aggregation_VIEW].wrapper.classList.add(className));
        if (this.dataObject.label) {
            this[vui_aggregation_VIEW].label.style.display = 'block';
            this[vui_aggregation_VIEW].label.innerText = this.dataObject.label;
        }
        else {
            this[vui_aggregation_VIEW].label.style.display = 'none';
        }
        Array.from(this[vui_aggregation_VIEW].wrapper.children)
            .forEach((child) => this[vui_aggregation_VIEW].wrapper.removeChild(child));
        this.getAggregationItems().forEach((item) => {
            this[vui_aggregation_VIEW].wrapper.appendChild(item);
        });
        if (this.animation) {
            this.animation(this[vui_aggregation_VIEW].scene);
        }
    }
    getAggregationItems() {
        let elements = [];
        Object.keys(this.dataObject.aggregation).forEach((type) => {
            let iconType = type && type.toLowerCase();
            let itemEl = document.createElement(vui_aggregation_ELEMENT.DIV);
            let labelEl = document.createElement(`vui-icon-${iconType}`);
            labelEl.hoverable = false;
            let valueEl = document.createElement(vui_aggregation_ELEMENT.DIV);
            [vui_aggregation_CLASS.AGGREGATION.ITEM, vui_aggregation_CLASS.ANIMATED_CAROUSEL.ITEM]
                .forEach((className) => itemEl.classList.add(className));
            // [CLASS.AGGREGATION.LABEL, `icon-${iconType}`]
            //     .forEach((className: string) => labelEl.classList.add(className));
            valueEl.classList.add(vui_aggregation_CLASS.AGGREGATION.VALUE);
            valueEl.innerText = `${this.dataObject.aggregation[type]}`;
            itemEl.appendChild(labelEl);
            itemEl.appendChild(valueEl);
            elements.push(itemEl);
        });
        return elements;
    }
    initView() {
        this.shadowRoot.appendChild(VuiAggregation_1.template.content.cloneNode(true));
        this[vui_aggregation_VIEW] = {
            scene: this.shadowRoot.querySelector('.scene'),
            label: this.shadowRoot.querySelector('.label'),
            wrapper: this.shadowRoot.querySelector('.wrapper')
        };
    }
};
vui_aggregation_VuiAggregation = VuiAggregation_1 = vui_aggregation_decorate([
    VUI('vui-aggregation', {html: "<div class=\"scene\">    <div class=\"label\"></div>    <div class=\"wrapper\"></div></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host .scene .wrapper .aggregation-item, .host .scene, vui-aggregation {  display: flex; }  vui-aggregation {    justify-content: center; }  .host, .host .scene .wrapper .aggregation-item {    justify-content: flex-end; }  vui-aggregation {    height: 100%;    flex-direction: column; }.host .scene .label, .host .carousel__cell {  text-align: center; }.host .scene .wrapper {  border: 1px solid rgba(0, 0, 0, 0.1);  border-radius: var(--vc-pill-border-radius, 20px);  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  height: 20px;  padding: 2px 10px;  margin: 5px 0;  cursor: default; }  .host .scene .wrapper {    background: var(--vc-pill-background, white);    color: var(--vc-pill-color, #4680FE); }.host, .host .scene .label, .host .carousel__cell {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }  .host, .host .scene .label, .host .carousel__cell {    color: var(--vc-color--default, #666); }.host .scene .label {  height: 24px;  line-height: 24px;  display: inline-block;  padding: 0 8px;  color: white; }.host .scene .wrapper {  background: transparent;  border-radius: 0;  border: 0;  color: #ffffff;  cursor: pointer;  display: inline-block;  height: 24px;  line-height: 24px;  padding: 0;  margin: 0;  width: 130px; }  .host .scene .wrapper > div {    margin-bottom: 0; }  .host .scene .wrapper .aggregation-item .aggregation-label {    display: inline-block;    height: 24px;    width: 24px; }  .host .scene .wrapper .aggregation-item .aggregation-value {    margin-left: 5px;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap; }  .host .scene .wrapper .carousel__cell {    line-height: 24px; }.host .scene {  box-shadow: none;  cursor: pointer;  overflow: hidden;  position: relative;  width: auto;  transition: all 0.2s ease-in-out; }.host .carousel {  margin: 0;  padding: 0;  width: 100%;  height: 100%;  position: relative;  transform: translateZ(-288px);  transform-style: preserve-3d; }.host .carousel__cell {  background: var(--vc-header-background, #ffffff);  position: absolute;  width: 100%;  height: 100%;  line-height: 24px;  overflow: hidden; }vui-aggregation {  height: 100%; }"}),
    vui_aggregation_metadata("design:paramtypes", [])
], vui_aggregation_VuiAggregation);

//# sourceMappingURL=vui-aggregation.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-aggregation/index.js

if (customElements.get(vui_aggregation_VuiAggregation.tag) === undefined) {
    customElements.define(vui_aggregation_VuiAggregation.tag, vui_aggregation_VuiAggregation);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tabs/component/vui-tabs.js
var vui_tabs_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_tabs_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiTabs_1;

const vui_tabs_PRIVATE = Symbol('VuiTabs.Private');
const vui_tabs_VIEW = Symbol('VuiTabs.View');
const vui_tabs_EVENTS = Symbol('VuiTabs.Events');
const KEYCODE = {
    DOWN: 40,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    HOME: 36,
    END: 35,
};
let vui_tabs_VuiTabs = VuiTabs_1 = class VuiTabs extends Component {
    constructor() {
        super(vui_tabs_VIEW);
        this.isLoaded = false;
    }
    get observables() {
        return [];
    }
    attachEvents() {
        this.addEventListener('componentLoaded', this[vui_tabs_EVENTS].onComponentLoaded);
        this.addEventListener('click', this[vui_tabs_EVENTS].onClick);
        this.addEventListener('keydown', this[vui_tabs_EVENTS].onKeyDown);
        this[vui_tabs_VIEW].tabSlot.addEventListener('slotchange', this[vui_tabs_EVENTS].onSlotChange);
        this[vui_tabs_VIEW].panelSlot.addEventListener('slotchange', this[vui_tabs_EVENTS].onSlotChange);
    }
    detachEvents() {
        this.removeEventListener('componentLoaded', this[vui_tabs_EVENTS].onComponentLoaded);
        this.removeEventListener('click', this[vui_tabs_EVENTS].onClick);
        this.removeEventListener('keydown', this[vui_tabs_EVENTS].onKeyDown);
        this[vui_tabs_VIEW].tabSlot.removeEventListener('slotchange', this[vui_tabs_EVENTS].onSlotChange);
        this[vui_tabs_VIEW].panelSlot.removeEventListener('slotchange', this[vui_tabs_EVENTS].onSlotChange);
    }
    initEvents() {
        this[vui_tabs_EVENTS] = {
            onClick: this[vui_tabs_PRIVATE].onClick.bind(this),
            onComponentLoaded: this[vui_tabs_PRIVATE].onComponentLoaded.bind(this),
            onKeyDown: this[vui_tabs_PRIVATE].onKeyDown.bind(this),
            onSlotChange: this[vui_tabs_PRIVATE].onSlotChange.bind(this),
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiTabs_1.template.content.cloneNode(true));
        this[vui_tabs_VIEW] = {
            tabSlot: this.shadowRoot.querySelector('slot[name=tab]'),
            panelSlot: this.shadowRoot.querySelector('slot[name=panel]')
        };
    }
    // Currently there is no better place for initializing _PRIVATE :()
    initState() {
        this[vui_tabs_PRIVATE] = {
            linkPanels: () => {
                const tabs = Array.from(this.querySelectorAll('vui-tabs-tab'));
                tabs.forEach((tab) => {
                    const panel = tab.nextElementSibling;
                    if (panel.tagName.toLowerCase() !== 'vui-tabs-panel') {
                        console.error(`Tab #${tab.id} is not a` +
                            `sibling of a <vui-tabs-panel>`);
                        return;
                    }
                    tab.setAttribute('aria-controls', panel.id);
                    panel.setAttribute('aria-labelledby', tab.id);
                });
                const selectedTab = tabs.find((tab) => tab.selected) || tabs[0];
                this[vui_tabs_PRIVATE].selectTab(selectedTab);
            },
            onClick: (ev) => {
                if (ev.target.getAttribute('role') !== 'tab') {
                    return;
                }
                this[vui_tabs_PRIVATE].selectTab(event.target);
            },
            onComponentLoaded: () => {
                if (!this.hasAttribute('role')) {
                    this.setAttribute('role', 'tablist');
                }
                this.style.display = null;
                this.isLoaded = true;
                Promise.all([
                    customElements.whenDefined('vui-tabs-tab'),
                    customElements.whenDefined('vui-tabs-panel'),
                ]).then(
                // Because our children are delayed
                () => setTimeout(() => this[vui_tabs_PRIVATE].linkPanels(), 0));
            },
            // tslint:disable-next-line:cyclomatic-complexity
            onKeyDown: (ev) => {
                if (ev.target.getAttribute('role') !== 'tab' || ev.altKey) {
                    return;
                }
                let newTab;
                switch (ev.keyCode) {
                    case KEYCODE.LEFT:
                    case KEYCODE.UP:
                        newTab = this[vui_tabs_PRIVATE].prevTab();
                        break;
                    case KEYCODE.RIGHT:
                    case KEYCODE.DOWN:
                        newTab = this[vui_tabs_PRIVATE].nextTab();
                        break;
                    case KEYCODE.HOME:
                        newTab = this[vui_tabs_PRIVATE].firstTab();
                        break;
                    case KEYCODE.END:
                        newTab = this[vui_tabs_PRIVATE].lastTab();
                        break;
                    default:
                        return;
                }
                ev.preventDefault();
                this[vui_tabs_PRIVATE].selectTab(newTab);
            },
            onSlotChange: () => {
                if (this.isLoaded) {
                    this[vui_tabs_PRIVATE].linkPanels();
                }
            },
            selectTab: (newTab) => {
                Array.from(this.querySelectorAll('vui-tabs-tab')).forEach((tab) => tab.selected = false);
                Array.from(this.querySelectorAll('vui-tabs-panel'))
                    .forEach((panel) => panel.hidden = true);
                const newPanel = this.querySelector(`#${newTab.getAttribute('aria-controls')}`);
                if (!newPanel) {
                    throw new Error(`No panel for tab :(`);
                }
                newTab.selected = true;
                newPanel.hidden = false;
                newTab.focus();
            },
            prevTab: () => {
                const tabs = Array.from(this.querySelectorAll('vui-tabs-tab'));
                let newIdx = tabs.findIndex((tab) => tab.selected) - 1;
                return tabs[(newIdx + tabs.length) % tabs.length];
            },
            nextTab: () => {
                const tabs = Array.from(this.querySelectorAll('vui-tabs-tab'));
                let newIdx = tabs.findIndex((tab) => tab.selected) + 1;
                return tabs[newIdx % tabs.length];
            },
            lastTab: () => {
                const tabs = Array.from(this.querySelectorAll('vui-tabs-tab'));
                return tabs[tabs.length - 1];
            },
            firstTab: () => {
                const tabs = Array.from(this.querySelectorAll('vui-tabs-tab'));
                return tabs[0];
            }
        };
    }
};
vui_tabs_VuiTabs = VuiTabs_1 = vui_tabs_decorate([
    VUI('vui-tabs', {html: "<slot name=\"tab\"></slot><slot name=\"panel\"></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");:host, div.host {  display: flex; }:host {  flex-wrap: wrap;  margin: 0 40px 40px; }div.host {  flex-wrap: wrap; }::slotted(vui-tabs-panel) {  flex-basis: 100%; }"}),
    vui_tabs_metadata("design:paramtypes", [])
], vui_tabs_VuiTabs);

//# sourceMappingURL=vui-tabs.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tabs/component/vui-tabs-tab.js
var vui_tabs_tab_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_tabs_tab_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiTabsTab_1;

const vui_tabs_tab_PRIVATE = Symbol('VuiTabsTab.Private');
const vui_tabs_tab_VIEW = Symbol('VuiTabsTab.View');
const vui_tabs_tab_EVENTS = Symbol('VuiTabsTab.Events');
let vuiTabCounter = 1;
let vui_tabs_tab_VuiTabsTab = VuiTabsTab_1 = class VuiTabsTab extends Component {
    constructor() {
        super(vui_tabs_tab_VIEW);
        this.isLoaded = false;
    }
    get observables() {
        return ['selected'];
    }
    get selected() {
        return this.get('selected'), false;
    }
    set selected(value) {
        this.set('selected', value);
    }
    attachEvents() {
        this.addEventListener('componentLoaded', this[vui_tabs_tab_EVENTS].onComponentLoaded);
    }
    bindView() {
        if (!this.isLoaded) {
            return;
        }
        const value = this.hasAttribute('selected');
        this.setAttribute('aria-selected', value);
        this.setAttribute('tabindex', value ? 0 : -1);
    }
    detachEvents() {
        this.removeEventListener('componentLoaded', this[vui_tabs_tab_EVENTS].onComponentLoaded);
    }
    initEvents() {
        this[vui_tabs_tab_EVENTS] = {
            onComponentLoaded: this[vui_tabs_tab_PRIVATE].onComponentLoaded.bind(this)
        };
    }
    // Currently there is no better place for initializing _PRIVATE :()
    initState() {
        this[vui_tabs_tab_PRIVATE] = {
            onComponentLoaded: () => {
                this.setAttribute('role', 'tab');
                if (!this.id) {
                    this.id = `vui-tabs-tab-generated-${vuiTabCounter++}`;
                }
                this.style.display = null;
                this.isLoaded = true;
                this.bindView();
            }
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiTabsTab_1.template.content.cloneNode(true));
        this[vui_tabs_tab_VIEW] = {};
    }
};
vui_tabs_tab_VuiTabsTab = VuiTabsTab_1 = vui_tabs_tab_decorate([
    VUI('vui-tabs-tab', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");:host {  color: rgba(24, 24, 24, 0.4);  cursor: pointer;  font-family: \"Montserrat\", sans-serif;  font-size: 14px;  font-weight: 600;  outline: 0;  padding: 20px;  transition: all 0.2s ease-in-out; }div.host {  display: inline-block; }:host([selected=\"true\"]) {  color: #181818; }"}),
    vui_tabs_tab_metadata("design:paramtypes", [])
], vui_tabs_tab_VuiTabsTab);

//# sourceMappingURL=vui-tabs-tab.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tabs/component/vui-tabs-panel.js
var vui_tabs_panel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_tabs_panel_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiTabsPanel_1;

const vui_tabs_panel_PRIVATE = Symbol('VuiTabsPanel.Private');
const vui_tabs_panel_VIEW = Symbol('VuiTabsPanel.View');
const vui_tabs_panel_EVENTS = Symbol('VuiTabsPanel.Events');
let vuiPanelCounter = 1;
let vui_tabs_panel_VuiTabsPanel = VuiTabsPanel_1 = class VuiTabsPanel extends Component {
    constructor() {
        super(vui_tabs_panel_VIEW);
    }
    get observables() {
        return [];
    }
    attachEvents() {
        this.addEventListener('componentLoaded', this[vui_tabs_panel_EVENTS].onComponentLoaded);
    }
    detachEvents() {
        this.removeEventListener('componentLoaded', this[vui_tabs_panel_EVENTS].onComponentLoaded);
    }
    initEvents() {
        this[vui_tabs_panel_EVENTS] = {
            onComponentLoaded: this[vui_tabs_panel_PRIVATE].onComponentLoaded.bind(this)
        };
    }
    // Currently there is no better place for initializing _PRIVATE :()
    initState() {
        this[vui_tabs_panel_PRIVATE] = {
            onComponentLoaded: () => {
                this.setAttribute('role', 'tabpanel');
                if (!this.id) {
                    this.id = `vui-tabs-panel-generated-${vuiPanelCounter++}`;
                }
                this.style.display = null;
            }
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiTabsPanel_1.template.content.cloneNode(true));
        this[vui_tabs_panel_VIEW] = {};
    }
};
vui_tabs_panel_VuiTabsPanel = VuiTabsPanel_1 = vui_tabs_panel_decorate([
    VUI('vui-tabs-panel', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");:host {  background: white;  border-radius: 20px;  font-family: \"Montserrat\", sans-serif;  font-size: 14px;  font-weight: 400;  padding: 20px 30px 20px 30px; }div.host {  display: block; }h3 {  font-size: 16px;  font-weight: 700; }"}),
    vui_tabs_panel_metadata("design:paramtypes", [])
], vui_tabs_panel_VuiTabsPanel);

//# sourceMappingURL=vui-tabs-panel.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tabs/index.js



if (customElements.get(vui_tabs_VuiTabs.tag) === undefined) {
    customElements.define(vui_tabs_VuiTabs.tag, vui_tabs_VuiTabs);
}
if (customElements.get(vui_tabs_tab_VuiTabsTab.tag) === undefined) {
    customElements.define(vui_tabs_tab_VuiTabsTab.tag, vui_tabs_tab_VuiTabsTab);
}
if (customElements.get(vui_tabs_panel_VuiTabsPanel.tag) === undefined) {
    customElements.define(vui_tabs_panel_VuiTabsPanel.tag, vui_tabs_panel_VuiTabsPanel);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-title/component/vui-title.js
var vui_title_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_title_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiTitle_1;

const vui_title_VIEW = Symbol('view');
const vui_title_ELEMENT = {
    TOOLTIP: 'vui-tooltip'
};
const vui_title_CLASS = {
    ELEMENT: 'host',
    TITLE: {
        ELEMENT: 'host__title'
    },
    COUNTER: {
        ELEMENT: 'host__counter'
    }
};
let vui_title_VuiTitle = VuiTitle_1 = class VuiTitle extends Component {
    constructor() {
        super(vui_title_VIEW);
        this.observeMutation();
    }
    get visible() {
        return this.get('visible', this.shadowRoot.host.innerHTML !== '');
    }
    get observables() {
        return ['all', 'shown'];
    }
    get shown() {
        return this.get('shown', 0);
    }
    get all() {
        return this.get('all', 0);
    }
    initView() {
        this.shadowRoot.appendChild(VuiTitle_1.template.content.cloneNode(true));
        this[vui_title_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_title_CLASS.ELEMENT}`),
            title: this.shadowRoot.querySelector(`.${vui_title_CLASS.TITLE.ELEMENT}`),
            counter: this.shadowRoot.querySelector(`.${vui_title_CLASS.COUNTER.ELEMENT}`),
            tooltip: this.shadowRoot.querySelector(vui_title_ELEMENT.TOOLTIP)
        };
    }
    bindView() {
        this[vui_title_VIEW].title.innerHTML = this.shadowRoot.host.innerHTML;
        this[vui_title_VIEW].title.title = this.shadowRoot.host.innerHTML;
        this[vui_title_VIEW].tooltip.attach(this[vui_title_VIEW].title);
        if (this.all > 0) {
            this[vui_title_VIEW].counter.innerHTML = this.all === this.shown
                ? `(${this.all})`
                : `(${this.shown} of ${this.all})`;
        }
        else {
            this[vui_title_VIEW].counter.innerHTML = '';
        }
    }
};
vui_title_VuiTitle = VuiTitle_1 = vui_title_decorate([
    VUI('vui-title', {html: "<div>    <span class=\"host__title\"></span>    <span class=\"host__counter\"></span></div><vui-tooltip></vui-tooltip>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }  .host {    font-size: 16px; }  .host {    font-weight: 700; }.host {  height: 50px; }"}),
    vui_title_metadata("design:paramtypes", [])
], vui_title_VuiTitle);

//# sourceMappingURL=vui-title.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-title/index.js

if (customElements.get(vui_title_VuiTitle.tag) === undefined) {
    customElements.define(vui_title_VuiTitle.tag, vui_title_VuiTitle);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-toaster/component/vui-toast.js
var vui_toast_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_toast_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiToast_1;


const vui_toast_VIEW = Symbol('view');
const vui_toast_STATE = Symbol('state');
const vui_toast_ELEMENT = {
    COUNTER: 'vui-counter'
};
const vui_toast_CLASS = {
    ELEMENT: 'host',
    TEXT: {
        ELEMENT: 'host__text'
    },
    COUNTER: {
        MOD: {
            HIDDEN: 'host__counter--hidden'
        }
    }
};
const vui_toast_EVENT = {
    CLICK: 'click',
    TOASTFADEOUT: 'toastFadeOut'
};
const FADE_OUT_DELAY = 5000;
const FADE_IN_DELAY = 500;
let vui_toast_VuiToast = VuiToast_1 = class VuiToast extends Component {
    constructor() {
        super(vui_toast_VIEW);
    }
    get observables() {
        return ['message', 'type', 'count'];
    }
    get message() {
        return this.get('message', '-');
    }
    get type() {
        return this.get('type');
    }
    get count() {
        return this.get('count', 0);
    }
    initView() {
        this.shadowRoot.appendChild(VuiToast_1.template.content.cloneNode(true));
        this[vui_toast_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_toast_CLASS.ELEMENT}`),
            text: this.shadowRoot.querySelector(`.${vui_toast_CLASS.TEXT.ELEMENT}`),
            counter: this.shadowRoot.querySelector(vui_toast_ELEMENT.COUNTER)
        };
    }
    initState() {
        this[vui_toast_STATE] = {
            isAlreadyStacked: false
        };
    }
    bindView() {
        this[vui_toast_VIEW].text.innerText = this.message;
        this[vui_toast_VIEW].counter.count = this.count;
        this[vui_toast_VIEW].counter.visible = true;
        utilities_dom_UtilitiesDOM.toggleClass(this.count <= 1, this[vui_toast_VIEW].counter, [vui_toast_CLASS.COUNTER.MOD.HIDDEN]);
        if (this.type) {
            utilities_dom_UtilitiesDOM.addClass(this[vui_toast_VIEW].xRef, [`host--${this.type.toLowerCase()}`]);
        }
        this._live();
    }
    attachEvents() {
        this[vui_toast_VIEW].xRef.addEventListener(vui_toast_EVENT.CLICK, this._fadeOut.bind(this));
    }
    _live() {
        if (!this[vui_toast_STATE].isAlreadyStacked) {
            this[vui_toast_STATE].isAlreadyStacked = true;
            UtilitiesDelay.queue(this._fadeIn.bind(this));
        }
        else {
            UtilitiesDelay.clear(this[vui_toast_STATE].stackXRef);
        }
        this[vui_toast_STATE].stackXRef = UtilitiesDelay.queue(this._fadeOut.bind(this), FADE_OUT_DELAY);
    }
    _fadeIn() {
        this[vui_toast_VIEW].xRef.style.opacity = '1';
        this[vui_toast_VIEW].xRef.style.maxHeight = '100%';
    }
    _fadeOut() {
        UtilitiesDelay.queue(() => {
            this[vui_toast_VIEW].xRef.style.opacity = '0';
            this[vui_toast_STATE].isAlreadyStacked = false;
            this.dispatchEvent(new CustomEvent(vui_toast_EVENT.TOASTFADEOUT, { detail: `${this.type}${this.message}` }));
        }, FADE_IN_DELAY);
    }
};
vui_toast_VuiToast = VuiToast_1 = vui_toast_decorate([
    VUI('vui-toast', {html: "<div class=\"host__text\"></div><vui-counter circled=\"true\"></vui-counter>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: space-between; }.host__counter--hidden {  display: none !important; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }.host {  cursor: default;  color: white;  border-radius: 6.66667px;  margin: 20px;  max-height: 100%;  opacity: 1;  padding: 10px;  line-height: 20px;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host--warning {    background: rgba(255, 184, 18, 0.8);    box-shadow: 0 12px 30px -10px rgba(255, 182, 77, 0.9); }  .host--error {    background: rgba(251, 82, 82, 0.8);    box-shadow: 0 12px 30px -10px rgba(251, 82, 82, 0.9); }"}),
    vui_toast_metadata("design:paramtypes", [])
], vui_toast_VuiToast);

//# sourceMappingURL=vui-toast.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-toaster/component/vui-toaster.js
var vui_toaster_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_toaster_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiToaster_1;


const vui_toaster_VIEW = Symbol('view');
const vui_toaster_STATE = Symbol('state');
const vui_toaster_EVENTS = Symbol('events');
const vui_toaster_ELEMENT = {
    TOAST: 'vui-toast'
};
const vui_toaster_CLASS = {
    ELEMENT: 'host'
};
const vui_toaster_EVENT = {
    TOASTFADEOUT: 'toastFadeOut'
};
const vui_toaster_TYPE = {
    WARNING: 'WARNING',
    ERROR: 'ERROR'
};
let vui_toaster_VuiToaster = VuiToaster_1 = class VuiToaster extends widget_Widget {
    constructor() {
        super(vui_toaster_VIEW);
    }
    get observables() {
        return [];
    }
    run() {
        if (this.isRunning()) {
            return void 0;
        }
        document.body.appendChild(this);
        if (this._hasConsoleWarn()) {
            this[vui_toaster_STATE].consoleWarn = console.warn;
            console.warn = (...args) => {
                this[vui_toaster_STATE].consoleWarn.apply(console, args);
                this._addToast(args, vui_toaster_TYPE.WARNING);
            };
        }
        if (this._hasConsoleError()) {
            this[vui_toaster_STATE].consoleError = console.error;
            console.error = (...args) => {
                this[vui_toaster_STATE].consoleError.apply(console, args);
                this._addToast(args, vui_toaster_TYPE.ERROR);
            };
        }
    }
    isRunning() {
        return document.body.contains(this) && this.parentNode === document.body;
    }
    stop() {
        if (!this.isRunning()) {
            return void 0;
        }
        console.warn = this[vui_toaster_STATE].consoleWarn;
        console.error = this[vui_toaster_STATE].consoleError;
        this[vui_toaster_STATE].consoleError = undefined;
        this[vui_toaster_STATE].consoleWarn = undefined;
        document.body.removeChild(this);
    }
    initState() {
        this[vui_toaster_STATE] = {
            consoleError: undefined,
            consoleWarn: undefined,
            registered: {}
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiToaster_1.template.content.cloneNode(true));
        this[vui_toaster_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_toaster_CLASS.ELEMENT}`)
        };
    }
    initEvents() {
        this[vui_toaster_EVENTS] = {
            onToastFadeOutBind: this._onToastFadeOut.bind(this)
        };
    }
    _onToastFadeOut({ detail }) {
        let existing = this[vui_toaster_STATE].registered[detail];
        if (existing) {
            existing.toast.removeEventListener(vui_toaster_EVENT.TOASTFADEOUT, this[vui_toaster_EVENTS].onToastFadeOutBind);
            utilities_dom_UtilitiesDOM.removeElement(existing.toast);
            delete this[vui_toaster_STATE].registered[detail];
        }
    }
    _addToast(message, type) {
        let key = `${type}${message.join(',')}`;
        let existing = this[vui_toaster_STATE].registered[key];
        let toast;
        if (existing) {
            toast = existing.toast;
        }
        else {
            toast = document.createElement(vui_toaster_ELEMENT.TOAST);
            toast.addEventListener(vui_toaster_EVENT.TOASTFADEOUT, this[vui_toaster_EVENTS].onToastFadeOutBind);
            existing = this[vui_toaster_STATE].registered[key] = { toast: toast, count: 0 };
            this[vui_toaster_VIEW].xRef.appendChild(toast);
        }
        existing.count = existing.count + 1;
        toast.message = message.join(',');
        toast.type = type;
        toast.count = existing.count;
    }
    _hasConsoleWarn() {
        return !!(window.console && console.warn);
    }
    _hasConsoleError() {
        return !!(window.console && console.error);
    }
};
vui_toaster_VuiToaster = VuiToaster_1 = vui_toaster_decorate([
    VUI('vui-toaster', {html: "<slot></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  bottom: 0;  position: fixed;  right: 0;  width: 300px;  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  z-index: 9; }"}),
    vui_toaster_metadata("design:paramtypes", [])
], vui_toaster_VuiToaster);

//# sourceMappingURL=vui-toaster.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-toaster/index.js


if (customElements.get(vui_toast_VuiToast.tag) === undefined) {
    customElements.define(vui_toast_VuiToast.tag, vui_toast_VuiToast);
}
if (customElements.get(vui_toaster_VuiToaster.tag) === undefined) {
    customElements.define(vui_toaster_VuiToaster.tag, vui_toaster_VuiToaster);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-toolbar/component/vui-toolbar.js
var vui_toolbar_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_toolbar_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiToolbar_1;

const vui_toolbar_VIEW = Symbol('view');
const vui_toolbar_EVENTS = Symbol('events');
const vui_toolbar_ELEMENT = {
    ICON_SAVE: 'vui-icon-save',
    ICON_CLOSE: 'vui-icon-close',
    ICON_ADD: 'vui-icon-add',
    TOOLTIP: 'vui-tooltip'
};
const vui_toolbar_CLASS = {
    ELEMENT: 'host',
    BUTTON: {
        ELEMENT: 'host__button',
        MOD: {
            HIDDEN: 'host__button--hidden',
            ADD: 'host__button--add',
            SAVE: 'host__button--save',
            DELETE: 'host__button--delete'
        }
    }
};
const vui_toolbar_EVENT = {
    CLICK: 'click',
    SAVECLICKED: 'saveClicked',
    ADDCLICKED: 'addClicked',
    REMOVECLICKED: 'removeClicked'
};
let vui_toolbar_VuiToolbar = VuiToolbar_1 = class VuiToolbar extends Component {
    constructor() {
        super(vui_toolbar_VIEW);
    }
    get observables() {
        return ['save', 'add', 'delete', 'deletable', 'creatable', 'savable', 'deleting', 'saving', 'creating'];
    }
    get visible() {
        return this.get('visible', false);
    }
    set visible(value) {
        this.reconnectEvents();
        this.set('visible', value);
    }
    get save() {
        return this.get('save', 'Save');
    }
    get add() {
        return this.get('add', 'Add Row');
    }
    get delete() {
        return this.get('delete', 'Remove Row');
    }
    get deletable() {
        return this.get('deletable', true);
    }
    get creatable() {
        return this.get('creatable', true);
    }
    get savable() {
        return this.get('savable', true);
    }
    get deleting() {
        return this.get('deleting', true);
    }
    get saving() {
        return this.get('saving', true);
    }
    get creating() {
        return this.get('creating', true);
    }
    initEvents() {
        this[vui_toolbar_EVENTS] = {
            onSaveClickedBind: this._onSaveClicked.bind(this),
            onAddClickedBind: this._onAddClicked.bind(this),
            onDeleteClickedBind: this._onDeleteClicked.bind(this)
        };
    }
    _onSaveClicked(event) {
        if (!this.savable || !this.saving) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        this.bubble(vui_toolbar_EVENT.SAVECLICKED, event);
    }
    _onAddClicked(event) {
        if (!this.creatable || !this.creating) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        this.bubble(vui_toolbar_EVENT.ADDCLICKED, event);
    }
    _onDeleteClicked(event) {
        if (!this.deletable || !this.deleting) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        this.bubble(vui_toolbar_EVENT.REMOVECLICKED, event);
    }
    initView() {
        this.shadowRoot.appendChild(VuiToolbar_1.template.content.cloneNode(true));
        this[vui_toolbar_VIEW] = {
            save: this.shadowRoot.querySelector(`.${vui_toolbar_CLASS.BUTTON.MOD.SAVE}`),
            saveIcon: this.shadowRoot.querySelector(vui_toolbar_ELEMENT.ICON_SAVE),
            add: this.shadowRoot.querySelector(`.${vui_toolbar_CLASS.BUTTON.MOD.ADD}`),
            addIcon: this.shadowRoot.querySelector(vui_toolbar_ELEMENT.ICON_ADD),
            delete: this.shadowRoot.querySelector(`.${vui_toolbar_CLASS.BUTTON.MOD.DELETE}`),
            deleteIcon: this.shadowRoot.querySelector(vui_toolbar_ELEMENT.ICON_CLOSE),
            tooltip: this.shadowRoot.querySelector(vui_toolbar_ELEMENT.TOOLTIP)
        };
    }
    bindView() {
        this[vui_toolbar_VIEW].save.title = this.save;
        this[vui_toolbar_VIEW].saveIcon.title = this.save;
        this[vui_toolbar_VIEW].add.title = this.add;
        this[vui_toolbar_VIEW].addIcon.title = this.add;
        this[vui_toolbar_VIEW].delete.title = this.delete;
        this[vui_toolbar_VIEW].deleteIcon.title = this.delete;
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].add);
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].delete);
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].save);
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].addIcon);
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].deleteIcon);
        this[vui_toolbar_VIEW].tooltip.attach(this[vui_toolbar_VIEW].saveIcon);
        this[vui_toolbar_VIEW].save.disabled = !this.savable;
        this[vui_toolbar_VIEW].add.disabled = !this.creatable;
        this[vui_toolbar_VIEW].delete.disabled = !this.deletable;
        this[vui_toolbar_VIEW].save.visible = this.saving;
        this[vui_toolbar_VIEW].add.visible = this.creating;
        this[vui_toolbar_VIEW].delete.visible = this.deleting;
    }
    attachEvents() {
        this[vui_toolbar_VIEW].save.addEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onSaveClickedBind);
        this[vui_toolbar_VIEW].add.addEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onAddClickedBind);
        this[vui_toolbar_VIEW].delete.addEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onDeleteClickedBind);
    }
    detachEvents() {
        this[vui_toolbar_VIEW].save.removeEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onSaveClickedBind);
        this[vui_toolbar_VIEW].add.removeEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onAddClickedBind);
        this[vui_toolbar_VIEW].delete.removeEventListener(vui_toolbar_EVENT.CLICK, this[vui_toolbar_EVENTS].onDeleteClickedBind);
    }
};
vui_toolbar_VuiToolbar = VuiToolbar_1 = vui_toolbar_decorate([
    VUI('vui-toolbar', {html: "<vui-tooltip></vui-tooltip><div class=\"host__bar\">    <vui-button class=\"host__button--save\">        <vui-icon-save size=\"large\" hoverable=\"true\"></vui-icon-save>    </vui-button>    <vui-button class=\"host__button--add\">        <vui-icon-add size=\"large\" hoverable=\"true\"></vui-icon-add>    </vui-button>    <vui-button class=\"host__button--delete\">        <vui-icon-close size=\"large\" hoverable=\"true\"></vui-icon-close>    </vui-button></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host, .host__bar {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }"}),
    vui_toolbar_metadata("design:paramtypes", [])
], vui_toolbar_VuiToolbar);

//# sourceMappingURL=vui-toolbar.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-toolbar/index.js

if (customElements.get(vui_toolbar_VuiToolbar.tag) === undefined) {
    customElements.define(vui_toolbar_VuiToolbar.tag, vui_toolbar_VuiToolbar);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tooltip/component/vui-tooltip.js
var vui_tooltip_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_tooltip_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiTooltip_1;


const vui_tooltip_VIEW = Symbol('view');
const vui_tooltip_STATE = Symbol('state');
const vui_tooltip_EVENTS = Symbol('events');
const vui_tooltip_CLASS = {
    ELEMENT: 'host',
    WRAPPER: {
        ELEMENT: 'host__wrapper'
    }
};
const vui_tooltip_EVENT = {
    CLICK: 'click',
    CONTEXTMENU: 'contextmenu',
    MOUSEMOVE: 'mousemove',
    MOUSELEAVE: 'mouseleave'
};
const DELAY_TIME = 500;
let vui_tooltip_VuiTooltip = VuiTooltip_1 = class VuiTooltip extends widget_Widget {
    constructor() {
        super(vui_tooltip_VIEW);
    }
    get visible() {
        return this.get('visible', false);
    }
    set visible(value) {
        this.set('visible', value);
    }
    get observables() {
        return [];
    }
    attach(element) {
        let alreadyAttached = this[vui_tooltip_STATE].assignments.has(element);
        if (element.title) {
            this[vui_tooltip_STATE].assignments.set(element, element.title);
            element.title = '';
        }
        if (!alreadyAttached) {
            document.addEventListener(vui_tooltip_EVENT.CLICK, this[vui_tooltip_EVENTS].onDocClickBind, true);
            document.addEventListener(vui_tooltip_EVENT.CONTEXTMENU, this[vui_tooltip_EVENTS].onDocClickBind);
            element.addEventListener(vui_tooltip_EVENT.MOUSEMOVE, this[vui_tooltip_EVENTS].onMouseOverBind);
            element.addEventListener(vui_tooltip_EVENT.MOUSELEAVE, this[vui_tooltip_EVENTS].onMouseOutBind);
        }
    }
    close() {
        this._mouseOut();
    }
    initEvents() {
        this[vui_tooltip_EVENTS] = {
            onMouseOverBind: this._mouseOver.bind(this),
            onMouseOutBind: this._mouseOut.bind(this),
            onDocClickBind: this._onDocClick.bind(this)
        };
    }
    initState() {
        this[vui_tooltip_STATE] = {
            timer: 0,
            assignments: new WeakMap()
        };
    }
    initView() {
        this.shadowRoot.appendChild(VuiTooltip_1.template.content.cloneNode(true));
        this[vui_tooltip_VIEW] = {
            xRef: this.shadowRoot.querySelector(`.${vui_tooltip_CLASS.ELEMENT}`),
            wrapper: this.shadowRoot.querySelector(`.${vui_tooltip_CLASS.WRAPPER.ELEMENT}`)
        };
    }
    _onDocClick(event) {
        this.close();
    }
    _mouseOver(event) {
        let target = event.target;
        UtilitiesDelay.clear(this[vui_tooltip_STATE].timer);
        this[vui_tooltip_STATE].timer = UtilitiesDelay.queue(() => this._open(target), DELAY_TIME);
    }
    _mouseOut() {
        UtilitiesDelay.clear(this[vui_tooltip_STATE].timer);
        this._clear();
    }
    _open(element) {
        this._clear();
        let value = this[vui_tooltip_STATE].assignments.get(element);
        if (value) {
            this[vui_tooltip_VIEW].wrapper.innerText = this[vui_tooltip_STATE].assignments.get(element);
            let rect = element.getBoundingClientRect();
            this._positionElement(rect);
            if (!this._isOpened()) {
                document.body.appendChild(this);
                this.visible = true;
            }
        }
    }
    _isOpened() {
        return document.body.contains(this);
    }
    _positionElement(rect) {
        let elRect = this[vui_tooltip_VIEW].xRef.getBoundingClientRect();
        const OFFSET = 2;
        this[vui_tooltip_VIEW].xRef.style.left = `${rect.x + (rect.width / 2) - elRect.width}px`;
        this[vui_tooltip_VIEW].xRef.style.top = `${rect.y + rect.height + OFFSET}px`;
    }
    _clear() {
        if (this._isOpened()) {
            document.body.removeChild(this);
        }
        this.visible = false;
        this[vui_tooltip_VIEW].wrapper.innerText = '';
    }
};
vui_tooltip_VuiTooltip = VuiTooltip_1 = vui_tooltip_decorate([
    VUI('vui-tooltip', {html: "<div class=\"host__wrapper\"></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  position: absolute; }  .host {    z-index: 999; }.host {  color: var(--vc-popup-color, #666);  background: var(--vc-popup-background, #ffffff);  border-radius: var(--vc-popup-border-radius, 8px);  box-shadow: var(--vc-popup-shadow, 0 5px 30px 0 rgba(0, 0, 0, 0.1), 0 30px 50px -15px rgba(0, 0, 0, 0.1));  box-sizing: border-box;  overflow: hidden;  left: 0;  top: 1px; }.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }.host * {  box-sizing: border-box; }.host .host__wrapper {  padding: 10px; }"}),
    vui_tooltip_metadata("design:paramtypes", [])
], vui_tooltip_VuiTooltip);

//# sourceMappingURL=vui-tooltip.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-tooltip/index.js

if (customElements.get(vui_tooltip_VuiTooltip.tag) === undefined) {
    customElements.define(vui_tooltip_VuiTooltip.tag, vui_tooltip_VuiTooltip);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-dragAndDrop/lib/constants.js
const constants_POSITION = {
    LEFT: 'left',
    RIGHT: 'right',
    TOP: 'top',
    BOTTOM: 'bottom'
};
const constants_CLASS = {
    DRAGGED: 'dragged',
    DROPHERE: 'drophere',
    DRAGOVER: 'dragover'
};
const lib_constants_EVENT = {
    DRAGSTART: 'dragstart',
    DRAGEND: 'dragend',
    DRAGENTER: 'dragenter',
    DRAGLEAVE: 'dragleave',
    DRAGOVER: 'dragover',
    DROP: 'drop'
};
const constants_TYPE = {
    START: 'start',
    ENTER: 'enter',
    LEAVE: 'leave',
    OVER: 'over',
    END: 'end'
};
const constants_ATTRIBUTE = {
    DRAGGABLE: 'draggable',
    DROPABLE: 'dropable'
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-dragAndDrop/lib/drag.and.drop.js
var drag_and_drop_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


let drag_and_drop_DragAndDrop = class DragAndDrop {
    constructor() {
        this.drags = new WeakMap();
        this.drops = new WeakMap();
        this.onDragStartHandler = this.onDragStart.bind(this);
        this.onDragEndHandler = this.onDragEnd.bind(this);
        this.onDropEnterHandler = this.onDropEnter.bind(this);
        this.onDropLeaveHandler = this.onDropLeave.bind(this);
        this.onDropOverHandler = this.onDropOver.bind(this);
        this.onDropHandler = this.onDrop.bind(this);
    }
    setDrag(drag, callbacks) {
        if (this.drags.has(drag)) {
            console.warn(`Drag element already exists`);
            return void 0;
        }
        drag.setAttribute(constants_ATTRIBUTE.DRAGGABLE, true.toString());
        drag.addEventListener(lib_constants_EVENT.DRAGSTART, this.onDragStartHandler);
        drag.addEventListener(lib_constants_EVENT.DRAGEND, this.onDragEndHandler);
        this.drags.set(drag, { drops: [], callbacks });
    }
    setDrop(drop, callbacks) {
        if (this.drops.has(drop)) {
            console.warn(`Drop element already exists`);
            return void 0;
        }
        drop.setAttribute(constants_ATTRIBUTE.DROPABLE, true.toString());
        drop.addEventListener(lib_constants_EVENT.DRAGENTER, this.onDropEnterHandler);
        drop.addEventListener(lib_constants_EVENT.DRAGLEAVE, this.onDropLeaveHandler);
        drop.addEventListener(lib_constants_EVENT.DRAGOVER, this.onDropOverHandler);
        drop.addEventListener(lib_constants_EVENT.DROP, this.onDropHandler, false);
        this.drops.set(drop, { drags: [], callbacks });
    }
    isBothSet(drag, drop) {
        return this.drags.has(drag) && this.drops.has(drop);
    }
    isDragConnected(drag, drop) {
        return this.drags.has(drag) && this.drags.get(drag).drops.indexOf(drop) !== -1;
    }
    isDropConnected(drag, drop) {
        return this.drops.has(drop) && this.drops.get(drop).drags.indexOf(drag) !== -1;
    }
    connect(drag, drop) {
        if (!this.isBothSet(drag, drop)) {
            console.warn(`Drag or drop not defined`);
            return void 0;
        }
        if (drag === drop) {
            console.warn(`Cannot self connect`);
            return void 0;
        }
        if (this.isDragConnected(drag, drop)) {
            console.warn('Drag element already connect with drop element');
        }
        else {
            this.drags.get(drag).drops.push(drop);
        }
        if (this.isDropConnected(drag, drop)) {
            console.warn('Drop element already connect with drag element');
        }
        else {
            this.drops.get(drop).drags.push(drag);
        }
    }
    disconnectAll() {
        this.drags = new WeakMap();
        this.drops = new WeakMap();
    }
    disconnect(drag, drop) {
        if (!this.isBothSet(drag, drop)) {
            return void 0;
        }
        let drops = this.drags.get(drag).drops;
        if (drops.indexOf(drop) !== -1) {
            drops.splice(drops.indexOf(drop), 1);
        }
        else {
            console.warn('Drag element not connected to drop element');
        }
        let drags = this.drops.get(drop).drags;
        if (drags.indexOf(drag) !== -1) {
            drags.splice(drags.indexOf(drag), 1);
        }
        else {
            console.warn('Drop element not connected to drag element');
        }
    }
    unsetDrag(drag) {
        if (!this.drags.has(drag)) {
            console.warn('Drag element not found');
            return void 0;
        }
        drag.removeAttribute(constants_ATTRIBUTE.DRAGGABLE);
        drag.removeEventListener(lib_constants_EVENT.DRAGSTART, this.onDragStartHandler);
        drag.removeEventListener(lib_constants_EVENT.DRAGEND, this.onDragEndHandler);
        this.drags.get(drag).drops.forEach((drop) => this.disconnect(drag, drop));
        this.drags.delete(drag);
    }
    unsetDrop(drop) {
        if (!this.drops.has(drop)) {
            console.warn('Drop element not found');
            return void 0;
        }
        drop.removeAttribute(constants_ATTRIBUTE.DROPABLE);
        drop.removeEventListener(lib_constants_EVENT.DRAGENTER, this.onDropEnterHandler);
        drop.removeEventListener(lib_constants_EVENT.DRAGLEAVE, this.onDropLeaveHandler);
        drop.removeEventListener(lib_constants_EVENT.DRAGOVER, this.onDropOverHandler);
        drop.removeEventListener(lib_constants_EVENT.DROP, this.onDropHandler, false);
        this.drops.get(drop).drags.forEach((drag) => this.disconnect(drag, drop));
        this.drops.delete(drop);
    }
    isActiveDrop(event) {
        return this.drops.has(event.currentTarget)
            && this.drops.get(event.currentTarget).drags.indexOf(this.currentDrag) !== -1;
    }
    getData() {
        let callbacks = this.drags.get(this.currentDrag).callbacks;
        return callbacks.getData instanceof Function ? callbacks.getData(this.currentDrag) : '';
    }
    onDragStart(event) {
        if (!this.drags.has(event.target)) {
            console.warn('cannot find registered element');
            return void 0;
        }
        this.currentDrag = event.target;
        this.currentDrag.classList.add(constants_CLASS.DRAGGED);
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text', this.getData());
        this.getCallback(this.drags.get(this.currentDrag).callbacks, constants_TYPE.START)(this.currentDrag);
        this.drags.get(this.currentDrag).drops.forEach((drop) => drop.classList.add(constants_CLASS.DROPHERE));
    }
    onDragEnd() {
        if (!this.currentDrag) {
            console.warn('no active drag element');
            return void 0;
        }
        this.currentDrag.classList.remove(constants_CLASS.DRAGGED);
        if (this.drags.has(this.currentDrag)) {
            this.drags.get(this.currentDrag).drops
                .forEach((drop) => drop.classList.remove(constants_CLASS.DROPHERE));
            this.getCallback(this.drags.get(this.currentDrag).callbacks, constants_TYPE.END)(this.currentDrag);
        }
        this.currentDrag = undefined;
    }
    onDropEnter(event) {
        if (!this.isActiveDrop(event)) {
            return void 0;
        }
        this.currentDrop = event.currentTarget;
        this.currentDropRect = this.currentDrop.getBoundingClientRect();
        this.getCallback(this.drops.get(this.currentDrop).callbacks, constants_TYPE.ENTER)(this.getParams(event));
        this.currentDrop.classList.add(constants_CLASS.DRAGOVER);
    }
    onDropOver(event) {
        if (!this.isActiveDrop(event)) {
            return void 0;
        }
        event.preventDefault();
        this.getCallback(this.drops.get(this.currentDrop).callbacks, constants_TYPE.OVER)(this.getParams(event));
    }
    onDropLeave(event) {
        if (!this.isActiveDrop(event)) {
            return void 0;
        }
        this.getCallback(this.drops.get(event.currentTarget).callbacks, constants_TYPE.LEAVE)(this.getParams(event));
        event.currentTarget.classList.remove(constants_CLASS.DRAGOVER);
    }
    getDropPosition(event) {
        return [
            (event.clientX - this.currentDropRect.left) / this.currentDropRect.width > .5
                ? constants_POSITION.RIGHT : constants_POSITION.LEFT,
            (event.clientY - this.currentDropRect.top) / this.currentDropRect.height > .5
                ? constants_POSITION.BOTTOM : constants_POSITION.TOP
        ];
    }
    getCallback(handlerCallbacks, type) {
        return handlerCallbacks && handlerCallbacks[type] ? handlerCallbacks[type] : (params) => void 0;
    }
    getParams(event) {
        return {
            event,
            dragElement: this.currentDrag,
            dropElement: this.currentDrop,
            dropPosition: this.getDropPosition(event)
        };
    }
    onDrop(event) {
        if (!this.currentDrag) {
            console.warn('No active drag element');
            return void 0;
        }
        event.preventDefault();
        this.getCallback(this.drops.get(this.currentDrop).callbacks, lib_constants_EVENT.DROP)(this.getParams(event));
        this.currentDrop = null;
        this.currentDropRect = null;
    }
};
drag_and_drop_DragAndDrop = drag_and_drop_decorate([
    Injectable(Lifetime.Scoped)
], drag_and_drop_DragAndDrop);

//# sourceMappingURL=drag.and.drop.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-dragAndDrop/index.js


const VC_DragAndDropConstants = vc_dragAndDrop_lib_constants_namespaceObject;

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-viewsettings/component/vui-viewsettings-item.js
var vui_viewsettings_item_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_viewsettings_item_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiViewsettingsItem_1;


const vui_viewsettings_item_VIEW = Symbol('view');
const vui_viewsettings_item_STATE = Symbol('state');
const vui_viewsettings_item_EVENTS = Symbol('events');
const SORT = {
    ASC: 'asc',
    DESC: 'desc'
};
const CLASSES = {
    ACTIVE: 'active'
};
const MOUSE_EVENTS = {
    CLICK: 'click'
};
const component_vui_viewsettings_item_EVENTS = {
    SORT_ASC_CLICKED: 'viewsettingsSortAscClick',
    SORT_DESC_CLICKED: 'viewsettingsSortDescClick',
    SHOW_CLICKED: 'viewsettingsVisibilityOnClick',
    HIDE_CLICKED: 'viewsettingsVisibilityOffClick',
    FREEZE_CLICKED: 'viewsettingsFreezeClick',
    UNFREEZE_CLICKED: 'viewsettingsUnfreezeClick'
};
let vui_viewsettings_item_VuiViewsettingsItem = VuiViewsettingsItem_1 = class VuiViewsettingsItem extends Component {
    constructor() {
        super(vui_viewsettings_item_VIEW);
    }
    get observables() {
        return [];
    }
    initState() {
        this[vui_viewsettings_item_STATE] = {};
    }
    initEvents() {
        this[vui_viewsettings_item_EVENTS] = {
            onSortAscClickBind: this._onSortAscClick.bind(this),
            onSortDescClickBind: this._onSortDescClick.bind(this),
            onVisibilityClickBind: this._onVisibilityClick.bind(this),
            onFreezeClickBind: this._onFreezeClick.bind(this)
        };
    }
    getColumnId() {
        return this[vui_viewsettings_item_STATE].columnId;
    }
    setProperties(column, level, idx, root) {
        this.style.order = `${idx}`;
        this[vui_viewsettings_item_VIEW].rootRef = root || this;
        this[vui_viewsettings_item_STATE].columnId = column.columnId;
        this[vui_viewsettings_item_STATE].grouped = column.grouped;
        this[vui_viewsettings_item_STATE].isdisplayed = column.isDisplayed;
        this[vui_viewsettings_item_STATE].ishideable = column.isHideable;
        this[vui_viewsettings_item_STATE].ismerged = column.isMerged;
        this[vui_viewsettings_item_STATE].isfreezeable = column.isFreezeable;
        this[vui_viewsettings_item_STATE].isshowable = column.isShowable;
        this[vui_viewsettings_item_STATE].issortable = column.isSortable;
        this[vui_viewsettings_item_STATE].isvisible = column.visible;
        this[vui_viewsettings_item_STATE].label = column.label;
        this[vui_viewsettings_item_STATE].freeze = column.freeze;
        this[vui_viewsettings_item_STATE].sortOrder = column.sortOrder;
        this[vui_viewsettings_item_STATE].sortPriority = column.sortPriority;
        utilities_dom_UtilitiesDOM.addClass(this[vui_viewsettings_item_VIEW].listItem, [`level-${level}`]);
        this[vui_viewsettings_item_VIEW].label.innerText = this[vui_viewsettings_item_STATE].label;
        if (this[vui_viewsettings_item_STATE].sortPriority) {
            this[vui_viewsettings_item_VIEW].sortPriority.visible = true;
            this[vui_viewsettings_item_VIEW].sortPriority.count = this[vui_viewsettings_item_STATE].sortPriority;
        }
        else {
            this[vui_viewsettings_item_VIEW].sortPriority.visible = false;
        }
        this._setVisibilityIconAppearance();
        this._setFreezeableIconAppearance();
        this._setSortableIconAppearance();
    }
    attachEvents() {
        this[vui_viewsettings_item_VIEW].sortAsc.addEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onSortAscClickBind);
        this[vui_viewsettings_item_VIEW].sortDesc.addEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onSortDescClickBind);
        this[vui_viewsettings_item_VIEW].visibility.addEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onVisibilityClickBind);
        this[vui_viewsettings_item_VIEW].freeze.addEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onFreezeClickBind);
    }
    detachEvents() {
        this[vui_viewsettings_item_VIEW].sortAsc.removeEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onSortAscClickBind);
        this[vui_viewsettings_item_VIEW].sortDesc.removeEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onSortDescClickBind);
        this[vui_viewsettings_item_VIEW].visibility.removeEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onVisibilityClickBind);
        this[vui_viewsettings_item_VIEW].freeze.removeEventListener(MOUSE_EVENTS.CLICK, this[vui_viewsettings_item_EVENTS].onFreezeClickBind);
    }
    initView() {
        this.shadowRoot.appendChild(VuiViewsettingsItem_1.template.content.cloneNode(true));
        this[vui_viewsettings_item_VIEW] = {
            rootRef: null,
            xRef: this.shadowRoot.querySelector('.host'),
            draghandler: this.shadowRoot.querySelector('.draggable-wrapper'),
            listItem: this.shadowRoot.querySelector(`.list-item`),
            label: this.shadowRoot.querySelector('.list-item-label'),
            group: this.shadowRoot.querySelector('.list-item--group'),
            sortPriority: this.shadowRoot.querySelector('vui-counter'),
            sortAsc: this.shadowRoot.querySelector('vui-icon-chevron-up').parentElement,
            sortAscIco: this.shadowRoot.querySelector('vui-icon-chevron-up'),
            sortDesc: this.shadowRoot.querySelector('vui-icon-chevron-down').parentElement,
            sortDescIco: this.shadowRoot.querySelector('vui-icon-chevron-down'),
            visibility: this.shadowRoot.querySelector('vui-icon-visibility').parentElement,
            visibilityIco: this.shadowRoot.querySelector('vui-icon-visibility'),
            freeze: this.shadowRoot.querySelector('vui-icon-pin').parentElement,
            freezeIco: this.shadowRoot.querySelector('vui-icon-pin')
        };
    }
    addLeafColumn(element) {
        this[vui_viewsettings_item_VIEW].group.appendChild(element);
    }
    _setVisibilityIconAppearance() {
        this[vui_viewsettings_item_VIEW].visibility.visible = false;
        if (this[vui_viewsettings_item_STATE].ishideable) {
            this[vui_viewsettings_item_VIEW].visibility.visible = true;
            this[vui_viewsettings_item_VIEW].visibilityIco.activer = this[vui_viewsettings_item_STATE].isvisible;
        }
        else if (this[vui_viewsettings_item_STATE].isshowable && !this[vui_viewsettings_item_STATE].isvisible) {
            this[vui_viewsettings_item_VIEW].visibility.visible = true;
        }
    }
    _setSortableIconAppearance() {
        if (this[vui_viewsettings_item_STATE].issortable) {
            this[vui_viewsettings_item_VIEW].sortAsc.visible = true;
            this[vui_viewsettings_item_VIEW].sortDesc.visible = true;
            this[vui_viewsettings_item_VIEW].sortAscIco.activer = this[vui_viewsettings_item_STATE].sortOrder === SORT.ASC;
            this[vui_viewsettings_item_VIEW].sortDescIco.activer = this[vui_viewsettings_item_STATE].sortOrder === SORT.DESC;
        }
        else {
            this[vui_viewsettings_item_VIEW].sortAsc.visible = false;
            this[vui_viewsettings_item_VIEW].sortDesc.visible = false;
        }
    }
    _setFreezeableIconAppearance() {
        if (this[vui_viewsettings_item_STATE].isfreezeable) {
            this[vui_viewsettings_item_VIEW].freeze.visible = true;
            this[vui_viewsettings_item_VIEW].freezeIco.activer = this[vui_viewsettings_item_STATE].freeze;
        }
        else {
            this[vui_viewsettings_item_VIEW].freeze.visible = false;
        }
    }
    _onSortAscClick(event) {
        if (this[vui_viewsettings_item_STATE].sortOrder === SORT.ASC && !event.ctrlKey) {
            return void 0;
        }
        this[vui_viewsettings_item_VIEW].rootRef.dispatchEvent(new CustomEvent(component_vui_viewsettings_item_EVENTS.SORT_ASC_CLICKED, {
            detail: {
                columnId: this[vui_viewsettings_item_STATE].columnId,
                multisort: event.ctrlKey
            },
            bubbles: true
        }));
    }
    _onSortDescClick(event) {
        if (this[vui_viewsettings_item_STATE].sortOrder === SORT.DESC && !event.ctrlKey) {
            return void 0;
        }
        this[vui_viewsettings_item_VIEW].rootRef.dispatchEvent(new CustomEvent(component_vui_viewsettings_item_EVENTS.SORT_DESC_CLICKED, {
            detail: {
                columnId: this[vui_viewsettings_item_STATE].columnId,
                multisort: event.ctrlKey
            },
            bubbles: true
        }));
    }
    _onVisibilityClick() {
        this[vui_viewsettings_item_VIEW].rootRef.dispatchEvent(new CustomEvent(this[vui_viewsettings_item_STATE].isvisible ? component_vui_viewsettings_item_EVENTS.HIDE_CLICKED : component_vui_viewsettings_item_EVENTS.SHOW_CLICKED, { detail: this[vui_viewsettings_item_STATE].columnId, bubbles: true }));
    }
    _onFreezeClick() {
        this[vui_viewsettings_item_VIEW].rootRef.dispatchEvent(new CustomEvent(this[vui_viewsettings_item_STATE].freeze ? component_vui_viewsettings_item_EVENTS.UNFREEZE_CLICKED : component_vui_viewsettings_item_EVENTS.FREEZE_CLICKED, { detail: this[vui_viewsettings_item_STATE].columnId, bubbles: true }));
    }
};
vui_viewsettings_item_VuiViewsettingsItem = VuiViewsettingsItem_1 = vui_viewsettings_item_decorate([
    VUI('vui-viewsettings-item', {html: "<div class=\"draggable-wrapper\">    <div class=\"list-item\">        <div class=\"list-item--single\">            <div>                <div class=\"list-item-label\"></div>            </div>            <div class=\"list-item-actions\">                <div>                    <div>                        <vui-counter circled=\"true\"></vui-counter>                    </div>                    <div>                        <vui-button>                            <vui-icon-chevron-up size=\"large\" hoverable=\"true\" accent=\"3\"></vui-icon-chevron-up>                        </vui-button>                    </div>                    <div>                        <vui-button>                            <vui-icon-chevron-down size=\"large\" hoverable=\"true\" accent=\"3\"></vui-icon-chevron-down>                        </vui-button>                    </div>                    <div>                        <vui-button>                            <vui-icon-visibility size=\"large\" hoverable=\"true\" accent=\"3\"></vui-icon-visibility>                        </vui-button>                    </div>                    <div>                        <vui-button>                            <vui-icon-pin size=\"large\" hoverable=\"true\" accent=\"3\"></vui-icon-pin>                        </vui-button>                    </div>                </div>            </div>        </div>        <div class=\"list-item--group\"></div>    </div></div>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host .list-item > div, .host .list-item-actions, .host .list-item-actions div, .host .list-item-actions div > div, .host .list-item--single, .host .list-item--single > div, .host .list-item--group {  display: flex; }  .host .list-item-actions div, .host .list-item--single > div {    justify-content: center; }  .host .list-item-actions {    justify-content: flex-end; }  .host .list-item--single {    justify-content: space-between; }  .host .list-item--single > div, .host .list-item--group {    height: 100%;    flex-direction: column; }  .host .list-item-actions div {    width: 100%;    flex-direction: row; }.host .list-item {  cursor: move;  min-height: 30px;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .list-item:hover {    background: rgba(0, 0, 0, 0.05);    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .list-item-actions div > div {    width: 24px; }  .host .list-item--single {    padding: 6px 12px; }    .host .list-item--single > div {      height: 28px; }  .host .list-item.level-1:hover > .list-item--single > .list-item-label {    color: var(--vc-color--highlight, #4680FE);    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .list-item.level-2 {    border-left: 2px solid var(--vc-grid-border-color, #e7e7e7);    margin-left: 10px; }"}),
    vui_viewsettings_item_metadata("design:paramtypes", [])
], vui_viewsettings_item_VuiViewsettingsItem);

//# sourceMappingURL=vui-viewsettings-item.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-viewsettings/component/vui-viewsettings.js
var vui_viewsettings_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var vui_viewsettings_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var VuiViewSettings_1;




const vui_viewsettings_PRIVATE = Symbol('private');
const vui_viewsettings_VIEW = Symbol('view');
const vui_viewsettings_STATE = Symbol('state');
const vui_viewsettings_EVENTS = Symbol('events');
const vui_viewsettings_ELEMENT = {
    DIV: 'div',
    VIEWSETTINGS_ITEM: 'vui-viewsettings-item'
};
const component_vui_viewsettings_EVENTS = {
    SORT_ASC_CLICKED: 'viewsettingsSortAscClick',
    SORT_DESC_CLICKED: 'viewsettingsSortDescClick',
    VISIBILITY_ON_CLICKED: 'viewsettingsVisibilityOnClick',
    VISIBILITY_OFF_CLICKED: 'viewsettingsVisibilityOffClick',
    FREEZE_CLICKED: 'viewsettingsFreezeClick',
    UNFREEZE_CLICKED: 'viewsettingsUnfreezeClick',
    DROP_ITEM: 'viewsettingsDropItem',
    VISIBLE_ATTR_CHANGED: 'visibleChanged'
};
let vui_viewsettings_VuiViewSettings = VuiViewSettings_1 = class VuiViewSettings extends widget_Widget {
    constructor() {
        super(vui_viewsettings_VIEW);
    }
    get observables() {
        return [
            'maxgroups',
            'groupenabled',
            'freezeenabled',
            'sortenabled',
            'groupsplaceholdertext',
            'clicked'
        ];
    }
    get groupenabled() {
        return this.get('groupenabled', false);
    }
    get freezeenabled() {
        return this.get('freezeenabled', false);
    }
    get sortenabled() {
        return this.get('sortenabled', false);
    }
    get maxgroups() {
        return this.get('maxgroups', 0);
    }
    get groupsplaceholdertext() {
        return this.get('groupsplaceholdertext', '');
    }
    get clicked() {
        return this.get('clicked', false);
    }
    set clicked(value) {
        this.set('clicked', value);
        this._onIconClick();
    }
    initState() {
        this[vui_viewsettings_STATE] = {
            columns: [],
            grouped: [],
            sourceElementRef: null,
            overElementRef: null,
            sourceElementPosition: null,
            gooey: undefined,
            availableItemsXRef: {},
            groupedItemsXRef: {},
            subItemsXRef: {}
        };
    }
    initEvents() {
        this[vui_viewsettings_EVENTS] = {
            onDropBind: this._onDrop.bind(this),
            onDragStartBind: this._onDragStart.bind(this),
            onDragEndBind: this._onDragEnd.bind(this),
            onDragEnterBind: this._onDragEnter.bind(this),
            onDragLeaveBind: this._onDragLeave.bind(this),
            onDragOverBind: this._onDragOver.bind(this),
            onVisibleAttributeChangedBind: this._onVisibleAttributeChanged.bind(this),
            onSortAscClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.SORT_ASC_CLICKED),
            onSortDescClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.SORT_DESC_CLICKED),
            onVisibilityOnClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.VISIBILITY_ON_CLICKED),
            onVisibilityOffClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.VISIBILITY_OFF_CLICKED),
            onFreezeClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.FREEZE_CLICKED),
            onUnfreezeClickedBind: this.bubble.bind(this, component_vui_viewsettings_EVENTS.UNFREEZE_CLICKED),
        };
    }
    attachEvents() {
        this.addEventListener(component_vui_viewsettings_EVENTS.VISIBLE_ATTR_CHANGED, this[vui_viewsettings_EVENTS].onVisibleAttributeChangedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.SORT_ASC_CLICKED, this[vui_viewsettings_EVENTS].onSortAscClickedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.SORT_DESC_CLICKED, this[vui_viewsettings_EVENTS].onSortDescClickedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.VISIBILITY_ON_CLICKED, this[vui_viewsettings_EVENTS].onVisibilityOnClickedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.VISIBILITY_OFF_CLICKED, this[vui_viewsettings_EVENTS].onVisibilityOffClickedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.FREEZE_CLICKED, this[vui_viewsettings_EVENTS].onFreezeClickedBind);
        this[vui_viewsettings_VIEW].popup.addEventListener(component_vui_viewsettings_EVENTS.UNFREEZE_CLICKED, this[vui_viewsettings_EVENTS].onUnfreezeClickedBind);
    }
    detachEvents() {
        this.removeEventListener(component_vui_viewsettings_EVENTS.VISIBLE_ATTR_CHANGED, this[vui_viewsettings_EVENTS].onVisibleAttributeChangedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.SORT_ASC_CLICKED, this[vui_viewsettings_EVENTS].onSortAscClickedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.SORT_DESC_CLICKED, this[vui_viewsettings_EVENTS].onSortDescClickedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.VISIBILITY_ON_CLICKED, this[vui_viewsettings_EVENTS].onVisibilityOnClickedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.VISIBILITY_OFF_CLICKED, this[vui_viewsettings_EVENTS].onVisibilityOffClickedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.FREEZE_CLICKED, this[vui_viewsettings_EVENTS].onFreezeClickedBind);
        this[vui_viewsettings_VIEW].popup.removeEventListener(component_vui_viewsettings_EVENTS.UNFREEZE_CLICKED, this[vui_viewsettings_EVENTS].onUnfreezeClickedBind);
    }
    bindView() {
        this[vui_viewsettings_VIEW].groupedPlaceholder.label = this.groupsplaceholdertext;
        this[vui_viewsettings_VIEW].groupedList.appendChild(this[vui_viewsettings_VIEW].groupedPlaceholder);
        this[vui_viewsettings_VIEW].groupedList.style.display = this[vui_viewsettings_VIEW].groupedList.classList.contains('hidden') ? 'none' : 'flex';
        this[vui_viewsettings_VIEW].groupedList.style.flexDirection = 'column';
        this[vui_viewsettings_VIEW].columnsList.style.display = this[vui_viewsettings_VIEW].columnsList.classList.contains('hidden') ? 'none' : 'flex';
        this[vui_viewsettings_VIEW].columnsList.style.flexDirection = 'column';
        this._redrawItems();
    }
    initView() {
        this.shadowRoot.appendChild(VuiViewSettings_1.template.content.cloneNode(true));
        this[vui_viewsettings_PRIVATE] = {
            dragAndDrop: new drag_and_drop_DragAndDrop()
        };
        this[vui_viewsettings_VIEW] = {
            popup: this.shadowRoot.querySelector('.view-settings__popup'),
            groupedList: this.shadowRoot.querySelectorAll('vui-layout-stacked')[0].querySelector(vui_viewsettings_ELEMENT.DIV),
            columnsList: this.shadowRoot.querySelectorAll('vui-layout-stacked')[1].querySelector(vui_viewsettings_ELEMENT.DIV),
            groupedPlaceholder: this.shadowRoot.querySelector('vui-drop-area')
        };
    }
    setState(columns = [], grouped = []) {
        this[vui_viewsettings_STATE].columns = columns;
        this[vui_viewsettings_STATE].grouped = grouped;
        this.bindView();
    }
    setReference(element) {
        this[vui_viewsettings_STATE].gooey = element;
    }
    setGroupedListNodes() {
        if (!this.groupenabled) {
            this._hideElement(this[vui_viewsettings_VIEW].groupedList);
            return void 0;
        }
        this._showElement(this[vui_viewsettings_VIEW].groupedList);
        if (!this[vui_viewsettings_STATE].grouped || this[vui_viewsettings_STATE].grouped.length === 0) {
            this[vui_viewsettings_VIEW].groupedPlaceholder.visible = true;
            this._displayPlaceholderNode(this[vui_viewsettings_VIEW].groupedPlaceholder);
        }
        else {
            this[vui_viewsettings_VIEW].groupedPlaceholder.visible = false;
            this._addNodesToList(this[vui_viewsettings_VIEW].groupedList, this[vui_viewsettings_STATE].grouped, this[vui_viewsettings_STATE].groupedItemsXRef, this[vui_viewsettings_STATE].availableItemsXRef, this[vui_viewsettings_STATE].subItemsXRef);
        }
    }
    setColumnListNodes() {
        this._addNodesToList(this[vui_viewsettings_VIEW].columnsList, this[vui_viewsettings_STATE].columns, this[vui_viewsettings_STATE].availableItemsXRef, this[vui_viewsettings_STATE].groupedItemsXRef, this[vui_viewsettings_STATE].subItemsXRef);
    }
    _hideElement(element) {
        utilities_dom_UtilitiesDOM.addClass(element, ['hidden']);
    }
    _showElement(element) {
        utilities_dom_UtilitiesDOM.removeClass(element, ['hidden']);
    }
    _connectDragAndDrop(list, element) {
        list.childNodes.forEach((node) => {
            if (node === element || node.textContent.length) {
                return void 0;
            }
            this[vui_viewsettings_PRIVATE].dragAndDrop.connect(node, element);
            this[vui_viewsettings_PRIVATE].dragAndDrop.connect(element, node);
        });
    }
    _setDrag(columnId, element) {
        this[vui_viewsettings_PRIVATE].dragAndDrop.setDrag(element, {
            getData: () => columnId,
            start: this[vui_viewsettings_EVENTS].onDragStartBind,
            end: this[vui_viewsettings_EVENTS].onDragEndBind
        });
    }
    _setDrop(columnId, element) {
        this[vui_viewsettings_PRIVATE].dragAndDrop.setDrop(element, {
            drop: this[vui_viewsettings_EVENTS].onDropBind,
            over: this[vui_viewsettings_EVENTS].onDragOverBind,
            leave: this[vui_viewsettings_EVENTS].onDragLeaveBind
        });
        this._connectDragAndDrop(this[vui_viewsettings_VIEW].columnsList, element);
        if (this.maxgroups > this[vui_viewsettings_STATE].grouped.length) {
            this._connectDragAndDrop(this[vui_viewsettings_VIEW].groupedList, element);
        }
    }
    _addNodesToList(list, columns, cache, compareCache, subItemsCache) {
        let level = 1;
        columns.forEach((column, idx) => {
            let livingElement = (cache[column.columnId] || compareCache[column.columnId]);
            if (!column.isDisplayed) {
                return;
            }
            if (livingElement) {
                if (compareCache[column.columnId]) {
                    list.appendChild(livingElement);
                    delete compareCache[column.columnId];
                }
                cache[column.columnId] = livingElement;
                this._addNestedLeafsToNode(livingElement, column, level, subItemsCache);
                livingElement.setProperties(column, level, idx);
            }
            else {
                let node = document.createElement(vui_viewsettings_ELEMENT.VIEWSETTINGS_ITEM);
                cache[column.columnId] = node;
                node.setProperties(column, level, idx);
                this._setDrag(column.columnId, node);
                this._setDrop(column.columnId, node);
                this._addNestedLeafsToNode(node, column, level, subItemsCache);
                list.appendChild(node);
            }
        });
    }
    _addNestedLeafsToNode(rootNode, column, level, cache) {
        if (!column.isMerged || !Array.isArray(column.leafColumns)) {
            return void 0;
        }
        let leafLevel = ++level;
        column.leafColumns.forEach((leaf, idx) => {
            if (leaf.isDisplayed) {
                let livingElement = (cache[leaf.columnId]);
                if (livingElement) {
                    livingElement.setProperties(leaf, leafLevel, idx, rootNode);
                }
                else {
                    let node = document.createElement(vui_viewsettings_ELEMENT.VIEWSETTINGS_ITEM);
                    cache[leaf.columnId] = node;
                    node.setProperties(leaf, leafLevel, idx, rootNode);
                    rootNode.addLeafColumn(node);
                }
            }
        });
    }
    _displayPlaceholderNode(placeholder) {
        if (!this[vui_viewsettings_STATE].groupedItemsXRef['placeholder']) {
            this[vui_viewsettings_STATE].groupedItemsXRef['placeholder'] = placeholder;
            this._setDrag('placeholder', placeholder);
            this._setDrop('placeholder', placeholder);
        }
        placeholder.setAttribute(VC_DragAndDropConstants.ATTRIBUTE.DRAGGABLE, false.toString());
    }
    _redrawItems() {
        this.setGroupedListNodes();
        this.setColumnListNodes();
    }
    _compareMousePositionY(event) {
        let target = event.target;
        let rect = target.getBoundingClientRect();
        let targetMiddlePosition = (rect.top + rect.bottom) / 2;
        return this._compareMousePosition(event.clientY, targetMiddlePosition);
    }
    _compareMousePosition(position, targetMiddlePosition) {
        if (position > targetMiddlePosition) {
            return 1;
        }
        else if (position < targetMiddlePosition) {
            return -1;
        }
        return 0;
    }
    _getColumnIdFromElement(dragElement) {
        if (!(dragElement instanceof vui_viewsettings_item_VuiViewsettingsItem)) {
            return void 0;
        }
        return dragElement.getColumnId();
    }
    _onIconClick() {
        this[vui_viewsettings_VIEW].popup.toggle(this[vui_viewsettings_STATE].gooey);
        this.bindView();
    }
    _onDrop(params) {
        this.dispatchEvent(new CustomEvent(component_vui_viewsettings_EVENTS.DROP_ITEM, {
            detail: {
                change: {
                    source: this._getColumnIdFromElement(params.dragElement),
                    target: this._getColumnIdFromElement(params.dropElement),
                    operator: params.dropPosition[1],
                },
                isGroupList: params.dropElement.parentElement === this[vui_viewsettings_VIEW].groupedList,
                groups: this[vui_viewsettings_STATE].grouped
            },
            bubbles: true
        }));
    }
    _onDragStart(params) {
        return void 0;
    }
    _onDragEnd(params) {
        return void 0;
    }
    _onDragEnter(params) {
        return void 0;
    }
    _onDragLeave(params) {
        return void 0;
    }
    _onDragOver(params) {
        return void 0;
    }
    _onVisibleAttributeChanged(event) {
        if (!event.detail && this[vui_viewsettings_VIEW].popup.isOpened()) {
            this[vui_viewsettings_VIEW].popup.close();
        }
    }
};
vui_viewsettings_VuiViewSettings = VuiViewSettings_1 = vui_viewsettings_decorate([
    VUI('vui-viewsettings', {html: "<vui-popup class=\"view-settings__popup\" closeondocumentmousedown=\"true\" position=\"bottom,left\" positiondetails=\"left\"           locked=\"true\"           autohide=\"true\">    <vui-layout-stacked border=\"true\">        <vui-drop-area></vui-drop-area>        <div></div>    </vui-layout-stacked>    <vui-layout-stacked height=\"260\">        <div></div>    </vui-layout-stacked></vui-popup>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  display: flex; }  .host {    justify-content: center; }  .host {    height: 100%;    flex-direction: column; }.host--orderable {  display: block; }"}),
    vui_viewsettings_metadata("design:paramtypes", [])
], vui_viewsettings_VuiViewSettings);

//# sourceMappingURL=vui-viewsettings.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-viewsettings/index.js


if (customElements.get(vui_viewsettings_VuiViewSettings.tag) === undefined) {
    customElements.define(vui_viewsettings_VuiViewSettings.tag, vui_viewsettings_VuiViewSettings);
}
if (customElements.get(vui_viewsettings_item_VuiViewsettingsItem.tag) === undefined) {
    customElements.define(vui_viewsettings_item_VuiViewsettingsItem.tag, vui_viewsettings_item_VuiViewsettingsItem);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vui-reg.js



























//# sourceMappingURL=vui-reg.js.map
// CONCATENATED MODULE: ./dist-es/modules/attributes/constants.js
const GRID_ATTRIBUTE = {
    'METADATA': 'metadata',
    'DICTIONARIES': 'dictionaries',
    'ROWS': 'rows',
    'HEIGHT': 'height',
    'WIDTH': 'width',
    'CONFIG_LANGUAGE': 'config-language',
    'CONFIG_MODE': 'config-mode',
    'CONFIG_HEADER': 'config-header',
    'CONFIG_HEADER_TITLE': 'config-header-title',
    'CONFIG_HEADER_BAR_FILTER_VISIBLE': 'config-header-bar-filter-visible',
    'CONFIG_HEADER_BAR_GROUP_VISIBLE': 'config-header-bar-group-visible',
    'CONFIG_FOOTER_FIXED': 'config-footer-fixed',
    'CONFIG_FOOTER_ENABLED': 'config-footer-enabled',
    'CONFIG_OPTIONS_DEBUG_ENABLED': 'config-options-debug-enabled',
    'CONFIG_OPTIONS_INFINITE_ENABLED': 'config-options-infinite-enabled',
    'CONFIG_THEME_LAYOUT': 'config-theme-layout',
    'CONFIG_THEME_BORDER': 'config-theme-border',
    'CONFIG_OPTIONS': 'config-options',
    'CONFIG_EXTENSIONS': 'config-extensions',
    'CONFIG_ENDPOINTS': 'config-endpoints'
};
const constants_SEPARATOR = '-';
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/modules/attributes/processor.js
var processor_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class processor_Processor {
    constructor() {
        this.attribToFunctionMap = {};
    }
    canHandle(qualifiedName) {
        return this.attribToFunctionMap.hasOwnProperty(qualifiedName);
    }
    process(qualifiedName, dataset, newValue) {
        if (this.canHandle(qualifiedName)) {
            return this.attribToFunctionMap[qualifiedName](qualifiedName, dataset, newValue);
        }
        return dataset;
    }
    registerHandler(qualifiedName, fn) {
        this.attribToFunctionMap[qualifiedName] = fn;
    }
    attributeLoadValue(name, dataset, newValue = null) {
        return processor_awaiter(this, void 0, void 0, function* () {
            if (newValue !== undefined) {
                name.split(constants_SEPARATOR).reduce((prev, item, index, arr) => {
                    if (!prev) {
                        console.warn('Cannot find prev hash');
                        return void 0;
                    }
                    if (index === arr.length - 1) {
                        let value = newValue;
                        prev[item] = /^false$|^true$|^\d+([.]?\d+)?$/g.test(value) ? JSON.parse(value) : value;
                    }
                    else {
                        if (typeof prev[item] === 'undefined') {
                            prev[item] = {};
                        }
                    }
                    return prev[item];
                }, dataset);
            }
            return Promise.resolve(dataset);
        });
    }
    attributeLoad(name, dataset, value) {
        return processor_awaiter(this, void 0, void 0, function* () {
            let data = yield this.loadJSON(value);
            return yield this.attributeLoadValue(name, dataset, data);
        });
    }
    loadJSON(file) {
        return fetch(file)
            .then((response) => response.json())
            .then((value) => {
            if (value) {
                return value;
            }
            return null;
        });
    }
}
//# sourceMappingURL=processor.js.map
// CONCATENATED MODULE: ./dist-es/modules/attributes/processor.url.js


class processor_url_ProcessorUrl extends processor_Processor {
    constructor() {
        super();
        this.registerHandler(GRID_ATTRIBUTE.METADATA, this.attributeLoad.bind(this));
        this.registerHandler(GRID_ATTRIBUTE.ROWS, this.attributeLoad.bind(this));
        this.registerHandler(GRID_ATTRIBUTE.DICTIONARIES, this.attributeLoad.bind(this));
    }
}
//# sourceMappingURL=processor.url.js.map
// CONCATENATED MODULE: ./dist-es/modules/attributes/processor.element.js


class processor_element_ProcessorElement extends processor_Processor {
    constructor() {
        super();
        let onChange = this.attributeLoadValue.bind(this);
        this.registerHandler(GRID_ATTRIBUTE.HEIGHT, onChange);
        this.registerHandler(GRID_ATTRIBUTE.WIDTH, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_LANGUAGE, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_MODE, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_HEADER, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_HEADER_TITLE, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_HEADER_BAR_FILTER_VISIBLE, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_HEADER_BAR_GROUP_VISIBLE, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_FOOTER_FIXED, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_FOOTER_ENABLED, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_THEME_LAYOUT, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_THEME_BORDER, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_OPTIONS_DEBUG_ENABLED, onChange);
        this.registerHandler(GRID_ATTRIBUTE.CONFIG_OPTIONS_INFINITE_ENABLED, onChange);
    }
}
//# sourceMappingURL=processor.element.js.map
// CONCATENATED MODULE: ./dist-es/modules/attributes/attributes.js
var attributes_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class attributes_Attributes extends Component {
    constructor() {
        super(...arguments);
        this._dataset = {};
        this.changes = {};
        this.changedAttributes = {};
        this.bootstrapped = false;
    }
    get observables() {
        return Object.keys(GRID_ATTRIBUTE).map((key) => {
            return GRID_ATTRIBUTE[key];
        });
    }
    attributeChangedCallback(name, oldValue, newValue) {
        super.attributeChangedCallback(name, oldValue, newValue);
        if (oldValue === newValue) {
            return void 0;
        }
        this.changes[name] = newValue;
        if (this.bootstrapped) {
            this.runUpdate(name);
        }
    }
    runUpdate(qualifiedName) {
        if (qualifiedName === GRID_ATTRIBUTE.METADATA) {
            delete this.changedAttributes[GRID_ATTRIBUTE.METADATA];
            this.changes = Object.assign({}, this.changes, this.changedAttributes);
        }
        this.apply();
    }
    handleAttributeChanged(qualifiedName, newValue) {
        return attributes_awaiter(this, void 0, void 0, function* () {
            let urlAttributes = new processor_url_ProcessorUrl();
            let elementAttributes = new processor_element_ProcessorElement();
            yield this.handleDatasetChange(qualifiedName, newValue, urlAttributes);
            yield this.handleDatasetChange(qualifiedName, newValue, elementAttributes);
        });
    }
    handleDatasetChange(qualifiedName, newValue, processor) {
        return attributes_awaiter(this, void 0, void 0, function* () {
            if (processor.canHandle(qualifiedName)) {
                this._dataset = yield processor.process(qualifiedName, this._dataset, newValue);
            }
        });
    }
    apply() {
        return attributes_awaiter(this, void 0, void 0, function* () {
            for (const key of Object.keys(this.changes)) {
                yield this.handleAttributeChanged(key, this.changes[key]);
                if (this.changes[key]) {
                    this.changedAttributes[key] = this.changes[key];
                    delete this.changes[key];
                }
            }
        });
    }
    reloadData() {
        return attributes_awaiter(this, void 0, void 0, function* () {
            yield this.handleAttributeChanged(GRID_ATTRIBUTE.ROWS, this.changedAttributes[GRID_ATTRIBUTE.ROWS]);
        });
    }
    getDataset() {
        return this._dataset;
    }
    getMetadata() {
        return this._dataset.metadata;
    }
    getDictionaries() {
        return this._dataset.dictionaries;
    }
    getRows() {
        return this._dataset.rows;
    }
    reload() {
        this.initializeState();
    }
}
//# sourceMappingURL=attributes.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-services/lib/services.debugger.js
var services_debugger_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let ServicesDebugger = class ServicesDebugger {
    initialize(options) {
        this.options = options;
    }
    isEnabled() {
        return this.options && this.options.debug ? this.options.debug.enabled : false;
    }
};
ServicesDebugger = services_debugger_decorate([
    Injectable(Lifetime.Scoped)
], ServicesDebugger);

//# sourceMappingURL=services.debugger.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-services/lib/services.logger.js
var services_logger_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var services_logger_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


let ServicesLogger = class ServicesLogger {
    constructor(debuggerService) {
        this.debuggerService = debuggerService;
    }
    isLoggerEnabled() {
        return this.debuggerService.isEnabled();
    }
    warn(text, style = '') {
        if (this.isLoggerEnabled()) {
            console.warn(`%c${text}`, style);
        }
    }
    log(text, style = '') {
        if (this.isLoggerEnabled()) {
            console.log(`%c${text}`, style);
        }
    }
};
ServicesLogger = services_logger_decorate([
    Injectable(Lifetime.Scoped),
    services_logger_metadata("design:paramtypes", [ServicesDebugger])
], ServicesLogger);

//# sourceMappingURL=services.logger.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-services/constants/event.bus.js
const EVENT_BUS_LOGGER_COLORS = {
    ERROR: 'background: red; color: white',
    WARN: 'background: orange; color: white',
    LOG: 'background: yellow; color: blue'
};
const EVENT_BUS_ALLOWED_CONSTRUCTORS = [
    String,
    Number,
    Boolean,
    HTMLElement
];
//# sourceMappingURL=event.bus.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-services/lib/services.event.bus.js
var services_event_bus_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var services_event_bus_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var services_event_bus_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





let services_event_bus_ServicesEventBus = class ServicesEventBus {
    constructor(logger) {
        this.logger = logger;
        this.__destroyed = false;
        this.eventsListStringCache = [];
        this.eventsListRefCache = new WeakMap();
        this.nativeEventsList = [];
        this.updateNativeDebounce = UtilitiesDelay.debounce(this.updateNative.bind(this), 200);
        this.register = new WeakMap();
        this.native = new Map();
        this.members = new Map();
        this.disposable = new Map();
        this.fireWarningAllowedConstructors = EVENT_BUS_ALLOWED_CONSTRUCTORS.slice();
        this.fireWarningDisallowedConstructors = [];
    }
    loadEventsList(eventsList, force = false) {
        if (this.eventsList && !force) {
            console.warn(`Events list already loaded. Use force option to overwrite`);
            return void 0;
        }
        this.eventsList = eventsList;
        this.eventsListRefCache = new WeakMap();
        this.eventsListStringCache = [];
    }
    getEventsList() {
        return this.eventsList;
    }
    addListener(element, type, params) {
        let responseBind = (event) => {
            this.logger.log(`EventBus.addListener '${this.getEventNameFromEvent(type)}'`, 'background: yellow; color: blue');
            this.respond(params, event);
        };
        if (!this.register.has(element)) {
            this.register.set(element, { [type]: [params.eventName] });
        }
        else {
            let existing = this.register.get(element);
            if (!existing[type]) {
                existing[type] = [];
            }
            existing[type].push(params.eventName);
            this.register.set(element, existing);
        }
        this.setNative(element, type, params.eventName, responseBind);
        this.updateNativeConditional(params.eventName);
    }
    getNative(eventName, element, type) {
        return this.native.get(eventName)
            .find((pair) => pair.element === element && pair.type === type);
    }
    removeNativePair(eventName, element, type) {
        if (!this.getNative(eventName, element, type)) {
            console.warn(`Cannot remove not existing native register`);
            return void 0;
        }
        let native = this.native.get(eventName);
        let index = native.findIndex((pair) => {
            return pair.element === element && pair.type === type;
        });
        native.splice(index, 1);
        if (native.length === 0) {
            this.native.delete(eventName);
        }
    }
    setNative(element, type, eventName, responseBind) {
        if (!this.native.has(eventName)) {
            this.native.set(eventName, []);
        }
        let nativePair = this.getNative(eventName, element, type);
        if (!nativePair) {
            nativePair = { element, type, callbacks: [] };
            utilities_dom_UtilitiesDOM.addClass(element, [`event-${type}-ready`]);
            this.native.get(eventName).push(nativePair);
        }
        if (this.nativeEventsList.indexOf(eventName) === -1) {
            this.nativeEventsList.push(eventName);
        }
        nativePair.callbacks.push(responseBind);
    }
    removeNativeByType(element, type, eventName) {
        let nativePair = this.getNative(eventName, element, type);
        if (!nativePair) {
            console.warn(`Cannot find native register for event '${eventName}'`);
            return void 0;
        }
        utilities_dom_UtilitiesDOM.removeClass(element, [`event-${type}-ready`, `event-${type}`]);
        nativePair.callbacks.forEach((callback) => {
            element.removeEventListener(type, callback);
        });
        this.removeNativePair(eventName, element, type);
    }
    removeNative(element, type) {
        if (!this.register.has(element)) {
            console.warn(`Element not registred`);
            return void 0;
        }
        let register = this.register.get(element);
        if (type) {
            if (!register[type]) {
                console.warn(`Type '${type}' not registred on element`);
                return void 0;
            }
            register[type].forEach(this.removeNativeByType.bind(this, element, type));
        }
        else {
            Object.keys(register)
                .forEach((type) => register[type].forEach(this.removeNativeByType.bind(this, element, type)));
        }
    }
    updateNativeEvents(eventName, { type, element, callbacks }) {
        let classEventReady = `event-${type}-ready`;
        let classEvent = `event-${type}`;
        if (element.classList.contains(classEventReady) && this.members.get(eventName)) {
            utilities_dom_UtilitiesDOM.removeClass(element, [classEventReady]);
            utilities_dom_UtilitiesDOM.addClass(element, [classEvent]);
            callbacks.forEach((responseBind) => element.addEventListener(type, responseBind));
        }
        else if (element.classList.contains(classEvent) && !this.members.get(eventName)) {
            utilities_dom_UtilitiesDOM.removeClass(element, [classEvent]);
            utilities_dom_UtilitiesDOM.addClass(element, [classEventReady]);
            callbacks.forEach((responseBind) => element.removeEventListener(type, responseBind));
        }
    }
    updateNative() {
        this.nativeEventsList.forEach((eventName) => {
            if (this.native.has(eventName)) {
                this.native.get(eventName).forEach(this.updateNativeEvents.bind(this, eventName));
            }
        });
    }
    updateNativeConditional(eventName) {
        if (this.nativeEventsList.indexOf(eventName) !== -1) {
            this.updateNativeDebounce();
        }
    }
    removeListenerByType(element, type) {
        let register = this.register.get(element);
        if (!register[type]) {
            console.warn(`Events '${type}' not bound to element`);
            return void 0;
        }
        this.removeNative(element, type);
        delete register[type];
        this.register.set(element, register);
    }
    removeListener(element, type) {
        if (!this.register.has(element)) {
            console.warn(`Element not figure in register`);
            return void 0;
        }
        if (!type) {
            this.removeNative(element);
            this.register.delete(element);
        }
        else {
            this.removeListenerByType(element, type);
        }
    }
    join(eventName, callback) {
        // TODO: restore after stop using old SAMPLE site
        // if (!this.isEventExists(eventName)) {
        //     console.warn(`Event '${this.getEventNameFromEvent(eventName)}' is not on events list [join]`);
        //     return false;
        // }
        if (callback === undefined) {
            console.warn(`Callback is undefined for '${eventName}'`);
            return false;
        }
        if (!this.members.has(eventName)) {
            this.members.set(eventName, []);
        }
        this.members.get(eventName).push(callback);
        this.updateNativeConditional(eventName);
        return true;
    }
    once(eventName, callback) {
        // TODO: restore after stop using old SAMPLE site
        // if (!this.isEventExists(eventName)) {
        //     console.warn(`Event '${this.getEventNameFromEvent(eventName)}' is not on events list [once]`);
        //     return false;
        // }
        if (!this.join(eventName, callback)) {
            return false;
        }
        if (!this.disposable.has(eventName)) {
            this.disposable.set(eventName, []);
        }
        this.disposable.get(eventName).push(callback);
        return true;
    }
    leave(eventName, callback) {
        if (this.__destroyed) {
            return void 0;
        }
        if (!this.members.has(eventName)) {
            console.warn(`Membership for '${eventName}' not found`);
            return void 0;
        }
        let index = this.members.get(eventName).indexOf(callback);
        if (index === -1) {
            console.warn(`Callback for '${eventName}' not found`);
            return void 0;
        }
        this.members.get(eventName).splice(index, 1);
        if (this.members.get(eventName).length === 0) {
            this.members.delete(eventName);
        }
        this.updateNativeConditional(eventName);
    }
    hasSubscribers(eventName) {
        return !!(this.members.has(eventName) && this.members.get(eventName).length);
    }
    getEventName(eventName, deep = 1) {
        let firstChild = Object.keys(eventName)[0];
        if (typeof eventName[firstChild] === 'object') {
            return this.getEventName(eventName[firstChild], deep++);
        }
        let nameParts = eventName[firstChild].match(/[A-Z][a-z]+/g);
        while (deep--) {
            nameParts.pop();
        }
        return nameParts.join('');
    }
    getEventNameFromEvent(event) {
        if (typeof event === 'string') {
            return event;
        }
        if (event instanceof Event && event.type) {
            return `${event.constructor.name}.${event.type}`;
        }
        return this.getEventName(event);
    }
    clearDisposable(eventName) {
        if (!this.disposable.has(eventName)) {
            return void 0;
        }
        this.disposable.get(eventName).forEach((callback) => {
            this.leave(eventName, callback);
        });
        this.disposable.delete(eventName);
    }
    isEventExistsDeep(eventName, rootList) {
        if (rootList === eventName) {
            if (typeof eventName === 'string') {
                this.eventsListStringCache.push(eventName);
            }
            else {
                this.eventsListRefCache.set(eventName, undefined);
            }
            return true;
        }
        return typeof rootList === 'string' ? false : !!Object.keys(rootList).find((childKey) => this.isEventExistsDeep(eventName, rootList[childKey]));
    }
    isEventExists(eventName) {
        if (!this.eventsList) {
            return false;
        }
        if (this.eventsListRefCache.has(eventName) || this.eventsListStringCache.indexOf(eventName) !== -1) {
            return true;
        }
        return this.isEventExistsDeep(eventName, this.eventsList);
    }
    fire(eventName, data, callback) {
        // TODO: restore after stop using old SAMPLE site
        // if (!this.isEventExists(eventName)) {
        //     console.warn(`Event '${this.getEventNameFromEvent(eventName)}' is not on events list [fire]`);
        //     return void 0;
        // }
        this.logFireEvent(eventName, data);
        let params = { eventName, data };
        let response = this.respond(params);
        if (callback) {
            response.then(callback);
        }
        this.clearDisposable(eventName);
    }
    respond(params, event) {
        if (!this.members.has(params.eventName)) {
            return Promise.resolve(null);
        }
        if (event && UtilitiesObject.getPropertyValue('data.stopPropagation', params)) {
            event.stopPropagation();
        }
        const promises = this.members.get(params.eventName)
            .map((callback) => services_event_bus_awaiter(this, void 0, void 0, function* () {
            let data = params.processor instanceof Function ? params.processor(event, params.data) : params.data;
            return callback(data, event);
        }));
        return Promise.all(promises);
    }
    logFireEvent(eventName, data) {
        if (!this.logger.isLoggerEnabled()) {
            return void 0;
        }
        let fireMessage = `EventBus.fire '${this.getEventNameFromEvent(eventName)}'`;
        let { errorText, warningText } = this.getParamIssuesMessages(data);
        if (errorText) {
            this.logger.warn(`${fireMessage}${errorText}.`, EVENT_BUS_LOGGER_COLORS.ERROR);
        }
        else if (warningText) {
            this.logger.warn(`${fireMessage}${warningText}.`, EVENT_BUS_LOGGER_COLORS.WARN);
        }
        else {
            this.logger.log(`${fireMessage}.`, EVENT_BUS_LOGGER_COLORS.LOG);
        }
    }
    addConditionalFireWarningConstructors(conditions = [], omit = []) {
        this.fireWarningDisallowedConstructors.push(...conditions);
        this.fireWarningAllowedConstructors.push(...omit);
        conditions.forEach((instance) => {
            let index = this.fireWarningAllowedConstructors.indexOf(instance);
            if (index !== -1) {
                this.fireWarningAllowedConstructors.splice(index, 1);
            }
        });
    }
    getJointIssuesMessage(issues) {
        return issues.length !== 0 ?
            ` => has ${issues.map((issue) => issue.message).join(', ')}` :
            '';
    }
    getFilteredWarningMessage(list) {
        let warnings = list.filter((item) => {
            return this.fireWarningAllowedConstructors.indexOf(item.constructor) === -1;
        });
        return this.getJointIssuesMessage(warnings);
    }
    addIssueToList(list, constructor, message) {
        if (!list.some((item) => item.message === message)) {
            list.push({ message, constructor });
        }
    }
    checkForFlatConstructorIssues(instance, warningConstructors, errorMessages, prefix) {
        let message = `${prefix} ${instance.constructor.name}`;
        if (this.fireWarningDisallowedConstructors.indexOf(instance.constructor) !== -1) {
            this.addIssueToList(errorMessages, instance.constructor, message);
        }
        else if (this.fireWarningAllowedConstructors.indexOf(Object) === -1 && instance instanceof Object) {
            try {
                JSON.stringify(instance);
            }
            catch (e) {
                this.addIssueToList(warningConstructors, instance.constructor, message);
            }
        }
        else {
            this.addIssueToList(warningConstructors, instance.constructor, message);
        }
    }
    getParamIssuesMessages(data) {
        let errors = [];
        let warnings = [];
        if (data && typeof data === 'object') {
            Object.keys(data).forEach((key) => {
                if (UtilitiesValue.isEmpty(data[key])) {
                    return void 0;
                }
                if (Array.isArray(data[key])) {
                    data[key].forEach((item) => {
                        this.checkForFlatConstructorIssues(item, warnings, errors, `${key} array with`);
                    });
                }
                else {
                    this.checkForFlatConstructorIssues(data[key], warnings, errors, `${key} with`);
                }
            });
        }
        return {
            errorText: this.getJointIssuesMessage(errors),
            warningText: this.getFilteredWarningMessage(warnings)
        };
    }
    destroy() {
        this.members.clear();
        this.__destroyed = true;
        this.fireWarningAllowedConstructors = EVENT_BUS_ALLOWED_CONSTRUCTORS.slice();
        this.fireWarningDisallowedConstructors = [];
    }
};
services_event_bus_ServicesEventBus = services_event_bus_decorate([
    Injectable(Lifetime.Scoped),
    services_event_bus_metadata("design:paramtypes", [ServicesLogger])
], services_event_bus_ServicesEventBus);

//# sourceMappingURL=services.event.bus.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-services/index.js





//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/eventsList.js
const EVENTS_FLOW = (state) => {
    return {
        HEADER: {
            MARK: `${state}HeaderMark`,
        },
        ROW: {
            FREEZE: `${state}RowFreeze`,
            MARK: `${state}RowMark`,
            ADD: `${state}RowAdd`,
            REMOVE: `${state}RowRemove`,
            RESTORE: `${state}RowRestore`
        },
        COLUMN: {
            WIDTH: `${state}ColumnWidth`
        },
        STATE: {
            LOAD: `${state}StateLoad`,
            EDIT: {
                ROLLBACK: `${state}StateEditRollback`
            }
        },
        DATA: {
            LOAD: `${state}DataLoad`,
            RELOAD: `${state}DataReload`,
            CHANGE: `${state}DataChange`,
            GROUP: `${state}DataGroup`,
            SORT: `${state}DataSort`,
            SORT_SET: `${state}DataSortSet`,
            EDIT: `${state}DataEdit`,
            FORMAT: `${state}DataFormat`,
            SEARCH: `${state}DataSearch`,
            SAVE: `${state}DataSave`,
            AGGREGATION: `${state}DataAggregation`
        },
        VIEW: {
            CELL: {
                ERROR: `${state}ViewCellError`,
                FOCUS: `${state}ViewCellFocus`
            },
            LOAD: `${state}ViewLoad`,
            RELOAD: `${state}ViewReload`,
            REFRESH: `${state}ViewRefresh`,
            PAGE: {
                CHANGE: `${state}ViewPageChange`
            }
        }
    };
};
const eventsList_EVENTS = {
    MODULES: {
        BUILD_IN: {
            READY: 'ModulesReady'
        }
    },
    DESTROY: '__destroy__',
    REFRESH_VIEW: 'RefreshView',
    CLEAR_CACHE: {
        ALL: 'ClearCacheAll',
        SORT: 'ClearCacheSort'
    },
    SAVE_CHANGES: 'SaveChanges',
    MESSAGE: 'message',
    FULLSCREEN: 'Fullscreen',
    SCROLL: {
        SUMMARY: 'ScrollSummary',
        Y: 'ScrollY'
    },
    MOUSEOVER: {
        SUMMARY: 'MouseOverSummary'
    },
    MOUSEENTER: {
        CELL: 'MouseEnterCell'
    },
    MOUSELEAVE: {
        CELL: 'MouseLeaveCell',
        SUMMARY: 'MouseLeaveSummary'
    },
    CLICK: {
        SUMMARY: 'ClickSummary',
        GROUP: 'ClickGroup',
        SORT: 'ClickSort',
        ROW: 'ClickRow',
        CELL: 'ClickCell'
    },
    INPUT: {
        CELL: 'InputCell'
    },
    DRAG_COLUMN: {
        START: 'DragColumnStart',
        END: 'DragColumnEnd'
    },
    RESIZE: {
        START: 'ResizeStart',
        STOP: 'ResizeStop'
    },
    GROUP: {
        RESIZE: {
            START: 'GroupResizeStart',
            STOP: 'GroupResizeStop'
        },
    },
    FOCUS: {
        CELL: 'FocusCell',
        LOST: 'FocusLost',
        ENTER: 'FocusEnter',
        LEAVE: 'FocusLeave'
    },
    ACTION: EVENTS_FLOW('Action'),
    COMMIT: EVENTS_FLOW('Commit'),
    REJECT: EVENTS_FLOW('Reject'),
    DONE: EVENTS_FLOW('Done'),
    CHANGE: {
        ATTRIBUTES: 'ChangeAttributes',
        DATA: {
            CELL: {
                VALUE: 'ChangeDataCellValue',
                RESET: 'ChangeDataCellReset',
                MASS: {
                    VALUE: 'ChangeDataCellMassValue',
                    RESET: 'ChangeDataCellResetValue'
                }
            },
            SORT: 'ChangeDataSort',
            SEARCH: 'ChangeDataSearch',
            GROUP: {
                ADD: 'ChangeDataGroupAdd',
                TOGGLE: 'ChangeDataGroupToggle',
                VISIBLE: 'ChangeDataGroupVisible',
                WIDTH: 'ChangeDataGroupWidth',
                WIDTHS: 'ChangeDataGroupWidths',
                RESIZE: 'ChangeDataGroupResize'
            },
            FORMAT: {
                SET: 'ChangeDataFormatSet',
                ADD: 'ChangeDataFormatAdd',
                UPDATE: 'ChangeDataFormatUpdate'
            },
            FILTER: 'ChangeDataFilter',
            COLUMNS: {
                COLLECTION: 'ChangeDataColumnsCollection',
                ORDER: 'ChangeDataColumnsOrder'
            },
            EDIT: {
                ENABLED: 'ChangeDataEditEnabled',
                SAVE: 'ChangeDataEditSave',
                SET_VALUES: 'ChangeDataEditSetValues',
                START: 'ChangeDataEditStart',
                SUCCESS: 'ChangeDataEditSuccess',
                MERGE: 'ChangeDataEditMerge',
                ADD: 'ChangeDataEditAdd',
                ERROR: 'ChangeDataEditErrors'
            },
            SUMMARY: 'ChangeDataSummary',
            ROWS: 'ChangeDataRows',
            DRAG_AND_DROP: {
                FILTER: {
                    ADD: 'ChangeDataDragAndDropFilterAdd',
                    RESET: 'ChangeDataDragAndDropFilterReset'
                }
            }
        },
        GRID: {
            HEADER: {
                TITLE: 'ChangeGridHeaderTitle',
                SEARCH: 'ChangeGridHeaderSearch',
                GROUP: {
                    CHANGE: 'ChangeGridHeaderGroupChange',
                    SORT: 'ChangeGridHeaderGroupSort'
                }
            },
            FOOTER: 'ChangeGridFooter',
            CHANGE_PAGE: 'ChangeGridChangePage',
            PAGINATION: 'ChangeGridPagination',
            HEIGHT: 'ChangeGridHeight',
            WIDTH: 'ChangeGridWidth'
        },
        CONTAINER: {
            HEIGHT: 'ChangeContainerHeight',
            WIDTH: 'ChangeContainerWidth'
        },
        LAYOUT: {
            HEIGHT: 'ChangeLayoutHeight',
            HEADER: {
                CELL: {
                    ORDER: 'ChangeLayoutHeaderCellOrder'
                }
            }
        },
        SCROLL: {
            VERTICAL: 'ChangeScrollVertical',
            HORIZONTAL: 'ChangeScrollHorizontal'
        },
        VIEW: {
            ROW: {
                ANIMATION: 'ChangeViewRowAnimation',
                HEIGHT: 'ChangeViewRowHeight'
            },
            CELL: {
                CREATE: 'ChangeViewCellCreate',
                DESTROY: 'ChangeViewCellDestroy',
                BLUR: 'ChangeViewCellBlur',
                INPUT: 'ChangeViewCellInput'
            },
            ROWS: {
                VISIBLE: 'ChangeViewRowsVisible'
            }
        },
        COLUMN: {
            WIDTH: 'ChangeColumnWidth',
            COLLAPSED: 'ChangeColumnCollapsed',
            COMPOUND_APPLY: 'ChangeColumnCompoundApply',
            SEARCH_APPLY: 'ChangeDataColumnMenuSearchApply',
            VISIBILITY_APPLY: 'ChangeColumnVisibilityApply',
            SEARCH_LIST: 'ChangeColumnSearchList'
        },
        VIEWSETTING: {
            DROP_IN_GROUPS: 'ChangeViewsettingDropInGroups',
            DROP_IN_COLUMNS: 'ChangeViewsettingDropInColumns'
        },
        CONTENT: {
            WIDTH: 'ChangeContentWidth'
        },
        STATE: {
            LOAD: 'ChangeStateLoad',
            RELOAD: 'ChangeStateReload'
        },
        THEME: {
            UPDATE: 'ChangeTheme',
            STYLING: 'ChangeThemeStyling',
            LAYOUT: 'ChangeThemeLayout'
        },
        PAGE: 'ChangePage'
    },
    AFTER: {
        ROW: {
            FREEZE: 'AfterRowFreeze',
            MARK: 'AfterRowMark',
            ADD: ' AfterRowAdd',
            REMOVE: ' AfterRowRemoved'
        },
        COLUMNS: {
            WIDTH: 'AfterColumnsWidth'
        },
        HEADER: {
            MARK: 'AfterHeaderMark'
        },
        DATA: {
            CACHE: {
                CLEAR: 'AfterDataCacheClear'
            },
            COLUMNS: {
                COLLECTION: 'AfterDataColumnsCollection',
                RESIZE: 'AfterDataColumnsResize',
                COLLAPSED: 'AfterDataColumnsCollapsed'
            },
            GROUP: 'AfterDataGroup',
            FORMAT: {
                SET: 'AfterDataFormatSet'
            },
            FILTER: 'AfterDataFilter',
            SAVE: 'AfterDataSave',
            EDIT: {
                ENABLED: 'AfterDataEditEnabled',
                SET_VALUES: 'AfterDataEditSetValues',
                SAVE: 'AfterDataEditSave'
            },
            SUMMARY: {
                GROUP: 'AfterDataSummaryGroup',
                TOTAL: 'AfterDataSummaryTotal'
            }
        },
        LAYOUT: {
            COLUMNS: {
                ORDER: 'AfterLayoutColumnsOrder'
            }
        },
        VIEW: {
            RELOAD: 'AfterViewReload'
        },
        SCROLL: 'AfterScroll'
    },
    API: {
        COLUMN: {
            GROUP: {
                ADD: 'ApiColumnGroupAdd',
                REMOVE: 'ApiColumnGroupRemove',
                RESET: 'ApiColumnGroupReset',
                SET: 'ApiColumnGroupSet'
            },
            ORDER: {
                SET: 'ApiColumnOrderSet'
            },
            SORT: {
                ADD: 'ApiColumnSortAdd',
                REMOVE: 'ApiColumnSortRemove',
                RESET: 'ApiColumnSortReset',
                SET: 'ApiColumnSortSet'
            },
            SHOW: 'ApiColumnShow',
            HIDE: 'ApiColumnHide',
            FREEZE: 'ApiColumnFreeze',
            UNFREEZE: 'ApiColumnUnfreeze'
        },
        DATA: {
            FILTER: {
                RESET: 'ApiDataFilterReset',
                SET: 'ApiDataFilterSet',
            },
            PAGE: {
                NEXT: 'ApiDataPageNext',
                PREV: 'ApiDataPagePrev',
                SET: 'ApiDataPageSet',
                SET_ROWS_PER_PAGE: 'ApiDataPageSetRowsPerPage'
            },
            SEARCH: {
                RESET: 'ApiDataSearchReset',
                SET: 'ApiDataSearchSet'
            }
        },
        LOCALIZATION: {
            LANGUAGE: {
                SET: 'ApiLocalizationLanguageSet'
            }
        },
        VIEW: {
            HEADER: {
                BAR: {
                    FILTER: {
                        SET_VISIBLE: 'ApiViewHeaderBarFilterSetVisible'
                    },
                    SORT: {
                        SET_VISIBLE: 'ApiViewHeaderBarSortSetVisible'
                    },
                    GROUP: {
                        SET_VISIBLE: 'ApiViewHeaderBarGroupSetVisible'
                    }
                },
                SEARCH: {
                    SET_VISIBLE: 'ApiViewHeaderSearchSetVisible'
                },
                SETTINGS: {
                    SET_VISIBLE: 'ApiViewHeaderSettingsSetVisible'
                },
                SET_VISIBLE: 'ApiHeaderSetVisible'
            },
            FOOTER: {
                SET_VISIBLE: 'ApiFooterSetVisible'
            },
            THEME: {
                STYLING: {
                    SET: 'ApiViewThemeStylingChange'
                },
                LAYOUT: {
                    SET: 'ApiViewThemeLayoutSet'
                }
            },
            EDIT: {
                SET_ENABLE: 'ApiViewEditSetEnable'
            },
            FULLSCREEN: {
                TOGGLE: 'ApiViewFullscreenToggle'
            },
            RELOAD: 'ApiViewReload'
        },
        EVENT: {
            UPDATE: 'ApiEvent'
        }
    }
};
//# sourceMappingURL=eventsList.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/core/core.custom.js
var core_custom_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_custom_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let core_custom_CoreCustom = class CoreCustom {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this._customCellCreatedBind = this._customCellCreated.bind(this);
        this._customCellDestroyedBind = this._customCellDestroyed.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.CELL.CREATE, this._customCellCreatedBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.CELL.DESTROY, this._customCellDestroyedBind);
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.CHANGE.VIEW.CELL.CREATE, this._customCellCreatedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.VIEW.CELL.DESTROY, this._customCellDestroyedBind);
    }
    _customCellCreated(params) {
        this._hostXRef.dispatchEvent(new CustomEvent(eventsList_EVENTS.CHANGE.VIEW.CELL.CREATE, { detail: params, bubbles: true, composed: true }));
    }
    _customCellDestroyed(params) {
        this._hostXRef.dispatchEvent(new CustomEvent(eventsList_EVENTS.CHANGE.VIEW.CELL.DESTROY, { detail: params, bubbles: true, composed: true }));
    }
};
core_custom_CoreCustom = core_custom_decorate([
    Injectable(Lifetime.Scoped),
    core_custom_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], core_custom_CoreCustom);

//# sourceMappingURL=core.custom.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/core.js
var core_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let PluginCore = class PluginCore {
    constructor(eventBus, coreCustom) {
        this.eventBus = eventBus;
        this.coreCustom = coreCustom;
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this._additionalDropXRefs = additionalDropXRefs;
        this.coreCustom.connect(this._hostXRef, this._additionalDropXRefs);
    }
    disconnect() {
        this.coreCustom.disconnect();
    }
};
PluginCore = core_decorate([
    Injectable(Lifetime.Scoped),
    core_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, core_custom_CoreCustom])
], PluginCore);

//# sourceMappingURL=core.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/state.js
var state_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let state_State = class State {
    initialize(stateModule) {
        this._stateModule = stateModule;
    }
    set(newState) {
        this._stateModule.set(newState);
    }
    dispatch(action) {
        this._stateModule.getStore().dispatch(action);
    }
    get() {
        return this._stateModule.get();
    }
    update(newState) {
        this._stateModule.update(newState);
    }
    get header() {
        return this._stateModule.get().header;
    }
    get footer() {
        return this._stateModule.get().footer;
    }
    get debug() {
        return this._stateModule.get().debug;
    }
    get translation() {
        return this._stateModule.get().translation;
    }
    get filter() {
        return this._stateModule.get().filter;
    }
    get sort() {
        return this._stateModule.get().sort;
    }
    get groupVisibility() {
        return this._stateModule.get().groupVisibility;
    }
    get group() {
        return this._stateModule.get().group;
    }
    get edit() {
        return this._stateModule.get().edit;
    }
    get format() {
        return this._stateModule.get().format;
    }
    get columns() {
        return this._stateModule.get().columns;
    }
    get mark() {
        return this._stateModule.get().mark;
    }
    get freeze() {
        return this._stateModule.get().freeze;
    }
    get page() {
        return this._stateModule.get().page;
    }
    get resize() {
        return this._stateModule.get().resize;
    }
    get summary() {
        return this._stateModule.get().summary;
    }
    get infinite() {
        return this._stateModule.get().infinite;
    }
    get changed() {
        return this._stateModule.get().edit;
    }
    get fullscreen() {
        return this._stateModule.get().fullscreen;
    }
    get theme() {
        return this._stateModule.get().theme;
    }
    get groupResize() {
        return this._stateModule.get().groupResize;
    }
    get scroll() {
        return this._stateModule.get().scroll;
    }
};
state_State = state_decorate([
    Injectable(Lifetime.Scoped)
], state_State);

//# sourceMappingURL=state.js.map
// CONCATENATED MODULE: ./dist-es/modules/constants.js
const COMPONENT_TITLE = 'I am GRID! 3.0';
const constants_ASC = 'asc', constants_DESC = 'desc';
const DRAG_AND_DROP = {
    IDENTIFIER: 'id',
    COLUMN: 'columnId'
};
const ICON = {
    SETTINGS: 'vc-icon--viewsettings',
};
const SCHEMA_ERROR = {
    MISSING_METADATA: 'No metadata provided',
    OUTPUT: 'Found errors',
    GRID_WONT_LOAD: 'Grid will not be loaded',
    SCHEMA_ERRORS: 'There were schema errors',
    PROVIDER_ERRORS: 'There were data provider errors',
    INCORRECT_COLUMN: 'Incorrect column definition detected',
    INCORRECT_GROUP_COLUMNS: 'Incorrect group column definition detected',
    INCORRECT_COLLAPSABLE: 'Incorrect collapsable definition detected',
    INCORRECT_GROUP: 'Incorrect group definition detected',
    INCORRECT_SORT: 'Incorrect sort definition detected',
    INCORRECT_SUMMARY: 'Incorrect summary definition detected',
    COLUMN_DUPLICATE: 'Duplicated column',
    GROUP_MISSING: 'Missing column group',
    GROUP_INCORRECT: 'Incorrect column for grouping',
    GROUP_DUPLICATE: 'Duplicated column for grouping',
    SORT_MISSING: 'Missing column for group sort',
    SORT_INCORRECT: 'Incorrect column for sorting',
    SORT_DUPLICATE: 'Duplicated column for sorting',
    SUMMARY_MISSING: 'Missing column for summary',
    SUMMARY_INCORRECT: 'Incorrect column for summary',
    SUMMARY_DUPLICATE: 'Duplicated column for summary',
    SUMMARY_TYPE: 'Incorrect aggregation for summary'
};
const modules_constants_CLASS = {
    ABSTRACT: 'abstract',
    GRID_GROUP_SUMMARY: 'grid-group-summary',
    ROW: 'row',
    CELL: 'cell',
    CELL_PADDING: 'cell-padding',
    GROUP: 'group',
    ROW_GROUP: 'row-group',
    ROLLED: 'rolled',
    HOVER: 'hover',
    LOADING: 'loading',
    HIDDEN: 'hidden',
    PRIORITY: 'priority',
    SORT_GROUPED: 'sort-grouped',
    SORT_UNGROUPED: 'sort-ungrouped',
    GROUP_INDENT: 'group-indent',
    SUMMARY_GROUP: 'summary-group',
    SUMMARY_ROW: 'summary-row',
    SUMMARY_AGGREGATION_GROUP: {
        TITLE: 'summary-aggregation-title',
        ITEMS: 'summary-aggregation-items',
        WRAPPER: 'summary-aggregation-wrapper'
    },
    SUMMARY_AGGREGATION: {
        TOOLTIP: {
            ELEMENT: 'summary-tooltip',
            SELECTED: 'summary-tooltip-selected'
        },
        ELEMENT: 'summary-aggregation',
        GROUP: 'summary-aggregation-group',
        ROOT: 'summary-aggregation-root',
        ITEM: 'summary-aggregation-item',
        LABEL: 'summary-aggregation-label',
        VALUE: 'summary-aggregation-value',
    },
    ANIMATED_CAROUSEL: {
        SCENE: 'scene',
        CONTENT: 'carousel',
        ITEM: 'carousel__cell'
    },
    REMOVED_ROW: {
        ELEMENT: 'removed-row',
        RESTORE: 'removed-row-restore',
        ICON: 'removed-row-icon'
    },
    CONTEXT_MENU: {
        CELL: 'cell_context-menu',
        CELL_EMPTY: 'cell_context-menu-empty',
        WRAPPER: 'context-menu-wrapper',
        LIST: 'context-menu-list',
        ITEM: 'context-menu-item',
        ITEM_TEXT: 'text-item',
        ITEM_SEARCH: 'nested-item'
    },
    EMPTY_ROW: 'empty-row',
    ROW_LEVEL: 'row-level',
    ROW_FULL_WIDTH: 'row-full-width',
    MORE: 'more',
    ENABLED: 'enabled',
    HEADER_CELL_ABSTRACT_MARK: 'header-cell-abstract-mark',
    HEADER_CELL_ABSTRACT_GROUP: 'header-cell-abstract-group',
    HEADER_CELL_GROUP: 'header-cell-group',
    HEADER_CELL_ORDER_LEFT: 'header-cell-order-left',
    HEADER_CELL_ORDER_RIGHT: 'header-cell-order-right',
    HEADER_CELL_MERGE_COLLAPSE: 'header-cell-merge-collapse',
    HEADER_CELL_MERGE_COLLAPSE_COLLAPSED: 'header-cell-merge-collapse-collapsed',
    EMPTY: 'empty',
    DRAG_IN_PROGRESS: 'drag-in-progress',
    DISABLED_MOUSE_EVENTS: 'disabled-mouse-events',
    DRAGGABLE_WRAPPER: 'draggable-wrapper',
    DRAGGED: 'dragged',
    DRAGGED_AFTER: 'dragged-after',
    DRAGGED_BEFORE: 'dragged-before',
    DROPPABLE: 'droppable',
    SIZED_UP: 'sized-up',
    CELL__SORTER: 'cell__sorter',
    TEXT: 'cell--text',
    BACKGROUND: 'cell--background',
    TRIANGLE: 'cell--triangle',
    BAR: 'cell--bar',
    POP_UP: 'pop-up',
    POP_UP_CONTENT: 'pop-up-content',
    BUTTON_EDIT: 'button-edit',
    BUTTON_CLOSE: 'button-close',
    LIST_ITEM: 'list-item',
    LIST_ITEM_LABEL: 'list-item-label',
    ROW_MARKED: 'row-marked',
    ROW_ADDED: 'row-added',
    CIRCLE_SVG: 'svg__circle',
    HARVEY_BALL: 'svg__harvey',
    CELL_ABSTRACT_GROUP: 'cell-abstract-group',
    CELL_HEADER_TEXT: 'cell-header-text',
    CELL_EMPTY: 'cell-empty',
    CELL_EDIT: 'cell-edit',
    CELL_CHANGED: 'cell-changed',
    CELL_BUTTON: 'cell-button',
    CELL_ACTION: 'cell-action',
    CELL_PROGRESS_BAR: 'cell-progress-bar',
    CELL_CHECKBOX: {
        ELEMENT: 'cell-checkbox',
        ICON: 'icon-check',
        OVERLAY: 'overlay',
    },
    CELL_CURRENCY: {
        ELEMENT: 'cell-currency',
        SELECT: 'cell-currency-select'
    },
    CELL_CUSTOM: 'cell-custom',
    CELL_DATE: 'cell-date',
    CELL_DATE_TEXT: 'cell-date-text',
    CELL_GRAPHICS: 'cell-graphics',
    CELL_GROUP: 'cell-group',
    CELL_ICON: 'cell-icon',
    CELL_LINK: 'cell-link',
    CELL_MULTISELECT: {
        ELEMENT: 'cell-multiselect',
        ITEM: 'multiselect-item',
        ITEM_TEXT: 'multiselect-item-text',
        ITEM_MORE: 'multiselect-item-more'
    },
    CELL_NUMBER: 'cell-number',
    CELL_TREND: 'cell-trend',
    CELL_HARVEY_BALL: 'cell-harvey-ball',
    CELL_SELECT: 'cell-select',
    CELL_TEXT: 'cell-text',
    CELL_RESIZE: 'cell-resize',
    CELL_LABEL: 'cell-label',
    CELL_LEFT_HALF: 'cell-left-half',
    CELL_RIGHT_HALF: 'cell-right-half',
    CELL_DISABLED: 'cell-disabled',
    CELL_FAKE_ELEMENT: 'cell-fake-element',
    CELL_COLLAPSED: 'cell-collapsed',
    CELL_CLEAR: 'cell-clear',
    CELL_CLEAR_DISABLED: 'cell-clear-disabled',
    CELL_FOCUS: 'cell-focus',
    ERROR_WRAPPER: 'error-wrapper',
    LOADER: {
        ELEMENTS: {
            HOST: 'loader',
            WRAPPER: 'loader__wrapper',
            MESSENGER: 'loader__messenger'
        },
        STATE: {
            ENABLED: 'loader--enabled'
        }
    },
    NORMAL: 'normal',
    INFINITE: 'infinite',
    CORE: 'core',
    VC_CORE_HOST: 'host',
    CORE_WRAPPER: 'core-wrapper',
    CORE_WRAPPER_EDITABLE: 'core-wrapper-editable',
    GRID_HEADER: 'vc-header',
    GRID_HEADER_LINE: 'header__line',
    GRID_FOOTER: 'TheFooter',
    GRID_FOOTER_STATUS: 'TheFooter__status',
    GRID_INFO_TOOLBAR: 'TheHeader__toolbar',
    GRID_HEADER_FILTER: {
        REMOVE: 'filter-delete',
        BETWEEN_SEPARATOR: 'single_between_separator',
        CHILD_AREA: 'filter-child',
        GROUP: 'grid-header-filter-group',
        GROUP_LEFT_BRACE: 'group-left-brace',
        GROUP_NEGATION: 'group-negation',
        GROUP_OPERATOR: 'group-operator',
        GROUP_RIGHT_BRACE: 'group-right-brace',
        GROUP_LABEL: 'group-label',
        FILTER_LABEL: 'filter-label',
        MAIN_AREA: 'filter-main',
        SINGLE: 'grid-header-filter-single',
        SINGLE_INPUT: 'vc-input-wrap',
        SINGLE_TEXT: 'filter-text',
        WRAPPER: 'filter-wrapper'
    },
    BUTTON: {
        WRAPPER: 'vc-toggle',
        LABEL: 'tgl-btn',
        IOS_ELEMENT: 'tgl tgl-ios',
        SKEWED_ELEMENT: 'tgl tgl-operator',
        FLIP_ELEMENT: 'tgl tgl-flip'
    },
    LAYER: 'layer',
    CONTENT: 'content',
    FREEZE_ROW: 'freeze-row',
    FREEZE_COLUMN: 'freeze-column',
    FREEZE_SCROLL_X: 'freeze-scroll-x',
    FREEZE_SCROLL_Y: 'freeze-scroll-y',
    FREEZE_ROW_FREEZE_COLUMN: 'freeze-row-freeze-column',
    SUMMARY: 'summary',
    SUMMARY_SCROLL_X: 'summary-scroll-x',
    SUMMARY_SCROLL_Y: 'summary-scroll-y',
    SUMMARY_FREEZE_COLUMN: 'summary-freeze-column',
    SCROLL_Y: 'scroll-y',
    SCROLL_X: 'scroll-x',
    SCROLL_V: 'scroll-v',
    SCROLL_V_BAR: 'scroll-v-bar',
    SCROLL_V_MASK: 'scroll-v-mask',
    HEADER: 'header',
    HEADER_FREEZE: 'header-freeze',
    HEADER_SCROLL_Y: 'header-scroll-y',
    HEADER_SCROLL_X: 'header-scroll-x',
    HEADER_WRAPPER: 'header-wrapper',
    SCROLL_MEASURE_WRAPPER: 'scroll-measure-wrapper',
    SCROLL_MEASURE: 'scroll-measure',
    CELL_MEASURE: 'cell-measure',
    FOCUS: 'focus',
    FOCUS_BORDER: 'focus-border',
    FOCUS_BORDER_INVALID: 'focus-border-invalid',
    FOCUS_ENTERED: 'entered',
    VERTICAL_LINE: 'vertical-line',
    VISIBLE: 'visible',
    ERROR: 'error',
    PROGRESS_BAR: {
        WRAPPER: 'progress-bar-wrapper',
        ELEMENT: 'progress-bar-element',
        BOUNDING: 'progress-bar-bounding',
        RESIZER: 'progress-bar-resizer',
        RESIZER_ENABLED: 'progress-bar-resizer-enabled'
    },
    THEME: {
        LAYOUT: {
            COMPACT: 'theme-layout--compact',
            DEFAULT: 'theme-layout--default'
        }
    },
    TOOLTIP: 'tooltip',
    FULLSCREEN: 'fullscreen',
    GROUP_RESIZE: 'group-resize',
    SHADOW_ROOT_DIMENSION: '--shadowRootDimension',
    HEADER_MANAGER: {
        CONTENT: 'header-manager-content',
        VISIBLE_LIST: 'header-manager-visible-list',
        HIDDEN_LIST: 'header-manager-hidden-list'
    },
    SPRITE: {
        BASE: 'block',
        BASE_ABSTRACT: 'block-abstract',
        MOD: {
            MATRIX: 'block--matrix',
            TREND: 'block--trend',
            TREND_UP: 'block--trend-up',
            TREND_DOWN: 'block--trend-down',
            TREND_RIGHT: 'block--trend-right',
            CONTENT: 'block--content'
        }
    }
};
const DATE_ZEROS = '0000-00-00';
const STATIC_CLASS = {
    ROW_MARK: 'static-class_row-mark',
    ROW_GROUP: 'static-class_row-group'
};
const modules_constants_SEPARATOR = {
    JOINED_ARRAY: ', ',
    AGGREGATION_RANGE: '...',
    AGGREGATION_EMPTY: '-',
    SEARCH_SEPARATOR: ' ',
    STRINGIFIED_SEARCH_SEPARATOR: '|'
};
const constants_SEARCH_COLUMN_PREFIX = 'column=';
const SEARCH_COLUMN_REGEXP = new RegExp(`^${constants_SEARCH_COLUMN_PREFIX}["'](.+?)["'] (.+?)$`, 'i');
const SEARCH_EXCLUDED_KEYS = {
    CONDITIONS: 'conditions',
    CONFIG: 'config',
    FROM: 'from',
    ICON: 'icon',
    LABEL: 'label',
    MODE: 'mode',
    OPTIONS: 'options',
    TITLE: 'title',
    TO: 'to',
    TYPE: 'type'
};
const STATIC_TYPE = {
    RECT: 'rect',
    ROW_MARK: 'rowMark',
    ROW_GROUP: 'rowGroup'
};
const modules_constants_TYPE = {
    ACTION: 'action',
    BUTTON: 'button',
    CHECKBOX: 'checkbox',
    CUSTOM: 'custom',
    CIRCLE: 'circle',
    CURRENCY: 'currency',
    DATE: 'date',
    GRAPHIC: 'graphic',
    GROUP: 'group',
    HARVEY_BALL: 'harveyBall',
    LINK: 'link',
    MULTISELECT: 'multiselect',
    NUMBER: 'number',
    PROGRESS_BAR: 'progressbar',
    SELECT: 'select',
    TEXT: 'text',
    TREND: 'trend',
    VALUE: 'value'
};
const AGGREGATION_TYPE = {
    AVG: 'avg',
    MIN: 'min',
    MAX: 'max',
    RANGE: 'range',
    SUM: 'sum',
    COUNT: 'count',
    MEDIAN: 'median',
    MODE: 'mode'
};
const SORT_TYPES_WITHOUT_FORMAT = [
    modules_constants_TYPE.DATE
];
const ANIMATION_TYPE = {
    AUTO: 'auto',
    NONE: 'none',
    ONCE: 'once'
};
const AGGREGATION_TYPES_WITHOUT_FORMAT = [
    AGGREGATION_TYPE.COUNT
];
const SUMMARY_RESTRICTION = {
    [modules_constants_TYPE.BUTTON]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.PROGRESS_BAR]: [
        AGGREGATION_TYPE.AVG,
        AGGREGATION_TYPE.SUM,
        AGGREGATION_TYPE.MIN,
        AGGREGATION_TYPE.MAX,
        AGGREGATION_TYPE.RANGE,
        AGGREGATION_TYPE.COUNT,
        AGGREGATION_TYPE.MEDIAN,
        AGGREGATION_TYPE.MODE
    ],
    [modules_constants_TYPE.CURRENCY]: [
        AGGREGATION_TYPE.AVG,
        AGGREGATION_TYPE.SUM,
        AGGREGATION_TYPE.MIN,
        AGGREGATION_TYPE.MAX,
        AGGREGATION_TYPE.RANGE,
        AGGREGATION_TYPE.COUNT,
        AGGREGATION_TYPE.MEDIAN
    ],
    [modules_constants_TYPE.CHECKBOX]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.CUSTOM]: [],
    [modules_constants_TYPE.DATE]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.GRAPHIC]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.GROUP]: [],
    [modules_constants_TYPE.LINK]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.MULTISELECT]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.NUMBER]: [
        AGGREGATION_TYPE.AVG,
        AGGREGATION_TYPE.SUM,
        AGGREGATION_TYPE.MIN,
        AGGREGATION_TYPE.MAX,
        AGGREGATION_TYPE.RANGE,
        AGGREGATION_TYPE.COUNT,
        AGGREGATION_TYPE.MEDIAN,
        AGGREGATION_TYPE.MODE
    ],
    [modules_constants_TYPE.HARVEY_BALL]: [
        AGGREGATION_TYPE.AVG,
        AGGREGATION_TYPE.SUM,
        AGGREGATION_TYPE.MIN,
        AGGREGATION_TYPE.MAX,
        AGGREGATION_TYPE.RANGE,
        AGGREGATION_TYPE.COUNT,
        AGGREGATION_TYPE.MEDIAN,
        AGGREGATION_TYPE.MODE
    ],
    [modules_constants_TYPE.TREND]: [
        AGGREGATION_TYPE.AVG,
        AGGREGATION_TYPE.SUM,
        AGGREGATION_TYPE.MIN,
        AGGREGATION_TYPE.MAX,
        AGGREGATION_TYPE.RANGE,
        AGGREGATION_TYPE.COUNT,
        AGGREGATION_TYPE.MEDIAN,
        AGGREGATION_TYPE.MODE
    ],
    [modules_constants_TYPE.SELECT]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.TEXT]: [AGGREGATION_TYPE.COUNT],
    [modules_constants_TYPE.VALUE]: [AGGREGATION_TYPE.COUNT]
};
const COLUMNS_EDITABLE = [
    modules_constants_TYPE.CHECKBOX,
    modules_constants_TYPE.CURRENCY,
    modules_constants_TYPE.DATE,
    modules_constants_TYPE.HARVEY_BALL,
    modules_constants_TYPE.MULTISELECT,
    modules_constants_TYPE.NUMBER,
    modules_constants_TYPE.PROGRESS_BAR,
    modules_constants_TYPE.SELECT,
    modules_constants_TYPE.TEXT,
    modules_constants_TYPE.TREND
];
const COLUMNS_FORMATABLE = [
    modules_constants_TYPE.DATE,
    modules_constants_TYPE.CURRENCY,
    modules_constants_TYPE.NUMBER,
    modules_constants_TYPE.TREND,
    modules_constants_TYPE.HARVEY_BALL
];
const FILTER = {
    OPERATORS: {
        BETWEEN: 'BETWEEN',
        CHECKS: 'CHECKS',
        STARTS: 'STARTS',
        ENDS: 'ENDS',
        BEFORE: 'BEFORE',
        AFTER: 'AFTER',
        HAS: 'HAS',
        EQUALS: 'EQUALS',
        AND: 'AND',
        OR: 'OR'
    },
    NEGATION: {
        ON: 'NEG',
        OFF: ' '
    }
};
const FILTER_TYPE_ALLOWED_OPERATORS = {
    SINGLE: [
        FILTER.OPERATORS.BETWEEN,
        FILTER.OPERATORS.CHECKS,
        FILTER.OPERATORS.STARTS,
        FILTER.OPERATORS.ENDS,
        FILTER.OPERATORS.BEFORE,
        FILTER.OPERATORS.AFTER,
        FILTER.OPERATORS.HAS,
        FILTER.OPERATORS.EQUALS
    ],
    GROUP: [
        FILTER.OPERATORS.AND,
        FILTER.OPERATORS.OR
    ]
};
const FILTER_DATA_TYPE_ALLOWED_OPERATOR = {
    NUMBER: [
        FILTER.OPERATORS.BEFORE,
        FILTER.OPERATORS.AFTER,
        FILTER.OPERATORS.BETWEEN,
        FILTER.OPERATORS.EQUALS
    ],
    BOOLEAN: [
        FILTER.OPERATORS.CHECKS
    ],
    STRING: [
        FILTER.OPERATORS.BETWEEN,
        FILTER.OPERATORS.HAS,
        FILTER.OPERATORS.STARTS,
        FILTER.OPERATORS.ENDS,
        FILTER.OPERATORS.EQUALS
    ]
};
const VUIELEMENT = {
    CALENDAR: 'vui-calendar',
    TOASTER: 'vui-toaster',
    QUICK_SEARCH: 'vui-quicksearch',
    POPUP: 'vui-popup',
    TOOLTIP: 'vui-tooltip',
    AGGREGATION: 'vui-aggregation',
    LAYOUT_STACKED: 'vui-layout-stacked',
    ICON: {
        MORE: 'vui-icon-more',
        CHEVRON_UP: 'vui-icon-chevron-up',
        CHEVRON_DOWN: 'vui-icon-chevron-down',
        CHEVRON_RIGHT: 'vui-icon-chevron-right',
        REFRESH: 'vui-icon-refresh',
        SUBSTRACT: 'vui-icon-substract',
        ADD: 'vui-icon-add',
        TREND: 'vui-icon-trend'
    },
    SELECT_LIST: 'vui-selectlist',
    CHECKBOX: 'vui-checkbox',
    BUTTON: 'vui-button'
};
const VUIICON = {
    SIZE: {
        SMALL: 'small',
        MEDIUM: 'medium',
        LARGE: 'large'
    }
};
const VUIPOPUP = {
    JUSTIFICATION: {
        LEFT: 'left',
        CENTER: 'center',
        RIGHT: 'right'
    },
    POSITION: {
        LEFT: 'left',
        RIGHT: 'right',
        TOP: 'top',
        BOTTOM: 'bottom',
        CENTER: 'center'
    }
};
const modules_constants_ELEMENT = {
    ANCHOR: 'a',
    BUTTON: 'button',
    DIV: 'div',
    IMAGE: 'img',
    INPUT: 'input',
    LABEL: 'label',
    OPTION: 'option',
    SELECT: 'select',
    SPAN: 'span',
    SVG: 'svg',
    I: 'i',
    IFRAME: 'iframe',
    TABLE: 'table'
};
const constants_SVG = {
    NAMESPACE: 'http://www.w3.org/2000/svg',
    WIDTH: 150,
    HEIGHT: 5
};
const MOUSE_BUTTON = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2
};
const modules_constants_EVENT = {
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    SCROLL: 'scroll',
    WHEEL: 'wheel',
    TRANSITIONEND: 'transitionend',
    RESIZE: 'resize',
    HOVER: 'hover',
    MOUSEDOWN: 'mousedown',
    MOUSEMOVE: 'mousemove',
    MOUSEOVER: 'mouseover',
    MOUSEOUT: 'mouseout',
    MOUSEUP: 'mouseup',
    MOUSEENTER: 'mouseenter',
    MOUSELEAVE: 'mouseleave',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    KEYDOWN: 'keydown',
    KEYUP: 'keyup',
    SELECTSTART: 'selectstart',
    DRAGSTART: 'dragstart',
    DRAGOVER: 'dragover',
    DRAGLEAVE: 'dragleave',
    DRAGENTER: 'dragenter',
    DRAGEND: 'dragend',
    DROP: 'drop',
    VISIBILITYCHANGE: 'visibilitychange',
    BLUR: 'blur',
    INPUT: 'input',
    CHANGE: 'change',
    PREVCLICKED: 'prevClicked',
    NEXTCLICKED: 'nextClicked',
    ITEMSCHANGED: 'itemsChanged',
    SAVE_CLICKED: 'saveClicked',
    ADD_CLICKED: 'addClicked',
    REMOVE_CLICKED: 'removeClicked',
    SEARCH_VALUE_CHANGED: 'searchValueChanged',
    SEARCH_LIST_ITEM_CLICKED: 'searchListItemClicked',
    GROUP_SORT: 'groupClick',
    GROUP_REMOVE: 'groupRemove',
    GROUP_DROP: 'groupDrop',
    GROUP_VISIBLE: 'group-visibleChanged',
    CONTEXT_MENU: 'contextmenu',
    LISTELEMENTSELECTED: 'listItemSelected',
    VALUECHANGED: 'valueChanged',
    DATESELECTED: 'dateSelected',
    ERRORSELECTED: 'errorSelected',
    SORTSARITHMETICSORTED: 'sortsArithmeticSorted',
    SORTSARITHMETICMUTATED: 'sortsArithmeticMutated',
    GOOEYGROUPED: 'gooeyGrouped',
    GOOEYSORTED: 'gooeySorted',
    GOOEYFILTERED: 'gooeyFiltered',
    GOOEYCLICKED: 'gooeyClicked',
    GROUPARITHMETICSORTED: 'groupArithmeticSorted',
    GROUPARITHMETICMUTATED: 'groupArithmeticMutated',
};
const SELECT_TYPE = {
    MULTI: 'multi',
    SINGLE: 'single'
};
const DIRECTION = {
    LEFT: 'left',
    LEFT_IE: 'left_ie',
    RIGHT: 'right',
    RIGHT_IE: 'right_ie',
    TOP: 'top',
    TOP_IE: 'top_ie',
    DOWN: 'down',
    DOWN_IE: 'down_ie'
};
const modules_constants_ATTRIBUTE = {
    DEEP: 'deep'
};
const LAYOUT = {
    MODE: {
        CONTENT: 'content',
        CONTENT_FREEZE_COLUMNS: 'content-freeze_columns',
        FREEZE_ROWS: 'freeze_rows',
        FREEZE_ROWS_FREEZE_COLUMNS: 'freeze_rows-freeze_columns'
    }
};
const constants_VIEW = {
    MODE: {
        NORMAL: 'normal',
        INFINITE: 'infinite'
    },
    ROW: {
        TYPE: {
            NORMAL: 'normal',
            GROUP: 'group',
            LOADER: 'loader',
            REMOVED: 'removed',
            EMPTY: 'empty'
        }
    },
    LOADING_STEP: 40
};
const FORMAT = {
    DATE: 'yyyy-mm-dd'
};
const SIZE = {
    SCROLL_MEASURE_WRAPPER: 100,
    CELL_PADDING: {
        STANDARD: 8,
        MULTISELECT: 25
    },
    CELL_MIN_WIDTH: 35,
    CELL_MIN_PROGRESS_BAR_WIDTH: 150,
    LIMIT_FACTOR: 0.7,
    EMPTY_SCREEN_HEIGHT: 70,
    ROW_MAX_LEVEL: 10
};
const TIME = {
    LOADER: {
        MAX: 30,
        WARN: 20
    }
};
const modules_constants_POSITION = {
    AFTER: 'after',
    BEFORE: 'before',
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
};
const NO_RECORDS = 'No records';
const SCHEMA_KEYWORD = {
    VALIDATE_DATA_CELL: 'data_cell_validation'
};
const PROGRESS_BAR = {
    MAX_WIDTH: 130,
    HEIGHT: 5,
    POSITION_X: 10,
    POSITION_Y: 0,
    RESIZER: {
        WIDTH: 4
    }
};
const MAX_GROUP_NUMBER = 7;
const MAX_SORT_NUMBER = 5;
const MAX_ITEMS_PER_PAGE_NUMBER = 200;
const GRID_ELEMENTS = {
    FOOTER: 'footer',
    HEADER: 'header'
};
const PROPERTIES = {
    HEIGHT: 'height',
    WIDTH: 'width',
    MIN_HEIGHT: 'min-height',
    BLOCK: 'block'
};
const DICTIONARY_NAME = {
    COLORING: 'coloring',
    INTL: 'intl'
};
const DEFAULT = {
    FULLSCREEN: false,
    DICTIONARIES: {
        [DICTIONARY_NAME.COLORING]: {},
        [DICTIONARY_NAME.INTL]: {}
    },
    FILTER: {
        DRAG_AND_DROP_OFFSET: 0,
        OPERATOR_SINGLE: FILTER.OPERATORS.EQUALS,
        OPERATOR_GROUP: FILTER.OPERATORS.AND,
        NEGATION_SINGLE: false,
        NEGATION_GROUP: false
    },
    INTL_MAXIMUM_FRACTION_DIGITS: 2,
    LANGUAGE: 'en-US',
    SORT: constants_ASC,
    SUMMARY_ANIMATION_TYPE: ANIMATION_TYPE.ONCE,
    THEME: {
        CURRENT: 'grid-native',
        PATH: '',
        BORDER: 'default',
        LAYOUT: 'default'
    },
};
const GROUP = {
    DEEPS: [25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175],
    RESIZER_WIDTH: 35,
    BASE_PADDINGS: 25
};
const THEMES_LIST_GRID = {
    LABELS: {
        DEFAULT: 'native',
        NATIVE: 'native',
        DARK: 'dark',
        GLOBAL: 'global'
    },
    PATHS: {
        // todo update paths - values below are just an example
        'native': 'styles/sample.css',
        'dark': 'styles/dark.css',
        'light': 'styles/light.css'
    }
};
const TRANSLATION = {
    SUPPORTED_LANGUAGES: ['pl-PL', 'en-US'],
    ERRORS: {
        LANGUAGE_NOT_FOUND: 'Error: Language not found',
        INCORRECT_LABELS: 'Error: Language could not be added - incorrect labels'
    },
    KEYS: {
        SELECTED: 'selected',
        CHANGED: 'changed',
        NEXT: 'next',
        PREV: 'prev',
        SAVE_ROW: 'save_row',
        ADD_ROW: 'add_row',
        REMOVE_ROW: 'remove_row',
        SHOW: 'show',
        HIDE: 'hide',
        SHOW_ALL: 'show all',
        DRAG_PLACEHOLDER_GROUPS: 'drag-placeholder-groups',
        MARK_ALL: 'mark-all',
        DESCENDING: 'descending',
        ASCENDING: 'ascending',
        SORT: 'sort',
        GROUP: 'group',
        FREEZE: 'freeze',
        UNFREEZE: 'unfreeze',
        ROW_REMOVED: 'row-removed',
        RESTORE: 'restore',
        SETTINGS: 'settings',
        ERRORS: 'errors',
    },
    LABELS: [
        'group',
        'settings',
        'sort',
        'next',
        'prev',
        'ascending',
        'descending',
        'descending',
        'mark-all',
        'not',
        'drag-placeholder-groups',
        'drag-placeholder-columns',
        'filter-by',
        'selected',
        'more',
        'summary'
    ],
    TRANSLATIONS: {
        'en-US': {
            'group': 'Group',
            'sort': 'Sort',
            'prev': 'Prev',
            'next': 'Next',
            'ascending': 'Ascending',
            'descending': 'Descending',
            'mark-all': 'Select all',
            'between': 'BETWEEN',
            'checks': 'CHECKS',
            'starts': 'STARTS',
            'ends': 'ENDS',
            'before': 'BEFORE',
            'after': 'AFTER',
            'has': 'HAS',
            'equals': 'EQUALS',
            'not': 'NOT',
            'and': 'AND',
            'or': 'OR',
            'drag-placeholder-groups': 'Drop columns here to group',
            'drag-placeholder-columns': 'Drop columns here',
            'group-by': 'Group by',
            'filter-by': 'Filter by:',
            'selected': 'Selected:',
            'changed': 'Changed:',
            'more': 'Moreover',
            'no records': 'No records',
            'cancel': 'Cancel',
            'edit': 'Edit',
            'search': 'Search',
            'hide': 'Hide',
            'freeze': 'Freeze',
            'unfreeze': 'Unfreeze',
            'summary': 'Summary value',
            'errors': 'Errors',
            'add_row': 'Add row',
            'remove_row': 'Remove row(s)',
            'save_row': 'Save row(s)',
            'save': 'Save',
            'cannot add new group - limit has been exceeded': 'Cannot add new group - limit has been exceeded',
            'ok': 'OK',
            'row-removed': 'Row was removed',
            'restore': 'Restore',
            'sum': 'Sum',
            'mode': 'Mode',
            'median': 'Median',
            'count': 'Quantity',
            'avg': 'Average',
            'min': 'Minimum',
            'max': 'Maximum',
            'range': 'Range',
            'settings': 'Settings',
            'show': 'Show',
            'show all': 'Show all'
        },
        'pl-PL': {
            'group': 'Grupuj',
            'sort': 'Sortuj',
            'prev': 'Tył',
            'next': 'Przód',
            'ascending': 'Rosnąco',
            'descending': 'Malejąco',
            'mark-all': 'Zaznacz wszystkie',
            'between': 'BETWEEN',
            'checks': 'CHECKS',
            'starts': 'STARTS',
            'ends': 'ENDS',
            'before': 'BEFORE',
            'after': 'AFTER',
            'has': 'HAS',
            'equals': 'EQUALS',
            'not': 'NOT',
            'and': 'AND',
            'or': 'OR',
            'drag-placeholder': 'Przeciągnij kolumny, aby zgrupować',
            'group-by': 'Grupuj po',
            'filter-by': 'Filtruj po:',
            'selected': 'Zaznaczonych:',
            'changed': 'Zmienionych:',
            'more': 'Więcej',
            'no records': 'Brak wyników',
            'cancel': 'Anuluj',
            'edit': 'Edytuj',
            'search': 'Szukaj',
            'hide': 'Ukryj',
            'freeze': 'Przypnij',
            'unfreeze': 'Wypnij',
            'summary': 'Wartość sumy',
            'errors': 'Błędy',
            'add row': 'Dodaj wiersz',
            'remove row': 'Usuń wiersz',
            'save': 'Zapisz',
            'cannot add new group - limit has been exceeded': 'Nie można dodać nowej grupy - limit został przekroczony',
            'ok': 'OK',
            'row-removed': 'Wiersz został usunięty',
            'restore': 'Przywróć',
            'mode': 'Dominanta',
            'median': 'Mediana',
            'sum': 'Suma',
            'count': 'Ilość',
            'avg': 'Średnia',
            'min': 'Minimalna',
            'max': 'Maksymalna',
            'range': 'Zakres',
            'settings': 'Ustawienia',
            'show': 'Pokaż',
            'show all': 'Pokaż wszystkie'
        }
    }
};
const SPRITE_CIRCLES = {
    DIAMETER: 20,
    RATIO: 0.25
};
const INDICATOR = {
    DOWN: 'down',
    STILL: 'right',
    UP: 'up'
};
const COLUMNS_ABSTRACT_STATIC = [
    STATIC_CLASS.ROW_GROUP,
    STATIC_CLASS.ROW_MARK
];
const COLUMNS_ABSTRACT = [
    modules_constants_TYPE.ACTION,
    STATIC_TYPE.ROW_MARK,
    STATIC_TYPE.ROW_GROUP
];
const FREEZE_ROW_LIMIT = 5;
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/translation.js

class translation_Translation {
    static setLanguage(language) {
        if (translation_Translation.checkLanguage(language)) {
            translation_Translation.currentLanguage = language;
        }
        else {
            throw TRANSLATION.ERRORS.LANGUAGE_NOT_FOUND;
        }
    }
    static checkLanguage(language) {
        return TRANSLATION.TRANSLATIONS[language] || translation_Translation.externalTranslations[language];
    }
    static addLanguage(language, translations) {
        if (translation_Translation.validateLabels(translations)) {
            translation_Translation.externalTranslations[language] = translations;
        }
        else {
            throw TRANSLATION.ERRORS.INCORRECT_LABELS;
        }
    }
    static validateLabels(translations) {
        return TRANSLATION.LABELS.every((label) => translations.hasOwnProperty(label));
    }
    static getTranslations() {
        return TRANSLATION.TRANSLATIONS[translation_Translation.currentLanguage] ? TRANSLATION.TRANSLATIONS :
            translation_Translation.externalTranslations;
    }
    static isTranslationExists(label) {
        return !!translation_Translation.getTranslations()[translation_Translation.currentLanguage][label.toLowerCase()];
    }
    static translate(label) {
        if (translation_Translation.isTranslationExists(label)) {
            return translation_Translation.getTranslations()[translation_Translation.currentLanguage][label.toLowerCase()];
        }
        else {
            return `*${label}`;
        }
    }
}
translation_Translation.currentLanguage = DEFAULT.LANGUAGE;
translation_Translation.externalTranslations = {};
//# sourceMappingURL=translation.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/object.js
class UtilsObject {
    static getPropertyValue(keys, descriptor, fallback = undefined) {
        keys.split('.').forEach((key) => {
            if (typeof descriptor !== 'undefined') {
                descriptor = descriptor[key];
            }
        });
        return typeof descriptor === 'undefined' ? fallback : descriptor;
    }
    static isObject(a) {
        return typeof a === 'object' && a !== null;
    }
    static deepEqual(a, b) {
        if (UtilsObject.isObject(a) && UtilsObject.isObject(b)) {
            return Object.keys(a).every((key) => UtilsObject.deepEqual(a[key], b[key]));
        }
        return a === b;
    }
    static equal(a, b) {
        if (Object.keys(a).length !== Object.keys(b).length) {
            return false;
        }
        for (let key in a) {
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    static findItem(value, propertyName, arrayPropertyName, dataObject) {
        return dataObject[propertyName] === value ?
            dataObject :
            UtilsObject.findItemRecursive(value, propertyName, arrayPropertyName, dataObject[arrayPropertyName]);
    }
    /* tslint:disable-next-line:cyclomatic-complexity */
    static getItem(value, key, dataKey, data) {
        let item;
        for (let i = 0; i < data.length; i += 1) {
            if (!data[i]) {
                continue;
            }
            if (data[i][key] === value) {
                return data[i];
            }
            else if (data[i][dataKey]) {
                item = UtilsObject.findItemRecursive(value, key, dataKey, data[i][dataKey]);
            }
            if (item) {
                break;
            }
        }
        return item;
    }
    static findItemRecursive(value, key, dataKey, data) {
        return Array.isArray(data) ? UtilsObject.getItem(value, key, dataKey, data) : void 0;
    }
    static copy(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    static entries(object) {
        let properties = Object.keys(object);
        let index = properties.length;
        let array = [];
        while (index--) {
            array[index] = [properties[index], object[properties[index]]];
        }
        return array;
    }
}
//# sourceMappingURL=object.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/columns.js



class columns_UtilsColumns {
    static _changeViewOrder(previous, current, first) {
        if (previous) {
            utilities_dom_UtilitiesDOM.insertAfter(current, previous);
        }
        else if (first) {
            first.parentNode.insertBefore(current, first);
        }
    }
    static _getFoundColumn(parent, child) {
        return parent || child;
    }
    static _collectionToArray(state) {
        return Object.keys(state).map((columnId) => state[columnId]);
    }
    static diff(ids, ids2) {
        let add = ids2.filter((columnId) => ids.indexOf(columnId) === -1);
        let remove = ids.filter((columnId) => ids2.indexOf(columnId) === -1);
        let order = true;
        if (!add.length && !remove.length) {
            order = !ids.every((columnId, index) => columnId === ids2[index]);
        }
        return { add, remove, order };
    }
    static sort(ids, ids2, cells) {
        let lastColumnId = undefined;
        let index = 0;
        ids.forEach((columnId) => {
            let currentColumnId = ids2[index];
            if (currentColumnId && columnId === currentColumnId) {
                index = index + 1;
            }
            else {
                this._changeViewOrder(cells[lastColumnId], cells[columnId], cells[currentColumnId]);
            }
            lastColumnId = columnId;
        });
    }
    static getIdFromData(columns = []) {
        return columns.map((column) => column.id);
    }
    static columnExists(collection, columnId) {
        if (collection[columnId]) {
            return true;
        }
        return !!columns_UtilsColumns.findColumnInState(columnId, collection);
    }
    static filterAbstract(columns) {
        return columns.filter((column) => !column.abstract);
    }
    static filterAbstractColumnIds(columns, columnIds) {
        let abstractColumns = columns_UtilsColumns.filterAbstract(columns).map((column) => column.id);
        return columnIds.filter((column) => abstractColumns.indexOf(column) >= 0);
    }
    static getAllColumnIds(collection) {
        let columnsIds = [];
        Object.keys(collection).forEach((columnId) => {
            columnsIds.push(columnId);
            if (Array.isArray(collection[columnId].columns)) {
                columnsIds.push(...columns_UtilsColumns.getColumnIdsRecursive(collection[columnId].columns));
            }
        });
        return columnsIds;
    }
    static getColumnIdsRecursive(columns, withGroups = true) {
        let columnsIds = [];
        for (let i = 0; i < columns.length; i++) {
            let column = columns[i];
            if (withGroups || column.type !== modules_constants_TYPE.GROUP) {
                columnsIds.push(column.id);
            }
            if (Array.isArray(column.columns)) {
                columnsIds.push(...columns_UtilsColumns.getColumnIdsRecursive(column.columns, withGroups));
            }
        }
        return columnsIds;
    }
    static getAllNonRootColumnIds(columns) {
        let rootColumns = Object.keys(columns);
        return columns_UtilsColumns.getAllColumnIds(columns)
            .filter((columnId) => rootColumns.indexOf(columnId) === -1);
    }
    static findColumnInState(columnId, state) {
        let column = state[columnId];
        if (column) {
            return column;
        }
        for (let i in state) {
            if (state.hasOwnProperty(i)) {
                column = columns_UtilsColumns.findColumnRecursive(columnId, state[i].columns);
                if (column) {
                    break;
                }
            }
        }
        return column;
    }
    static findColumnRootInState(columnId, state) {
        let column = state[columnId];
        if (column) {
            return column;
        }
        for (let i in state) {
            if (state.hasOwnProperty(i) && columns_UtilsColumns.findColumnRecursive(columnId, state[i].columns)) {
                column = state[i];
                break;
            }
        }
        return column;
    }
    static findColumnRoot(columnId, columns) {
        let root = columns_UtilsColumns.findColumnInColumns(columnId, columns);
        if (root) {
            return root;
        }
        for (let column of columns) {
            if (columns_UtilsColumns.findColumnRecursive(columnId, column.columns)) {
                root = column;
                break;
            }
        }
        return root;
    }
    static isAbstract(column) {
        return COLUMNS_ABSTRACT.indexOf(column.type) !== -1;
    }
    static isAbstractStatic(columnId) {
        return COLUMNS_ABSTRACT_STATIC.indexOf(columnId) !== -1;
    }
    static isFormatable(column) {
        return COLUMNS_FORMATABLE.indexOf(column.type) !== -1;
    }
    static isEditable(column) {
        return COLUMNS_EDITABLE.indexOf(column.type) !== -1;
    }
    static findColumnInColumns(columnId, columns, onlyRootColumns = true) {
        if (onlyRootColumns) {
            return columns.find((column) => column.id === columnId);
        }
        else {
            return columns_UtilsColumns.findColumnRecursive(columnId, columns);
        }
    }
    static findColumnRecursive(columnId, columns = []) {
        return UtilsObject.findItemRecursive(columnId, 'id', 'columns', columns);
    }
    static findColumnParentRecursiveInState(columnId, columns, columnParent) {
        let col;
        for (let id of Object.keys(columns)) {
            if (id === columnId) {
                return this._getFoundColumn(columnParent, columns[id]);
            }
            else if (Array.isArray(columns[id].columns)) {
                col = columns_UtilsColumns.findColumnParentRecursive(columnId, columns[id].columns, columns[id]);
                if (col) {
                    break;
                }
            }
        }
        return col;
    }
    static findColumnParentRecursive(columnId, columns, columnParent) {
        let col;
        for (let column of columns) {
            if (column.id === columnId) {
                return this._getFoundColumn(columnParent, column);
            }
            else if (Array.isArray(column.columns)) {
                col = columns_UtilsColumns.findColumnParentRecursive(columnId, column.columns, column);
                if (col) {
                    break;
                }
            }
        }
        return col;
    }
    static isColumnMaxLevel2(columnId, columns) {
        let column = columns_UtilsColumns.findColumnParentRecursive(columnId, columns);
        let rootColumn = columns_UtilsColumns.findColumnRoot(columnId, columns);
        let isRootColumn = columnId === rootColumn.id;
        let isSecondLevel = rootColumn.id === column.id;
        return (isRootColumn || isSecondLevel) && !!column.label;
    }
    static isColumnMaxLevel2InState(state, columnId) {
        return columns_UtilsColumns.isColumnMaxLevel2(columnId, this._collectionToArray(state));
    }
    static isValidLeaf(columns, columnId, allowRoot = false) {
        let column = columns_UtilsColumns.findColumnInColumns(columnId, columns, false);
        if (!column) {
            return false;
        }
        let isRootColumn = columns_UtilsColumns.isColumnRoot(columns, columnId);
        let isValidLeaf = columns_UtilsColumns.isColumnLeaf(column);
        return columns_UtilsColumns.isColumnMaxLevel2(columnId, columns)
            && (!allowRoot ? isValidLeaf : (isValidLeaf || isRootColumn));
    }
    static isValidLeafInState(state, columnId, allowRoot = false) {
        return columns_UtilsColumns.isValidLeaf(this._collectionToArray(state), columnId, allowRoot);
    }
    static isColumnRootInState(state, columnId) {
        let rootColumn = columns_UtilsColumns.findColumnRootInState(columnId, state);
        return columnId && columnId === rootColumn.id;
    }
    static isColumnRoot(columns, columnId) {
        return columns.some((column) => column.id === columnId);
    }
    static isColumnLeaf(column) {
        return !(Array.isArray(column.columns) && column.columns.length > 0);
    }
    static getNestedColumnLabel(rootColumn, column) {
        return rootColumn.id === column.id ? column.label : `${rootColumn.label}-${column.label}`;
    }
    static getColumnIdFromData(columns) {
        return columns.map((column) => column.columnId);
    }
    static filterColumnsById(columns, columnId) {
        return columns.filter((column) => column.columnId !== columnId);
    }
}
//# sourceMappingURL=columns.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/crypto.js
/*
* Fork of https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.js
*/
class UtilsCrypto {
    /* tslint:disable:typedef no-bitwise */
    static safeAdd(x, y) {
        let lsw = (x & 0xffff) + (y & 0xffff);
        let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xffff);
    }
    static bitRotateLeft(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }
    static md5cmn(q, a, b, x, s, t) {
        return this.safeAdd(this.bitRotateLeft(this.safeAdd(this.safeAdd(a, q), this.safeAdd(x, t)), s), b);
    }
    static md5ff(a, b, c, d, x, s, t) {
        return this.md5cmn((b & c) | (~b & d), a, b, x, s, t);
    }
    static md5gg(a, b, c, d, x, s, t) {
        return this.md5cmn((b & d) | (c & ~d), a, b, x, s, t);
    }
    static md5hh(a, b, c, d, x, s, t) {
        return this.md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    static md5ii(a, b, c, d, x, s, t) {
        return this.md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    static binlMD5(x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << (len % 32);
        x[((len + 64) >>> 9 << 4) + 14] = len;
        let i;
        let olda;
        let oldb;
        let oldc;
        let oldd;
        let a = 1732584193;
        let b = -271733879;
        let c = -1732584194;
        let d = 271733878;
        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;
            a = this.md5ff(a, b, c, d, x[i], 7, -680876936);
            d = this.md5ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = this.md5ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = this.md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = this.md5ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = this.md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = this.md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = this.md5ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = this.md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = this.md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = this.md5ff(c, d, a, b, x[i + 10], 17, -42063);
            b = this.md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = this.md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = this.md5ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = this.md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = this.md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = this.md5gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = this.md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = this.md5gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = this.md5gg(b, c, d, a, x[i], 20, -373897302);
            a = this.md5gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = this.md5gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = this.md5gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = this.md5gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = this.md5gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = this.md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = this.md5gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = this.md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = this.md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = this.md5gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = this.md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = this.md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = this.md5hh(a, b, c, d, x[i + 5], 4, -378558);
            d = this.md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = this.md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = this.md5hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = this.md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = this.md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = this.md5hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = this.md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = this.md5hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = this.md5hh(d, a, b, c, x[i], 11, -358537222);
            c = this.md5hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = this.md5hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = this.md5hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = this.md5hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = this.md5hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = this.md5hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = this.md5ii(a, b, c, d, x[i], 6, -198630844);
            d = this.md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = this.md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = this.md5ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = this.md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = this.md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = this.md5ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = this.md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = this.md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = this.md5ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = this.md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = this.md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = this.md5ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = this.md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = this.md5ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = this.md5ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = this.safeAdd(a, olda);
            b = this.safeAdd(b, oldb);
            c = this.safeAdd(c, oldc);
            d = this.safeAdd(d, oldd);
        }
        return [a, b, c, d];
    }
    static binl2rstr(input) {
        let i;
        let output = '';
        let length32 = input.length * 32;
        for (i = 0; i < length32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff);
        }
        return output;
    }
    static rstr2binl(input) {
        let i;
        let output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        let length8 = input.length * 8;
        for (i = 0; i < length8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32);
        }
        return output;
    }
    static rstrMD5(s) {
        return this.binl2rstr(this.binlMD5(this.rstr2binl(s), s.length * 8));
    }
    static rstrHMACMD5(key, data) {
        let i;
        let bkey = this.rstr2binl(key);
        let ipad = [];
        let opad = [];
        let hash;
        ipad[15] = opad[15] = undefined;
        if (bkey.length > 16) {
            bkey = this.binlMD5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5c5c5c5c;
        }
        hash = this.binlMD5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);
        return this.binl2rstr(this.binlMD5(opad.concat(hash), 512 + 128));
    }
    static rstr2hex(input) {
        let hexTab = '0123456789abcdef';
        let output = '';
        let x;
        let i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);
        }
        return output;
    }
    static str2rstrUTF8(input) {
        return decodeURI(encodeURIComponent(input));
    }
    static rawMD5(s) {
        return this.rstrMD5(this.str2rstrUTF8(s));
    }
    static hexMD5(s) {
        return this.rstr2hex(this.rawMD5(s));
    }
    static rawHMACMD5(k, d) {
        return this.rstrHMACMD5(this.str2rstrUTF8(k), this.str2rstrUTF8(d));
    }
    static hexHMACMD5(k, d) {
        return this.rstr2hex(this.rawHMACMD5(k, d));
    }
    static md5(string, key, raw) {
        if (!key) {
            if (!raw) {
                return this.hexMD5(string);
            }
            return this.rawMD5(string);
        }
        if (!raw) {
            return this.hexHMACMD5(key, string);
        }
        return this.rawHMACMD5(key, string);
    }
    /* tslint:enable:typedef no-bitwise */
    static createMD5Checksum(target) {
        return this.md5(JSON.stringify(target)).toString();
    }
}
//# sourceMappingURL=crypto.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/date.js
const date_DATE_ZEROS = '0000-00-00';
class UtilsDate {
    static getISOString(value) {
        if (!value) {
            return '';
        }
        let date = new Date(value);
        let month = UtilsDate.getWithLeadingZero(date.getMonth() + 1);
        let day = UtilsDate.getWithLeadingZero(date.getDate());
        return `${date.getFullYear()}-${month}-${day}`;
    }
    static getDateFromISOString(value) {
        let date = new Date(value);
        if (!UtilsDate.isDateValid(date)) {
            console.warn(`Not valid date value was provided as "${value}". Use ISO format 'YYYY-MM-DD'`);
        }
        return date;
    }
    static getDateString(date) {
        let dateTimezoneFix = new Date(date);
        dateTimezoneFix.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        return dateTimezoneFix.toISOString().substr(0, 10);
    }
    static isDateStringValid(dateString) {
        if (dateString === date_DATE_ZEROS) {
            return true;
        }
        let date = new Date(dateString);
        return !!dateString && this.isDateValid(date) && dateString === this.getDateString(date);
    }
    static isDateValid(value) {
        return value instanceof Date ? !isNaN(value.getTime()) : /^\d{4}-\d{2}-\d{2}$/.test(value);
    }
    static isDateEmpty(value) {
        return value === '';
    }
    static getWithLeadingZero(date) {
        return date < 10 ? `0${date}` : date.toString();
    }
}
//# sourceMappingURL=date.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/debug.js
class UtilsDebug {
    static init(debuggerService) {
        UtilsDebug.debuggerService = debuggerService;
    }
    static writeMeasure(caller, time, colors = { bad: 100 }) {
        if (UtilsDebug.debuggerService && !UtilsDebug.debuggerService.isEnabled()) {
            return void 0;
        }
        console.log(`${caller}: %c${time}ms`, UtilsDebug.getStyle(time, colors));
    }
    static getStyle(time, colors) {
        let style = '';
        if (colors.good && time < colors.good) {
            style = 'background: green; color: white';
        }
        else if (time > colors.bad) {
            style = 'background: red; color: white';
        }
        return style;
    }
    measure(colors) {
        return function (target, propertyKey, descriptor) {
            let method = descriptor.value;
            descriptor.value = function (...args) {
                let name = `${target.constructor.name}.${propertyKey}`;
                let start = performance.now();
                let result = method.apply(this, args);
                UtilsDebug.writeMeasure(name, performance.now() - start, colors);
                return result;
            };
            return descriptor;
        };
    }
}
const utilsDebug = new UtilsDebug();
const measure = (utilsDebug.measure.bind(utilsDebug));

//# sourceMappingURL=debug.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/event.js
class UtilsEvent {
    static stopPropagation(event) {
        event.stopPropagation();
    }
    static preventDefault(event) {
        event.preventDefault();
    }
}
//# sourceMappingURL=event.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/value.js

class value_UtilsValue {
    static getDatePositions() {
        let [y, m, d] = [
            [FORMAT.DATE.indexOf('y'), FORMAT.DATE.lastIndexOf('y') + 1],
            [FORMAT.DATE.indexOf('m'), FORMAT.DATE.lastIndexOf('m') + 1],
            [FORMAT.DATE.indexOf('d'), FORMAT.DATE.lastIndexOf('d') + 1]
        ];
        return { y, m, d };
    }
    static getTimestamp(date) {
        let position = value_UtilsValue.getDatePositions(), y = parseInt(date.slice(position.y[0], position.y[1]), 10), m = parseInt(date.slice(position.m[0], position.m[1]), 10) - 1, d = parseInt(date.slice(position.d[0], position.d[1]), 10);
        return (new Date(y, m, d)).getTime() / 1000;
    }
    static getUpperCase(value) {
        return typeof value === 'string' ? value.toUpperCase() : '';
    }
    static normalizeObject(value, stringify) {
        if (stringify) {
            return JSON.stringify(value);
        }
        else if (!value) {
            return '';
        }
        else if (Array.isArray(value)) {
            return value
                .slice()
                .sort()
                .toString()
                .trim();
        }
        return Object.keys(value)
            .sort()
            .reduce((acc, key) => `${acc} ${value[key]}`, '')
            .trim();
    }
    static normalizeValue(value, stringify = false) {
        switch (typeof value) {
            case 'object':
                return value_UtilsValue.normalizeObject(value, stringify);
            case 'string':
                return value;
            default:
                return String(value);
        }
    }
    static hasCurrencyValue(cell) {
        return cell && cell.value !== null && cell.currency !== '';
    }
    static stringifyCurrency(value = null, currency = '', emptify = false) {
        if (value === null || (emptify && !currency)) {
            return '';
        }
        return `${value} ${currency}`.trim().toUpperCase();
    }
    static isEmpty(a) {
        return typeof a === 'undefined' || a === null;
    }
    static toKebabCase(value) {
        return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    }
}
//# sourceMappingURL=value.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/filter.js



class filter_UtilsFilter {
    static createSingleFilter(columnId) {
        return {
            columnId,
            value: '',
            value2: '',
            operator: DEFAULT.FILTER.OPERATOR_SINGLE,
            negative: DEFAULT.FILTER.NEGATION_SINGLE
        };
    }
    static createGroupFilter(filters = []) {
        return {
            filters,
            operator: DEFAULT.FILTER.OPERATOR_GROUP,
            negative: DEFAULT.FILTER.NEGATION_GROUP
        };
    }
    static isFilterGroup(filter) {
        return filter && Array.isArray(filter.filters);
    }
    static isDisplayGroup(filter) {
        if (!filter_UtilsFilter.isFilterGroup(filter)) {
            return false;
        }
        let filters = filter.filters;
        // has to have at least 2 children or single child and be negative
        if (Array.isArray(filters) && filters.length === 0) {
            return false;
        }
        return filters.length > 1 || filter.negative;
    }
    static isBetweenOperator(operator) {
        return value_UtilsValue.getUpperCase(operator) === FILTER.OPERATORS.BETWEEN;
    }
    static isChecksOperator(operator) {
        return value_UtilsValue.getUpperCase(operator) === FILTER.OPERATORS.CHECKS;
    }
    static isFilterGroupValid(filter) {
        return filter_UtilsFilter.isFilterGroup(filter) && filter.filters.length !== 0;
    }
    static getIdentifiedFilters(filters, wrapperId, identify = true) {
        if (!filters) {
            return void 0;
        }
        let order = wrapperId ? [wrapperId] : [];
        let filter = UtilsObject.copy(filters);
        if (identify) {
            filter[DRAG_AND_DROP.IDENTIFIER] = '0';
            order.push(filter[DRAG_AND_DROP.IDENTIFIER]);
        }
        else {
            delete filter[DRAG_AND_DROP.IDENTIFIER];
        }
        if (filter_UtilsFilter.isFilterGroup(filter)) {
            filter.filters.forEach(filter_UtilsFilter.identifyFiltersRecursively.bind(this, filter[DRAG_AND_DROP.IDENTIFIER], order, identify));
        }
        return { filter, order };
    }
    static joinIds(parentId, childId) {
        return `${parentId}.${childId}`;
    }
    static getParentId(id) {
        return id.replace(/^(.*\.)(.+)$/g, ($0, $1) => $1.slice(0, -1));
    }
    static identifyFiltersRecursively(parentId, order, identify, filter, indexPosition) {
        if (identify) {
            filter[DRAG_AND_DROP.IDENTIFIER] = filter_UtilsFilter.joinIds(parentId, indexPosition.toString());
            order.push(filter[DRAG_AND_DROP.IDENTIFIER]);
        }
        else {
            delete filter[DRAG_AND_DROP.IDENTIFIER];
        }
        if (filter_UtilsFilter.isFilterGroup(filter)) {
            filter.filters.forEach(filter_UtilsFilter.identifyFiltersRecursively.bind(this, filter[DRAG_AND_DROP.IDENTIFIER], order, identify));
        }
    }
}
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/group.js
class UtilsGroup {
    static columnIsGrouped(groups, columnId) {
        return groups.indexOf(columnId) !== -1;
    }
}
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/number.js
class UtilsNumber {
    static getSafeInteger(value) {
        return Math.min(Math.max(value, Number.MIN_SAFE_INTEGER), Number.MAX_SAFE_INTEGER);
    }
    static isSafeInteger(value) {
        return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER;
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/reducer.js
class UtilsReducer {
    static runReducers(state, action, reducersMap) {
        if (reducersMap.hasOwnProperty(action.type)) {
            return reducersMap[action.type].call(null, state, action);
        }
        else {
            return state;
        }
    }
    static collectReducersTree(map) {
        return (state, action) => {
            let changes = Object.keys(map).reduce((accumulator, index) => {
                let newState = map[index](state[index], action);
                if (newState !== state[index]) {
                    accumulator[index] = newState;
                }
                return accumulator;
            }, {});
            if (Object.keys(changes).length > 0) {
                return Object.assign({}, state, changes);
            }
            return state;
        };
    }
}
//# sourceMappingURL=reducer.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/dimension.js


class dimension_Dimension {
    constructor(element, options) {
        this.element = element;
        this.options = options;
        this.compute();
    }
    compute() {
        if (this.options.element) {
            this.info = this.getSimulateInfo(this.element, this.options);
        }
        else {
            this.info = this.getInfo(this.element);
        }
    }
    getSimulateInfo(container, options) {
        let element = utilities_dom_UtilitiesDOM.create(options.element, options.classList);
        container.appendChild(element);
        let info = this.getInfo(element);
        container.removeChild(element);
        return info;
    }
    createShadowDimensions() {
        let element = document.createElement(modules_constants_ELEMENT.DIV);
        element.classList.add(modules_constants_CLASS.SHADOW_ROOT_DIMENSION);
        return element;
    }
    forceStyles(element) {
        if (this.options && this.options.display && this.element.style.display !== this.options.display) {
            this.previousDisplay = this.element.style.display;
            console.warn(`Force 'display: ${this.options.display}' on measure element`, element);
            element.style.display = this.options.display;
        }
    }
    normalizeElement(element) {
        // TODO: remove after moving fully to modules
        if (!!element['host']) {
            let dimensionElement = Array.apply([], element.children)
                .find((child) => child.classList.contains(modules_constants_CLASS.SHADOW_ROOT_DIMENSION));
            if (!dimensionElement) {
                dimensionElement = this.createShadowDimensions();
                element.appendChild(dimensionElement);
            }
            return dimensionElement;
        }
        return element;
    }
    restorePreviousStyle(element) {
        if (this.previousDisplay) {
            element.style.display = this.previousDisplay;
            this.previousDisplay = undefined;
        }
    }
    getInfo(element) {
        element = this.normalizeElement(element);
        // ToDo: generic fix needed for none block displays
        if (element.tagName !== 'VUI-FOOTER' && element.tagName !== 'VUI-HEADER') {
            this.forceStyles(element);
        }
        let result = {
            width: element.clientWidth,
            height: element.getBoundingClientRect().height
        };
        this.restorePreviousStyle(element);
        return result;
    }
    reload() {
        this.compute();
    }
    getHeight() {
        return this.info.height;
    }
    getWidth() {
        return this.info.width;
    }
    getElement() {
        return this.normalizeElement(this.element);
    }
}
//# sourceMappingURL=dimension.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/scroll.js



class scroll_UtilsScroll {
    static getComputedSize() {
        return scroll_UtilsScroll.values.computedScrollSize;
    }
    static computeSize(container, force = false) {
        if (!scroll_UtilsScroll.values.computedScrollSize || force) {
            scroll_UtilsScroll.recalculateSize(container);
        }
        return scroll_UtilsScroll.values.computedScrollSize;
    }
    static recalculateSize(container) {
        let measureWrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.SCROLL_MEASURE_WRAPPER]);
        container.appendChild(measureWrapper);
        let dimensions = new dimension_Dimension(measureWrapper, { element: modules_constants_ELEMENT.DIV, classList: [modules_constants_CLASS.SCROLL_MEASURE] });
        container.removeChild(measureWrapper);
        scroll_UtilsScroll.values.computedScrollSize = SIZE.SCROLL_MEASURE_WRAPPER - dimensions.getWidth();
    }
}
scroll_UtilsScroll.values = {
    computedScrollSize: 0
};
//# sourceMappingURL=scroll.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/search.js


class search_UtilsSearch {
    static getColumnExpression() {
        return SEARCH_COLUMN_REGEXP;
    }
    static testColumnExpression(value) {
        return search_UtilsSearch.getColumnExpression().test(value);
    }
    static getColumnSearchMatches(value) {
        let matches = search_UtilsSearch.getColumnExpression().exec(value);
        return matches && matches.filter((match) => match !== matches.input) || [];
    }
    static valueInSource(source, searchedValue) {
        return source && source.indexOf(searchedValue) !== -1;
    }
    static hasMatchingLabel(column, label) {
        if (!column.label || !label) {
            return false;
        }
        return column.label.toLowerCase() === label.toLowerCase();
    }
    static findColumnRecursiveByLabel(label, columns = []) {
        let column;
        for (let i = 0; i < columns.length; i += 1) {
            if (this.hasMatchingLabel(columns[i], label)) {
                return columns[i];
            }
            else if (Array.isArray(columns[i].columns)) {
                column = columns_UtilsColumns.findColumnRecursive(label, columns[i].columns);
            }
            if (column) {
                break;
            }
        }
        return column;
    }
    static getSearchedColumnsConfig(label, columns) {
        let omittedGroupCount = 0;
        let root;
        let column;
        for (let visibleColumn of columns) {
            let hasMatchingLabel = search_UtilsSearch.hasMatchingLabel(visibleColumn, label);
            root = visibleColumn;
            if (hasMatchingLabel) {
                column = visibleColumn;
                break;
            }
            if (!columns_UtilsColumns.isColumnLeaf(visibleColumn)) {
                column = search_UtilsSearch.findColumnRecursiveByLabel(label, visibleColumn.columns);
                if (column) {
                    break;
                }
                omittedGroupCount++;
            }
        }
        return { omittedGroupCount, root, column };
    }
}
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/sort.js

class sort_UtilsSort {
    static findIndex(state, columnId) {
        return state.findIndex((column) => column.columnId === columnId);
    }
    static getOrderFromState(state, columnId, order) {
        let index = sort_UtilsSort.findIndex(state, columnId);
        if (index !== -1) {
            return state[index].order;
        }
        return order;
    }
    static getToggledOrder(currentOrder) {
        if (currentOrder === constants_ASC) {
            return constants_DESC;
        }
        else if (currentOrder === constants_DESC) {
            return constants_ASC;
        }
        return DEFAULT.SORT;
    }
    static getToggledOrderFromState(state, columnId) {
        return sort_UtilsSort.getToggledOrder(sort_UtilsSort.getOrderFromState(state, columnId));
    }
}
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/utils/state.js

class state_UtilsState {
    constructor(eventBus) {
        this.eventBus = eventBus;
    }
    static changed(currentState, newState, path, callback) {
        let result = false;
        if (currentState !== newState) {
            result = !path.some((currentValue) => {
                currentState = currentState && currentState[currentValue];
                newState = newState && newState[currentValue];
                return currentState === newState;
            });
        }
        if (result && callback) {
            callback();
        }
        return result;
    }
    fireEventConditionally(currentState, newState, eventName, paths) {
        let isChanged = paths.some((path) => state_UtilsState.changed(currentState, newState, path));
        if (isChanged) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER);
        }
        return isChanged;
    }
}
//# sourceMappingURL=state.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/summary.js







class summary_UtilsSummary {
    static hasAllValues(columns, aggregations = {}) {
        return Object.keys(aggregations).every((columnId) => {
            if (!columns.getColumnById(columnId, false).visible) {
                return true;
            }
            return !Object.keys(aggregations[columnId]).find((type) => aggregations[columnId][type] === '');
        });
    }
    static getTooltipContent(eventBus, members, columnId, aggregations) {
        let aggrList = utilities_dom_UtilitiesDOM.create(VUIELEMENT.SELECT_LIST);
        aggrList.options = aggregations.map(({ type, value }, idx) => {
            return `${columnId + idx}:${translation_Translation.translate(type)} ${value}`;
        }).join(',');
        eventBus.join(eventsList_EVENTS.SCROLL.SUMMARY, (params) => {
            aggrList.selected = params.columnId + members.get(params.columnId).selected;
        });
        aggrList.selected = columnId + members.get(columnId).selected;
        return aggrList;
    }
    static hasAllItems(state, aggregations = {}) {
        let hasAll = true;
        let summaryState = state.summary.state !== undefined ? state.summary.state : [];
        for (let summary of summaryState) {
            let aggregation = aggregations[summary.columnId];
            if (!aggregation || Object.keys(aggregation).length !== summary.aggregation.length) {
                hasAll = false;
                break;
            }
        }
        return hasAll;
    }
    static hasAggregation(state) {
        let summaryState = state.summary.state !== undefined ? state.summary.state : [];
        let nonRootColumnIds = columns_UtilsColumns.getAllNonRootColumnIds(state.columns.collection);
        return !summaryState.every((summary) => {
            if (nonRootColumnIds.indexOf(summary.columnId) !== -1) {
                let parentColumnId = columns_UtilsColumns
                    .findColumnParentRecursiveInState(summary.columnId, state.columns.collection).id;
                return state.group.groups.indexOf(parentColumnId) !== -1;
            }
            return state.group.groups.indexOf(summary.columnId) !== -1;
        });
    }
    static hasAnyGroupAggregation(state, columnId, rootColumn) {
        if (columnId === rootColumn.id && rootColumn.columns) {
            return false;
        }
        let summaryState = UtilsObject.getPropertyValue('summary.state', state.get()) || [];
        return summaryState.map((column) => column.columnId)
            .some((columnId) => !!columns_UtilsColumns.findColumnInColumns(columnId, rootColumn.columns, false));
    }
    static filterEmptyData(cell, rows, columnId, columnType) {
        return rows.map((row) => cell.getRawValue(row, columnId))
            .filter((cell) => {
            if (Array.isArray(cell) && !cell.length) {
                return false;
            }
            if (columnType === modules_constants_TYPE.CURRENCY) {
                return value_UtilsValue.hasCurrencyValue(cell);
            }
            return !!cell || cell === 0;
        });
    }
    static isColumnAggregated(state, columnId) {
        let isAggregated = false;
        let summaryState = UtilsObject.getPropertyValue('summary.state', state.get()) || [];
        for (let summary of summaryState) {
            if (summary.columnId === columnId) {
                isAggregated = true;
                break;
            }
        }
        return isAggregated;
    }
    static getSummaryForRolled(animation, columnsService, state, aggregations, ignoreAnimations = false) {
        let rolledSummary = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.GRID_GROUP_SUMMARY]);
        columnsService.getAllFlat().forEach((column) => {
            if (!aggregations[column.id]) {
                return void 0;
            }
            let aggregation = aggregations[column.id];
            let aggregationEl = utilities_dom_UtilitiesDOM.create(VUIELEMENT.AGGREGATION);
            let wrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, ['cell-summary-freeze']);
            aggregationEl.init((element) => {
                if (!ignoreAnimations) {
                    animation.wrapAnimations(element, state.summary.animationType, { columnId: column.id }, () => summary_UtilsSummary.getOrderedAggregations(column.id, state.summary.state, aggregation));
                }
            });
            aggregationEl.setAttribute('data', JSON.stringify({ aggregation, label: column.label }));
            wrapper.appendChild(aggregationEl);
            rolledSummary.appendChild(wrapper);
        });
        return rolledSummary;
    }
    static getOrderedAggregations(columnId, orders, aggregation = {}) {
        let order = Array.isArray(orders) && orders.length > 0 ?
            orders.find((summary) => summary.columnId === columnId).aggregation :
            Object.keys(aggregation).sort();
        return order.reduce((acc, type) => [
            ...acc,
            { type, value: aggregation[type] }
        ], []);
    }
    static prepareInitialAggregation(summary) {
        return summary.enabled ? summary.state.reduce((hashMap, item) => {
            hashMap[item.columnId] = Object.keys(item.aggregation)
                .reduce((aggregations, key) => (Object.assign({}, aggregations, { [item.aggregation[key]]: '' })), {});
            return hashMap;
        }, {}) : undefined;
    }
}
//# sourceMappingURL=summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/validation.action.js
class UtilsValidationAction {
    static createValidatedAction(args, validators = {}, action) {
        return (dispatch, getState) => {
            let argsWithState = Object.assign({}, { state: getState() }, args);
            let isValid = UtilsValidationAction.runValidators(validators, getState(), args);
            if (isValid) {
                let newVar = action && action(argsWithState) || argsWithState;
                return dispatch(newVar);
            }
            else {
                return void 0;
            }
        };
    }
    static runValidators(validators, state, args) {
        let isValid;
        isValid = Object.keys(validators).every((name) => {
            let validator = validators[name];
            return validator.every((fn) => {
                return fn(state, args[name]);
            });
        });
        return isValid;
    }
}
//# sourceMappingURL=validation.action.js.map
// EXTERNAL MODULE: ./dist-es/__vc-particles/vc-ajv/index.js
var vc_ajv = __webpack_require__(4);

// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-schemavalidator/lib/schema.validator.js

class schema_validator_SchemaValidator {
    constructor(_plotErrors = false) {
        this._plotErrors = _plotErrors;
        this.valid = true;
        this.collections = [];
        this.validator = new vc_ajv["a" /* AjvValidator */]({
            allErrors: true,
            schemaId: '$id',
            extendRefs: true
        });
    }
    addKeyword(key, definition) {
        this.validator.addKeyword(key, definition);
    }
    addCollection(schema, data) {
        this.collections.push({ schema, data });
    }
    validate() {
        this.collections.forEach((collection) => {
            if (!this.validator.validate(collection.schema, collection.data)) {
                this.listErrors(this.validator.errors);
                this.valid = false;
            }
        });
        return this.valid;
    }
    listErrors(errors) {
        console.error(`Schema errors: ${errors.length}`);
        if (this._plotErrors) {
            errors.forEach((error) => {
                console.warn(`${error.dataPath} => ${error.message}`);
            });
        }
    }
}
//# sourceMappingURL=schema.validator.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-schemavalidator/lib/schema.validation.js

class schema_validation_SchemaValidationService {
    constructor(_config) {
        this._config = _config;
        this.SCHEMA_ERRORS = 'There were schema errors';
    }
    validate() {
        try {
            this._validateSchemas();
        }
        catch (error) {
            return false;
        }
        return true;
    }
    _validateSchemas() {
        let schemaValidator = new schema_validator_SchemaValidator(this._config.consoleOutput);
        this._config.sets.forEach((set) => {
            schemaValidator.addCollection(set.schema, set.data);
        });
        if (!schemaValidator.validate()) {
            throw this.SCHEMA_ERRORS;
        }
    }
}
//# sourceMappingURL=schema.validation.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-schemavalidator/index.js

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/schema/metadata.js
/* tslint:disable */
/* harmony default export */ var schema_metadata = ({
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AnimationType": {
            "enum": [
                "auto",
                "none",
                "once"
            ],
            "type": "string"
        },
        "ColumnGroupPosition": {
            "enum": [
                "horizontal",
                "vertical"
            ],
            "type": "string"
        },
        "ColumnGroupStyle": {
            "enum": [
                "align-center",
                "align-left",
                "align-right",
                "currency",
                "subtitle"
            ],
            "type": "string"
        },
        "IConfig": {
            "properties": {
                "endpoints": {
                    "$ref": "#/definitions/IConfigEndpoints"
                },
                "extensions": {
                    "$ref": "#/definitions/IConfigExtensions"
                },
                "footer": {
                    "$ref": "#/definitions/IConfigOptionsFooter"
                },
                "header": {
                    "$ref": "#/definitions/IConfigOptionsHeader"
                },
                "height": {
                    "type": "number"
                },
                "language": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/IConfigOptions"
                },
                "theme": {
                    "$ref": "#/definitions/IConfigTheme"
                }
            },
            "type": "object"
        },
        "IConfigEndPointDictionaries": {
            "additionalProperties": {
                "type": "string"
            },
            "type": "object"
        },
        "IConfigEndpoints": {
            "properties": {
                "dictionaries": {
                    "$ref": "#/definitions/IConfigEndPointDictionaries"
                },
                "rows": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IConfigExtensions": {
            "properties": {
                "columns": {
                    "$ref": "#/definitions/IConfigExtensionsColumns"
                },
                "rows": {
                    "$ref": "#/definitions/IConfigExtensionsRows"
                }
            },
            "type": "object"
        },
        "IConfigExtensionsAction": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "label",
                "name"
            ],
            "type": "object"
        },
        "IConfigExtensionsColumn": {
            "properties": {
                "actions": {
                    "items": {
                        "$ref": "#/definitions/IConfigExtensionsAction"
                    },
                    "type": "array"
                },
                "aggregation": {
                    "items": {
                        "enum": [
                            "avg",
                            "count",
                            "max",
                            "median",
                            "min",
                            "mode",
                            "range",
                            "sum"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "collapsable": {
                    "type": "boolean"
                },
                "collapsed": {
                    "type": "boolean"
                },
                "coloring": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "config": {
                    "$ref": "#/definitions/IConfigExtensionsColumnConfig"
                },
                "context": {
                    "type": "boolean"
                },
                "dictionary": {
                    "type": "string"
                },
                "editable": {
                    "type": "boolean"
                },
                "format": {
                    "type": "string"
                },
                "group": {
                    "$ref": "#/definitions/IConfigExtensionsColumnGroup"
                },
                "intl": {
                    "type": "string"
                },
                "merge": {
                    "type": "boolean"
                },
                "showValue": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IConfigExtensionsColumnConfig": {
            "properties": {
                "from": {
                    "type": "number"
                },
                "to": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "IConfigExtensionsColumnGroup": {
            "properties": {
                "position": {
                    "$ref": "#/definitions/ColumnGroupPosition"
                },
                "style": {
                    "$ref": "#/definitions/ColumnGroupStyle"
                }
            },
            "type": "object"
        },
        "IConfigExtensionsColumns": {
            "additionalProperties": {
                "$ref": "#/definitions/IConfigExtensionsColumn"
            },
            "type": "object"
        },
        "IConfigExtensionsRowFormat": {
            "properties": {
                "columnIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "intl": {
                    "type": "string"
                },
                "rows": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "columnIds",
                "intl",
                "rows"
            ],
            "type": "object"
        },
        "IConfigExtensionsRows": {
            "properties": {
                "actions": {
                    "$ref": "#/definitions/IConfigExtensionsRowsActions"
                },
                "disabled": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "format": {
                    "items": {
                        "$ref": "#/definitions/IConfigExtensionsRowFormat"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IConfigExtensionsRowsActions": {
            "additionalProperties": {
                "items": {
                    "$ref": "#/definitions/IConfigExtensionsAction"
                },
                "type": "array"
            },
            "type": "object"
        },
        "IConfigOptions": {
            "properties": {
                "debug": {
                    "$ref": "#/definitions/IConfigOptionsItem"
                },
                "editable": {
                    "$ref": "#/definitions/IConfigOptionsItem"
                },
                "filter": {
                    "$ref": "#/definitions/IConfigOptionsItemFilter"
                },
                "freezeColumns": {
                    "$ref": "#/definitions/IConfigOptionsItemColumns"
                },
                "freezeRows": {
                    "$ref": "#/definitions/IConfigOptionsItemColumns"
                },
                "fullscreen": {
                    "$ref": "#/definitions/IConfigOptionsFullscreen"
                },
                "group": {
                    "$ref": "#/definitions/IConfigOptionsItemColumns"
                },
                "infinite": {
                    "$ref": "#/definitions/IConfigOptionsItem"
                },
                "mark": {
                    "$ref": "#/definitions/IConfigOptionsMark"
                },
                "order": {
                    "$ref": "#/definitions/IConfigOptionsItemColumns"
                },
                "resize": {
                    "$ref": "#/definitions/IConfigOptionsItem"
                },
                "search": {
                    "$ref": "#/definitions/IConfigOptionsItemSearch"
                },
                "size": {
                    "$ref": "#/definitions/IConfigOptionsItemSize"
                },
                "sort": {
                    "$ref": "#/definitions/IConfigOptionsItemSort"
                },
                "summary": {
                    "$ref": "#/definitions/IConfigOptionsItemSummary"
                },
                "toast": {
                    "$ref": "#/definitions/IConfigOptionsItem"
                }
            },
            "type": "object"
        },
        "IConfigOptionsFooter": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "fixed": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsFullscreen": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsHeader": {
            "properties": {
                "bar": {
                    "$ref": "#/definitions/IConfigOptionsHeaderBar"
                },
                "enabled": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IConfigOptionsHeaderBar": {
            "properties": {
                "filter": {
                    "$ref": "#/definitions/IConfigOptionsHeaderBarFilter"
                },
                "group": {
                    "$ref": "#/definitions/IConfigOptionsHeaderBarGroup"
                }
            },
            "type": "object"
        },
        "IConfigOptionsHeaderBarFilter": {
            "properties": {
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsHeaderBarGroup": {
            "properties": {
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItem": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemColumns": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemFilter": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/IDataFilterSingle"
                        },
                        {
                            "$ref": "#/definitions/IDataFilterGroup"
                        }
                    ]
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemSearch": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/IStateSearch"
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemSize": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "$ref": "#/definitions/IStateSize"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemSort": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "items": {
                        "$ref": "#/definitions/IStateSortColumn"
                    },
                    "type": "array"
                },
                "state": {
                    "items": {
                        "$ref": "#/definitions/IStateSortColumn"
                    },
                    "type": "array"
                }
            },
            "required": [
                "enabled"
            ],
            "type": "object"
        },
        "IConfigOptionsItemSummary": {
            "properties": {
                "animationType": {
                    "$ref": "#/definitions/AnimationType"
                },
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "items": {
                        "$ref": "#/definitions/IConfigOptionsItemSummaryAggregation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IConfigOptionsItemSummaryAggregation": {
            "properties": {
                "aggregation": {
                    "items": {
                        "enum": [
                            "avg",
                            "count",
                            "max",
                            "median",
                            "min",
                            "mode",
                            "range",
                            "sum"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "columnId": {
                    "type": "string"
                }
            },
            "required": [
                "aggregation",
                "columnId"
            ],
            "type": "object"
        },
        "IConfigOptionsMark": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "state": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IConfigTheme": {
            "properties": {
                "layout": {
                    "$ref": "#/definitions/ThemeLayout"
                },
                "styling": {
                    "$ref": "#/definitions/ThemeStyling"
                }
            },
            "required": [
                "layout",
                "styling"
            ],
            "type": "object"
        },
        "IDataCell": {
            "type": "object"
        },
        "IDataFilterGroup": {
            "properties": {
                "filters": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/IDataFilterSingle"
                            },
                            {
                                "$ref": "#/definitions/IDataFilterGroup"
                            }
                        ]
                    },
                    "type": "array"
                },
                "negative": {
                    "type": "boolean"
                },
                "operator": {
                    "$ref": "#/definitions/IDataFilterGroupOperators"
                }
            },
            "required": [
                "filters",
                "operator"
            ],
            "type": "object"
        },
        "IDataFilterGroupOperators": {
            "enum": [
                "AND",
                "OR"
            ],
            "type": "string"
        },
        "IDataFilterSingle": {
            "properties": {
                "columnId": {
                    "type": "string"
                },
                "negative": {
                    "type": "boolean"
                },
                "operator": {
                    "$ref": "#/definitions/IDataFilterSingleOperators"
                },
                "value": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/IDataCell"
                        },
                        {
                            "type": [
                                "string",
                                "number",
                                "boolean"
                            ]
                        }
                    ]
                },
                "value2": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/IDataCell"
                        },
                        {
                            "type": [
                                "string",
                                "number",
                                "boolean"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "columnId",
                "operator",
                "value"
            ],
            "type": "object"
        },
        "IDataFilterSingleOperators": {
            "enum": [
                "AFTER",
                "BEFORE",
                "BETWEEN",
                "CHECKS",
                "ENDS",
                "EQUALS",
                "HAS",
                "STARTS"
            ],
            "type": "string"
        },
        "IMetadataColumn": {
            "properties": {
                "columns": {
                    "items": {
                        "$ref": "#/definitions/IMetadataColumn"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "required": [
                "id",
                "type"
            ],
            "type": "object"
        },
        "IStateSearch": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                }
            },
            "required": [
                "enabled"
            ],
            "type": "object"
        },
        "IStateSize": {
            "properties": {
                "column": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "required": [
                "column",
                "value"
            ],
            "type": "object"
        },
        "IStateSortColumn": {
            "properties": {
                "columnId": {
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/SortType"
                }
            },
            "required": [
                "columnId",
                "order"
            ],
            "type": "object"
        },
        "SortType": {
            "enum": [
                "asc",
                "desc"
            ],
            "type": "string"
        },
        "ThemeLayout": {
            "enum": [
                "compact",
                "default"
            ],
            "type": "string"
        },
        "ThemeStyling": {
            "properties": {
                "current": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "columns": {
            "items": {
                "$ref": "#/definitions/IMetadataColumn"
            },
            "type": "array"
        },
        "config": {
            "$ref": "#/definitions/IConfig"
        }
    },
    "required": [
        "columns"
    ],
    "type": "object"
});
//# sourceMappingURL=metadata.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/state.js

const state_initialState = {
    columns: {
        collapsed: {
            product: false
        },
        collection: {},
        order: {
            enabled: false,
            state: []
        },
        freeze: {
            enabled: false,
            state: []
        },
        width: {}
    },
    debug: {
        enabled: false
    },
    edit: {
        added: [],
        cells: [],
        disabled: [],
        enabled: false,
        invalid: [],
        removed: []
    },
    events: {
        map: {}
    },
    filter: {
        enabled: false,
        state: null
    },
    footer: {
        pagination: {
            isNextPage: false,
            isPrevPage: false,
            visible: false
        },
        visible: false
    },
    format: {
        state: []
    },
    freeze: {
        enabled: false,
        state: []
    },
    fullscreen: {
        enabled: false,
        visible: false
    },
    group: {
        enabled: false,
        groups: []
    },
    groupResize: {},
    groupVisibility: {},
    header: {
        search: {
            enabled: false,
            value: '',
            visible: false
        },
        title: {
            allRows: 0,
            initialRows: 0,
            title: '',
            visible: false
        },
        toolbar: {
            bar: {
                filter: {
                    visible: false
                },
                group: {
                    visible: false
                },
                sort: {
                    visible: false
                }
            },
            buttons: [],
            settings: {
                disabled: false
            },
            visible: false
        },
        visible: false
    },
    infinite: {
        enabled: false
    },
    mark: {
        enabled: false,
        isAllMarked: false,
        state: []
    },
    page: {
        currentPage: 1,
        itemPerPage: 10,
        numberOfItems: 0,
        numberOfPages: 1
    },
    resize: {
        enabled: false
    },
    scroll: {
        deltaX: 0,
        deltaY: 0,
        left: 0,
        top: 0
    },
    sort: {
        enabled: false,
        groups: [],
        state: []
    },
    summary: {
        animationType: DEFAULT.SUMMARY_ANIMATION_TYPE,
        enabled: false,
        visible: false,
        length: 0,
        state: [],
        total: {}
    },
    theme: {
        styling: {
            current: DEFAULT.THEME.CURRENT,
            path: DEFAULT.THEME.PATH,
        },
        layout: {
            value: DEFAULT.THEME.LAYOUT
        }
    },
    toast: {
        enabled: false
    },
    translation: {
        language: DEFAULT.LANGUAGE
    }
};
const initialParams = {
    metadata: {
        columns: [],
        config: {}
    }
};
//# sourceMappingURL=state.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/validation.metadata.js







class validation_metadata_UtilsValidationMetadata {
    constructor() {
        this.consoleOutput = true;
        // private _reduceColumnProperties(properties: ISchemaItemProperties, column: IDataColumn): ISchemaItemProperties {
        // properties[column.id] = Object.assign({}, SchemaDataTypes.properties[column.type], {
        //     [SCHEMA_KEYWORD.VALIDATE_DATA_CELL]: true
        // });
        //
        // if (Array.isArray(column.columns)) {
        //     for (let childColumn of column.columns) {
        //         this._reduceColumnProperties(properties, childColumn);
        //     }
        // }
        // return properties;
        // }
        // private getSchemaWrappedWithRowValidation(
        //     metadata: IMetadata,
        //     schemaValidator?: ICoreSchemaValidator
        // ): ICoreSchemaValidatorCollectionSchema {
        // let dataValidation = new DataValidation();
        //
        // dataValidation.initialize(metadata);
        //
        // schemaValidator.addKeyword(SCHEMA_KEYWORD.VALIDATE_DATA_CELL, {
        //     schema: false,
        // validate: (cellValue: CellValue, datapath: string, dataRow: IDatasetRow, columnId: ColumnId): boolean => {
        //         return !dataRow.hasOwnProperty(columnId) || dataValidation.validateData(columnId, cellValue);
        //     }
        // });
        //
        // let extendedMetadata = Object.assign({}, SchemaMetadata, {
        //     definitions: {
        //         ...SchemaMetadata.definitions,
        //         ...SchemaDataTypes.definitions
        //     },
        //     properties: {
        //         ...SchemaMetadata.properties,
        //         rows: {
        //             ...(<JSONSchema7>SchemaMetadata.properties.rows),
        //             items: {
        //                 ...(<JSONSchema7>(<JSONSchema7>SchemaMetadata.properties.rows).items),
        //                 properties: metadata.columns.reduce(this._reduceColumnProperties.bind(this), {})
        //             }
        //         }
        //     }
        // });
        //
        // // removes CellValue type reference in order to not throw multiple errors on type validation
        // delete extendedMetadata.properties.rows.items.$ref;
        //
        //     return metadata;
        // }
    }
    validate(metadata, grid) {
        if (!metadata) {
            console.error(`${SCHEMA_ERROR.OUTPUT}:${SCHEMA_ERROR.MISSING_METADATA}`);
            this._appendGridWithNoLoadInfo(grid);
            return false;
        }
        let listedErrors = [
            this.validateSchema(metadata),
            this.validateColumnsDuplicates(metadata),
            this.validateGroupColumns(metadata),
            this.validateColumnsCollapsed(metadata),
            this.validateSort(metadata),
            this.validateGroups(metadata),
            this.validateSummary(metadata)
        ].reduce((acc, error) => `${acc}${error ? this._separateError(error) : ''}`, '');
        if (!listedErrors) {
            return true;
        }
        console.error(`${SCHEMA_ERROR.OUTPUT}: ${listedErrors}`);
        this._appendGridWithNoLoadInfo(grid);
        return false;
    }
    _separateError(error) {
        return `\n- ${error}`;
    }
    _formatError(title, issues) {
        return issues.length ? `\n\t* ${title}: ${issues.join(modules_constants_SEPARATOR.JOINED_ARRAY)}` : '';
    }
    _getSummaryColumnsError(metadata) {
        let columns = UtilsObject.getPropertyValue('columns', metadata, []);
        let state = metadata.config.options.summary.state.map((summary) => summary.columnId);
        let invalid = this._formatError(SCHEMA_ERROR.SUMMARY_INCORRECT, state.filter((columnId) => !columns_UtilsColumns.isValidLeaf(columns, columnId, true)));
        let duplicates = this._formatError(SCHEMA_ERROR.SUMMARY_DUPLICATE, UtilitiesArray.getDuplicates(state));
        return `${invalid}${duplicates}`;
    }
    _getInvalidAggregationTypes(metadata) {
        let invalid = [];
        metadata.config.options.summary.state.forEach((summary) => {
            let column = columns_UtilsColumns.findColumnInColumns(summary.columnId, metadata.columns, false);
            if (column) {
                summary.aggregation.forEach((aggregationType) => {
                    if (SUMMARY_RESTRICTION[column.type].indexOf(aggregationType) === -1) {
                        invalid.push(`${summary.columnId}:${aggregationType}`);
                    }
                });
            }
        });
        return invalid;
    }
    _appendGridWithNoLoadInfo(grid) {
        let errorWrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ERROR_WRAPPER]);
        errorWrapper.innerHTML = SCHEMA_ERROR.GRID_WONT_LOAD;
        grid.appendChild(errorWrapper);
    }
    _validateCollapsableRecursive(columns, metadata) {
        return !columns.every((column) => {
            let valid = false;
            if (!column.columns) {
                return UtilsObject.getPropertyValue(`config.extensions.columns.${column.id}.collapsable`, metadata);
            }
            else {
                valid = this._validateCollapsableRecursive(column.columns, metadata);
            }
            return valid;
        });
    }
    validateSchema(metadata) {
        let schemaValidator = new schema_validation_SchemaValidationService({
            sets: [{ data: metadata, schema: schema_metadata }],
            consoleOutput: this.consoleOutput
        });
        return !schemaValidator.validate() ? SCHEMA_ERROR.SCHEMA_ERRORS : null;
    }
    validateColumnsDuplicates(metadata) {
        let columnIds = columns_UtilsColumns.getIdFromData(UtilsObject.getPropertyValue('columns', metadata));
        let dupes = UtilitiesArray.getDuplicates(columnIds);
        let errorMessage = this._formatError(SCHEMA_ERROR.COLUMN_DUPLICATE, dupes);
        return errorMessage ? `${SCHEMA_ERROR.INCORRECT_COLUMN}: ${errorMessage}` : null;
    }
    validateColumnsCollapsed(metadata) {
        let invalidColumns = [];
        let columns = UtilsObject.getPropertyValue('columns', metadata, []);
        columns.forEach((column) => {
            if (!Array.isArray(column.columns)) {
                return void 0;
            }
            let collapsed = UtilsObject.getPropertyValue(`config.extensions.columns.${column.id}.collapsed`, metadata);
            if (typeof collapsed !== 'undefined') {
                if (!this._validateCollapsableRecursive(column.columns, metadata)) {
                    invalidColumns.push(column.id);
                }
            }
        });
        return invalidColumns.length
            ? `${SCHEMA_ERROR.INCORRECT_COLLAPSABLE}: ${invalidColumns.join(modules_constants_SEPARATOR.JOINED_ARRAY)}`
            : null;
    }
    validateGroupColumns(metadata) {
        let invalidColumns = [];
        let columns = (UtilsObject.getPropertyValue('columns', metadata) || []);
        columns.forEach((column) => {
            if (column.type !== modules_constants_TYPE.GROUP) {
                return void 0;
            }
            if (!Array.isArray(column.columns)) {
                invalidColumns.push(column.id);
                return void 0;
            }
        });
        return invalidColumns.length
            ? `${SCHEMA_ERROR.INCORRECT_GROUP_COLUMNS}: ${invalidColumns.join(modules_constants_SEPARATOR.JOINED_ARRAY)}`
            : null;
    }
    validateGroups(metadata) {
        let columnIds = columns_UtilsColumns.getIdFromData(UtilsObject.getPropertyValue('columns', metadata));
        let { enabled = state_initialState.group.enabled, state } = (UtilsObject.getPropertyValue('config.options.group', metadata, {}));
        if (!enabled) {
            return null;
        }
        if (!Array.isArray(state)) {
            return `${SCHEMA_ERROR.INCORRECT_GROUP}: ${SCHEMA_ERROR.GROUP_MISSING}`;
        }
        let wrongCol = this._formatError(SCHEMA_ERROR.GROUP_INCORRECT, state.filter((columnId) => columnIds.indexOf(columnId) === -1));
        let dupedCol = this._formatError(SCHEMA_ERROR.GROUP_DUPLICATE, UtilitiesArray.getDuplicates(state));
        let joinedMessage = `${wrongCol}${dupedCol}`;
        return joinedMessage ? `${SCHEMA_ERROR.INCORRECT_GROUP}: ${joinedMessage}` : null;
    }
    validateSort(metadata) {
        let columns = UtilsObject.getPropertyValue('columns', metadata);
        let groups = UtilsObject.getPropertyValue('config.options.group.state', metadata, []);
        let sortGroups = UtilsObject.getPropertyValue('config.options.sort.groups', metadata, []);
        let sortCols = UtilsObject.getPropertyValue('config.options.sort.state', metadata, []);
        let sort = [...sortGroups, ...sortCols];
        if (!UtilsObject.getPropertyValue('config.options.sort.enabled', metadata, state_initialState.sort.enabled)) {
            return null;
        }
        let wrongCol = this._formatError(SCHEMA_ERROR.SORT_INCORRECT, columns_UtilsColumns.getColumnIdFromData(sort.filter((col) => !columns_UtilsColumns.isValidLeaf(columns, col.columnId, true))));
        let dupedCol = this._formatError(SCHEMA_ERROR.SORT_DUPLICATE, UtilitiesArray.getDuplicates(columns_UtilsColumns.getColumnIdFromData(sort)));
        let missingSort = this._formatError(SCHEMA_ERROR.SORT_MISSING, groups.filter((id) => sortGroups.findIndex((col) => col.columnId === id) === -1));
        let missingGroup = this._formatError(SCHEMA_ERROR.GROUP_MISSING, columns_UtilsColumns.getColumnIdFromData(sortGroups.filter((col) => groups.indexOf(col.columnId) === -1)));
        let joinedMessage = `${wrongCol}${dupedCol}${missingSort}${missingGroup}`;
        return joinedMessage ? `${SCHEMA_ERROR.INCORRECT_SORT}: ${joinedMessage}` : null;
    }
    validateSummary(metadata) {
        let { enabled = state_initialState.summary.enabled, state } = (UtilsObject.getPropertyValue('config.options.summary', metadata, {}));
        if (!enabled) {
            return null;
        }
        if (!Array.isArray(state)) {
            return `${SCHEMA_ERROR.INCORRECT_SUMMARY}: ${SCHEMA_ERROR.SUMMARY_MISSING}`;
        }
        let invalidColumns = this._getSummaryColumnsError(metadata);
        let invalidTypes = this._formatError(SCHEMA_ERROR.SUMMARY_TYPE, this._getInvalidAggregationTypes(metadata));
        let joinedMessage = `${invalidColumns}${invalidTypes}`;
        return joinedMessage ? `${SCHEMA_ERROR.INCORRECT_SUMMARY}: ${joinedMessage}` : null;
    }
}
//# sourceMappingURL=validation.metadata.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/permission.js

function getState(property, state) {
    property.split('.').forEach((prop) => {
        state = state[prop];
        if (typeof state === 'undefined') {
            console.warn(`Could not find "${prop}" in "${property}".`);
            return void 0;
        }
    });
    return state;
}
function check(property, descriptor, value) {
    let method = descriptor.value;
    descriptor.value = function (...args) {
        // TODO: since we cannot easily remove state from here, we should find a way for typescript
        // TODO: to throw compilation errors when class doesn't have property of state service
        let state = this.services ? this.services.state : this.state;
        if (!state || !(state instanceof state_State)) {
            console.warn(`Decorator used in "${this.constructor.name}" does not have access to state service.`);
            return void 0;
        }
        let stateProperty = getState(property, state.get());
        if (value === stateProperty) {
            return method.apply(this, args);
        }
    };
    return descriptor;
}
function permission_freezeRows(target, propertyKey, descriptor) {
    return check('freeze.enabled', descriptor, true);
}
function freezeColumns(target, propertyKey, descriptor) {
    return check('columns.freeze.enabled', descriptor, true);
}
function permission_order(target, propertyKey, descriptor) {
    return check('columns.order.enabled', descriptor, true);
}
function permission_editable(target, propertyKey, descriptor) {
    return check('edit.enabled', descriptor, true);
}
function resize(target, propertyKey, descriptor) {
    return check('resize.enabled', descriptor, true);
}
function permission_sort(target, propertyKey, descriptor) {
    return check('sort.enabled', descriptor, true);
}
function permission_group(target, propertyKey, descriptor) {
    return check('group.enabled', descriptor, true);
}
function permission_filter(target, propertyKey, descriptor) {
    return check('filter.enabled', descriptor, true);
}
function permission_search(target, propertyKey, descriptor) {
    return check('header.search.enabled', descriptor, true);
}
function permission_infinite(target, propertyKey, descriptor) {
    return check('infinite.enabled', descriptor, true);
}
function permission_mark(target, propertyKey, descriptor) {
    return check('mark.enabled', descriptor, true);
}
function permission_summary(target, propertyKey, descriptor) {
    return check('summary.enabled', descriptor, true);
}
function fullscreen(target, propertyKey, descriptor) {
    return check('fullscreen.enabled', descriptor, true);
}
function nonFreezeColumns(target, propertyKey, descriptor) {
    return check('columns.freeze.enabled', descriptor, false);
}
function checkEnabled(enabled, name, fn) {
    return enabled ? fn() : console.warn(`Option ${name} is disabled.`);
}


//# sourceMappingURL=permission.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/utils.js




















//# sourceMappingURL=utils.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/footer/footer.changed.js
var footer_changed_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var footer_changed_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let footer_changed_FooterChanged = class FooterChanged {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._enableChangedBind = this._enableChanged.bind(this);
        this._recalcEditedCountBind = this._recalcEditedCount.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        this._hostXRef = xRefComponent;
        this._hostXRef.changedLabel = translation_Translation.translate(TRANSLATION.KEYS.CHANGED);
        this.eventBus.join(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._enableChangedBind);
        this._hostXRef.visible = false;
        if (this.state.get().edit.enabled) {
            this._connect();
        }
    }
    _enableChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._enableChangedBind);
        this._hostXRef.visible = false;
    }
    _recalcEditedCount() {
        let state = this.state.get();
        let edited = UtilsObject.getPropertyValue('edit.cells.length', state);
        if (state.edit.enabled) {
            this._hostXRef.changedVisible = true;
            this._hostXRef.changedCount = edited;
        }
        else {
            this._hostXRef.changedVisible = false;
        }
    }
    _connect() {
        this._recalcEditedCount();
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, this._recalcEditedCountBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.RESET, this._recalcEditedCountBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.VALUE, this._recalcEditedCountBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.RESET, this._recalcEditedCountBind);
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, this._recalcEditedCountBind);
    }
    _disconnect() {
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, this._recalcEditedCountBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.CELL.RESET, this._recalcEditedCountBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.VALUE, this._recalcEditedCountBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.RESET, this._recalcEditedCountBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.DATA.SAVE, this._recalcEditedCountBind);
        this._hostXRef.changedVisible = false;
    }
};
footer_changed_FooterChanged = footer_changed_decorate([
    Injectable(),
    footer_changed_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        state_State])
], footer_changed_FooterChanged);

//# sourceMappingURL=footer.changed.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/footer/footer.marked.js
var footer_marked_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var footer_marked_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let footer_marked_FooterMarked = class FooterMarked {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._markChangedBind = this._markChanged.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        let { mark } = this.state.get();
        this._hostXRef = xRefComponent;
        this._hostXRef.markedVisible = mark.enabled;
        if (mark.enabled) {
            this._hostXRef.markedLabel = translation_Translation.translate(TRANSLATION.KEYS.SELECTED);
            this.eventBus.join(eventsList_EVENTS.DONE.HEADER.MARK, this._markChangedBind);
        }
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.DONE.HEADER.MARK, this._markChangedBind);
        this._hostXRef.visible = false;
    }
    _markChanged({ marked }) {
        this._hostXRef.markedCount = marked.length;
    }
};
footer_marked_FooterMarked = footer_marked_decorate([
    Injectable(),
    footer_marked_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], footer_marked_FooterMarked);

//# sourceMappingURL=footer.marked.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/footer/footer.pagination.js
var footer_pagination_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var footer_pagination_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let footer_pagination_FooterPagination = class FooterPagination {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._prevClickedBind = this._prevClicked.bind(this);
        this._nextClickedBind = this._nextClicked.bind(this);
        this._itemsPerPageChangedBind = this._itemsPerPageChanged.bind(this);
        this._viewRefreshBind = this._viewRefresh.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        if (!this.state.get().infinite.enabled) {
            this._hostXRef.paginationVisible = true;
            this._hostXRef.paginationNext = translation_Translation.translate(TRANSLATION.KEYS.NEXT);
            this._hostXRef.paginationPrev = translation_Translation.translate(TRANSLATION.KEYS.PREV);
            this._hostXRef.addEventListener(modules_constants_EVENT.PREVCLICKED, this._prevClickedBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.ITEMSCHANGED, this._itemsPerPageChangedBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.NEXTCLICKED, this._nextClickedBind);
            this.eventBus.join(eventsList_EVENTS.DONE.VIEW.PAGE, this._viewRefreshBind);
        }
    }
    disconnect() {
        this._hostXRef.removeEventListener(modules_constants_EVENT.PREVCLICKED, this._prevClickedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.ITEMSCHANGED, this._itemsPerPageChangedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.NEXTCLICKED, this._nextClickedBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.VIEW.PAGE, this._viewRefreshBind);
        this._hostXRef.visible = false;
    }
    _prevClicked() {
        let page = Math.max(1, this._hostXRef.paginationCurrent - 1);
        this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.PAGE, { page });
    }
    _nextClicked() {
        let page = Math.min(this._hostXRef.paginationPages, this._hostXRef.paginationCurrent + 1);
        this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.PAGE, { page });
    }
    _itemsPerPageChanged(e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.CHANGE_PAGE, e.detail);
    }
    _viewRefresh(state) {
        this._hostXRef.paginationPages = state.numberOfPages;
        this._hostXRef.paginationCurrent = state.currentPage;
        this._hostXRef.paginationItems = state.itemPerPage;
    }
};
footer_pagination_FooterPagination = footer_pagination_decorate([
    Injectable(),
    footer_pagination_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], footer_pagination_FooterPagination);

//# sourceMappingURL=footer.pagination.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/footer.js
var footer_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var footer_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let footer_PluginFooter = class PluginFooter {
    constructor(eventBus, footerMarked, footerChanged, footerPagination, state) {
        this.eventBus = eventBus;
        this.footerMarked = footerMarked;
        this.footerChanged = footerChanged;
        this.footerPagination = footerPagination;
        this.state = state;
        this._visibleChangedBind = this._visibleChanged.bind(this);
    }
    _visibleChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this._additionalDropXRefs = additionalDropXRefs;
        this.eventBus.join(eventsList_EVENTS.API.VIEW.FOOTER.SET_VISIBLE, this._visibleChangedBind);
        if (this.state.get().footer.visible) {
            this._connect();
        }
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.FOOTER.SET_VISIBLE, this._visibleChangedBind);
    }
    _connect() {
        this.footerMarked.connect(this._hostXRef, this._additionalDropXRefs);
        this.footerChanged.connect(this._hostXRef, this._additionalDropXRefs);
        this.footerPagination.connect(this._hostXRef, this._additionalDropXRefs);
        this._hostXRef.visible = true;
    }
    _disconnect() {
        this._hostXRef.visible = false;
        this.footerChanged.disconnect();
        this.footerMarked.disconnect();
        this.footerPagination.disconnect();
    }
};
footer_PluginFooter = footer_decorate([
    Injectable(Lifetime.Scoped),
    footer_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        footer_marked_FooterMarked,
        footer_changed_FooterChanged,
        footer_pagination_FooterPagination,
        state_State])
], footer_PluginFooter);

//# sourceMappingURL=footer.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.errors.js
var header_errors_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_errors_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let header_errors_HeaderErrors = class HeaderErrors {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._editEnableChangedBind = this._editEnableChanged.bind(this);
        this._errorSelectedBind = this._errorSelected.bind(this);
        this._rejectedDataBind = this._rejectedData.bind(this);
        this._validDataBind = this._validData.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this.eventBus.join(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._editEnableChangedBind);
        this._hostXRef.validationVisible = false;
        if (this.state.get().edit.enabled) {
            this._connect();
        }
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._editEnableChangedBind);
        this._disconnect();
    }
    _disconnect() {
        this.eventBus.leave(eventsList_EVENTS.DONE.DATA.SAVE, this._validDataBind);
        this.eventBus.leave(eventsList_EVENTS.REJECT.DATA.SAVE, this._rejectedDataBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.ERRORSELECTED, this._errorSelectedBind);
    }
    _connect() {
        this._hostXRef.addEventListener(modules_constants_EVENT.ERRORSELECTED, this._errorSelectedBind);
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, this._validDataBind);
        this.eventBus.join(eventsList_EVENTS.REJECT.DATA.SAVE, this._rejectedDataBind);
    }
    _editEnableChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    _validData() {
        this._hostXRef.validationVisible = false;
    }
    _rejectedData({ errors }) {
        this._hostXRef.validationVisible = true;
        this._hostXRef.validationErrors = errors
            .map((error) => `${error.rowId}/${error.columnId}:${error.message}`)
            .join(',');
    }
    _errorSelected(e) {
        let [rowId, columnId] = e.detail[0].split('/');
        this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.CELL.ERROR, { rowId, columnId });
    }
};
header_errors_HeaderErrors = header_errors_decorate([
    Injectable(Lifetime.Scoped),
    header_errors_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], header_errors_HeaderErrors);

//# sourceMappingURL=header.errors.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.filters.js
var header_filters_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_filters_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let header_filters_HeaderFilters = class HeaderFilters {
    constructor(eventBus, dragAndDrop, state) {
        this.eventBus = eventBus;
        this.dragAndDrop = dragAndDrop;
        this.state = state;
        this._filterVisibleChangedBind = this._filterVisibleChanged.bind(this);
        this._dataFilterChangedBind = this._dataFilterChanged.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this._additionalDropXRefs = additionalDropXRefs;
        this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.BAR.FILTER.SET_VISIBLE, this._filterVisibleChangedBind);
        if (this.state.get().filter.enabled && this.state.get().header.toolbar.bar.filter.visible) {
            this._connect();
        }
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.BAR.FILTER.SET_VISIBLE, this._filterVisibleChangedBind);
    }
    _dataFilterChanged() {
        this._refreshFilters();
    }
    _filterVisibleChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    _connect() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.FILTER, this._dataFilterChangedBind);
        this._hostXRef.attachFilters(this._additionalDropXRefs, this.dragAndDrop);
        this._hostXRef.filtersVisible = true;
        this._refreshFilters();
    }
    _disconnect() {
        this._hostXRef.filtersVisible = false;
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.FILTER, this._dataFilterChangedBind);
    }
    _refreshFilters() {
        let { filter, columns } = this.state.get();
        let filters = filter.state
            ? this._morphFiltersToArithmetics(filter.state, columns.collection)
            : { operands: [] };
        this._hostXRef.refreshFilters(filters);
    }
    _morphFiltersToArithmetics(filter, cols) {
        if (filter.columnId) {
            return {
                operands: [
                    {
                        key: filter.columnId,
                        label: columns_UtilsColumns.findColumnInState(filter.columnId, cols).label,
                        value: filter.value,
                        operator: filter.operator
                    }
                ]
            };
        }
        // ToDo: revamp filters structure concept before extracting consts with and | or
        return {
            operator: filter.operator === 'AND' ? 'and' : 'or',
            expressions: (filter.filters || [])
                .filter((_filter) => !!_filter.filters)
                .map((_filter) => this._morphFiltersToArithmetics(_filter, cols)),
            operands: (filter.filters || [])
                .filter((_filter) => !_filter.filters)
                .map((f) => {
                return {
                    key: f.columnId,
                    operator: f.operator,
                    label: columns_UtilsColumns.findColumnInState(f.columnId, cols).label,
                    value: f.value
                };
            })
        };
    }
};
header_filters_HeaderFilters = header_filters_decorate([
    Injectable(Lifetime.Scoped),
    header_filters_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        drag_and_drop_DragAndDrop,
        state_State])
], header_filters_HeaderFilters);

//# sourceMappingURL=header.filters.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.groups.js
var header_groups_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_groups_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let header_groups_HeaderGroups = class HeaderGroups {
    constructor(eventBus, dragAndDrop, state) {
        this.eventBus = eventBus;
        this.dragAndDrop = dragAndDrop;
        this.state = state;
        this._groupsArithmeticSortedBind = this._groupsArithmeticSorted.bind(this);
        this._groupsArithmeticMutatedBind = this._groupsArithmeticMutated.bind(this);
        this._dataGroupChangedBind = this._dataGroupChanged.bind(this);
        this._dataSortChangedBind = this._dataSortChanged.bind(this);
        this._groupsVisibleChangedBind = this._groupsVisibleChanged.bind(this);
    }
    _groupsVisibleChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    _groupsArithmeticSorted(e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.SORT, e.detail);
    }
    _groupsArithmeticMutated(e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.CHANGE, e.detail);
    }
    _dataGroupChanged(params) {
        if (this._hostXRef.groupsVisible) {
            this._refreshGroups(params.groups);
        }
    }
    _dataSortChanged(params) {
        if (params.groupSort) {
            this._refreshGroups();
        }
    }
    _connect() {
        this._hostXRef.groupsMax = MAX_GROUP_NUMBER;
        this._hostXRef.addEventListener(modules_constants_EVENT.GROUPARITHMETICSORTED, this._groupsArithmeticSortedBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.GROUPARITHMETICMUTATED, this._groupsArithmeticMutatedBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, this._dataGroupChangedBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this._dataSortChangedBind);
        this._hostXRef.groupsVisible = true;
        this._refreshGroups();
    }
    _disconnect() {
        this._hostXRef.groupsVisible = false;
        this._hostXRef.removeEventListener(modules_constants_EVENT.GROUPARITHMETICSORTED, this._groupsArithmeticSortedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.GROUPARITHMETICMUTATED, this._groupsArithmeticMutatedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.GROUP, this._dataGroupChangedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.SORT, this._dataSortChangedBind);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.BAR.GROUP.SET_VISIBLE, this._groupsVisibleChangedBind);
        this._hostXRef.attachGroups(additionalDropXRefs, this.dragAndDrop);
        if (this.state.get().group.enabled && this.state.get().header.toolbar.bar.group.visible) {
            this._connect();
        }
    }
    _refreshGroups(groups) {
        let { sort, columns, group } = this.state.get();
        groups = groups || group.groups;
        if (!group.enabled) {
            return void 0;
        }
        let sortState = sort.groups.reduce((map, state) => {
            map[state.columnId] = state.order;
            return map;
        }, {});
        let operands = groups.map((key) => {
            let column = columns_UtilsColumns.findColumnInState(key, columns.collection);
            return {
                key: column.id, label: column.label, sort: sortState[column.id]
            };
        });
        this._hostXRef.refreshGroups({ operands });
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.BAR.GROUP.SET_VISIBLE, this._groupsVisibleChangedBind);
    }
};
header_groups_HeaderGroups = header_groups_decorate([
    Injectable(Lifetime.Scoped),
    header_groups_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        drag_and_drop_DragAndDrop,
        state_State])
], header_groups_HeaderGroups);

//# sourceMappingURL=header.groups.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.quicksearch.js
var header_quicksearch_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_quicksearch_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let header_quicksearch_HeaderQuickSearch = class HeaderQuickSearch {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._searchAppliedBind = this._searchApplied.bind(this);
        this._valueChangedBind = this._valueChanged.bind(this);
        this._listItemClickedBind = this._listItemClicked.bind(this);
        this._searchSetBind = this._searchSet.bind(this);
        this._searchResetBind = this._searchReset.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this._hostXRef.searchVisible = this.state.get().header.search.visible && this.state.get().header.search.enabled;
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_APPLY, this._searchAppliedBind);
        this.eventBus.join(eventsList_EVENTS.API.DATA.SEARCH.SET, this._searchSetBind);
        this.eventBus.join(eventsList_EVENTS.API.DATA.SEARCH.RESET, this._searchResetBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.SEARCH_VALUE_CHANGED, this._valueChangedBind);
        document.body.addEventListener(modules_constants_EVENT.SEARCH_LIST_ITEM_CLICKED, this._listItemClickedBind);
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_APPLY, this._searchAppliedBind);
        this.eventBus.leave(eventsList_EVENTS.API.DATA.SEARCH.SET, this._searchSetBind);
        this.eventBus.leave(eventsList_EVENTS.API.DATA.SEARCH.RESET, this._searchResetBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.SEARCH_VALUE_CHANGED, this._valueChangedBind);
        document.body.removeEventListener(modules_constants_EVENT.SEARCH_LIST_ITEM_CLICKED, this._listItemClickedBind);
    }
    _searchApplied(state) {
        this._hostXRef.searchValue = state.value;
    }
    _valueChanged(e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER.SEARCH, e.detail);
    }
    _listItemClicked(e) {
        this._hostXRef.searchValue = e.detail;
    }
    _searchSet(value) {
        this._hostXRef.searchValue = value;
    }
    _searchReset() {
        this._hostXRef.searchValue = '';
    }
};
header_quicksearch_HeaderQuickSearch = header_quicksearch_decorate([
    Injectable(Lifetime.Scoped),
    header_quicksearch_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], header_quicksearch_HeaderQuickSearch);

//# sourceMappingURL=header.quicksearch.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.sorts.js
var header_sorts_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_sorts_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let header_sorts_HeaderSorts = class HeaderSorts {
    constructor(eventBus, dragAndDrop, state) {
        this.eventBus = eventBus;
        this.dragAndDrop = dragAndDrop;
        this.state = state;
        this._sortsArithmeticSortedBind = this._sortsArithmeticSorted.bind(this);
        this._sortsArithmeticMutatedBind = this._sortsArithmeticMutated.bind(this);
        this._dataSortChangedBind = this._dataSortChanged.bind(this);
        this._sortsVisibleChangedBind = this._sortsVisibleChanged.bind(this);
    }
    _sortsVisibleChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.BAR.SORT.SET_VISIBLE, this._sortsVisibleChangedBind);
        this._hostXRef.attachSorts(additionalDropXRefs, this.dragAndDrop);
        if (this.state.get().sort.enabled && this.state.get().header.toolbar.bar.sort.visible) {
            this._connect();
        }
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.BAR.SORT.SET_VISIBLE, this._sortsVisibleChangedBind);
    }
    _connect() {
        this._hostXRef.sortsMax = MAX_SORT_NUMBER;
        this._hostXRef.addEventListener(modules_constants_EVENT.SORTSARITHMETICSORTED, this._sortsArithmeticSortedBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.SORTSARITHMETICMUTATED, this._sortsArithmeticMutatedBind);
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SORT, this._dataSortChangedBind);
        this._hostXRef.sortsVisible = true;
        this._refreshSorts();
    }
    _disconnect() {
        this._hostXRef.sortsVisible = false;
        this._hostXRef.removeEventListener(modules_constants_EVENT.SORTSARITHMETICSORTED, this._sortsArithmeticSortedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.SORTSARITHMETICMUTATED, this._sortsArithmeticMutatedBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.DATA.SORT, this._dataSortChangedBind);
    }
    _refreshSorts() {
        let { sort, columns } = this.state.get();
        if (!sort.enabled) {
            return void 0;
        }
        let operands = sort.state.map((sort) => {
            let column = columns_UtilsColumns.findColumnInState(sort.columnId, columns.collection);
            return {
                key: sort.columnId,
                label: column.label,
                sort: sort.order
            };
        });
        this._hostXRef.refreshSorts({ operands });
    }
    _sortsArithmeticSorted(e) {
        let { sort } = this.state.get();
        let order = DEFAULT.SORT;
        let srt = sort.state.find((el) => el.columnId === e.detail);
        if (srt) {
            order = srt.order === constants_ASC ? constants_DESC : constants_ASC;
        }
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, { columnId: e.detail, order, isGrouped: false, multisort: false });
    }
    _sortsArithmeticMutated(e) {
        let { sort } = this.state.get();
        let columns = e.detail.map((columnId) => {
            let column = sort.state.find((sort) => sort.columnId === columnId);
            return column ? column : { columnId, order: DEFAULT.SORT };
        });
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT_SET, { columns });
    }
    _dataSortChanged() {
        if (this._hostXRef.sortsVisible) {
            this._refreshSorts();
        }
    }
};
header_sorts_HeaderSorts = header_sorts_decorate([
    Injectable(Lifetime.Scoped),
    header_sorts_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        drag_and_drop_DragAndDrop,
        state_State])
], header_sorts_HeaderSorts);

//# sourceMappingURL=header.sorts.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.title.js
var header_title_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_title_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let header_title_HeaderTitle = class HeaderTitle {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this._titleChangedBind = this._titleChanged.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.TITLE, this._titleChangedBind);
    }
    disconnect() {
        this.eventBus.leave(eventsList_EVENTS.CHANGE.GRID.HEADER.TITLE, this._titleChangedBind);
    }
    _titleChanged(state) {
        this._hostXRef.titleShown = state.allRows;
        this._hostXRef.titleAll = state.initialRows;
    }
};
header_title_HeaderTitle = header_title_decorate([
    Injectable(Lifetime.Scoped),
    header_title_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], header_title_HeaderTitle);

//# sourceMappingURL=header.title.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.toolbar.js
var header_toolbar_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_toolbar_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let header_toolbar_HeaderToolbar = class HeaderToolbar {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this._editEnableChangedBind = this._editEnableChanged.bind(this);
        this._toolbarChangedBind = this._toolbarChanged.bind(this);
        this._toolbarUpdatedBind = this._toolbarUpdated.bind(this);
        this._toolbarSelectedUpdatedBind = this._toolbarSelectedUpdated.bind(this);
        this._addClickedBind = this._addClicked.bind(this);
        this._removeClickedBind = this._removeClicked.bind(this);
        this._saveClickedBind = this._saveClicked.bind(this);
    }
    _editEnableChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    _connect() {
        let state = this.state.get();
        this._hostXRef.toolbarVisible = state.edit.enabled;
        this._hostXRef.toolbarSave = translation_Translation.translate(TRANSLATION.KEYS.SAVE_ROW);
        this._hostXRef.toolbarAdd = translation_Translation.translate(TRANSLATION.KEYS.ADD_ROW);
        this._hostXRef.toolbarDelete = translation_Translation.translate(TRANSLATION.KEYS.REMOVE_ROW);
        this._hostXRef.toolbarDeletable = state.mark.enabled && state.mark.state.length > 0;
        this._hostXRef.toolbarDeleting = state.mark.enabled && state.edit.enabled;
        this._hostXRef.toolbarCreatable = true;
        this._hostXRef.toolbarSaving = state.events.map[eventsList_EVENTS.SAVE_CHANGES] !== undefined;
        this.eventBus.join(eventsList_EVENTS.API.EVENT.UPDATE, this._toolbarChangedBind);
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.MARK, this._toolbarUpdatedBind);
        this.eventBus.join(eventsList_EVENTS.DONE.HEADER.MARK, this._toolbarSelectedUpdatedBind);
    }
    _disconnect() {
        this._hostXRef.toolbarVisible = false;
        this.eventBus.leave(eventsList_EVENTS.API.EVENT.UPDATE, this._toolbarChangedBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.ROW.MARK, this._toolbarUpdatedBind);
    }
    _addClicked() {
        this.eventBus.fire(eventsList_EVENTS.ACTION.ROW.ADD);
    }
    _removeClicked() {
        this.eventBus.fire(eventsList_EVENTS.ACTION.ROW.REMOVE);
    }
    _saveClicked() {
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SAVE);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        if (this.state.get().edit.enabled) {
            this._connect();
        }
        this.eventBus.join(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._editEnableChangedBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.ADD_CLICKED, this._addClickedBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.REMOVE_CLICKED, this._removeClickedBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.SAVE_CLICKED, this._saveClickedBind);
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.DONE.HEADER.MARK, this._toolbarSelectedUpdatedBind);
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, this._editEnableChangedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.ADD_CLICKED, this._addClickedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.REMOVE_CLICKED, this._removeClickedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.SAVE_CLICKED, this._saveClickedBind);
    }
    _toolbarChanged() {
        this._hostXRef.toolbarSaving = this.state.get().events.map[eventsList_EVENTS.SAVE_CHANGES] !== undefined;
    }
    _toolbarUpdated(state) {
        this._hostXRef.toolbarDeletable = this.state.get().mark.enabled && state.state.length > 0;
    }
    _toolbarSelectedUpdated({ marked }) {
        this._hostXRef.toolbarDeletable = marked.length > 0;
    }
};
header_toolbar_HeaderToolbar = header_toolbar_decorate([
    Injectable(Lifetime.Scoped),
    header_toolbar_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], header_toolbar_HeaderToolbar);

//# sourceMappingURL=header.toolbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/extensions.js
var extensions_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var extensions_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let extensions_Extensions = class Extensions {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.extensions = {};
        this.live();
    }
    set(extensions = {}) {
        this.setColumns(extensions.columns);
        this.setRows(extensions.rows);
    }
    get() {
        return this.extensions;
    }
    setColumns(columns = {}) {
        this.extensions.columns = columns;
    }
    getColumns() {
        return this.extensions.columns || {};
    }
    getColumnById(columnId) {
        let columns = this.getColumns();
        return columns[columnId] || {};
    }
    getRows() {
        return this.extensions.rows;
    }
    setRows(rows = {}) {
        this.extensions.rows = rows;
    }
    destroy() {
        this.extensions = {};
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
};
extensions_Extensions = extensions_decorate([
    Injectable(Lifetime.Scoped),
    extensions_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], extensions_Extensions);

//# sourceMappingURL=extensions.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/columns.js
var columns_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var columns_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







const rowMarkColumn = {
    id: STATIC_CLASS.ROW_MARK,
    type: STATIC_TYPE.ROW_MARK,
    abstract: true,
    visible: true
};
let columns_Columns = class Columns {
    constructor(eventBus, state, extensions) {
        this.eventBus = eventBus;
        this.state = state;
        this.extensions = extensions;
        this.prepare();
        this.live();
    }
    prepare() {
        this.clearCache();
    }
    clearCache() {
        this.cached = {
            freeze: null,
            freezeColumnIds: null,
            content: null,
            contentColumnIds: null,
            all: null,
            allFlat: null,
            allColumnIds: null
        };
    }
    isEditableSingle(column) {
        if (!columns_UtilsColumns.isEditable(column)) {
            return false;
        }
        let { editable } = this.extensions.getColumnById(column.id);
        return editable !== undefined ? editable : true;
    }
    isEditable(column) {
        if (column.type === modules_constants_TYPE.GROUP) {
            for (let i = 0; i < column.columns.length; i += 1) {
                if (this.isEditable(column.columns[i])) {
                    return true;
                }
            }
        }
        return this.isEditableSingle(column);
    }
    isVisibleById(columnId) {
        let column = this.getColumnById(columnId, false);
        return column && column.visible !== undefined ? column.visible : true;
    }
    getColumnRoot(columnId) {
        let columns = this.getAll();
        for (let i = 0; i < columns.length; i++) {
            if (columns_UtilsColumns.findColumnRecursive(columnId, columns[i].columns)) {
                return columns[i];
            }
        }
        return this.getColumnById(columnId);
    }
    getSortOrder(columnId) {
        let columns = [].concat(this.state.sort.groups, this.state.sort.state);
        let sortColumn = columns.find((value) => value.columnId === columnId);
        return sortColumn ? sortColumn.order : undefined;
    }
    getColumnById(columnId, onlyRootColumns = true) {
        return columns_UtilsColumns.findColumnInColumns(columnId, this.getAll(), onlyRootColumns);
    }
    insertStatic(columnIds) {
        if (this.state.mark.enabled) {
            columnIds.unshift(STATIC_CLASS.ROW_MARK);
        }
        if (this.state.group.enabled) {
            columnIds.unshift(STATIC_CLASS.ROW_GROUP);
        }
    }
    getFreezeColumnIdsWithRowMark() {
        let columns = this.state.get().columns;
        if (!this.cached.freezeColumnIds && columns.freeze.enabled) {
            this.cached.freezeColumnIds = columns.freeze.state.slice();
            this.insertStatic(this.cached.freezeColumnIds);
        }
        else if (!this.cached.freezeColumnIds) {
            this.cached.freezeColumnIds = [];
        }
        return this.cached.freezeColumnIds;
    }
    getFreezeColumnIds(includeStaticColumns = true) {
        let freeze = this.getFreezeColumnIdsWithRowMark().slice();
        return includeStaticColumns ? freeze : freeze.filter((id) => STATIC_CLASS.ROW_MARK !== id);
    }
    getContentColumnIdsWithRowMark() {
        if (!this.cached.contentColumnIds) {
            let state = this.state;
            this.cached.contentColumnIds = state.columns.order.state.filter((columnId) => {
                return !this.isFreeze(columnId);
            });
            if (!state.columns.freeze.enabled) {
                this.insertStatic(this.cached.contentColumnIds);
            }
        }
        return this.cached.contentColumnIds;
    }
    getContentColumnIds(includeStaticColumns = true) {
        let content = this.getContentColumnIdsWithRowMark().slice();
        return includeStaticColumns ?
            content :
            content.filter((columnId) => !columns_UtilsColumns.isAbstractStatic(columnId));
    }
    getAllColumnIds() {
        if (!this.cached.allColumnIds) {
            let columns = this.state.columns;
            if (columns.order) {
                this.cached.allColumnIds = columns.order.state.slice();
            }
            this.insertStatic(this.cached.allColumnIds);
        }
        return this.cached.allColumnIds;
    }
    getAllColumnsByOrder() {
        return [...this.getFreeze(), ...this.getContent()];
    }
    getAllVisibleColumnIdsByOrder() {
        return this.getAllColumnsByOrder()
            .filter((column) => column.visible)
            .map((column) => column.id);
    }
    getFreeze() {
        if (!this.cached.freeze) {
            this.cached.freeze = this.getFreezeColumnIds().map((columnId) => {
                return this.getCollection(columnId);
            });
        }
        return this.cached.freeze;
    }
    getContent() {
        if (!this.cached.content) {
            this.cached.content = this.getContentColumnIds().map((columnId) => {
                return this.getCollection(columnId);
            });
        }
        return this.cached.content;
    }
    getAll() {
        if (!this.cached.all) {
            this.cached.all = [
                ...this.getFreezeColumnIds(),
                ...this.getContentColumnIds()
            ].map(this.getCollection.bind(this));
        }
        return this.cached.all;
    }
    getAllFlat() {
        if (!this.cached.allFlat) {
            this.cached.allFlat = [];
            let onEach = (column) => {
                if (column.type !== modules_constants_TYPE.GROUP) {
                    this.cached.allFlat.push(column);
                }
                else {
                    column.columns.forEach(onEach);
                }
            };
            this.getAll().forEach(onEach);
        }
        return this.cached.allFlat;
    }
    isFreeze(columnId) {
        return this.state.columns.freeze.state.indexOf(columnId) !== -1;
    }
    isFreezeChanged(columnsIds) {
        if (!this.state.columns.freeze.enabled) {
            return false;
        }
        if (columnsIds.length !== this.getFreezeColumnIds().length) {
            return true;
        }
        let changed = false;
        columnsIds.forEach((columnId) => {
            if (!changed && this.isFreeze(columnId)) {
                changed = true;
            }
        });
        return changed;
    }
    isLastColumn(columnId) {
        return this.getContentColumnIds()[this.getContentColumnIds().length - 1] === columnId;
    }
    isMergeColumn(column) {
        let { merge } = this.extensions.getColumnById(column.id);
        return merge && column.type === modules_constants_TYPE.GROUP;
    }
    isCollapsableColumn(columnId, hide = true) {
        let rootColumn = this.getColumnRoot(columnId);
        if (rootColumn.id === columnId) {
            return true;
        }
        let parentColumn = columns_UtilsColumns.findColumnParentRecursive(columnId, this.getAll());
        return hide ? this.isColumnCollapsableInBranch(columnId, parentColumn.columns) : true;
    }
    isGroupedColumn(columnId) {
        if (!UtilsObject.getPropertyValue('group.enabled', this.state)) {
            return false;
        }
        let rootColumn = this.getColumnRoot(columnId);
        return this.state.group.groups.indexOf(rootColumn.id) !== -1;
    }
    getFirstEditableColumn(columns) {
        return columns.find((columnId) => this.isEditable(this.getColumnById(columnId)));
    }
    isHideableInBranch(columnId) {
        let columns = this.isFreeze(columnId) ? this.getFreeze() : this.getContent();
        return columns.filter((column) => column.visible).length > 1;
    }
    isColumnCollapsableInBranch(columnId, columns) {
        let { collapsable } = this.extensions.getColumnById(columnId);
        if (typeof collapsable === 'undefined') {
            return true;
        }
        let stats = columns.reduce((acc, column) => {
            let { visible } = this.getColumnById(column.id, false);
            let isCollapsable = String(this.extensions.getColumnById(column.id).collapsable && visible);
            acc.total++;
            return Object.assign({}, acc, { [isCollapsable]: acc[isCollapsable] + 1 });
        }, { false: 0, true: 0, undefined: 0, total: 0 });
        return collapsable && stats.false >= 1 && stats.true > 1 && stats.total > 2;
    }
    getColumnsRecursively(root, found) {
        let columns = found || [];
        root.columns.forEach((column) => {
            if (columns_UtilsColumns.isColumnLeaf(column) && column.label) {
                columns.push(column);
            }
            if (Array.isArray(column.columns)) {
                this.getColumnsRecursively(column, columns);
            }
        });
        return columns;
    }
    getCollection(columnId) {
        if (columnId === STATIC_CLASS.ROW_MARK) {
            return rowMarkColumn;
        }
        return this.state.columns.collection[columnId];
    }
    onChangeDataColumns() {
        this.clearCache();
    }
    onClearCache() {
        this.clearCache();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, this.onChangeDataColumns.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS, this.onChangeDataColumns.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumns.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumns.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
    }
};
columns_Columns = columns_decorate([
    Injectable(Lifetime.Scoped),
    columns_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State, extensions_Extensions])
], columns_Columns);

//# sourceMappingURL=columns.js.map
// CONCATENATED MODULE: ./dist-es/modules/validation/validate/column.hide.js
class ColumnHide {
    static validateColumnHide(state, columnId) {
        let collection = state.columns.collection;
        let isValid = {
            freeze: !state.columns.freeze.enabled,
            notFreeze: false
        };
        return Object.keys(collection).some((id) => {
            if (collection[id].visible && columnId !== id) {
                isValid = ColumnHide.columnCanBeHidden(state, id, isValid);
            }
            return isValid.freeze && isValid.notFreeze;
        });
    }
    static columnCanBeHidden(state, columnId, { freeze, notFreeze }) {
        let freezeColumns = state.columns.freeze.state;
        let freezeEnabled = state.columns.freeze.enabled;
        if (freezeEnabled) {
            let isColumnFreeze = freezeColumns.indexOf(columnId) !== -1;
            freeze = true;
            notFreeze = notFreeze || !isColumnFreeze;
        }
        else {
            notFreeze = true;
        }
        return { freeze, notFreeze };
    }
}
//# sourceMappingURL=column.hide.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/validation/validations.rules.js




class validations_rules_ValidationRules {
    // TODO separate rules by its domain
    static validateGroupSet(state, args) {
        if (Array.isArray(args) && args.length > 0) {
            return args.every((columnId) => {
                return validations_rules_ValidationRules.validateColumn(state, columnId);
            });
        }
        console.warn(`Incorrect parameters - set values require at least one column`);
        return false;
    }
    static validateGroupSetUnique(state, args) {
        if (Array.isArray(args)) {
            let set = args;
            let isValid = set.every((columnId, index) => set.indexOf(columnId) === index);
            if (!isValid) {
                console.warn(`Incorrect parameters - set values are not unique`);
            }
            return isValid;
        }
        return false;
    }
    static validateSortAddUnique(state, args) {
        let isValid = validations_rules_ValidationRules.isNotInSortState(state.sort.state, args);
        if (!isValid) {
            console.warn(`Incorrect parameters - columnId already exists`);
        }
        return isValid;
    }
    static isNotInSortState(state, columnId) {
        return !state.some((column) => columnId === column.columnId);
    }
    static validateSortSet(state, args) {
        if (Array.isArray(args)) {
            let set = args;
            let isValid = set.every(({ columnId }, index) => set.findIndex((el) => el.columnId === columnId) === index);
            if (!isValid) {
                console.warn(`Incorrect parameters - columnIds are not unique`);
            }
            return isValid;
        }
        else if (!args) {
            return true;
        }
        return false;
    }
    static validateSortSetGroups(state, args) {
        if (Array.isArray(args)) {
            let set = args;
            let isValid = set.every(({ columnId }) => state.sort.groups.findIndex((el) => el.columnId === columnId) === -1);
            if (!isValid) {
                console.warn(`Incorrect parameters - columnIds are not unique`);
            }
            return isValid;
        }
        else if (!args) {
            return true;
        }
        return false;
    }
    static validateSort(state, order) {
        if (typeof (order) === 'undefined') {
            return true;
        }
        let isValid = order && (order === constants_ASC || order === constants_DESC);
        if (!isValid) {
            console.warn(`Parameter ${order} should be one of values ${constants_ASC} or ${constants_DESC}`);
        }
        return isValid;
    }
    static validateIsNumber(state, value) {
        let isValid = !isNaN(value);
        if (!isValid) {
            console.warn(`Field ${value} is not a number`);
        }
        return isValid;
    }
    static validateIsInteger(state, value) {
        let isValid = typeof value === 'number' && value % 1 === 0;
        if (!isValid) {
            console.warn(`Field ${value} is not an integer`);
        }
        return isValid;
    }
    static validateIsBoolean(state, value) {
        let isValid = typeof (value) === 'boolean';
        if (!isValid) {
            console.warn(`Invalid value - boolean is required`);
        }
        return isValid;
    }
    static validatePageNumber(state, value) {
        let isValid = value > 0 && value <= state.page.numberOfPages;
        if (!isValid) {
            console.warn(`Wrong page number`);
        }
        return isValid;
    }
    static validateItemsPerPageNumber(state, value) {
        let isValid = value > 0 && value <= MAX_ITEMS_PER_PAGE_NUMBER;
        if (!isValid) {
            console.warn(`Items per page should be a value between 1 and ${MAX_ITEMS_PER_PAGE_NUMBER}`);
        }
        return isValid;
    }
    static validateColumn(state, columnId) {
        let isValid = !!state.columns.collection[columnId] || columns_UtilsColumns.isAbstractStatic(columnId);
        if (!isValid) {
            console.warn(`Column ${columnId} does not exist in columns list`);
        }
        return isValid;
    }
    static validateColumnNested(state, columnId) {
        let isValid = !!state.columns.collection[columnId] ||
            columns_UtilsColumns.isAbstractStatic(columnId) ||
            validations_rules_ValidationRules.isNestedColumnLeaf(state, columnId);
        if (!isValid) {
            console.warn(`Column ${columnId} does not exist in columns list`);
        }
        return isValid;
    }
    static isNestedColumnLeaf(state, columnId) {
        for (let columnKey in state.columns.collection) {
            if (state.columns.collection.hasOwnProperty(columnKey)) {
                let column = columns_UtilsColumns.findColumnRecursive(columnId, state.columns.collection[columnKey].columns);
                if (column) {
                    return columns_UtilsColumns.isColumnLeaf(column);
                }
            }
        }
        return false;
    }
    static validateColumnsEquality(state, columnIds) {
        let [id, columnId] = columnIds;
        let isValid = id !== columnId;
        if (!isValid) {
            console.warn(`Column "${id}" cannot be moved with column ${columnId}`);
        }
        return isValid;
    }
    static validateIfColumnHidden(state, columnId) {
        let column = columns_UtilsColumns.findColumnInState(columnId, state.columns.collection);
        let isValid = column && !column.visible;
        if (!column) {
            console.warn(`Column ${columnId} not found in collection`);
        }
        else if (!isValid) {
            console.warn(`Column ${columnId} is already visible`);
        }
        return isValid;
    }
    static validateIfColumnVisible(state, columnId) {
        let column = columns_UtilsColumns.findColumnInState(columnId, state.columns.collection);
        let isValid = column && column.visible;
        if (!isValid) {
            console.warn(`Column ${columnId} is already hidden`);
        }
        return isValid;
    }
    static validateColumnHide(state, columnId) {
        let isValid = ColumnHide.validateColumnHide(state, columnId);
        if (!isValid) {
            console.warn(`Cannot hide column - Not all columns can be hidden`);
        }
        return isValid;
    }
    static validateIfProperLeaf(state, columnId, allowRoot) {
        let isValid = columns_UtilsColumns.isValidLeafInState(state.columns.collection, columnId, allowRoot);
        if (!isValid) {
            console.warn(`Column ${columnId} is not a valid leaf.`);
        }
        return isValid;
    }
    static validateIfNotAbstract(state, columnId) {
        let column = columns_UtilsColumns.findColumnInState(columnId, state.columns.collection);
        let isValid = true;
        if (!column) {
            isValid = false;
            console.warn(`Column '${columnId}' is unknown.`);
        }
        else if (columns_UtilsColumns.isAbstract(column)) {
            isValid = false;
            console.warn(`Column '${columnId}' is abstract.`);
        }
        return isValid;
    }
    static validateColumnExists(state, columnId) {
        let isValid = columns_UtilsColumns.columnExists(state.columns.collection, columnId);
        if (!isValid) {
            console.warn(`Column ${columnId} does not exist in columns list`);
        }
        return isValid;
    }
    static validateFilterBetween(filter, valueType) {
        let isValid = true;
        if (filter_UtilsFilter.isBetweenOperator(filter.operator)) {
            let typeofValue = typeof filter.value;
            isValid = typeofValue === typeof filter.value2 && typeofValue === valueType;
            if (!isValid) {
                console.warn(`Operator "${filter.operator}" not supports values of different types`);
            }
        }
        return isValid;
    }
    static validateFilterValueTypeNumber(filter) {
        let operator = value_UtilsValue.getUpperCase(filter.operator);
        let isValid = FILTER_DATA_TYPE_ALLOWED_OPERATOR.NUMBER.indexOf(operator) !== -1;
        if (!isValid) {
            console.warn(`Operator "${operator}" is not supported for value "${filter.value}".`);
        }
        return validations_rules_ValidationRules.validateFilterBetween(filter, 'number') && isValid;
    }
    static validateFilterValueTypeBoolean(filter) {
        let operator = value_UtilsValue.getUpperCase(filter.operator);
        let isValid = FILTER_DATA_TYPE_ALLOWED_OPERATOR.BOOLEAN.indexOf(operator) !== -1;
        if (!isValid) {
            console.warn(`Operator "${operator}" is not supported for value "${filter.value}".`);
        }
        return isValid;
    }
    static validateFilterValueTypeString(filter) {
        let operator = value_UtilsValue.getUpperCase(filter.operator);
        let isValid = FILTER_DATA_TYPE_ALLOWED_OPERATOR.STRING.indexOf(operator) !== -1;
        if (!isValid) {
            console.warn(`Operator "${operator}" is not supported for value "${filter.value}".`);
        }
        return validations_rules_ValidationRules.validateFilterBetween(filter, 'string') && isValid;
    }
    static validateFilterValueType(filter) {
        switch (typeof filter.value) {
            case 'object':
                if (filter.value !== null) {
                    console.warn(`Value of object type is not supported, only string, number and boolean.`);
                    return false;
                }
                return validations_rules_ValidationRules.validateFilterValueTypeNumber(filter);
            case 'number':
                return validations_rules_ValidationRules.validateFilterValueTypeNumber(filter);
            case 'boolean':
                return validations_rules_ValidationRules.validateFilterValueTypeBoolean(filter);
            default:
                return validations_rules_ValidationRules.validateFilterValueTypeString(filter);
        }
    }
    static validateColumnFreeze(state, id) {
        let isValid = !state.columns.freeze.state.some((columnId) => columnId === id);
        if (!isValid) {
            console.warn(`Column "${id}" is already freeze`);
        }
        return isValid;
    }
    static validateLastFreezeColumn(state, id) {
        if (!state.columns.freeze.enabled) {
            return true;
        }
        let columnIds = state.columns.freeze.state.filter((value) => state.columns.collection[value].visible);
        if (state.mark.enabled) {
            columnIds.push(STATIC_CLASS.ROW_MARK);
        }
        if (state.group.enabled) {
            columnIds.push(STATIC_CLASS.ROW_GROUP);
        }
        return validations_rules_ValidationRules.validateLastColumn(columnIds, state.group.groups, id, true);
    }
    static validateLastContentColumn(state, id) {
        return validations_rules_ValidationRules.validateLastColumn(Object.keys(state.columns.collection)
            .filter((value) => {
            return state.columns.freeze.state.indexOf(value) === -1
                && state.columns.collection[value].visible;
        }), state.group.groups, id, false);
    }
    static validateLastColumn(columnIds, group, id, isFreeze = false) {
        // tslint:disable-next-line:cyclomatic-complexity
        // TODO: refactor this statement
        let isValid;
        let freeze = columnIds.filter((columnId) => group.indexOf(columnId) === -1);
        if (Array.isArray(id)) {
            isValid =
                freeze.length ? !freeze.every((columnId) => id.indexOf(columnId) !== -1) : true;
        }
        else {
            isValid = freeze.indexOf(id) === -1 || freeze.length > 1;
        }
        if (!isValid) {
            console.warn(isFreeze
                ? `Cannot change groups - not all freeze columns can be in the group`
                : `Cannot change groups - not all columns can be in the group`);
        }
        return isValid;
    }
    static validateColumnGroup(state, id) {
        let isValid = !state.group.groups.some((columnId) => columnId === id);
        if (!isValid) {
            console.warn(`Column "${id}" is already grouped`);
        }
        return isValid;
    }
    static validateColumnGroupExists(state, id) {
        let isValid = state.group.groups.some((columnId) => columnId === id);
        if (!isValid) {
            console.warn(`Column cannot be removed - it is not grouped`);
        }
        return isValid;
    }
    static isSingleFilter(filter) {
        return ['operator', 'columnId', 'value'].every(Object.prototype.hasOwnProperty.bind(filter));
    }
    static isGroupFilter(filter) {
        return ['operator', 'filters'].every(Object.prototype.hasOwnProperty.bind(filter)) &&
            filter_UtilsFilter.isFilterGroup(filter) &&
            filter.filters.length > 0;
    }
    static checkFlatFilterSchema(filter) {
        let isValid = validations_rules_ValidationRules.isSingleFilter(filter) ||
            validations_rules_ValidationRules.isGroupFilter(filter);
        if (!isValid) {
            console.warn('Filter is missing required properties');
        }
        return isValid;
    }
    static getFilterOperators(filter) {
        if (validations_rules_ValidationRules.isSingleFilter(filter)) {
            return FILTER_TYPE_ALLOWED_OPERATORS.SINGLE;
        }
        else if (validations_rules_ValidationRules.isGroupFilter(filter)) {
            return FILTER_TYPE_ALLOWED_OPERATORS.GROUP;
        }
        else {
            return [];
        }
    }
    static isFilterOperatorValid(filter) {
        let isValid = validations_rules_ValidationRules.getFilterOperators(filter).some((operator) => {
            return filter.hasOwnProperty('operator') ? operator === value_UtilsValue.getUpperCase(filter.operator) : false;
        });
        if (!isValid) {
            console.warn(`Operator "${filter.operator}" does not exist in operators list`);
        }
        return isValid;
    }
    static isSetSchemaValid(filter) {
        return validations_rules_ValidationRules.checkFlatFilterSchema(filter) && validations_rules_ValidationRules.isFilterOperatorValid(filter);
    }
    static isSetSingleFilterValid(state, filter) {
        if (!validations_rules_ValidationRules.isSingleFilter(filter)) {
            return true;
        }
        return validations_rules_ValidationRules.validateColumnExists(state, filter.columnId) &&
            validations_rules_ValidationRules.validateIfNotAbstract(state, filter.columnId) &&
            validations_rules_ValidationRules.validateFilterValueType(filter);
    }
    static isSetGroupValid(state, filter) {
        if (!validations_rules_ValidationRules.isGroupFilter(filter)) {
            return true;
        }
        return filter.filters.every((set) => {
            return validations_rules_ValidationRules.validateFilterSet(state, set);
        });
    }
    static validateFilterSet(state, filter) {
        if (!filter) {
            return true;
        }
        return validations_rules_ValidationRules.isSetSchemaValid(filter) &&
            validations_rules_ValidationRules.isSetSingleFilterValid(state, filter) &&
            validations_rules_ValidationRules.isSetGroupValid(state, filter);
    }
    static validateGroupIsEnabled(state) {
        let isValid = state.group.enabled;
        if (!isValid) {
            console.warn(`Support for groups is disabled`);
        }
        return isValid;
    }
    static validateHeaderIsVisible(state) {
        let isValid = state.header.visible;
        if (!isValid) {
            console.warn(`Cannot perform action - header is not visible`);
        }
        return isValid;
    }
    static validateGroupNumber(state, groups) {
        let isValid = (groups ? groups.length : state.group.groups.length) <= MAX_GROUP_NUMBER;
        if (!isValid) {
            console.warn(`Cannot change groups - limit has been exceeded`);
        }
        return isValid;
    }
    static validateColumnGroupAdd(state) {
        let isValid = state.group.groups.length < MAX_GROUP_NUMBER;
        if (!isValid) {
            console.warn(`Cannot change groups - limit has been exceeded`);
        }
        return isValid;
    }
    static validateSortingIsEnabled(state) {
        let isValid = state.sort.enabled;
        if (!isValid) {
            console.warn(`Support for sorting is disabled`);
        }
        return isValid;
    }
    static validateSearchIsEnabled(state) {
        let isValid = state.header.search.enabled;
        if (!isValid) {
            console.warn(`Support for searching is disabled`);
        }
        return isValid;
    }
    static validateMarkIsEnabled(state) {
        let isValid = state.mark.enabled;
        if (!isValid) {
            console.warn(`Support for marking is disabled`);
        }
        return isValid;
    }
    static validateFreezeIsEnabled(state) {
        let isValid = state.freeze.enabled;
        if (!isValid) {
            console.warn(`Support for freeze is disabled`);
        }
        return isValid;
    }
    static validateOrderIsEnabled(state) {
        let isValid = state.columns.order.enabled;
        if (!isValid) {
            console.warn(`Support for columns order is disabled`);
        }
        return isValid;
    }
    static validateIsAreaFree(state, columnId) {
        if (!state.columns.freeze.enabled || state.columns.freeze.state.indexOf(columnId) !== -1) {
            return true;
        }
        let isValid = state.columns.order.state.length - 1 !== state.columns.freeze.state.length;
        if (!isValid) {
            console.warn(`Cannot move all columns`);
        }
        return isValid;
    }
    static validateColumnFreezeIsEnabled(state) {
        let isValid = state.columns.freeze.enabled;
        if (!isValid) {
            console.warn(`Support for freeze columns is disabled`);
        }
        return isValid;
    }
    static validateColumnUnfreeze(state, columnId) {
        let isValid = state.columns.freeze.state.indexOf(columnId) !== -1;
        if (!isValid) {
            console.warn(`Cannot unfreeze column - it is not freeze`);
        }
        return isValid;
    }
    static validateFilterIsEnabled(state) {
        let isValid = state.filter.enabled;
        if (!isValid) {
            console.warn(`Support for filters is disabled`);
        }
        return isValid;
    }
    static validateEditIsEnabled(state) {
        let isValid = state.edit.enabled;
        if (!isValid) {
            console.warn(`Support for editing is disabled`);
        }
        return isValid;
    }
    static validateEditHasChanged(state, enabled) {
        let isValid = state.edit.enabled !== enabled;
        if (!isValid) {
            console.warn(`Cannot perform action`);
        }
        return isValid;
    }
    static validateInfiniteIsDisabled(state) {
        let isValid = !state.infinite.enabled;
        if (!isValid) {
            console.warn(`Option disabled for infinite mode`);
        }
        return isValid;
    }
    static validateThemeStyling(state, themeName) {
        let path = `${state.theme.styling.path}/${themeName}.css`;
        let fileExist = utilities_resource_UtilsResource.checkIfResourceExistSync(path);
        let isValid = themeName && themeName !== '' && fileExist;
        if (!isValid) {
            console.warn(`Invalid theme name: '${themeName}'`);
        }
        return isValid;
    }
    static validateThemeLayout(state, layout) {
        let isValid = layout ? modules_constants_CLASS.THEME.LAYOUT[layout.toUpperCase()] : false;
        if (!isValid) {
            console.warn(`There is no such theme. Available themes are: ${Object.keys(modules_constants_CLASS.THEME.LAYOUT).map((key) => key.toLowerCase()).join(', ')}`);
        }
        return isValid;
    }
    static validateIntl(state, columnId, intl) {
        let column = columns_UtilsColumns.findColumnInState(columnId, state.columns.collection);
        let isValid = !intl || !intl.options || COLUMNS_FORMATABLE.indexOf(column.type) !== -1;
        if (!isValid) {
            let value = value_UtilsValue.normalizeValue(intl, true);
            console.warn(`Incorrect config "${value}" was provided for column of type "${column.type}"`);
        }
        return isValid;
    }
    static validateFullscreenIsEnabled(state) {
        let isValid = state.fullscreen.enabled;
        if (!isValid) {
            console.warn(`Operation not permitted - fullscreen is disabled`);
        }
        return isValid;
    }
    static validateRollbackAvailable(state, force) {
        let { edit } = state;
        if (!force && (edit.added.length > 0 || edit.cells.length > 0 || edit.removed.length > 0)) {
            console.warn(`Changes unsaved. If you want to disable edit mode use force 'disable(true);`);
            return false;
        }
        else {
            return true;
        }
    }
}
//# sourceMappingURL=validations.rules.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header/header.viewsettings.js
var header_viewsettings_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_viewsettings_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let header_viewsettings_HeaderViewSettings = class HeaderViewSettings {
    constructor(eventBus, state, columnsService) {
        this.eventBus = eventBus;
        this.state = state;
        this.columnsService = columnsService;
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        xRefComponent.viewsettingsMaxgroups = MAX_GROUP_NUMBER;
        xRefComponent.viewsettingsVisible = this.state.get().header.toolbar.visible;
        xRefComponent.viewsettingsGroupenabled = this.state.get().group.enabled;
        xRefComponent.viewsettingsFreezeenabled = this.state.get().columns.freeze.enabled;
        xRefComponent.viewsettingsSortenabled = this.state.get().sort.enabled;
        xRefComponent.viewsettingsGroupsplaceholdertext =
            translation_Translation.translate(TRANSLATION.KEYS.DRAG_PLACEHOLDER_GROUPS);
        this._setColumnsData(xRefComponent);
        this._addListeners(xRefComponent);
        this._addUpdateListeners(xRefComponent);
    }
    disconnect() {
        return void 0;
    }
    _getSortPriority(state, columnId) {
        let priority = state.sort.state.findIndex((sort) => sort.columnId === columnId);
        return priority !== -1 && state.sort.state.length > 1 ? (priority + 1) : undefined;
    }
    _getLeafColumns(columnsService, state, column) {
        return Array.isArray(column.columns) ? column.columns.map((col) => this._getColumnItem(columnsService, state, col.id)) : [];
    }
    _getColumnItem(columnsService, state, columnId) {
        let column = columns_UtilsColumns.findColumnInState(columnId, state.columns.collection);
        let isRootColumn = columns_UtilsColumns.isColumnRootInState(state.columns.collection, columnId);
        let isShowable = columns_UtilsColumns.isValidLeafInState(state.columns.collection, columnId, true)
            && columnsService.isCollapsableColumn(columnId, column.visible);
        let isSortable = this._isColumnSortable(state, column);
        return {
            columnId: columnId,
            label: column.label,
            freeze: columnsService.isFreeze(columnId),
            visible: column.visible,
            sortOrder: columnsService.getSortOrder(columnId),
            sortPriority: this._getSortPriority(state, columnId),
            grouped: columnsService.isGroupedColumn(columnId),
            leafColumns: this._getLeafColumns(columnsService, state, column),
            isMerged: columnsService.isMergeColumn(column),
            isShowable,
            isHideable: isShowable && columnsService.isHideableInBranch(columnId),
            isSortable: isSortable,
            isFreezeable: state.columns.freeze.enabled && isRootColumn,
            isDisplayed: columns_UtilsColumns.isColumnMaxLevel2InState(state.columns.collection, columnId)
        };
    }
    _isColumnSortable(state, column) {
        return state.sort.enabled && columns_UtilsColumns.isValidLeafInState(state.columns.collection, column.id, false)
            && !columns_UtilsColumns.isAbstract(column);
    }
    _getColumnsData() {
        let groupedColumns;
        let columns;
        let columnMap;
        let state = this.state.get();
        let freezeOrderIds = this.columnsService.getFreezeColumnIds(false);
        let columnsOrderIds = this.columnsService.getContentColumnIds(false);
        columnMap = Object.keys(state.columns.collection).map(this._getColumnItem.bind(this, this.columnsService, state));
        columns = [...freezeOrderIds, ...columnsOrderIds]
            .map((columnId) => columnMap.find((item) => item.columnId === columnId))
            .filter((item) => !item.grouped);
        groupedColumns = state.group.groups.map((columnId) => {
            return columnMap.find((item) => item.columnId === columnId);
        });
        return { columns, groupedColumns };
    }
    _getChange(source, operator, target) {
        return {
            source,
            operator: (operator === VC_DragAndDropConstants.POSITION.TOP ? modules_constants_POSITION.BEFORE : modules_constants_POSITION.AFTER),
            target
        };
    }
    _isInGroup(id, groups) {
        return groups.some((column) => column.columnId === id);
    }
    _canBeGrouped(change, inGroup, groups) {
        let column = this.columnsService.getColumnById(change.source);
        if (inGroup || columns_UtilsColumns.isAbstract(column)) {
            return false;
        }
        let isFreeze = this.columnsService.isFreeze(change.source);
        let columns = isFreeze
            ? this.columnsService.getFreezeColumnIds(false)
            : this.columnsService.getContentColumnIds(false);
        return validations_rules_ValidationRules.validateLastColumn(columns.filter((columnId) => !this._isInGroup(columnId, groups)), groups.map((item) => item.columnId), change.source, isFreeze);
    }
    _setColumnsData(xRefComponent) {
        let { columns, groupedColumns } = this._getColumnsData();
        xRefComponent.refreshVS(columns, groupedColumns);
    }
    _addListeners(xRef) {
        xRef.addEventListener('viewsettingsSortAscClick', this.onSortAscClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsSortDescClick', this.onSortDescClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsVisibilityOnClick', this.onVisibleOnClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsVisibilityOffClick', this.onVisibleOffClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsFreezeClick', this.onFreezeClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsUnfreezeClick', this.onUnfreezeClick.bind(this, xRef));
        xRef.addEventListener('viewsettingsDropItem', this.onDropItem.bind(this, xRef));
    }
    _addUpdateListeners(xRef) {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.CHANGE.LAYOUT.HEADER.CELL.ORDER, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.CHANGE, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.ADD, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.SET, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.RESET, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.REMOVE, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.ORDER.SET, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.FREEZE, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.UNFREEZE, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.SORT.SET, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.SHOW, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.COLUMN.HIDE, this._setColumnsData.bind(this, xRef));
        this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SETTINGS.SET_VISIBLE, this._onVisibleChange.bind(this, xRef));
    }
    onSortAscClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, {
            columnId: e.detail.columnId,
            isGrouped: this.columnsService.isGroupedColumn(e.detail.columnId),
            multisort: e.detail.multisort,
            order: constants_ASC
        });
        this._setColumnsData(xRefComponent);
    }
    onSortDescClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, {
            columnId: e.detail.columnId,
            isGrouped: this.columnsService.isGroupedColumn(e.detail.columnId),
            multisort: e.detail.multisort,
            order: constants_DESC
        });
        this._setColumnsData(xRefComponent);
    }
    onVisibleOnClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.VISIBILITY_APPLY, {
            columnId: e.detail,
            visibility: true
        });
        this._setColumnsData(xRefComponent);
    }
    onVisibleOffClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.VISIBILITY_APPLY, {
            columnId: e.detail,
            visibility: false
        });
        this._setColumnsData(xRefComponent);
    }
    onFreezeClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.COMPOUND_APPLY, { columnId: e.detail, freeze: true });
        this._setColumnsData(xRefComponent);
    }
    onUnfreezeClick(xRefComponent, e) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.COMPOUND_APPLY, { columnId: e.detail, freeze: false });
        this._setColumnsData(xRefComponent);
    }
    onDropItem(xRefComponent, e) {
        let { source, target, operator } = e.detail.change;
        let change = this._getChange(source, operator, target);
        let inGroup = this._isInGroup(source, e.detail.groups);
        let params = {
            change,
            inGroup,
            canBeGrouped: this._canBeGrouped(change, inGroup, e.detail.groups)
        };
        if (e.detail.isGroupList) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEWSETTING.DROP_IN_GROUPS, params);
        }
        else {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEWSETTING.DROP_IN_COLUMNS, params);
        }
        this._setColumnsData(xRefComponent);
    }
    _onVisibleChange(xRefComponent, visibility) {
        xRefComponent.viewsettingsVisible = visibility;
    }
};
header_viewsettings_HeaderViewSettings = header_viewsettings_decorate([
    Injectable(Lifetime.Scoped),
    header_viewsettings_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State, columns_Columns])
], header_viewsettings_HeaderViewSettings);

//# sourceMappingURL=header.viewsettings.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/header.js
var header_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















let header_PluginHeader = class PluginHeader {
    constructor(eventBus, state, dragAndDrop, headerSorts, headerGroups, headerFilters, headerErrors, headerViewSettings, headerToolbar, headerTitle, headerQuickSearch) {
        this.eventBus = eventBus;
        this.state = state;
        this.dragAndDrop = dragAndDrop;
        this.headerSorts = headerSorts;
        this.headerGroups = headerGroups;
        this.headerFilters = headerFilters;
        this.headerErrors = headerErrors;
        this.headerViewSettings = headerViewSettings;
        this.headerToolbar = headerToolbar;
        this.headerTitle = headerTitle;
        this.headerQuickSearch = headerQuickSearch;
        this._visibleChangedBind = this._visibleChanged.bind(this);
        this._settingsVisibleChangedBind = this._settingsVisibleChanged.bind(this);
        this._searchVisibleChangedBind = this._searchVisibleChanged.bind(this);
        this._dragStartedBind = this._dragStarted.bind(this);
        this._dragEndedBind = this._dragEnded.bind(this);
        this._gooeyGroupedBind = this._gooeyGrouped.bind(this);
        this._gooeySortedBind = this._gooeySorted.bind(this);
        this._gooeyFilteredBind = this._gooeyFiltered.bind(this);
        this._gooeyClickedBind = this._gooeyClicked.bind(this);
        this._dataSortChangedBind = this._dataSortChanged.bind(this);
        this._dataGroupChangedBind = this._dataGroupChanged.bind(this);
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        this._additionalDropXRefs = additionalDropXRefs;
        if (this.state.get().header.visible) {
            this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SET_VISIBLE, this._visibleChangedBind);
            this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SETTINGS.SET_VISIBLE, this._settingsVisibleChangedBind);
            this.eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SEARCH.SET_VISIBLE, this._searchVisibleChangedBind);
            this._attachGooey(additionalDropXRefs);
            this.eventBus.join(eventsList_EVENTS.DRAG_COLUMN.START, this._dragStartedBind);
            this.eventBus.join(eventsList_EVENTS.DRAG_COLUMN.END, this._dragEndedBind);
            this.eventBus.join(eventsList_EVENTS.CHANGE.LAYOUT.HEADER.CELL.ORDER, this._dragEndedBind);
            this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this._dataSortChangedBind);
            this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, this._dataGroupChangedBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.GOOEYGROUPED, this._gooeyGroupedBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.GOOEYSORTED, this._gooeySortedBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.GOOEYFILTERED, this._gooeyFilteredBind);
            this._hostXRef.addEventListener(modules_constants_EVENT.GOOEYCLICKED, this._gooeyClickedBind);
            this._connect();
        }
    }
    disconnect() {
        this._disconnect();
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.SET_VISIBLE, this._visibleChangedBind);
        this.eventBus.leave(eventsList_EVENTS.DRAG_COLUMN.START, this._dragStartedBind);
        this.eventBus.leave(eventsList_EVENTS.DRAG_COLUMN.END, this._dragEndedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.LAYOUT.HEADER.CELL.ORDER, this._dragEndedBind);
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.SETTINGS.SET_VISIBLE, this._settingsVisibleChangedBind);
        this.eventBus.leave(eventsList_EVENTS.API.VIEW.HEADER.SEARCH.SET_VISIBLE, this._searchVisibleChangedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.SORT, this._dataSortChangedBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.GROUP, this._dataGroupChangedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.GOOEYGROUPED, this._gooeyGroupedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.GOOEYSORTED, this._gooeySortedBind);
        this._hostXRef.removeEventListener(modules_constants_EVENT.GOOEYFILTERED, this._gooeyFilteredBind);
        this._hostXRef.addEventListener(modules_constants_EVENT.GOOEYCLICKED, this._gooeyClickedBind);
    }
    _connect() {
        this.headerFilters.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerGroups.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerSorts.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerErrors.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerViewSettings.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerTitle.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerToolbar.connect(this._hostXRef, this._additionalDropXRefs);
        this.headerQuickSearch.connect(this._hostXRef, this._additionalDropXRefs);
        this._hostXRef.visible = true;
    }
    _disconnect() {
        this._hostXRef.visible = false;
        this.headerSorts.disconnect();
        this.headerGroups.disconnect();
        this.headerFilters.disconnect();
        this.headerErrors.disconnect();
        this.headerViewSettings.disconnect();
        this.headerTitle.disconnect();
        this.headerQuickSearch.disconnect();
        this.headerToolbar.disconnect();
    }
    _attachGooey(additionalDropXRefs) {
        let state = this.state.get();
        this._hostXRef.gooeyFilterable = state.filter.enabled;
        this._hostXRef.gooeyGroupable = state.group.enabled && state.group.groups.length === 0;
        this._hostXRef.gooeySortable = state.sort.enabled && state.sort.state.length === 0;
        this._hostXRef.attachGooey(additionalDropXRefs, this.dragAndDrop);
        this._hostXRef.attachViewSettings();
    }
    _dataSortChanged({ columns }) {
        this._hostXRef.gooeySortable = this.state.get().sort.enabled && columns.length === 0;
    }
    _dataGroupChanged({ groups }) {
        this._hostXRef.gooeyGroupable = this.state.get().group.enabled && groups.length === 0;
    }
    // todo hide gooey if at least 1 item is present
    _gooeyFiltered(e) {
        console.log('gooeyFiltered');
    }
    // todo hide gooey if at least 1 item is present
    _gooeySorted(e) {
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, {
            columnId: e.detail,
            order: DEFAULT.SORT,
            isGrouped: false,
            multisort: false
        });
    }
    // todo hide gooey if at least 1 item is present
    _gooeyGrouped(e) {
        let { group } = this.state.get();
        this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.CHANGE, Array.from(new Set(group.groups.concat(e.detail))));
    }
    _visibleChanged(state) {
        if (state) {
            this._connect();
        }
        else {
            this._disconnect();
        }
    }
    _dragEnded() {
        this._hostXRef.gooeyDragging = false;
    }
    _dragStarted({ columnId }) {
        let column = columns_UtilsColumns.findColumnInState(columnId, this.state.columns.collection);
        if (column && !columns_UtilsColumns.isAbstract(column)) {
            this._hostXRef.gooeyDragging = true;
        }
    }
    _gooeyClicked() {
        this._hostXRef.viewsettingsClicked = !this._hostXRef.viewsettingsClicked;
    }
    _settingsVisibleChanged(state) {
        this._hostXRef.gooeySettings = state;
    }
    _searchVisibleChanged(state) {
        this._hostXRef.searchVisible = state && this.state.get().header.search.enabled;
    }
};
header_PluginHeader = header_decorate([
    Injectable(Lifetime.Scoped),
    header_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        state_State,
        drag_and_drop_DragAndDrop,
        header_sorts_HeaderSorts,
        header_groups_HeaderGroups,
        header_filters_HeaderFilters,
        header_errors_HeaderErrors,
        header_viewsettings_HeaderViewSettings,
        header_toolbar_HeaderToolbar,
        header_title_HeaderTitle,
        header_quicksearch_HeaderQuickSearch])
], header_PluginHeader);

//# sourceMappingURL=header.js.map
// CONCATENATED MODULE: ./dist-es/modules/extensions/toaster.js
var toaster_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var toaster_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let PluginToaster = class PluginToaster {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
    }
    connect(xRefComponent, additionalDropXRefs) {
        if (!xRefComponent) {
            return;
        }
        this._hostXRef = xRefComponent;
        if (this.state.get().toast.enabled && this._hostXRef.run) {
            this._hostXRef.run();
        }
    }
    disconnect() {
        if (this._hostXRef.stop) {
            this._hostXRef.stop();
        }
    }
};
PluginToaster = toaster_decorate([
    Injectable(Lifetime.Scoped),
    toaster_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], PluginToaster);

//# sourceMappingURL=toaster.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/tick.js
var tick_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var tick_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


const MIN_TICK_STEP = 1500;
let tick_Tick = class Tick {
    constructor() {
        this.onTick = this.tick.bind(this);
        this.tickLast = 0;
        this.tickCount = 0;
        this.ticking = false;
        this.freeze = false;
        this.members = {};
        this.live();
    }
    register(callback, frequency) {
        if (isNaN(frequency)) {
            console.warn(`'frequency' should be a number`);
            return void 0;
        }
        if (!(callback instanceof Function)) {
            console.warn(`'callback' should be a Function`);
            return void 0;
        }
        if (!this.members[frequency]) {
            this.members[frequency] = [];
        }
        this.members[frequency].push(callback);
        if (!this.ticking) {
            this.run();
        }
        else {
            this.updateProps();
        }
        return Math.floor(this.getStep(frequency));
    }
    unregister(callback, frequency) {
        let removed = false;
        Object.keys(this.members).forEach((key) => {
            if (frequency && frequency !== Number(key)) {
                return void 0;
            }
            let index = this.members[key].indexOf(callback);
            if (index !== -1) {
                removed = true;
                this.members[key].splice(index, 1);
                console.log(`Removed member for frequency '${key}'`);
                if (this.members[key].length === 0) {
                    delete this.members[key];
                }
            }
        });
        if (this.getMembersLength() === 0) {
            this.stop();
        }
        else {
            this.updateProps();
        }
        if (!removed) {
            console.warn('Cannot find member');
        }
    }
    getMembersLength() {
        return Object.keys(this.members)
            .map((key) => Number(key))
            .reduce((total, frequency) => total + this.members[frequency].length, 0);
    }
    updateProps() {
        let frequencyArray = Object.keys(this.members).map((key) => Number(key));
        this.tickLength = frequencyArray.reduce((total, frequency) => frequency * total, 1);
        this.tickTime = frequencyArray.reduce((maximum, frequency) => Math.max(frequency, maximum), 0) * MIN_TICK_STEP;
        this.tickStep = this.tickTime / this.tickLength;
    }
    getStep(frequency) {
        return this.tickCount / (this.tickLength / frequency);
    }
    tick() {
        if (!this.ticking || this.freeze) {
            return void 0;
        }
        if (this.tickLast + this.tickStep > Date.now()) {
            window.requestAnimationFrame(this.onTick);
            return void 0;
        }
        this.tickLast = Date.now();
        this.tickCount = (this.tickCount + 1) % this.tickLength;
        Object.keys(this.members).forEach((key) => {
            let frequency = Number(key);
            if (this.tickCount % (this.tickLength / frequency) === 0) {
                let step = this.getStep(frequency);
                this.members[key].forEach((callback) => callback(step));
            }
        });
        window.requestAnimationFrame(this.onTick);
    }
    run() {
        if (this.ticking) {
            console.warn(`Already ticking`);
            return void 0;
        }
        this.updateProps();
        this.ticking = true;
        window.requestAnimationFrame(this.onTick);
    }
    stop() {
        this.ticking = false;
        this.tickLast = 0;
        this.tickCount = 0;
    }
    onVisibilityChange() {
        if (this.ticking && document.hidden) {
            this.freeze = true;
        }
        else if (!document.hidden) {
            this.freeze = false;
        }
    }
    live() {
        document.addEventListener(modules_constants_EVENT.VISIBILITYCHANGE, this.onVisibilityChange.bind(this));
    }
};
tick_Tick = tick_decorate([
    Injectable(Lifetime.Scoped),
    tick_metadata("design:paramtypes", [])
], tick_Tick);

//# sourceMappingURL=tick.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/layout.js
var layout_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let LayoutService = class LayoutService {
    setLayout(layout) {
        this.layout = layout;
    }
    getElement(name) {
        return this.layout.getElement(name);
    }
    get() {
        return this.layout;
    }
};
LayoutService = layout_decorate([
    Injectable(Lifetime.Scoped)
], LayoutService);

//# sourceMappingURL=layout.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/size/size.height.js
var size_height_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var size_height_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








let size_height_SizeHeight = class SizeHeight {
    constructor(eventBus, columns, extensions, layout) {
        this.eventBus = eventBus;
        this.columns = columns;
        this.extensions = extensions;
        this.layout = layout;
        this.gridHeight = 0;
        this.cache = {
            rowLevels: undefined,
            rowHeight: undefined
        };
        this.live();
    }
    getRowLevels(columns) {
        let levels = 1;
        columns
            .filter((column) => column.type === modules_constants_TYPE.GROUP)
            .forEach((column) => {
            let { group } = this.extensions.getColumnById(column.id);
            if (group && group.position === modules_constants_POSITION.HORIZONTAL) {
                levels = Math.max(levels, column.columns.length);
            }
            levels += this.getRowLevels(column.columns) - 1;
        });
        return levels;
    }
    getRowLevelsClass() {
        if (!this.cache.rowLevels) {
            this.cache.rowLevels = this.getRowLevels(this.columns.getAll());
        }
        if (this.cache.rowLevels > SIZE.ROW_MAX_LEVEL) {
            console.warn(`Maximum group levels exceeded!`);
            this.cache.rowLevels = SIZE.ROW_MAX_LEVEL;
        }
        return `${modules_constants_CLASS.ROW_LEVEL}-${this.cache.rowLevels}`;
    }
    clearCache() {
        this.cache = {
            rowLevels: undefined,
            rowHeight: undefined
        };
    }
    getRowHeight() {
        if (!this.cache.rowHeight) {
            this.cache.rowHeight = new dimension_Dimension(this.layout.getElement(modules_constants_CLASS.CONTENT), {
                element: modules_constants_ELEMENT.DIV,
                classList: [modules_constants_CLASS.ROW, this.getRowLevelsClass()]
            }).getHeight();
        }
        return this.cache.rowHeight;
    }
    getGridHeight() {
        return this.gridHeight;
    }
    onClearCache() {
        this.clearCache();
    }
    onChangeLayoutHeight() {
        this.clearCache();
    }
    onChangeViewRowHeight() {
        this.clearCache();
    }
    onChangeGridHeight({ height }) {
        this.gridHeight = height;
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEIGHT, this.onChangeGridHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.LAYOUT.HEIGHT, this.onChangeLayoutHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
    }
};
size_height_SizeHeight = size_height_decorate([
    Injectable(Lifetime.Scoped),
    size_height_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        columns_Columns,
        extensions_Extensions,
        LayoutService])
], size_height_SizeHeight);

//# sourceMappingURL=size.height.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/animation.js
var animation_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var animation_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let animation_Animation = class Animation {
    constructor(sizeHeight, tick) {
        this.sizeHeight = sizeHeight;
        this.tick = tick;
        this.animationDuration = '1s';
        this.animationPillMaxSize = 24;
        this.hovered = null;
        this.registered = new Map();
    }
    boot(eventBus) {
        this.eventBus = eventBus;
        this._popup = document.createElement(VUIELEMENT.POPUP);
        this.live();
    }
    findMemberByElement(container, columnId) {
        return this.registered.get(columnId).members.get(container);
    }
    isDisabled(columnId) {
        return this.registered.get(columnId).animationType === ANIMATION_TYPE.NONE;
    }
    isPaused(columnId) {
        return this.registered.get(columnId).paused;
    }
    isMemberStopped(container, columnId) {
        if (this.isDisabled(columnId)) {
            return true;
        }
        let registered = this.registered.get(columnId);
        let member = this.findMemberByElement(container, columnId);
        return registered.stopped && member.current === registered.selected;
    }
    countNextSelectedByAngle(columnId, angle) {
        let registered = this.registered.get(columnId);
        return Math.abs(angle / registered.theta) % registered.items;
    }
    setStopAnimation(columnId, stop) {
        this.registered.get(columnId).stopped = stop;
    }
    setPauseAnimation(columnId, pause) {
        this.registered.get(columnId).paused = pause;
    }
    shouldStopIfAnimationOnce(columnId, nextSelected) {
        let registered = this.registered.get(columnId);
        let isLastSelected = registered.items - 1 === nextSelected;
        let isAnimationOnce = registered.animationType === ANIMATION_TYPE.ONCE;
        if (isLastSelected && isAnimationOnce) {
            this.setStopAnimation(columnId, true);
        }
    }
    updateSelected(container, columnId, nextSelected) {
        let registered = this.registered.get(columnId);
        let member = this.findMemberByElement(container, columnId);
        member.current = nextSelected;
        registered.selected = nextSelected;
    }
    setTransformForAnyBrowser(container, columnId, forward) {
        let { theta, radius, isVertical, selected } = this.registered.get(columnId);
        let rotateName = this.getRotateFunction(isVertical);
        let angle, currentAngle;
        if (!container.style.transform || container.style.transform === 'none') {
            angle = theta * selected * -1;
        }
        else {
            currentAngle = container.style.transform.replace(/^.*\((-?\d+)deg\)$/, '$1');
            angle = Number(currentAngle || '') - (forward ? theta : -theta);
        }
        let nextSelected = this.countNextSelectedByAngle(columnId, angle);
        this.shouldStopIfAnimationOnce(columnId, nextSelected);
        this.updateSelected(container, columnId, nextSelected);
        container.style.transitionDuration = this.animationDuration;
        container.style.transform = `translateZ(${-radius}px) ${rotateName}(${angle}deg)`;
    }
    setTransformForIEBrowser(container, columnId, forward) {
        let registered = this.registered.get(columnId);
        let currentY = container.style.transform.replace(/^.*\((-?\d+)px\)$/, '$1');
        let newY = Number(currentY) - (forward ? this.animationPillSize : -this.animationPillSize);
        let out = newY > 0 || (newY <= registered.items * -this.animationPillSize) ? 0 : newY;
        let nextSelected = Math.abs(newY / this.animationPillSize) % registered.items;
        this.updateSelected(container, columnId, nextSelected);
        container.style.transitionDuration = this.animationDuration;
        container.style.transform = `translateY(${out}px)`;
    }
    rotateCarousel(container, columnId, forward = true) {
        if (UtilitiesBrowser.isIE11()) {
            this.setTransformForIEBrowser(container, columnId, forward);
        }
        else {
            this.setTransformForAnyBrowser(container, columnId, forward);
        }
    }
    onHoverScroll(params, event) {
        event.preventDefault();
        event.stopPropagation();
        this.setStopAnimation(params.columnId, true);
        let registered = this.registered.get(params.columnId);
        let delta = event.deltaY > 0 ? 1 : -1;
        let nextSelected = registered.selected + delta;
        if (nextSelected >= 0 && nextSelected < registered.items) {
            registered.selected += delta;
            registered.members.forEach((member, element) => {
                member.wheelEvent(element, params.columnId, delta > 0);
            });
        }
    }
    onSummaryClick(params, event) {
        event.preventDefault();
        event.stopPropagation();
        this.setStopAnimation(params.columnId, !this.registered.get(params.columnId).stopped);
    }
    onSummaryMouseover(params, event) {
        // trigger only once instead on every carousel mouseover
        let aggregations = params.getContent();
        if (!this.registered.has(params.columnId) || this.isPaused(params.columnId)) {
            return void 0;
        }
        this.setPauseAnimation(params.columnId, true);
        this.hovered = {
            target: params.target,
            columnId: params.columnId
        };
        this.eventBus.addListener(this.hovered.target, modules_constants_EVENT.WHEEL, {
            eventName: eventsList_EVENTS.SCROLL.SUMMARY,
            data: { columnId: params.columnId }
        });
        if (!this.isDisabled(params.columnId)) {
            this.eventBus.addListener(this.hovered.target, modules_constants_EVENT.CLICK, {
                eventName: eventsList_EVENTS.CLICK.SUMMARY,
                data: { columnId: params.columnId }
            });
        }
        if (aggregations.length > 1) {
            utilities_dom_UtilitiesDOM.removeChildren(this._popup);
            this._popup.appendChild(summary_UtilsSummary.getTooltipContent(this.eventBus, this.registered, params.columnId, aggregations));
            this._popup.open(this.hovered.target);
        }
    }
    onSummaryMouseleave(params) {
        if (this.registered.get(params.columnId)) {
            this.setPauseAnimation(params.columnId, false);
            this.eventBus.removeListener(this.hovered.target, modules_constants_EVENT.WHEEL);
            if (!this.isDisabled(params.columnId)) {
                this.eventBus.removeListener(this.hovered.target, modules_constants_EVENT.CLICK);
            }
        }
        if (this.hovered && this.hovered.columnId === params.columnId) {
            this.hovered = null;
        }
        this._popup.close();
    }
    wrapAnimations(element, animationType, params, getContent) {
        params = Object.assign({}, params || {}, { useOffset: false, isVertical: true });
        let wrappers = element.classList.contains(modules_constants_CLASS.ANIMATED_CAROUSEL.CONTENT) ?
            [element] :
            element.querySelectorAll(`.${modules_constants_CLASS.ANIMATED_CAROUSEL.CONTENT}`);
        this.eventBus.addListener(element, modules_constants_EVENT.MOUSEOVER, {
            eventName: eventsList_EVENTS.MOUSEOVER.SUMMARY,
            data: { columnId: params.columnId, getContent, target: element }
        });
        this.eventBus.addListener(element, modules_constants_EVENT.MOUSELEAVE, {
            eventName: eventsList_EVENTS.MOUSELEAVE.SUMMARY,
            data: { columnId: params.columnId, getContent, target: element }
        });
        for (let index in wrappers) {
            if (wrappers.hasOwnProperty(index)) {
                this.initAnimation(wrappers[index], animationType, params.columnId, params.useOffset, params.isVertical);
            }
        }
    }
    getRotateFunction(isVertical) {
        return !isVertical ? 'rotateY' : 'rotateX';
    }
    getCellSize(container, useOffset, isVertical) {
        let height = useOffset ?
            container.offsetHeight :
            Math.min(this.sizeHeight.getRowHeight() - 1, this.animationPillMaxSize);
        let width = container.offsetWidth;
        return isVertical ? height : width;
    }
    countRadius(cellSize, cellCount) {
        return Math.round((cellSize / 2) / Math.tan(Math.PI / cellCount));
    }
    registerAnimation(container, animationType, count, columnId, useOffset, isVertical) {
        this.registered.set(columnId, {
            selected: 0,
            items: count,
            animationType: animationType,
            isVertical: isVertical,
            useOffset: useOffset,
            radius: this.countRadius(this.getCellSize(container, useOffset, isVertical), count),
            theta: 360 / count,
            members: new Map(),
            paused: false,
            stopped: false
        });
    }
    initCarouselTransform(cells, columnId) {
        let { items, theta, isVertical, radius } = this.registered.get(columnId);
        let rotate = this.getRotateFunction(isVertical);
        for (let i = 0; i < items; i++) {
            if (i < items) {
                if (UtilitiesBrowser.isIE11()) {
                    cells[i].style.transform = `translateY(${this.animationPillSize * i}px)`;
                }
                else {
                    // firefox fix for translateZ(0px) backdrop
                    let radiusSize = radius === 0 ? 1 : radius;
                    cells[i].style.transform = `${rotate}(${theta * i}deg) translateZ(${radiusSize}px)`;
                }
            }
        }
    }
    shouldNotInitCarousel(columnId) {
        return this.registered.get(columnId).items <= 1;
    }
    updatePosition(container, columnId, step) {
        if (!this.registered.has(columnId) || this.isPaused(columnId) || this.isMemberStopped(container, columnId)) {
            return void 0;
        }
        let foundCallback = this.findMemberByElement(container, columnId);
        foundCallback.current = step;
        this.registered.get(columnId).tickStep = step;
        this.rotateCarousel(container, columnId);
    }
    initAnimation(container, animationType, columnId, useOffset, isVertical) {
        let cells = container.querySelectorAll(`.${modules_constants_CLASS.ANIMATED_CAROUSEL.ITEM}`);
        this.animationPillSize = this.getCellSize(cells[0], useOffset, isVertical);
        if (!this.registered.has(columnId)) {
            this.registerAnimation(container, animationType, cells.length, columnId, useOffset, isVertical);
        }
        if (this.shouldNotInitCarousel(columnId)) {
            return void 0;
        }
        let updatePositionBind = this.updatePosition.bind(this, container, columnId);
        let registered = this.registered.get(columnId);
        registered.members.set(container, {
            current: registered.selected,
            wheelEvent: this.rotateCarousel.bind(this),
            tickEvent: updatePositionBind
        });
        registered.tickStep = this.tick.register(updatePositionBind, registered.items);
        this.initCarouselTransform(cells, columnId);
        this.rotateCarousel(container, columnId);
    }
    unregisterAnimation(columnId) {
        if (!this.registered.has(columnId)) {
            return void 0;
        }
        let registered = this.registered.get(columnId);
        registered.members.forEach((member, element) => {
            element.style.transitionDuration = '0s';
            element.style.transform = 'none';
            this.tick.unregister(member.tickEvent, registered.items);
        });
        this.registered.delete(columnId);
    }
    onChangeViewRowHeight() {
        if (this.registered.size > 0) {
            this.registered.forEach((registered) => {
                registered.members.forEach((member, element) => {
                    let newCellSize = this.getCellSize(element, registered.useOffset, registered.isVertical);
                    if (this.animationPillSize !== newCellSize) {
                        this.animationPillSize = newCellSize;
                        registered.radius = this.countRadius(newCellSize, registered.items);
                    }
                });
            });
            this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEW.ROW.ANIMATION);
        }
    }
    destroy() {
        this.hovered = null;
        Object.keys(this.registered).forEach(this.unregisterAnimation.bind(this));
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.MOUSEOVER.SUMMARY, this.onSummaryMouseover.bind(this));
        this.eventBus.join(eventsList_EVENTS.MOUSELEAVE.SUMMARY, this.onSummaryMouseleave.bind(this));
        this.eventBus.join(eventsList_EVENTS.SCROLL.SUMMARY, this.onHoverScroll.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLICK.SUMMARY, this.onSummaryClick.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
};
animation_Animation = animation_decorate([
    Injectable(Lifetime.Scoped),
    animation_metadata("design:paramtypes", [size_height_SizeHeight, tick_Tick])
], animation_Animation);

//# sourceMappingURL=animation.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/cell.raw.js
class CellRaw {
    constructor(state, row, column) {
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return '';
    }
    get(pickInitial) {
        return this.getRawValue(this.row, this.column.id, pickInitial);
    }
    getRawValue(row, columnId, pickInitial) {
        let changed = this.getChanged(row, columnId);
        return changed && !pickInitial ? changed.value : row.data[columnId];
    }
    getChanged(row, columnId) {
        return this.state.edit.cells.find((cell) => cell.columnId === columnId && cell.rowId === row.id);
    }
    compare(value, useInitial) {
        return this.get(useInitial) === value;
    }
}
//# sourceMappingURL=cell.raw.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/progressbar.js

class progressbar_CellProgressBar extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
}
//# sourceMappingURL=progressbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/select.js

class select_CellSelect extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return null;
    }
}
//# sourceMappingURL=select.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/cell.value.js

class cell_value_CellValue extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    get(pickInitial) {
        return super.get(pickInitial).value;
    }
    compare(data, useInitial) {
        let cellValue = this.get(useInitial);
        if (data && data.hasOwnProperty('value')) {
            return data.value === cellValue;
        }
        return data === cellValue;
    }
    getDefault() {
        return { value: '' };
    }
}
//# sourceMappingURL=cell.value.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/checkbox.js

class checkbox_CellCheckbox extends cell_value_CellValue {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return { value: false };
    }
}
//# sourceMappingURL=checkbox.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/group.js


class group_CellGroup extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    get(useInitial) {
        return this.column.columns.reduce((value, column) => {
            let cellHandler = (new (types_namespaceObject[column.type] || CellRaw)(this.state, this.row, column));
            return `${value} ${cellHandler.get(useInitial)}`;
        }, '').trim();
    }
}
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/cell.text.js

class cell_text_CellText extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    get(pickInitial) {
        return super.get(pickInitial).text;
    }
    compare(data, useInitial) {
        return this.get(useInitial) === data;
    }
}
//# sourceMappingURL=cell.text.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/link.js

class link_CellLink extends cell_text_CellText {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return { text: '' };
    }
}
//# sourceMappingURL=link.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/multiselect.js


class multiselect_CellMultiselect extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return [];
    }
    get(pickInitial) {
        return this.createValue(super.get(pickInitial));
    }
    compare(data, useInitial) {
        return this.get(useInitial) === this.createValue(data);
    }
    createValue(data) {
        return Array.isArray(data) ? data.sort().join(modules_constants_SEPARATOR.JOINED_ARRAY) : data;
    }
}
//# sourceMappingURL=multiselect.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/button.js

class button_CellButton extends cell_text_CellText {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return { text: '' };
    }
}
//# sourceMappingURL=button.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/text.js

class text_CellText extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return '';
    }
}
//# sourceMappingURL=text.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/number.js

class number_CellNumber extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return null;
    }
    get(pickInitial) {
        return super.get(pickInitial);
    }
    compare(value, useInitial) {
        return this.get(useInitial) === value;
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/date.js

class date_CellDate extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    get(pickInitial) {
        return super.get(pickInitial);
    }
    compare(value, useInitial) {
        return this.getTimeValue(this.get(useInitial)) === this.getTimeValue(value);
    }
    getTimeValue(date) {
        return date ? new Date(date.toString()).getTime() : new Date().getTime();
    }
}
//# sourceMappingURL=date.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/custom.js

class custom_CellCustom extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
}
//# sourceMappingURL=custom.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/graphic.js

class graphic_CellGraphic extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
}
//# sourceMappingURL=graphic.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types/currency.js


class currency_CellCurrency extends CellRaw {
    constructor(state, row, column) {
        super(state, row, column);
        this.state = state;
        this.row = row;
        this.column = column;
    }
    static getDefault() {
        return {
            value: null,
            currency: null
        };
    }
    get(pickInitial) {
        return this.createValue(super.get(pickInitial));
    }
    compare(data, useInitial) {
        return this.get(useInitial) === this.createValue(data);
    }
    createValue(data) {
        let cellValue = value_UtilsValue.hasCurrencyValue(data) ? data : { value: '', currency: '' };
        return value_UtilsValue.stringifyCurrency(cellValue.value, cellValue.currency);
    }
}
//# sourceMappingURL=currency.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/types.js















//# sourceMappingURL=types.js.map
// CONCATENATED MODULE: ./dist-es/modules/dictionaries/dictionary.js
class Dictionary {
    constructor(data) {
        this.data = [];
        this.data = data || [];
    }
    static fromObject(source, mapper) {
        let data = Object.keys(source)
            .map((key) => mapper ? mapper({ key, value: source[key] }) : { key, value: source[key] });
        return new Dictionary(data);
    }
    findBy(predicate) {
        return this.data.find(predicate) || { key: undefined, value: undefined };
    }
    filterBy(predicate) {
        return this.data.filter(predicate) || [{ key: undefined, value: undefined }];
    }
    get(key) {
        return this.findBy((record) => record.key === key);
    }
    toObject() {
        return this.data.reduce((object, record) => {
            return object[record.key] = record.value;
        }, {});
    }
    getValueByKey(key) {
        let found = this.findBy((record) => record.key === key);
        return found ? found.value : undefined;
    }
    getKeyByValue(value) {
        let found = this.findBy((record) => record.value === value);
        return found ? found.key : undefined;
    }
    set(key, value) {
        if (this.has(key)) {
            let record = this.get(key);
            record.value = value;
        }
        else {
            this.data.push({ key, value });
        }
        return this;
    }
    has(key) {
        let record = this.get(key);
        return record.key !== undefined && record.value !== undefined;
    }
}
//# sourceMappingURL=dictionary.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/dictionaries.js
var dictionaries_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var dictionaries_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var dictionaries_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



let dictionaries_Dictionaries = class Dictionaries {
    constructor() {
        this.dictionary = new Dictionary();
    }
    setProvider(provider) {
        this.provider = provider;
    }
    getDictionary(id) {
        return dictionaries_awaiter(this, void 0, void 0, function* () {
            let dictionary = this.dictionary.get(id).value;
            if (dictionary !== undefined) {
                return dictionary;
            }
            else if (this.provider) {
                return yield this.provider.getDictionary(id);
            }
            return undefined;
        });
    }
    getAll() {
        return dictionaries_awaiter(this, void 0, void 0, function* () {
            return this.provider.getAllDictionaries();
        });
    }
    getValueByKey(id, key) {
        return dictionaries_awaiter(this, void 0, void 0, function* () {
            let dictionary = yield this.getDictionary(id);
            if (dictionary !== undefined) {
                let value = dictionary.getValueByKey(key);
                if (value) {
                    return value;
                }
                else if (this.provider) {
                    return yield this.provider.getValueByKey(id, key);
                }
                return undefined;
            }
            else {
                return undefined;
            }
        });
    }
    getKeyByValue(id, value) {
        return dictionaries_awaiter(this, void 0, void 0, function* () {
            let dictionary = yield this.getDictionary(id);
            if (dictionary !== undefined) {
                return dictionary.getKeyByValue(value);
            }
            else {
                return undefined;
            }
        });
    }
    setDictionary(id, dictionary) {
        this.dictionary.set(id, dictionary);
    }
    set(dictionaries) {
        UtilsObject.entries(dictionaries).forEach(([id, data]) => {
            this.dictionary.set(id, data);
        });
    }
    getCached(id) {
        return this.dictionary.get(id);
    }
    getCachedValue(id, key) {
        let dictionary = this.getCached(id).value;
        return dictionary ? dictionary.getValueByKey(key) : undefined;
    }
    isDictionary(dictionaryId) {
        return this.dictionary.has(dictionaryId);
    }
};
dictionaries_Dictionaries = dictionaries_decorate([
    Injectable(Lifetime.Scoped),
    dictionaries_metadata("design:paramtypes", [])
], dictionaries_Dictionaries);

//# sourceMappingURL=dictionaries.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/formatter.js
var formatter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var formatter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let formatter_Formatter = class Formatter {
    constructor(eventBus, columns, dictionaries, extensions, state) {
        this.eventBus = eventBus;
        this.columns = columns;
        this.dictionaries = dictionaries;
        this.extensions = extensions;
        this.state = state;
        this.formats = new WeakMap();
        this.columnFormats = new WeakMap();
        this.live();
    }
    initialize(extensionColumns, extensionRows, externalFormatter) {
        const defaultLanguage = this.getDefaultLanguage();
        this.externalFormatter = externalFormatter;
        this.defaultDateExecutor = new Intl.DateTimeFormat(defaultLanguage);
        this.defaultAggregationExecutor = new Intl.NumberFormat(defaultLanguage, {
            maximumFractionDigits: DEFAULT.INTL_MAXIMUM_FRACTION_DIGITS
        });
        if (extensionColumns) {
            this.setColumns(extensionColumns);
        }
        if (extensionRows) {
            this.setRows(extensionRows);
        }
    }
    getRowIntl(columnId, rowId) {
        let state = UtilsObject.getPropertyValue('format.state', this.state) || [];
        let config = state.find((data) => data.rowId === rowId && data.columnId === columnId);
        return config && config.intl;
    }
    getColumnIntl(columnId) {
        let column = this.columns.getColumnById(columnId, false);
        if (this.columnFormats.has(column)) {
            return this.columnFormats.get(column);
        }
        let dictionaryId = UtilsObject.getPropertyValue('intl', this.extensions.getColumnById(columnId));
        let dictionary = this.dictionaries.getCached(DICTIONARY_NAME.INTL).value;
        if (dictionaryId && dictionary) {
            let columnIntl = dictionary.getValueByKey(dictionaryId);
            if (!columnIntl) {
                console.warn(`Cannot find dictionary '${dictionaryId}' for column '${columnId}'`);
            }
            return columnIntl;
        }
        return void 0;
    }
    setColumns(columns) {
        Object.keys(columns).forEach((columnId) => {
            let column = this.columns.getColumnById(columnId, false);
            if (column && columns[columnId].intl) {
                let key = columns[columnId].intl;
                this.dictionaries.getValueByKey(DICTIONARY_NAME.INTL, key).then((value) => {
                    if (value) {
                        this.registerColumnFormat(column, value);
                    }
                });
            }
        });
    }
    setRows(formats) {
        formats.forEach((format) => {
            format.columnIds.forEach((columnId) => {
                let column = this.columns.getColumnById(columnId, false);
                if (column && format.intl) {
                    let key = format.intl;
                    this.dictionaries.getValueByKey(DICTIONARY_NAME.INTL, key).then((value) => {
                        if (value) {
                            this.registerRowFormat(column, value);
                        }
                    });
                }
            });
        });
    }
    createFormatData(columnId, intl, rowId) {
        return { columnId, intl, rowId };
    }
    registerRowFormat(column, intl) {
        this.registerFormat(column, intl);
    }
    registerColumnFormat(column, intl) {
        this.columnFormats.set(column, intl);
        this.registerFormat(column, intl);
    }
    getStateRowIndex(columnId, rowId) {
        return this.state.format.state.findIndex((data) => data.rowId === rowId && data.columnId === columnId);
    }
    registerFormat(column, intl) {
        if (!this.formats.has(intl)) {
            this.formats.set(intl, this.getIntlExecutor(column, intl));
        }
    }
    getDefaultLanguage() {
        return UtilsObject.getPropertyValue('translation.language', this.state.get());
    }
    getEmptyFormatExecutor(options = {}, error) {
        return {
            resolvedOptions: () => options,
            format: (value) => !error ? value : ''
        };
    }
    getIntlExecutor(col, config) {
        let language = config.language || this.getDefaultLanguage();
        let params = Object.assign({}, config, { language });
        try {
            switch (col.type) {
                case modules_constants_TYPE.DATE:
                    return new Intl.DateTimeFormat(params.language, params.options);
                case modules_constants_TYPE.CURRENCY:
                case modules_constants_TYPE.NUMBER:
                case modules_constants_TYPE.TREND:
                case modules_constants_TYPE.HARVEY_BALL:
                    return new Intl.NumberFormat(params.language, params.options);
                default:
                    return this.getEmptyFormatExecutor(params.options);
            }
        }
        catch (e) {
            console.warn(`Column '${col.id}' => ${e.message}`);
            return this.getEmptyFormatExecutor(params.options, e.message);
        }
    }
    getIntlOptionsForCurrency(column, baseConfig, currencyCode) {
        let intlOptions = Object.assign({}, baseConfig, {
            options: Object.assign({}, baseConfig.options, { currency: currencyCode })
        });
        this.registerFormat(column, intlOptions);
        return intlOptions;
    }
    formatDefaultAggregation(value) {
        return this.defaultAggregationExecutor.format(value);
    }
    formatCurrency(column, config, data) {
        let { value = null, currency = '' } = data;
        let dictionaryId = UtilsObject.getPropertyValue('dictionary', this.extensions.getColumnById(column.id));
        if (dictionaryId) {
            currency = this.dictionaries.getCachedValue(dictionaryId, currency) || '';
        }
        if (!config) {
            return value_UtilsValue.stringifyCurrency(value, currency, !currency);
        }
        let intlOptions = this.getIntlOptionsForCurrency(column, config, currency);
        return this.formats.get(intlOptions).format(value);
    }
    formatDateFromString(dateString, config) {
        return dateString === DATE_ZEROS ?
            this.formatDateForZeros(config) :
            this.formatDate(UtilsDate.getDateFromISOString(dateString), config);
    }
    formatDate(date, config) {
        if (isNaN(date.getTime())) {
            return '';
        }
        if (!config) {
            return this.defaultDateExecutor.format(date);
        }
        return this.formats.get(config).format(date);
    }
    formatDateForZeros(config) {
        let date = new Date('0001-01-01');
        if (!config) {
            let dateToConvert = this.defaultDateExecutor.format(date);
            return this.changeDateDigitsToZeros(dateToConvert.toString());
        }
        let dateToConvert = this.formats.get(config).format(date);
        return this.changeDateDigitsToZeros(dateToConvert.toString());
    }
    changeDateDigitsToZeros(dateToConvert) {
        let regex = /\d/g;
        let dateZeros = dateToConvert.replace(regex, '0');
        return dateZeros;
    }
    formatNumber(config, data) {
        if (!config || data === Object(data)) {
            return data;
        }
        return data || data === 0 ? this.formats.get(config).format(data) : '';
    }
    getCellConfig(rowId, columnId) {
        return this.getRowIntl(columnId, rowId) || this.getColumnIntl(columnId);
    }
    hasExternalFormatter() {
        return this.externalFormatter instanceof Function;
    }
    formatValue(column, row, value) {
        if (this.hasExternalFormatter()) {
            return this.externalFormatter(column.id, row, value);
        }
        let config = this.getCellConfig(row.id, column.id);
        switch (column.type) {
            case modules_constants_TYPE.CURRENCY:
                return this.formatCurrency(column, config, value);
            case modules_constants_TYPE.DATE:
                return this.formatDateFromString(value, config);
            case modules_constants_TYPE.NUMBER:
            case modules_constants_TYPE.TREND:
            case modules_constants_TYPE.HARVEY_BALL:
                return this.formatNumber(config, value);
            default:
                return value;
        }
    }
    formatNumberAggregation(config, data) {
        if (isNaN(data)) {
            return modules_constants_SEPARATOR.AGGREGATION_EMPTY;
        }
        if (!config) {
            return this.formatDefaultAggregation(data);
        }
        return this.formatNumber(config, data);
    }
    formatCurrencyAggregation(column, config, data, type) {
        let { value = '', currency = '' } = data;
        if (!config) {
            let amount = this.formatDefaultAggregation(value);
            let dictionaryId = UtilsObject.getPropertyValue('dictionary', this.extensions.getColumnById(column.id));
            if (dictionaryId) {
                currency = this.dictionaries.getCachedValue(dictionaryId, currency) || '';
            }
            let currencyName = currency.toUpperCase();
            return (type === AGGREGATION_TYPE.COUNT ? `${currencyName} ${amount}` : `${amount} ${currencyName}`).trim();
        }
        return this.formatCurrency(column, config, data);
    }
    formatCurrenciesAggregation(column, config, data, type) {
        if (!data.length) {
            return [value_UtilsValue.stringifyCurrency(0, '')];
        }
        return data.map((value) => {
            if (isNaN(value[1])) {
                return value_UtilsValue.stringifyCurrency(modules_constants_SEPARATOR.AGGREGATION_EMPTY, value[0]);
            }
            let cellValue = { value: value[1], currency: value[0] };
            return this.formatCurrencyAggregation(column, config, cellValue, type);
        });
    }
    formatAggregation(columnId, type, data) {
        let column = this.columns.getColumnById(columnId, false);
        let config = AGGREGATION_TYPES_WITHOUT_FORMAT.indexOf(type) === -1 ? this.getColumnIntl(columnId) : null;
        if (type === AGGREGATION_TYPE.RANGE) {
            return this.formatRangeAggregation(column, config, data);
        }
        if (column.type === modules_constants_TYPE.CURRENCY) {
            return this.formatCurrenciesAggregation(column, config, data[type], type)
                .join(modules_constants_SEPARATOR.JOINED_ARRAY);
        }
        return UtilitiesArray.wrapInArray(data[type])
            .map((value) => this.formatNumberAggregation(config, value))
            .join(modules_constants_SEPARATOR.JOINED_ARRAY);
    }
    formatRangeAggregation(column, config, data) {
        let min, max;
        if (column.type === modules_constants_TYPE.CURRENCY) {
            min = this.formatCurrenciesAggregation(column, config, data['min']);
            max = this.formatCurrenciesAggregation(column, config, data['max']);
        }
        else {
            min = [this.formatNumberAggregation(config, data['min'])];
            max = [this.formatNumberAggregation(config, data['max'])];
        }
        return min.map((minValue, index) => {
            return `${minValue} ${modules_constants_SEPARATOR.AGGREGATION_RANGE} ${max[index]}`;
        }).join(modules_constants_SEPARATOR.JOINED_ARRAY);
    }
    destroy() {
        this.formats = undefined;
        this.columnFormats = undefined;
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
};
formatter_Formatter = formatter_decorate([
    Injectable(Lifetime.Scoped),
    formatter_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        columns_Columns,
        dictionaries_Dictionaries,
        extensions_Extensions,
        state_State])
], formatter_Formatter);

//# sourceMappingURL=formatter.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/cell/cell.js
var cell_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cell_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






let cell_Cell = class Cell {
    constructor(columns, formatter, state) {
        this.columns = columns;
        this.formatter = formatter;
        this.state = state;
    }
    getValue(row, columnId) {
        let column = this.columns.getColumnById(columnId, false);
        let value = this.getRawValue(row, columnId);
        return this.formatter.formatValue(column, row, value);
    }
    getRawValue(row, columnId, pickInitial) {
        let changed = this.getChanged(row, columnId);
        return changed && !pickInitial ? changed.value : row.data[columnId];
    }
    /* tslint:disable-next-line:cyclomatic-complexity */
    getFullValue(column, cellValue, insensitive = false) {
        switch (column.type) {
            case modules_constants_TYPE.NUMBER:
            case modules_constants_TYPE.TREND:
            case modules_constants_TYPE.HARVEY_BALL:
                return cellValue === null ? cellValue : Number(cellValue);
            case modules_constants_TYPE.CHECKBOX:
                return Boolean(cellValue);
            case modules_constants_TYPE.LINK:
                return cellValue.href;
            default:
                let value = `${cellValue}`;
                return insensitive ? value.toLowerCase() : value;
        }
    }
    getMergedValue(row, columnId, ignoreFormat = false, insensitive = false) {
        let column = this.columns.getColumnById(columnId, false);
        let value = ignoreFormat ? this.getRawValue(row, column.id) : this.getValue(row, column.id);
        return this.getFullValue(column, value, insensitive);
    }
    getChanged(row, columnId) {
        return this.state.edit.cells.find((cell) => cell.columnId === columnId && cell.rowId === row.id);
    }
    compareValue(row, columnId, value, useInitial) {
        let column = this.columns.getColumnById(columnId, false);
        let cellHandler = new (types_namespaceObject[column.type] || CellRaw)(this.state, row, column);
        return cellHandler.compare(value, useInitial);
    }
    hasChanged(row, columnId) {
        return !!this.getChanged(row, columnId);
    }
    isEditable(row, column) {
        let state = this.state.get();
        return state.edit.enabled
            && !this.columns.isGroupedColumn(column.id)
            && this.columns.isEditable(column)
            && state.edit.disabled.indexOf(row.id) === -1;
    }
    getCellField(cell, column) {
        switch (column.type) {
            case modules_constants_TYPE.CHECKBOX:
            case modules_constants_TYPE.BUTTON:
            case modules_constants_TYPE.LINK:
                return cell.text;
            default:
                return cell;
        }
    }
};
cell_Cell = cell_decorate([
    Injectable(Lifetime.Scoped),
    cell_metadata("design:paramtypes", [columns_Columns, formatter_Formatter, state_State])
], cell_Cell);

//# sourceMappingURL=cell.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/coloring.js
var coloring_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let Coloring = class Coloring {
    initialize(externalColoring) {
        this.externalColoring = externalColoring;
    }
    hasExternal() {
        return this.externalColoring instanceof Function;
    }
    get(id, row, value) {
        return this.externalColoring && this.externalColoring(id, row, value);
    }
};
Coloring = coloring_decorate([
    Injectable(Lifetime.Scoped)
], Coloring);

//# sourceMappingURL=coloring.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/types/null.js
class NullableType {
    validate(value, isNullable) {
        return isNullable ? value === null : value !== null;
    }
}
//# sourceMappingURL=null.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/types/string.js

class string_StringType {
    constructor() {
        this.nullableType = new NullableType();
    }
    validate(value, isNullable) {
        let isTypeValid = typeof value === 'string';
        if (isNullable) {
            return isTypeValid || this.nullableType.validate(value, isNullable);
        }
        return isTypeValid;
    }
}
//# sourceMappingURL=string.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validator.js

class validator_Validator {
    constructor(column, metadata, dictionaries) {
        this.column = column;
        this.metadata = metadata;
        this.dictionaries = dictionaries;
        if (column && metadata && dictionaries) {
            let dictionaryName = UtilsObject.getPropertyValue(`config.extensions.columns.${this.column.id}.dictionary`, metadata);
            this.dictionary = dictionaries[dictionaryName];
        }
    }
    run(data) {
        return this.validateType(data) && this.validateData(data);
    }
    validateType(value) {
        return this.type.validate(value, this.isNullable);
    }
    validateData(value) {
        return true;
    }
    validateDictionary(value) {
        if (this.dictionary) {
            return this.dictionary[value] !== undefined;
        }
        return true;
    }
}
//# sourceMappingURL=validator.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/button.js
class button_Button {
    static isNullable() {
        return {
            text: false
        };
    }
    static prepare(columnConfig) {
        return {
            text: ''
        };
    }
}
//# sourceMappingURL=button.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/progressbar.js

class progressbar_ProgressBar {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return UtilsObject.getPropertyValue('config.from', columnConfig) || 0;
    }
}
//# sourceMappingURL=progressbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/checkbox.js
class checkbox_Checkbox {
    static isNullable() {
        return {
            value: false,
            label: false
        };
    }
    static prepare(columnConfig) {
        return {
            value: false,
            label: ''
        };
    }
}
//# sourceMappingURL=checkbox.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/currency.js
class currency_Currency {
    static isNullable() {
        return {
            value: true,
            currency: false
        };
    }
    static prepare(columnConfig) {
        return {
            value: null,
            currency: ''
        };
    }
}
//# sourceMappingURL=currency.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/custom.js
class custom_Custom {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return {};
    }
}
//# sourceMappingURL=custom.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/date.js
class date_Date {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return '';
    }
}
//# sourceMappingURL=date.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/graphic.js
class graphic_Graphic {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return '';
    }
}
//# sourceMappingURL=graphic.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/link.js
class link_Link {
    static isNullable() {
        return {
            href: false,
            text: false,
            title: false
        };
    }
    static prepare(columnConfig) {
        return {
            href: '',
            text: '',
            title: ''
        };
    }
}
//# sourceMappingURL=link.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/multiselect.js
class multiselect_Multiselect {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return [];
    }
}
//# sourceMappingURL=multiselect.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/number.js
class number_Number {
    static isNullable() {
        return true;
    }
    static prepare(columnConfig) {
        return null;
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/select.js
class select_Select {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return '';
    }
}
//# sourceMappingURL=select.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/text.js
class text_Text {
    static isNullable() {
        return false;
    }
    static prepare(columnConfig) {
        return '';
    }
}
//# sourceMappingURL=text.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/trend.js
class trend_Trend {
    static isNullable() {
        return true;
    }
    static prepare() {
        return null;
    }
}
//# sourceMappingURL=trend.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/types/harveyBall.js
class harveyBall_HarveyBall {
    static isNullable() {
        return true;
    }
    static prepare() {
        return null;
    }
}
//# sourceMappingURL=harveyBall.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/empty.js















//# sourceMappingURL=empty.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/text.js



class text_TextValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new string_StringType();
        this.isNullable = text_Text.isNullable();
    }
}
//# sourceMappingURL=text.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/types/number.js

class number_NumberType {
    constructor() {
        this.nullableType = new NullableType();
    }
    validate(value, isNullable) {
        let isTypeValid = typeof value === 'number';
        if (isNullable) {
            return isTypeValid || this.nullableType.validate(value, isNullable);
        }
        return isTypeValid;
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/number.js



class number_NumberValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new number_NumberType();
        this.isNullable = number_Number.isNullable();
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/types/boolean.js

class boolean_BooleanType {
    constructor() {
        this.nullableType = new NullableType();
    }
    validate(value, isNullable) {
        let isTypeValid = typeof value === 'boolean';
        if (isNullable) {
            return isTypeValid || this.nullableType.validate(value, isNullable);
        }
        return isTypeValid;
    }
}
//# sourceMappingURL=boolean.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/checkbox.js



class checkbox_CheckboxValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new boolean_BooleanType();
        this.isNullable = checkbox_Checkbox.isNullable().value;
    }
    run(data) {
        return this.validateType(data);
    }
    validateType(data) {
        if (!data) {
            return false;
        }
        let valueType = new boolean_BooleanType();
        let { value: isNullableValue } = checkbox_Checkbox.isNullable();
        return valueType.validate(data.value, isNullableValue);
    }
}
//# sourceMappingURL=checkbox.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/select.js



class select_SelectValidator extends validator_Validator {
    constructor(column, metadata, dictionaries) {
        super(column, metadata, dictionaries);
        this.column = column;
        this.metadata = metadata;
        this.dictionaries = dictionaries;
        this.type = new string_StringType();
        this.isNullable = select_Select.isNullable();
    }
}
//# sourceMappingURL=select.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/progressbar.js




class progressbar_ProgressBarValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new number_NumberType();
        this.isNullable = progressbar_ProgressBar.isNullable();
    }
    run(data) {
        return super.validateType(data) && this.validateData(data);
    }
    validateData(data) {
        let extension;
        if (this.column && this.metadata) {
            extension = UtilsObject.getPropertyValue(`config.extensions.columns.${this.column.id}`, this.metadata);
        }
        if (!extension) {
            return false;
        }
        let from = UtilsObject.getPropertyValue('config.from', extension);
        let to = UtilsObject.getPropertyValue('config.to', extension);
        return (data >= from && data <= to);
    }
}
//# sourceMappingURL=progressbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/button.js



class button_ButtonValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
    }
    run(data) {
        return this.validateType(data);
    }
    validateType(data) {
        if (!data) {
            return false;
        }
        let textType = new string_StringType();
        let { text: isNullableText } = button_Button.isNullable();
        return textType.validate(data.text, isNullableText);
    }
}
//# sourceMappingURL=button.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/date.js




class date_DateValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new string_StringType();
        this.isNullable = date_Date.isNullable();
    }
    run(date) {
        return super.validateType(date) && this.validateData(date);
    }
    validateData(date) {
        return UtilsDate.isDateEmpty(date) || UtilsDate.isDateStringValid(date);
    }
}
//# sourceMappingURL=date.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/graphic.js



class graphic_GraphicValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
        this.type = new string_StringType();
        this.isNullable = graphic_Graphic.isNullable();
    }
}
//# sourceMappingURL=graphic.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/link.js



class link_LinkValidator extends validator_Validator {
    constructor(column, metadata) {
        super(column, metadata);
        this.column = column;
        this.metadata = metadata;
    }
    isOptionalHrefValid(href) {
        if (typeof href === 'undefined') {
            return true;
        }
        let hrefType = new string_StringType();
        let { href: isNullableHref } = link_Link.isNullable();
        return hrefType.validate(href, isNullableHref);
    }
    isTextValid(text) {
        let textType = new string_StringType();
        let { text: isNullableText } = link_Link.isNullable();
        return textType.validate(text, isNullableText);
    }
    run(data) {
        return this.validateType(data);
    }
    validateType(data) {
        if (!data) {
            return false;
        }
        return this.isTextValid(data.text) &&
            this.isOptionalHrefValid(data.href);
    }
}
//# sourceMappingURL=link.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/multiselect.js



class multiselect_MultiselectValidator extends validator_Validator {
    constructor(column, metadata, dictionaries) {
        super(column, metadata, dictionaries);
        this.column = column;
        this.metadata = metadata;
        this.dictionaries = dictionaries;
        this.type = new string_StringType();
        this.isNullable = multiselect_Multiselect.isNullable();
    }
    validateType(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        return value.every((value) => {
            return super.validateType(value);
        });
    }
}
//# sourceMappingURL=multiselect.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/currency.js




class currency_CurrencyValidator extends validator_Validator {
    constructor(column, metadata, dictionaries) {
        super(column, metadata, dictionaries);
        this.column = column;
        this.metadata = metadata;
        this.dictionaries = dictionaries;
    }
    run(data) {
        return this.validateType(data);
    }
    validateType(data) {
        if (!data) {
            return false;
        }
        let currencyType = new string_StringType();
        let valueType = new number_NumberType();
        let { value: isNullableValue, currency: isNullableCurrency } = currency_Currency.isNullable();
        return currencyType.validate(data.currency, isNullableCurrency) &&
            valueType.validate(data.value, isNullableValue);
    }
    validateDictionary(value) {
        return super.validateDictionary(value.currency);
    }
}
//# sourceMappingURL=currency.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/validators/validators.js












//# sourceMappingURL=validators.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/validator/data.validation.js
var data_validation_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




let data_validation_DataValidation = class DataValidation {
    constructor() {
        this.validators = {};
    }
    initialize(metadata, dictionaries) {
        this.createDataValidatorsMap(metadata.columns, metadata, dictionaries);
    }
    validateData(columnId, data) {
        if (this.hasColumnValidator(columnId)) {
            return this.validators[columnId].validateData(data);
        }
        return true;
    }
    validateType(columnId, value) {
        if (this.hasColumnValidator(columnId)) {
            return this.validators[columnId].validateType(value);
        }
        return true;
    }
    validateDictionary(columnId, value, shouldRun = true) {
        if (shouldRun && this.hasColumnValidator(columnId)) {
            return this.validators[columnId].validateDictionary(value);
        }
        return true;
    }
    hasColumnValidator(columnId) {
        return !!this.validators[columnId];
    }
    createDataValidatorsMap(dataColumn, metadata, dictionaries) {
        dataColumn.forEach((column) => {
            if (column.type === modules_constants_TYPE.GROUP) {
                this.createDataValidatorsMap(column.columns, metadata, dictionaries);
            }
            else if (validators_namespaceObject[column.type]) {
                this.validators[column.id] = new validators_namespaceObject[column.type](column, metadata, dictionaries);
            }
        });
    }
    validateValue(columnId, value, errorPrefix, dictionaryCheck = false) {
        let normalizedValue = value_UtilsValue.normalizeValue(value, true);
        let validationIssues = [];
        let isValid = true;
        if (!this.validateType(columnId, value)) {
            validationIssues.push('has incorrect type');
            isValid = false;
        }
        if (!this.validateData(columnId, value)) {
            validationIssues.push('is incorrect');
            isValid = false;
        }
        if (!this.validateDictionary(columnId, value, dictionaryCheck)) {
            validationIssues.push('not exists in given dictionary');
            isValid = false;
        }
        if (!isValid) {
            console.warn(`${errorPrefix} '${normalizedValue}' ${validationIssues.join(' and ')}.`);
        }
        return isValid;
    }
};
data_validation_DataValidation = data_validation_decorate([
    Injectable(Lifetime.Scoped)
], data_validation_DataValidation);

//# sourceMappingURL=data.validation.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/event/event.validation.js

class event_validation_EventValidation {
    static isEventPresent(eventName, list) {
        return list.some((event) => event === eventName);
    }
    static isClickRowEventValid(eventName, state) {
        return !(eventName === eventsList_EVENTS.CLICK.ROW && state.edit.enabled);
    }
    static isEventValid(eventName, state, list) {
        let isEventPresent = event_validation_EventValidation.isEventPresent(eventName, list);
        let isClickRowEventValid = event_validation_EventValidation.isClickRowEventValid(eventName, state);
        if (!isEventPresent) {
            console.warn(`There is no such event as ${eventName}`);
        }
        if (!isClickRowEventValid) {
            console.warn(`${eventName} in edit mode is not supported`);
        }
        return isEventPresent || !isClickRowEventValid;
    }
}
//# sourceMappingURL=event.validation.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/event/event.manager.js
var event_manager_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var event_manager_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let event_manager_EventManager = class EventManager {
    constructor(eventBus, state) {
        this.eventBus = eventBus;
        this.state = state;
        this.externalListeners = new Map();
        this.eventList = [];
        this.getEventList(eventsList_EVENTS);
    }
    join(eventName, callback) {
        if (!event_validation_EventValidation.isEventValid(eventName, this.state, this.eventList)) {
            return void 0;
        }
        if (!this.externalListeners.has(eventName)) {
            this.externalListeners.set(eventName, []);
        }
        this.externalListeners.get(eventName).push(callback);
        this.eventBus.join(eventName, callback);
    }
    leave(eventName, callback) {
        if (!this.externalListeners.has(eventName)) {
            console.warn(`Membership for '${eventName}' not found`);
            return void 0;
        }
        let index = this.externalListeners.get(eventName).indexOf(callback);
        if (index === -1) {
            console.warn(`No such callback on caller ${eventName}`);
            return void 0;
        }
        this.externalListeners.get(eventName).splice(index, 1);
        this.eventBus.leave(eventName, callback);
    }
    getEventList(list) {
        Object.keys(list).forEach((key) => {
            if (list[key] instanceof Object) {
                this.getEventList(list[key]);
            }
            else {
                this.eventList.push(list[key]);
            }
        });
    }
};
event_manager_EventManager = event_manager_decorate([
    Injectable(Lifetime.Scoped),
    event_manager_metadata("design:paramtypes", [services_event_bus_ServicesEventBus, state_State])
], event_manager_EventManager);

//# sourceMappingURL=event.manager.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/loading.js
var loading_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var loading_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let loading_Loading = class Loading {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.enabled = false;
        this.queue = [];
        this.live();
    }
    prepare(layout, loaderXRef) {
        this.layout = layout;
        this.loader = loaderXRef;
        this.prepareWrapper();
        this.prepareMessenger();
        this.prepareListeners();
    }
    prepareWrapper() {
        this.wrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.LOADER.ELEMENTS.HOST]);
        let host = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.LOADER.ELEMENTS.WRAPPER]);
        host.appendChild(this.loader);
        this.wrapper.appendChild(host);
        this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).appendChild(this.wrapper);
    }
    prepareMessenger() {
        this.messenger = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.LOADER.ELEMENTS.MESSENGER]);
        this.wrapper.appendChild(this.messenger);
    }
    isQueueEmpty() {
        return !this.queue.length;
    }
    flushQueue() {
        while (!this.isQueueEmpty()) {
            this.queue.shift()();
        }
        this.stop();
    }
    count() {
        if (this.enabled) {
            let seconds = (Date.now() - this.time) / 1000;
            if (seconds > TIME.LOADER.WARN) {
                let left = Number(Math.max(0, TIME.LOADER.MAX - seconds)).toFixed(1);
                this.messenger.innerText = `please wait ... ${left}s`;
            }
            if (seconds > TIME.LOADER.MAX) {
                this.stop();
            }
            else {
                UtilitiesDelay.queue(this.count.bind(this), 100);
            }
        }
    }
    show() {
        this.enabled = true;
        utilities_dom_UtilitiesDOM.addClass(this.wrapper, [modules_constants_CLASS.LOADER.STATE.ENABLED]);
        if (this.loader.visible !== undefined) {
            this.loader.visible = true;
        }
        this.time = Date.now();
        this.count();
    }
    hide() {
        this.enabled = false;
        this.messenger.innerText = ``;
        utilities_dom_UtilitiesDOM.removeClass(this.wrapper, [modules_constants_CLASS.LOADER.STATE.ENABLED]);
        if (this.loader.visible !== undefined) {
            this.loader.visible = false;
        }
    }
    run(callback) {
        let onEnd = () => {
            this.wrapper.removeEventListener(modules_constants_EVENT.TRANSITIONEND, onEnd);
            if (callback) {
                callback();
            }
            this.flushQueue();
        };
        if (callback || !this.isQueueEmpty()) {
            this.wrapper.addEventListener(modules_constants_EVENT.TRANSITIONEND, onEnd);
            UtilitiesDelay.queue(onEnd.bind(this));
            UtilitiesDelay.queue(this.show.bind(this));
        }
        else {
            this.show();
        }
    }
    start(callback) {
        if (!this.layout) {
            console.warn(`Run prepare() first`);
            return void 0;
        }
        if (!this.enabled) {
            this.run(callback);
        }
        else if (callback) {
            this.queue.push(callback);
        }
    }
    stop() {
        if (!this.layout) {
            console.warn(`Run prepare() first`);
            return void 0;
        }
        UtilitiesDelay.queue(() => {
            if (!this.isQueueEmpty()) {
                this.flushQueue();
            }
            else {
                this.hide();
            }
        }, 500);
    }
    destroy() {
        utilities_dom_UtilitiesDOM.removeChildren(this.wrapper);
        if (!this.isQueueEmpty) {
            this.flushQueue();
        }
    }
    onBegin() {
        this.start();
    }
    onEnd() {
        this.stop();
    }
    recursiveJoin(event, callback) {
        if (event instanceof Object) {
            Object.keys(event).forEach((key) => this.recursiveJoin(event[key], callback));
        }
        this.eventBus.join(event, callback);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
    prepareListeners() {
        this.recursiveJoin(eventsList_EVENTS.ACTION, this.onBegin.bind(this));
        this.recursiveJoin(eventsList_EVENTS.REJECT, this.onEnd.bind(this));
        this.recursiveJoin(eventsList_EVENTS.DONE, this.onEnd.bind(this));
    }
};
loading_Loading = loading_decorate([
    Injectable(Lifetime.Scoped),
    loading_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], loading_Loading);

//# sourceMappingURL=loading.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/queue.js
var queue_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var queue_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


let queue_Queue = class Queue {
    constructor() {
        this.list = [];
    }
    add(callback, condition) {
        this.list.push({ callback, condition });
    }
    flush(condition) {
        return queue_awaiter(this, void 0, void 0, function* () {
            let list = this.list.slice(0);
            Object.keys(condition).forEach((property) => {
                list.forEach((item, index, array) => {
                    if (item.condition[property] !== condition[property]) {
                        array.splice(index, 1);
                    }
                });
            });
            yield UtilitiesArray.forEachAsync(list, (item) => queue_awaiter(this, void 0, void 0, function* () {
                this.list.splice(this.list.indexOf(item), 1);
                yield item.callback();
            }));
        });
    }
};
queue_Queue = queue_decorate([
    Injectable(Lifetime.Scoped)
], queue_Queue);

//# sourceMappingURL=queue.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/services/row/row.js
var row_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var row_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let row_Row = class Row {
    constructor(state) {
        this.state = state;
    }
    isNormalRow(rowDescriptor) {
        return rowDescriptor && rowDescriptor.type === constants_VIEW.ROW.TYPE.NORMAL;
    }
    isGroupRow(rowDescriptor) {
        return rowDescriptor && rowDescriptor.type === constants_VIEW.ROW.TYPE.GROUP;
    }
    isRemoved(rowId) {
        return this.state.edit.enabled
            && this.state.edit.removed.some((removedRowId) => removedRowId === rowId);
    }
    isAdded(rowId) {
        return this.state.edit.enabled
            && this.state.edit.added.some((row) => row.id === rowId);
    }
    isDisabled(rowId) {
        return this.state.edit.enabled
            && this.state.edit.disabled.some((disbaledRowId) => disbaledRowId === rowId);
    }
    isMarked(rowId) {
        return this.state.mark.enabled && this.state.mark.state.indexOf(rowId) !== -1;
    }
    isFreeze(rowId) {
        return this.state.freeze.enabled && this.state.freeze.state.indexOf(rowId) !== -1;
    }
    filterOutRemoved(rows) {
        return rows.filter((row) => !this.isRemoved(row.id));
    }
    getDataForExport(rowDescriptor) {
        switch (rowDescriptor.type) {
            case constants_VIEW.ROW.TYPE.GROUP:
                let datasetGroup = rowDescriptor.group;
                return {
                    columnId: datasetGroup.columnId,
                    value: datasetGroup.row.data[datasetGroup.columnId]
                };
            case constants_VIEW.ROW.TYPE.NORMAL:
            default:
                return rowDescriptor.data;
        }
    }
};
row_Row = row_decorate([
    Injectable(Lifetime.Scoped),
    row_metadata("design:paramtypes", [state_State])
], row_Row);

//# sourceMappingURL=row.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/services/row/wrapped.js

class wrapped_RowWrapped {
    constructor(rowDescriptor, rowId) {
        this.rowDescriptor = rowDescriptor;
        this.rowHold = {};
        this.savedData = {};
        this.setId(rowId);
    }
    getId() {
        return this.rowDescriptor.id;
    }
    setId(id) {
        this.rowDescriptor.id = id;
    }
    getDataRowDescriptor() {
        return this.rowDescriptor;
    }
    getType() {
        return this.rowDescriptor.type;
    }
    getDataRow() {
        return this.rowDescriptor.data;
    }
    getGroupDataRow() {
        if (this.getType() !== constants_VIEW.ROW.TYPE.GROUP) {
            console.log('This is not group row');
            return void 0;
        }
        return this.rowDescriptor.group;
    }
    getViewRow() {
        return this.rowHold.primary;
    }
    getViewType(isMainView) {
        return isMainView ? 'primary' : 'secondary';
    }
    hold(view, isMainView) {
        let viewType = this.getViewType(isMainView);
        if (this.rowHold[viewType] === view) {
            console.warn('Row is already hold');
            return void 0;
        }
        if (this.rowHold[viewType]) {
            this.rowHold[viewType].unHoldWrapped();
        }
        this.rowHold[viewType] = view;
    }
    unhold(isMainView) {
        let viewType = this.getViewType(isMainView);
        if (this.rowHold[viewType]) {
            this.rowHold[viewType] = undefined;
        }
        else {
            console.warn('Row is already unhold');
        }
    }
    isHolden() {
        return this.rowHold.primary !== undefined || this.rowHold.secondary !== undefined;
    }
    setDataRowCell(columnId, dataRowCell) {
        this.savedData[columnId] = dataRowCell;
    }
    getDataRowCell(columnId) {
        switch (this.getType()) {
            case constants_VIEW.ROW.TYPE.NORMAL:
            case constants_VIEW.ROW.TYPE.REMOVED:
                let savedValue = this.savedData[columnId];
                if (typeof savedValue !== 'undefined') {
                    return savedValue;
                }
                return this.rowDescriptor.data ? this.rowDescriptor.data[columnId] : undefined;
            default:
                console.warn(`method not support on row type '${this.getType()}'`);
                return void 0;
        }
    }
    setPreparedData(preparedData) {
        this.preparedData = preparedData;
    }
    getPreparedData() {
        return this.preparedData;
    }
    destroy() {
        switch (this.getType()) {
            case constants_VIEW.ROW.TYPE.NORMAL:
                Object.keys(this.preparedData.cells)
                    .forEach((columnId) => this.preparedData.cells[columnId].destroy());
                break;
            case constants_VIEW.ROW.TYPE.GROUP:
                this.preparedData.group.destroy();
                break;
        }
        this.savedData = {};
        this.preparedData = undefined;
    }
}
//# sourceMappingURL=wrapped.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/services/row/row.cache.js
var row_cache_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var row_cache_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let row_cache_RowCache = class RowCache {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.idIncrementCount = 0;
        this.rowsNormalMap = {};
        this.rowsSpecialMap = {};
        this.live();
    }
    wrapNormal(dataRowDescriptor) {
        if (!this.rowsNormalMap[dataRowDescriptor.id]) {
            this.rowsNormalMap[dataRowDescriptor.id] = new wrapped_RowWrapped(dataRowDescriptor, dataRowDescriptor.id);
        }
        return this.rowsNormalMap[dataRowDescriptor.id];
    }
    wrapSpecial(dataRowDescriptor) {
        if (!this.rowsSpecialMap[dataRowDescriptor.id]) {
            this.rowsSpecialMap[dataRowDescriptor.id] = new wrapped_RowWrapped(dataRowDescriptor, dataRowDescriptor.id);
        }
        return this.rowsSpecialMap[dataRowDescriptor.id];
    }
    getNormal(dataRowDescriptor) {
        return this.rowsNormalMap[dataRowDescriptor.id];
    }
    getSpecial(dataRowDescriptor) {
        return this.rowsSpecialMap[dataRowDescriptor.id];
    }
    wrapEmpty() {
        return this.wrapNormal({ id: '', data: {}, type: constants_VIEW.ROW.TYPE.EMPTY });
    }
    isNormalRow(rowDescriptor) {
        return rowDescriptor && rowDescriptor.type === constants_VIEW.ROW.TYPE.NORMAL;
    }
    getDataForExport(rowDescriptor) {
        switch (rowDescriptor.type) {
            case constants_VIEW.ROW.TYPE.GROUP:
                let datasetGroup = rowDescriptor.group;
                return {
                    columnId: datasetGroup.columnId,
                    value: datasetGroup.row.data[datasetGroup.columnId]
                };
            case constants_VIEW.ROW.TYPE.NORMAL:
            default:
                return rowDescriptor.data;
        }
    }
    destroy() {
        this.idIncrementCount = 0;
    }
    onRefreshView() {
        this.onClearCache();
    }
    onClearCache() {
        this.rowsNormalMap = {};
        this.rowsSpecialMap = {};
    }
    onActionDataReload() {
        this.onRefreshView();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
        this.eventBus.join(eventsList_EVENTS.REFRESH_VIEW, this.onRefreshView.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
    }
};
row_cache_RowCache = row_cache_decorate([
    Injectable(Lifetime.Scoped),
    row_cache_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], row_cache_RowCache);

//# sourceMappingURL=row.cache.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/size/size.container.js
var size_container_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var size_container_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let size_container_SizeContainer = class SizeContainer {
    constructor(eventBus) {
        this.eventBus = eventBus;
    }
    setContainer(container) {
        this.container = container;
        this.prepare();
        this.live();
    }
    getContainerRect() {
        return this.containerRect;
    }
    getContainerStyles() {
        return this.containerStyle;
    }
    prepare() {
        let { height, width } = this.container.getBoundingClientRect();
        this.containerRect = { height, width };
        this.containerStyle = window.getComputedStyle(this.container);
    }
    onChangeContainer({ contentRect }) {
        if (this.containerRect.height !== Math.round(contentRect.height)) {
            this.containerRect.height = Math.round(contentRect.height);
            this.eventBus.fire(eventsList_EVENTS.CHANGE.CONTAINER.HEIGHT, { contentRect });
        }
        if (this.containerRect.width !== Math.round(contentRect.width)) {
            this.containerRect.width = Math.round(contentRect.width);
            this.eventBus.fire(eventsList_EVENTS.CHANGE.CONTAINER.WIDTH, { contentRect });
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.CONTAINER, this.onChangeContainer.bind(this));
    }
};
size_container_SizeContainer = size_container_decorate([
    Injectable(Lifetime.Scoped),
    size_container_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], size_container_SizeContainer);

//# sourceMappingURL=size.container.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/size/size.width.js
var size_width_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var size_width_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







let size_width_SizeWidth = class SizeWidth {
    constructor(eventBus, columns, layout) {
        this.eventBus = eventBus;
        this.columns = columns;
        this.layout = layout;
        this.isScrollVertical = false;
        this.scrollSize = 0;
        this.gridWidth = 0;
        this.sizeWidthColumns = {};
        this.scrollCache = {
            verticalScrollWidth: undefined,
            isVerticalScroll: true
        };
        this.cache = {};
        this.aggregation = 0;
        this.live();
    }
    getColumnById(columnId) {
        return this.sizeWidthColumns[columnId] || {};
    }
    getColumnWidth(columnId) {
        return this.getColumnById(columnId).width;
    }
    getColumns() {
        return this.sizeWidthColumns;
    }
    setColumns(columns) {
        this.sizeWidthColumns = columns;
        this.clearCache();
    }
    clearCache() {
        this.cache = {};
    }
    getLeftOffset(columnId) {
        let columnsDelegate;
        let left = 0;
        let done = false;
        if (this.columns.isFreeze(columnId)) {
            columnsDelegate = this.columns.getFreezeColumnIds();
        }
        else {
            columnsDelegate = this.columns.getContentColumnIds();
        }
        columnsDelegate.forEach((delegateColumnId) => {
            if (delegateColumnId === columnId) {
                done = true;
            }
            if (!done) {
                left += this.getColumnWidth(delegateColumnId);
            }
        });
        return left;
    }
    getWidthString(width) {
        return `${width}px`;
    }
    getContentColumnsWidth(force) {
        if (force || !this.cache.contentColumnsWidth) {
            this.cache.contentColumnsWidth = this.columns.getContentColumnIds()
                .reduce((result, columnId) => result + this.getColumnWidth(columnId), 0);
        }
        return this.cache.contentColumnsWidth;
    }
    getFreezeColumnsWidth(force) {
        if (force || !this.cache.freezeColumnsWidth) {
            this.cache.freezeColumnsWidth = this.columns.getFreezeColumnIds()
                .reduce((result, columnId) => result + this.getColumnWidth(columnId), 0);
        }
        return this.cache.freezeColumnsWidth;
    }
    getGridWidth() {
        return this.gridWidth;
    }
    getAllColumnsWidth(force) {
        if (force || !this.cache.allColumnsWidth) {
            this.cache.allColumnsWidth = this.columns.getAllColumnIds()
                .reduce((result, columnId) => result + (this.getColumnWidth(columnId) || 0), 0);
        }
        return this.cache.allColumnsWidth;
    }
    getFreezeDiff(reverse = false) {
        let maxPinnedWidth = this.getGridWidth() * SIZE.LIMIT_FACTOR;
        this.cache.freezeDiff =
            Math.max(0, this.getFreezeColumnsWidth() - maxPinnedWidth);
        return reverse ? -this.cache.freezeDiff : this.cache.freezeDiff;
    }
    getContentDiff() {
        let width = this.getGridWidth() - this.getAllColumnsWidth() - (this.isScrollVertical ? this.scrollSize : 0);
        this.cache.contentDiff = Math.max(0, width);
        return this.cache.contentDiff;
    }
    clearScrollCache() {
        this.scrollCache = {
            verticalScrollWidth: undefined,
            isVerticalScroll: undefined
        };
    }
    getVerticalScrollWidth(force) {
        if (!this.layout.get()) {
            console.warn(`Run 'setLayout()' first`);
            return -1;
        }
        if (force || !this.scrollCache.verticalScrollWidth) {
            this.scrollCache.verticalScrollWidth = scroll_UtilsScroll.computeSize(this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER));
        }
        return this.scrollCache.verticalScrollWidth;
    }
    setAggregation(value) {
        this.aggregation = value;
    }
    getAggregation() {
        return this.aggregation;
    }
    onClearCache() {
        this.clearCache();
        this.clearScrollCache();
    }
    onChangeGridWidth({ width }) {
        if (width === 0) {
            console.warn(`Grid width should be 0?`);
        }
        this.gridWidth = width;
    }
    onChangeScrollVertical({ visible, size }) {
        this.isScrollVertical = visible;
        this.scrollSize = size;
        this.onClearCache();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.SCROLL.VERTICAL, this.onChangeScrollVertical.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.WIDTH, this.onChangeGridWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
    }
};
size_width_SizeWidth = size_width_decorate([
    Injectable(Lifetime.Scoped),
    size_width_metadata("design:paramtypes", [services_event_bus_ServicesEventBus,
        columns_Columns,
        LayoutService])
], size_width_SizeWidth);

//# sourceMappingURL=size.width.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resize/lib/constants.js
const vc_resize_lib_constants_EVENT = {
    CLICK: 'click',
    RESIZE: 'resize',
    MOUSEDOWN: 'mousedown',
    MOUSEMOVE: 'mousemove',
    MOUSEUP: 'mouseup',
    MOUSELEAVE: 'mouseleave',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    SELECTSTART: 'selectstart'
};
const constants_TIME = {
    DBLCLICK: 200
};
const lib_constants_CLASS = {
    CELL_RESIZE: 'cell-resize'
};
const lib_constants_ELEMENT = {
    SPAN: 'span'
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resize/lib/resize.js


class resize_Resize {
    constructor() {
        this.members = new WeakMap();
        this.onResizeBind = this.onResize.bind(this);
        this.onResizeEndBind = this.onResizeEnd.bind(this);
        this.onResizeStartBind = this.onResizeStart.bind(this);
        this.onSelectStartBind = this.onSelectStart.bind(this);
        this.restoreDraggable = false;
    }
    set(element, callbacks) {
        if (this.members.has(element)) {
            console.warn(`Resize already set on element`);
            return void 0;
        }
        let handler = utilities_dom_UtilitiesDOM.create(lib_constants_ELEMENT.SPAN, [lib_constants_CLASS.CELL_RESIZE]);
        this.members.set(element, { handler, callbacks });
        element.appendChild(handler);
        handler.addEventListener(vc_resize_lib_constants_EVENT.CLICK, this.stopPropagation);
        handler.addEventListener(vc_resize_lib_constants_EVENT.MOUSEDOWN, this.onResizeStartBind);
        handler.addEventListener(vc_resize_lib_constants_EVENT.TOUCHSTART, this.onResizeStartBind, { passive: true });
    }
    unset(element) {
        if (!this.members.has(element)) {
            console.warn(`Element not found`);
            return void 0;
        }
        let handler = this.members.get(element).handler;
        handler.removeEventListener(vc_resize_lib_constants_EVENT.CLICK, this.stopPropagation);
        handler.removeEventListener(vc_resize_lib_constants_EVENT.MOUSEDOWN, this.onResizeStartBind);
        handler.removeEventListener(vc_resize_lib_constants_EVENT.TOUCHSTART, this.onResizeStartBind);
        utilities_dom_UtilitiesDOM.removeElement(handler);
        this.members.delete(element);
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    live() {
        document.addEventListener(vc_resize_lib_constants_EVENT.MOUSEMOVE, this.onResizeBind);
        document.addEventListener(vc_resize_lib_constants_EVENT.TOUCHMOVE, this.onResizeBind);
        document.addEventListener(vc_resize_lib_constants_EVENT.MOUSEUP, this.onResizeEndBind);
        document.addEventListener(vc_resize_lib_constants_EVENT.TOUCHEND, this.onResizeEndBind);
        document.addEventListener(vc_resize_lib_constants_EVENT.MOUSELEAVE, this.onResizeEndBind);
        window.addEventListener(vc_resize_lib_constants_EVENT.SELECTSTART, this.onSelectStartBind);
    }
    unlive() {
        document.removeEventListener(vc_resize_lib_constants_EVENT.MOUSEMOVE, this.onResizeBind);
        document.removeEventListener(vc_resize_lib_constants_EVENT.TOUCHMOVE, this.onResizeBind);
        document.removeEventListener(vc_resize_lib_constants_EVENT.MOUSEUP, this.onResizeEndBind);
        document.removeEventListener(vc_resize_lib_constants_EVENT.TOUCHEND, this.onResizeEndBind);
        document.removeEventListener(vc_resize_lib_constants_EVENT.MOUSELEAVE, this.onResizeEndBind);
        window.removeEventListener(vc_resize_lib_constants_EVENT.SELECTSTART, this.onSelectStartBind);
    }
    updateDoubleClicked() {
        this.isDoubleClicked = this.resizeEndTime && Date.now() - this.resizeEndTime < constants_TIME.DBLCLICK;
    }
    onSelectStart(event) {
        event.preventDefault();
    }
    onResizeStart(event) {
        if (!this.members.has(event.target.parentElement)) {
            console.log('cannot find element', event);
            return void 0;
        }
        this.currentMember = event.target.parentElement;
        let member = this.members.get(this.currentMember);
        if (this.currentMember.draggable) {
            this.currentMember.draggable = false;
            this.restoreDraggable = true;
        }
        this.updateDoubleClicked();
        this.live();
        if (this.isDoubleClicked) {
            return void 0;
        }
        member.callbacks.start(event);
    }
    onResize(event) {
        event.preventDefault();
        event.stopPropagation();
        this.members.get(this.currentMember).callbacks.move(event);
    }
    onResizeEnd(event) {
        this.unlive();
        let member = this.members.get(this.currentMember);
        if (this.restoreDraggable) {
            this.currentMember.draggable = true;
            this.restoreDraggable = false;
        }
        if (this.isDoubleClicked) {
            member.callbacks.dblclick(event);
        }
        else {
            this.resizeEndTime = Date.now();
            member.callbacks.end(event);
        }
        this.currentMember = undefined;
    }
}
//# sourceMappingURL=resize.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-resize/index.js


//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/common/view.js
var view_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var view_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let view_View = class View {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.viewPosition = [];
        this.viewRange = {};
        this.viewCluster = [];
        this.viewClusterInOrderCache = {};
        this.live();
    }
    setViewRange(viewRange) {
        this.viewRange = Object.assign(this.viewRange, viewRange);
    }
    getViewPosition(layoutType) {
        return this.viewPosition.find((viewPosition) => viewPosition.layoutType === layoutType);
    }
    getViewPositionIndex(layoutType) {
        return this.viewPosition.findIndex((viewPosition) => viewPosition.layoutType === layoutType);
    }
    setViewPosition(viewPosition) {
        let viewPositionIndex = this.getViewPositionIndex(viewPosition.layoutType);
        if (viewPositionIndex === -1) {
            this.viewPosition.push(viewPosition);
        }
        else {
            this.viewPosition[viewPositionIndex] = Object.assign(this.viewPosition[viewPositionIndex], viewPosition);
        }
    }
    getViewRange() {
        return this.viewRange;
    }
    countViewCluster(layoutType) {
        return this.getViewCluster(layoutType).length;
    }
    getViewCluster(layoutType) {
        return this.viewCluster.filter((viewCluster) => viewCluster.layoutType === layoutType);
    }
    onViewClusterSort(a, b) {
        return a.dataIndex - b.dataIndex;
    }
    getViewClusterInOrder(layoutType) {
        if (!this.viewClusterInOrderCache[layoutType]) {
            this.viewClusterInOrderCache[layoutType] = this.getViewCluster(layoutType).slice();
            this.viewClusterInOrderCache[layoutType].sort(this.onViewClusterSort);
        }
        return this.viewClusterInOrderCache[layoutType];
    }
    getNextViewCluster(viewCluster) {
        let viewClusterInOrder = this.getViewClusterInOrder(viewCluster.layoutType);
        let viewClusterIndex = viewClusterInOrder.indexOf(viewCluster);
        if (viewClusterIndex === -1 || (viewClusterIndex + 1) === viewClusterInOrder.length) {
            if (viewCluster.layoutType === LAYOUT.MODE.FREEZE_ROWS) {
                return this.getFirstCluster(LAYOUT.MODE.CONTENT);
            }
            if (viewCluster.layoutType === LAYOUT.MODE.FREEZE_ROWS_FREEZE_COLUMNS) {
                return this.getFirstCluster(LAYOUT.MODE.CONTENT_FREEZE_COLUMNS);
            }
            return void 0;
        }
        return viewClusterInOrder[viewClusterIndex + 1];
    }
    getFirstCluster(layoutType) {
        let viewsCluster = this.getViewClusterInOrder(layoutType);
        if (viewsCluster.length) {
            return viewsCluster[0];
        }
        return void 0;
    }
    getLastCluster(layoutType) {
        let viewsCluster = this.getViewClusterInOrder(layoutType);
        if (viewsCluster.length) {
            return viewsCluster[viewsCluster.length - 1];
        }
        return void 0;
    }
    getPreviousViewCluster(viewCluster) {
        let viewClusterInOrder = this.getViewClusterInOrder(viewCluster.layoutType);
        let viewClusterIndex = viewClusterInOrder.indexOf(viewCluster);
        if (viewClusterIndex === -1 || viewClusterIndex === 0) {
            if (viewCluster.layoutType === LAYOUT.MODE.CONTENT) {
                return this.getLastCluster(LAYOUT.MODE.FREEZE_ROWS);
            }
            if (viewCluster.layoutType === LAYOUT.MODE.CONTENT_FREEZE_COLUMNS) {
                return this.getLastCluster(LAYOUT.MODE.FREEZE_ROWS_FREEZE_COLUMNS);
            }
            return void 0;
        }
        return viewClusterInOrder[viewClusterIndex - 1];
    }
    getViewClusterByRowId(layoutType, rowId) {
        return this.getViewCluster(layoutType)
            .find((viewCluster) => viewCluster.rowWrapped && rowId === viewCluster.rowWrapped.getId());
    }
    getViewClusterByDataIndex(layoutType, dataIndex) {
        return this.getViewCluster(layoutType)
            .find((viewCluster) => dataIndex === viewCluster.dataIndex);
    }
    getViewClusterIndex(layoutType, dataIndex) {
        return this.viewCluster.findIndex((viewCluster) => viewCluster.layoutType === layoutType && viewCluster.dataIndex === dataIndex);
    }
    setViewCluster(viewCluster) {
        let viewClusterIndex = this.getViewClusterIndex(viewCluster.layoutType, viewCluster.dataIndex);
        if (viewClusterIndex === -1) {
            this.viewCluster.push(viewCluster);
        }
        else {
            if (this.viewCluster[viewClusterIndex].viewRow !== viewCluster.viewRow) {
                this.viewCluster[viewClusterIndex].viewRow.release();
            }
            this.viewCluster[viewClusterIndex] = Object.assign(this.viewCluster[viewClusterIndex], viewCluster);
        }
        if (this.viewClusterInOrderCache[viewCluster.layoutType]) {
            delete this.viewClusterInOrderCache[viewCluster.layoutType];
        }
    }
    hasViewCluster(layoutType, rowId) {
        return !!this.getViewClusterByRowId(layoutType, rowId);
    }
    deleteViewCluster(viewCluster) {
        let viewClusterIndex = this.viewCluster.indexOf(viewCluster);
        if (viewClusterIndex !== -1) {
            this.viewCluster.splice(viewClusterIndex, 1);
        }
    }
    getViewClusterByElement(element) {
        return this.viewCluster.find((viewCluster) => viewCluster.viewRow.get() === element);
    }
    getViewClusterByViewRow(viewRow) {
        return this.viewCluster.find((viewCluster) => viewCluster.viewRow === viewRow);
    }
    destroy() {
        this.viewRange = {};
        this.viewPosition = [];
        this.viewCluster = [];
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
};
view_View = view_decorate([
    Injectable(Lifetime.Scoped),
    view_metadata("design:paramtypes", [services_event_bus_ServicesEventBus])
], view_View);

//# sourceMappingURL=view.js.map
// CONCATENATED MODULE: ./dist-es/modules/services/index.js
var services_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var services_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

























let Services = class Services {
    constructor(_animation, _cell, _columns, _coloring, _dataValidation, _debuggerService, _dictionaries, _dragAndDrop, _eventManager, _extensions, _formatter, _keyAccord, _layout, _loading, _logger, _queue, _resize, _row, _rowCache, _sizeContainer, _sizeHeight, _sizeWidth, _state, _tick, _view) {
        this._animation = _animation;
        this._cell = _cell;
        this._columns = _columns;
        this._coloring = _coloring;
        this._dataValidation = _dataValidation;
        this._debuggerService = _debuggerService;
        this._dictionaries = _dictionaries;
        this._dragAndDrop = _dragAndDrop;
        this._eventManager = _eventManager;
        this._extensions = _extensions;
        this._formatter = _formatter;
        this._keyAccord = _keyAccord;
        this._layout = _layout;
        this._loading = _loading;
        this._logger = _logger;
        this._queue = _queue;
        this._resize = _resize;
        this._row = _row;
        this._rowCache = _rowCache;
        this._sizeContainer = _sizeContainer;
        this._sizeHeight = _sizeHeight;
        this._sizeWidth = _sizeWidth;
        this._state = _state;
        this._tick = _tick;
        this._view = _view;
        this._dependencies = {
            animation: _animation,
            cell: _cell,
            coloring: _coloring,
            columns: _columns,
            dataValidation: _dataValidation,
            debuggerService: _debuggerService,
            dictionaries: _dictionaries,
            dragAndDrop: _dragAndDrop,
            eventManager: _eventManager,
            extensions: _extensions,
            formatter: _formatter,
            keyAccord: _keyAccord,
            layout: _layout,
            loading: _loading,
            logger: _logger,
            queue: _queue,
            resize: _resize,
            row: _row,
            rowCache: _rowCache,
            sizeContainer: _sizeContainer,
            sizeHeight: _sizeHeight,
            sizeWidth: _sizeWidth,
            state: _state,
            tick: _tick,
            view: _view
        };
    }
    getDictionariesDependencies() {
        return {
            dictionaries: this._dependencies.dictionaries,
            state: this._dependencies.state
        };
    }
    getStateDependencies() {
        return {
            dictionaries: this._dependencies.dictionaries,
            formatter: this._dependencies.formatter,
            state: this._dependencies.state,
            columns: this._dependencies.columns,
            extensions: this._dependencies.extensions
        };
    }
    getApiDependencies() {
        return {
            columns: this._dependencies.columns,
            dataValidation: this._dependencies.dataValidation,
            eventManager: this._dependencies.eventManager,
            extensions: this._dependencies.extensions,
            formatter: this._dependencies.formatter,
            row: this._dependencies.row,
            state: this._dependencies.state
        };
    }
    getRendererDependencies() {
        return {
            animation: this._dependencies.animation,
            cell: this._dependencies.cell,
            coloring: this._dependencies.coloring,
            columns: this._dependencies.columns,
            debuggerService: this._dependencies.debuggerService,
            dictionaries: this._dependencies.dictionaries,
            dragAndDrop: this._dependencies.dragAndDrop,
            extensions: this._dependencies.extensions,
            formatter: this._dependencies.formatter,
            keyAccord: this._dependencies.keyAccord,
            layout: this._dependencies.layout,
            loading: this._dependencies.loading,
            logger: this._dependencies.logger,
            queue: this._dependencies.queue,
            resize: this._dependencies.resize,
            row: this._dependencies.row,
            rowCache: this._dependencies.rowCache,
            sizeHeight: this._dependencies.sizeHeight,
            sizeWidth: this._dependencies.sizeWidth,
            state: this._dependencies.state,
            view: this._dependencies.view
        };
    }
    getDataDependencies() {
        return {
            cell: this._dependencies.cell,
            columns: this._dependencies.columns,
            dataValidation: this._dependencies.dataValidation,
            dictionaries: this._dependencies.dictionaries,
            extensions: this._dependencies.extensions,
            formatter: this._dependencies.formatter,
            keyAccord: this._dependencies.keyAccord,
            logger: this._dependencies.logger,
            row: this._dependencies.row,
            state: this._dependencies.state
        };
    }
};
Services = services_decorate([
    Injectable(Lifetime.Scoped),
    services_metadata("design:paramtypes", [animation_Animation,
        cell_Cell,
        columns_Columns,
        Coloring,
        data_validation_DataValidation,
        ServicesDebugger,
        dictionaries_Dictionaries,
        drag_and_drop_DragAndDrop,
        event_manager_EventManager,
        extensions_Extensions,
        formatter_Formatter,
        honda_Honda,
        LayoutService,
        loading_Loading,
        ServicesLogger,
        queue_Queue,
        resize_Resize,
        row_Row,
        row_cache_RowCache,
        size_container_SizeContainer,
        size_height_SizeHeight,
        size_width_SizeWidth,
        state_State,
        tick_Tick,
        view_View])
], Services);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/module.common.js
var module_common_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class module_common_ModuleCommon {
    constructor() {
        this.dependencies = [];
        this._initialized = false;
    }
    initialize(instance) {
        return module_common_awaiter(this, void 0, void 0, function* () {
            if (this._initialized) {
                console.warn(`Already initialized`);
                return void 0;
            }
            this._instance = instance || new ((yield script_Script.import(this.buildInPath))[this.constructor.name])();
            if (this._instance.boot instanceof Function) {
                this._instance.boot(...this.dependencies);
            }
            this.remap();
            this._initialized = true;
            yield this.afterInitialize();
        });
    }
    afterInitialize() {
        return module_common_awaiter(this, void 0, void 0, function* () {
            return void 0;
        });
    }
    remap() {
        let instance = this._instance;
        do {
            Object.getOwnPropertyNames(instance).forEach((property) => {
                if (!this[property]) {
                    this[property] = instance[property];
                }
            });
        } while (instance = Object.getPrototypeOf(instance));
    }
}
//# sourceMappingURL=module.common.js.map
// CONCATENATED MODULE: ./dist-es/modules/event-bus/index.js
var event_bus_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var event_bus_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



let event_bus_EventBus = class EventBus extends module_common_ModuleCommon {
    constructor() {
        super(...arguments);
        this.buildInPath = '../dist-es/modules/event-bus/build.in.js';
    }
    //
    // // TODO: remove after old remove
    // constructor(private eventBus: VC_ServicesEventBus) {
    //     super();
    // }
    //
    // public async initialize(instance?: T): Promise<void> {
    //     console.warn('temporary solution for event bus. remove after clean up !!!');
    //     this._instance = this.eventBus;
    //     this.remap();
    //     this._initialized = true;
    //     await this.afterInitialize();
    // }
    afterInitialize() {
        const _super = name => super[name];
        return event_bus_awaiter(this, void 0, void 0, function* () {
            yield _super("afterInitialize").call(this);
            this._instance.loadEventsList(eventsList_EVENTS);
        });
    }
};
event_bus_EventBus = event_bus_decorate([
    Injectable(Lifetime.Scoped)
], event_bus_EventBus);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/index.js
var data_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var data_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let data_Data = class Data extends module_common_ModuleCommon {
    constructor(eventBus, moduleServices) {
        super();
        this.eventBus = eventBus;
        this.moduleServices = moduleServices;
        this.buildInPath = '../dist-es/modules/data/build.in.js';
        this.dependencies = [eventBus, this.moduleServices.getDataDependencies()];
    }
};
data_Data = data_decorate([
    Injectable(Lifetime.Scoped),
    data_metadata("design:paramtypes", [event_bus_EventBus,
        Services])
], data_Data);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/index.js
var api_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var api_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let api_Api = class Api extends module_common_ModuleCommon {
    constructor(eventBus, data, moduleServices) {
        super();
        this.eventBus = eventBus;
        this.data = data;
        this.moduleServices = moduleServices;
        this.buildInPath = '../dist-es/modules/api/build.in.js';
        this.dependencies = [eventBus, data, this.moduleServices.getApiDependencies()];
    }
};
api_Api = api_decorate([
    Injectable(Lifetime.Scoped),
    api_metadata("design:paramtypes", [event_bus_EventBus,
        data_Data,
        Services])
], api_Api);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/index.js
var modules_state_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var state_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var state_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





let modules_state_State = class State extends module_common_ModuleCommon {
    constructor(eventBus, moduleServices) {
        super();
        this.eventBus = eventBus;
        this.moduleServices = moduleServices;
        this.buildInPath = '../dist-es/modules/state/build.in.js';
        this.dependencies = [eventBus, this.moduleServices.getStateDependencies()];
    }
    afterInitialize() {
        return state_awaiter(this, void 0, void 0, function* () {
            yield this._instance.initialize(state_initialState, initialParams);
            this.moduleServices.getStateDependencies().state.initialize(this._instance);
        });
    }
    setMetadata(metadata) {
        this._instance.setMetadata(metadata);
    }
    set(state) {
        this._instance.set(state);
    }
    update(state) {
        this._instance.update(state);
    }
    get() {
        return this._instance.get();
    }
};
modules_state_State = modules_state_decorate([
    Injectable(Lifetime.Scoped),
    state_metadata("design:paramtypes", [event_bus_EventBus, Services])
], modules_state_State);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-themer/lib/themer.js
class Themer {
    init(pathToThemes) {
        this._theme = { name: '', store: pathToThemes };
        return this;
    }
    change(name) {
        return this._cssAttach(name);
    }
    isValid(name) {
        return this._cssCheck(name);
    }
    destroy() {
        if (this._currentLink) {
            this._currentLink.parentElement.removeChild(this._currentLink);
        }
        delete this._theme;
        delete this._currentLink;
    }
    _cssCheck(name) {
        return this._check(`${this._theme.store}/${name}.css`);
    }
    _check(path) {
        let request = new XMLHttpRequest();
        request.open('HEAD', path, false);
        request.send();
        return request.status < 400;
    }
    _cssAttach(name) {
        let path = `${this._theme.store}/${name}.css`;
        return new Promise((resolve) => {
            this._getExisting(path, () => {
                let link = (document.createElement('link'));
                link.rel = 'stylesheet';
                link.href = path;
                this._attachAndResolve(link, resolve);
            }, () => {
                console.error('no theme', this._theme);
            });
        });
    }
    _attachAndResolve(link, resolve) {
        let listener = () => {
            resolve();
            link.removeEventListener(Themer.RESOLVING_EVENT, listener);
            if (this._currentLink) {
                this._currentLink.parentElement.removeChild(this._currentLink);
            }
            this._cleanModifiedVar();
            this._currentLink = link;
        };
        link.addEventListener(Themer.RESOLVING_EVENT, listener);
        document.getElementsByTagName('head')[0].appendChild(link);
    }
    _cleanModifiedVar() {
        document.documentElement.style.cssText = '';
    }
    _getExisting(path, okCallback, failCallback) {
        fetch(path, { method: 'HEAD' }).then((response) => {
            if (response.ok) {
                okCallback();
            }
            else {
                failCallback();
            }
        });
    }
}
Themer.RESOLVING_EVENT = 'load';
//# sourceMappingURL=themer.js.map
// CONCATENATED MODULE: ./dist-es/modules/theme/index.js
var theme_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var theme_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let theme_ThemeController = class ThemeController {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.onUpdateLocalThemeBind = this.updateLocalTheme.bind(this);
        this.onDestroyBind = this.destroy.bind(this);
        this.themerGlobals = new Themer();
    }
    initializeThemeList(shadowRoot, themesList, globalThemeName, pathToGlobalThemes) {
        this.shadowRoot = shadowRoot;
        this.themesList = themesList;
        this.subscribeToEvents();
        this.themerGlobals.init(pathToGlobalThemes);
        if (pathToGlobalThemes) {
            this.themerGlobals.change(globalThemeName);
        }
    }
    loadLocalTheme(themeName) {
        if (this.checkIfThemePathExistOnTheList(this.themesList, themeName)) {
            this.updateStyleTag(themeName);
            this.eventBus.fire(eventsList_EVENTS.CHANGE.THEME.UPDATE, themeName);
        }
        return this.shadowRoot;
    }
    loadGlobalTheme(globalThemeName) {
        this.themerGlobals.change(globalThemeName);
    }
    updateStyleTag(themeName) {
        const oldStyleTag = this.shadowRoot.firstChild;
        const newStyleTag = this.prepareStyleTag(themeName);
        this.shadowRoot.replaceChild(newStyleTag, oldStyleTag);
    }
    prepareStyleTag(themeName) {
        this.currentTheme = themeName;
        let newStyleTag = document.createElement('style');
        const path = this.findPathByName(themeName);
        newStyleTag.innerText = `@import "${path}"`;
        return newStyleTag;
    }
    findPathByName(name) {
        return this.themesList[name];
    }
    checkIfThemePathExistOnTheList(themesList, themeName) {
        const theme = themesList[themeName];
        if (!theme) {
            console.warn(`no theme with name "${themeName}"`);
            return false;
        }
        return true;
    }
    updateLocalTheme(themeName) {
        if (themeName !== this.currentTheme) {
            this.loadLocalTheme(themeName);
        }
    }
    destroy() {
        this.currentTheme = '';
        this.themesList = null;
        this.shadowRoot = null;
        this.eventBus.leave(eventsList_EVENTS.CHANGE.THEME.UPDATE, this.onUpdateLocalThemeBind);
        this.eventBus.leave(eventsList_EVENTS.DESTROY, this.onDestroyBind);
        this.eventBus = null;
    }
    subscribeToEvents() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.THEME.UPDATE, this.onUpdateLocalThemeBind);
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.onDestroyBind);
    }
};
theme_ThemeController = theme_decorate([
    Injectable(Lifetime.Scoped),
    theme_metadata("design:paramtypes", [event_bus_EventBus])
], theme_ThemeController);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/index.js
var renderer_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var renderer_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





let renderer_Renderer = class Renderer extends module_common_ModuleCommon {
    constructor(eventBus, data, moduleServices) {
        super();
        this.eventBus = eventBus;
        this.data = data;
        this.moduleServices = moduleServices;
        this.buildInPath = '../dist-es/modules/renderer/build.in.js';
        this.dependencies = [eventBus, data, this.moduleServices.getRendererDependencies()];
    }
    setMetadata(metadata) {
        this._instance.setMetadata(metadata);
    }
};
renderer_Renderer = renderer_decorate([
    Injectable(Lifetime.Scoped),
    renderer_metadata("design:paramtypes", [event_bus_EventBus,
        data_Data,
        Services])
], renderer_Renderer);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/dictionaries/index.js
var modules_dictionaries_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var modules_dictionaries_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




let modules_dictionaries_Dictionaries = class Dictionaries extends module_common_ModuleCommon {
    constructor(eventBus, moduleServices) {
        super();
        this.eventBus = eventBus;
        this.moduleServices = moduleServices;
        this.buildInPath = '../dist-es/modules/dictionaries/build.in.js';
        this.dependencies = [eventBus, this.moduleServices.getDictionariesDependencies()];
    }
};
modules_dictionaries_Dictionaries = modules_dictionaries_decorate([
    Injectable(Lifetime.Scoped),
    modules_dictionaries_metadata("design:paramtypes", [event_bus_EventBus,
        Services])
], modules_dictionaries_Dictionaries);

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/externals/constants.js
const MODULES_META = {
    DATA: {
        NAME: 'ServerSideData',
        EXTENDS: 'data',
        PATH: '../dist-es/modules/externals/serverside.data.js'
    },
    DICTIONARIES: {
        NAME: 'ServerSideDictionaries',
        EXTENDS: 'dictionaries',
        PATH: '../dist-es/modules/externals/serverside.dictionaries.js'
    },
    RENDERER: {
        NAME: 'ServerSideRenderer',
        EXTENDS: 'renderer',
        PATH: '../dist-es/modules/externals/serverside.renderer.js'
    }
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/modules/index.js
var modules_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var modules_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var modules_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Grid_1;















// TODO: temporary, remove after clean up










const modules_VIEW = Symbol('view');
const modules_EVENTS = Symbol('events');
const _MODULES = Symbol('modules');
let modules_Grid = Grid_1 = class Grid extends attributes_Attributes {
    constructor() {
        super(modules_VIEW);
        this.init();
    }
    static pipe(main, ...modules) {
        let result = {};
        for (let property of Object.getOwnPropertyNames(Object.getPrototypeOf(main))) {
            result[property] = main[property].bind(main);
        }
        let previousModule;
        for (let module of modules) {
            module.__super__ = previousModule || main;
            for (let property of Object.getOwnPropertyNames(Object.getPrototypeOf(module))) {
                result[property] = module[property].bind(module);
            }
            previousModule = module;
        }
        return result;
    }
    init() {
        this[_MODULES] = {};
        this.instances = {};
        this.modulesToLoad = {};
        this.modules = {
            [MODULES_META.DATA.NAME]: this.getExternalModule.bind(this, MODULES_META.DATA),
            [MODULES_META.DICTIONARIES.NAME]: this.getExternalModule.bind(this, MODULES_META.DICTIONARIES),
            [MODULES_META.RENDERER.NAME]: this.getExternalModule.bind(this, MODULES_META.RENDERER)
        };
        this.schemaValidator = new validation_metadata_UtilsValidationMetadata();
    }
    getExternalModule(metadata, params) {
        this.modulesToLoad[metadata.EXTENDS] = {
            constructor: script_Script.import(metadata.PATH),
            name: metadata.NAME,
            params
        };
    }
    initEvents() {
        this[modules_EVENTS] = {
            onFooterSizeChangedBind: this.onFooterSizeChange.bind(this),
            onHeaderSizeChangedBind: this.onHeaderSizeChange.bind(this)
        };
    }
    initView() {
        this.shadowRoot.appendChild(Grid_1.template.content.cloneNode(true));
        this[modules_VIEW] = {
            core: this.shadowRoot.querySelector(`.${modules_constants_CLASS.CORE}`),
            coreHost: utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.VC_CORE_HOST]),
            footer: this.shadowRoot.querySelector('slot[name="footer"]').assignedNodes()[0],
            header: this.shadowRoot.querySelector('slot[name="header"]').assignedNodes()[0],
            loader: this.shadowRoot.querySelector('slot[name="loader"]').assignedNodes()[0],
            toasts: this.shadowRoot.querySelector('slot[name="toasts"]').assignedNodes()[0]
        };
        this[modules_VIEW].core.attachShadow({ mode: 'open' });
        this[modules_VIEW].core.shadowRoot.appendChild(this[modules_VIEW].coreHost);
    }
    onActionDataReload() {
        return modules_awaiter(this, void 0, void 0, function* () {
            yield this.reloadData().then(this.setUpData.bind(this));
            this[_MODULES].eventBus.fire(eventsList_EVENTS.ACTION.VIEW.REFRESH);
        });
    }
    get _container() {
        return this._instance || (this._instance = container_Container.get());
    }
    attachEvents() {
        if (this.resizeObserver) {
            this.resizeObserver.observe(this);
        }
        if (this[modules_VIEW].footer) {
            this[modules_VIEW].footer.addEventListener('footerSizeChanged', this[modules_EVENTS].onFooterSizeChangedBind);
        }
        if (this[modules_VIEW].header) {
            this[modules_VIEW].header.addEventListener('headerSizeChanged', this[modules_EVENTS].onHeaderSizeChangedBind);
        }
    }
    detachEvents() {
        if (this.resizeObserver) {
            this.resizeObserver.unobserve(this);
        }
        if (this[modules_VIEW].footer) {
            this[modules_VIEW].footer.removeEventListener('footerSizeChanged', this[modules_EVENTS].onFooterSizeChangedBind);
        }
        if (this[modules_VIEW].header) {
            this[modules_VIEW].header.removeEventListener('headerSizeChanged', this[modules_EVENTS].onHeaderSizeChangedBind);
        }
    }
    boot(instances = {}) {
        return modules_awaiter(this, void 0, void 0, function* () {
            if (this.bootstrapped) {
                console.warn('Grid already bootstrapped');
                return void 0;
            }
            this.instances = instances;
            this.bootstrapped = true;
            if (this.isConnected) {
                yield this.initialize();
                if (this.valid) {
                    this[_MODULES].eventBus.join(eventsList_EVENTS.CHANGE.THEME.STYLING, (styling) => {
                        this.themeController.loadGlobalTheme(styling.themeName);
                    });
                    this[_MODULES].eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
                }
            }
        });
    }
    enableAutoResize() {
        this.resizeObserver = new resize_observer_ResizeObserver((entries) => {
            let contentRect = entries[0].contentRect || entries[0].target.getBoundingClientRect();
            this.setAttribute(PROPERTIES.WIDTH, contentRect.width.toString());
            this.setAttribute(PROPERTIES.HEIGHT, contentRect.height.toString());
        });
        this.resizeObserver.observe(this);
    }
    initialize() {
        return modules_awaiter(this, void 0, void 0, function* () {
            yield this.apply();
            if (!this.isValid(this.getMetadata())) {
                this.valid = false;
                return void 0;
            }
            yield this.initializeModules();
            yield this.initializeState();
            this.initializeTheme();
            this.initializeDataValidation();
            this.api = this[_MODULES].api.get();
            this[_MODULES].renderer.connect(this, this[modules_VIEW], () => {
                // TODO: fix autoresize attach (check both local/server side)
                UtilitiesDelay.queue(() => this.enableAutoResize(), 1000);
            });
            let rendererDraggable = this[_MODULES].renderer.getDraggable();
            this._container.resolve(header_PluginHeader).connect(this[modules_VIEW].header, rendererDraggable);
            this._container.resolve(PluginCore).connect(this[modules_VIEW].core);
            this._container.resolve(footer_PluginFooter).connect(this[modules_VIEW].footer);
            this._container.resolve(PluginToaster).connect(this[modules_VIEW].toasts);
        });
    }
    setUpData() {
        return modules_awaiter(this, void 0, void 0, function* () {
            if (this[_MODULES].data.setRows instanceof Function) {
                yield this[_MODULES].data.setRows(this.getRows());
            }
        });
    }
    setUpMetadata() {
        if (this[_MODULES].renderer.setMetadata instanceof Function) {
            this[_MODULES].renderer.setMetadata(this.getMetadata());
        }
    }
    setUpDictionaries() {
        if (this[_MODULES].dictionaries.setDictionaries instanceof Function) {
            let dictionaries = this.getDictionaries();
            if (dictionaries && Object.keys(dictionaries).length !== 0) {
                this[_MODULES].dictionaries.setDictionaries(dictionaries);
            }
        }
    }
    initializeState() {
        return modules_awaiter(this, void 0, void 0, function* () {
            this[_MODULES].state.setMetadata(this.getMetadata());
            this[_MODULES].data.init();
            yield this.setUpData();
            this.setUpDictionaries();
            this.setUpMetadata();
        });
    }
    initializeDataValidation() {
        this[_MODULES].services.getDataDependencies().dataValidation
            .initialize(this.getMetadata(), this.getDictionaries());
    }
    isValid(metadata) {
        return this.schemaValidator.validate(metadata, this[modules_VIEW].coreHost);
    }
    attributeChangedCallback(name, oldValue, newValue) {
        super.attributeChangedCallback(name, oldValue, newValue);
        if (oldValue !== newValue && this.bootstrapped) {
            if (name === GRID_ATTRIBUTE.ROWS) {
                this.apply().then(this.setUpData.bind(this));
            }
            if (name === GRID_ATTRIBUTE.DICTIONARIES) {
                this.apply().then(this.setUpDictionaries.bind(this));
            }
            this[_MODULES].eventBus.fire(eventsList_EVENTS.CHANGE.ATTRIBUTES, { name, oldValue, newValue });
        }
    }
    onFooterSizeChange() {
        if (this[_MODULES].eventBus) {
            this[_MODULES].eventBus.fire(eventsList_EVENTS.CHANGE.GRID.FOOTER);
        }
    }
    onHeaderSizeChange() {
        if (this[_MODULES].eventBus) {
            this[_MODULES].eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER);
        }
    }
    loadExternalInstances() {
        return modules_awaiter(this, void 0, void 0, function* () {
            yield UtilitiesArray.forEachAsync(Object.keys(MODULES_META), (key) => modules_awaiter(this, void 0, void 0, function* () {
                let meta = MODULES_META[key];
                if (this.modulesToLoad[meta.EXTENDS]) {
                    if (this.instances[meta.EXTENDS]) {
                        console.warn(`You cannot use external module with external instance of '${meta.EXTENDS}'.`);
                    }
                    let module = this.modulesToLoad[meta.EXTENDS];
                    let constructor = yield module.constructor;
                    this.instances[meta.EXTENDS] = yield new (constructor[module.name])(module.params);
                }
            }));
        });
    }
    initializeModules() {
        return modules_awaiter(this, void 0, void 0, function* () {
            this[_MODULES].services = this._container.resolve(Services);
            this[_MODULES].eventBus = this._container.resolve(event_bus_EventBus);
            yield this[_MODULES].eventBus.initialize(this._container.resolve(services_event_bus_ServicesEventBus));
            // await this[_MODULES].eventBus.initialize(this.instances.eventBus);
            // TODO: consider rewrite animation service into animation module
            let animation = this._container.resolve(animation_Animation);
            animation.boot(this[_MODULES].eventBus);
            this[_MODULES].state = this._container.resolve(modules_state_State);
            yield this[_MODULES].state.initialize(this.instances.state);
            this[_MODULES].data = this._container.resolve(data_Data);
            this[_MODULES].dictionaries = this._container.resolve(modules_dictionaries_Dictionaries);
            this[_MODULES].renderer = this._container.resolve(renderer_Renderer);
            this[_MODULES].api = this._container.resolve(api_Api);
            this.themeController = this._container.resolve(theme_ThemeController);
            yield this.loadExternalInstances();
            yield this[_MODULES].dictionaries.initialize(this.instances.dictionaries);
            yield this[_MODULES].renderer.initialize(this.instances.renderer);
            yield this[_MODULES].data.initialize(this.instances.data);
            yield this[_MODULES].api.initialize(this.instances.api);
        });
    }
    initializeTheme() {
        let { styling } = this[_MODULES].state.get().theme;
        this.themeController.initializeThemeList(this.shadowRoot, THEMES_LIST_GRID.PATHS, styling.current, styling.path);
    }
};
modules_Grid = Grid_1 = modules_decorate([
    VUI('vc-grid', {html: "<slot name=\"header\"></slot><div class=\"core\"></div><slot name=\"footer\"></slot><slot name=\"loader\"></slot><slot name=\"toasts\"></slot>", style: "@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }.host {  color: var(--vc-color--default, #666); }  .host .fullscreen {    box-sizing: border-box;    position: absolute;    padding: 3px;    left: 0;    top: 0;    z-index: 20; }    .host .fullscreen > div {      box-shadow: var(--vc-grid-layer-shadow, 0 0 20px 0 rgba(0, 0, 0, 0.1)); }"}),
    modules_metadata("design:paramtypes", [])
], modules_Grid);

if (customElements.get(modules_Grid.tag) === undefined) {
    customElements.define(modules_Grid.tag, modules_Grid);
}
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/popup.aware.js


class popup_aware_PopupAware {
    constructor() {
        this._onClosedBind = this.onClosed.bind(this);
        this._onOpenedBind = this.onOpened.bind(this);
        if (!popup_aware_PopupAware.popup) {
            popup_aware_PopupAware._initHeaderPopup();
        }
    }
    static onClosed(event) {
        return void 0;
    }
    static onOpened(event) {
        return void 0;
    }
    static _initHeaderPopup() {
        this.popup = document.createElement(VUIELEMENT.POPUP);
        this.popup.autohide = true;
        this.popup.locked = false;
        this.popup.closeondocumentmousedown = true;
        this.popup.closeonfocuslost = true;
        this.popup.position = VUIPOPUP.POSITION.BOTTOM;
        this.popup.positiondetails = VUIPOPUP.POSITION.LEFT;
    }
    popupOpen(content, target) {
        utilities_dom_UtilitiesDOM.removeChildren(popup_aware_PopupAware.popup);
        let stacked = utilities_dom_UtilitiesDOM.create(VUIELEMENT.LAYOUT_STACKED);
        stacked.justification = VUIPOPUP.JUSTIFICATION.CENTER;
        let docFrag = document.createDocumentFragment();
        content.forEach((child) => docFrag.appendChild(child));
        stacked.appendChild(docFrag);
        popup_aware_PopupAware.popup.appendChild(stacked);
        popup_aware_PopupAware.popup.addEventListener('closed', this._onClosedBind);
        popup_aware_PopupAware.popup.addEventListener('opened', this._onOpenedBind);
        popup_aware_PopupAware.popup.open(target);
    }
    onClosed(event) {
        return void 0;
    }
    onOpened(event) {
        return void 0;
    }
    popupClose() {
        if (popup_aware_PopupAware.popup.isOpened()) {
            popup_aware_PopupAware.popup.close();
        }
    }
}
//# sourceMappingURL=popup.aware.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/cell.js





class cell_cell_Cell extends popup_aware_PopupAware {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super();
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this.onChangeDataColumnsCollectionBind = this.onChangeDataColumnsCollection.bind(this);
        this.onAfterDataColumnsCollapsedBind = this.onAfterDataColumnsCollapsed.bind(this);
        this.onAfterDataFormatSetBind = this.onAfterDataFormatSet.bind(this);
        this.onRejectDataSaveBind = this.onRejectDataSave.bind(this);
        this.onDoneDataSaveBind = this.onDoneDataSave.bind(this);
        this.onDoneDataRollbackBind = this.onDoneDataRollback.bind(this);
        this.onDestroyBind = this.destroy.bind(this);
        this.onInputBind = this.onInput.bind(this);
        this.onClearBind = this.onClear.bind(this);
        this.afterRender = [];
        this.rendered = false;
        this.subCells = [];
        this.__destroyed = false;
        this.before();
        this.prepare();
        if (!params.measure) {
            this.live();
        }
    }
    waitForRender() {
        return new Promise((resolve) => {
            if (this.rendered) {
                resolve();
            }
            else {
                this.afterRender.push(resolve);
            }
        });
    }
    getRowWrapped() {
        return this.rowWrapped;
    }
    getType() {
        return this.column.type;
    }
    getRowData() {
        let { id, data } = this.rowWrapped.getDataRowDescriptor();
        return { id, data };
    }
    getViewData() {
        let data = {};
        if (this.subCells.length > 0) {
            this.subCells.forEach((subCell) => {
                data[subCell.getColumnId()] = subCell.getData();
            });
        }
        else {
            data[this.getColumnId()] = this.getData();
        }
        return data;
    }
    getColumnId() {
        return this.column.id;
    }
    isEditable() {
        return this.services.cell.isEditable(this.getRowData(), this.column);
    }
    get() {
        return this.element;
    }
    focus(event) {
        if (!this.isEditable() || this.element.classList.contains(modules_constants_CLASS.FOCUS)) {
            return void 0;
        }
        this.toggleClear();
        this.hasResetValue = false;
        if (this.input) {
            this.input.focus();
        }
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.FOCUS]);
    }
    blur() {
        if (!this.isEditable() || this.__destroyed) {
            return void 0;
        }
        if (this.input) {
            this.input.blur();
        }
        utilities_dom_UtilitiesDOM.removeClass(this.element, [modules_constants_CLASS.FOCUS]);
    }
    before() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        if (!UtilsObject.getPropertyValue('child', this.params)) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_PADDING]);
        }
    }
    isNewValueInColumnId(columnId) {
        if (this.services.cell.hasChanged(this.getRowData(), columnId)
            && !this.services.cell.compareValue(this.getRowData(), columnId, this.rowWrapped.getDataRowCell(columnId))) {
            return columnId;
        }
        return void 0;
    }
    isChanged() {
        return this.isNewValueInColumnId(this.column.id);
    }
    getData() {
        return this.services.cell.getValue(this.getRowData(), this.column.id);
    }
    getRawData() {
        return this.services.cell.getRawValue(this.getRowData(), this.column.id);
    }
    onAfterRender() {
        this.rendered = true;
        this.afterRender.forEach((callback) => callback());
    }
    prepare() {
        if (typeof this.getRawData() === 'undefined' && !this.params.abstract) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_EMPTY]);
            console.warn(`No data provided for column '${this.column.id}' in '${this.rowWrapped.getId()}' row`);
            return void 0;
        }
        if (this.isEditable()) {
            this.prepareEdit();
        }
        else {
            this.prepareDisplay();
        }
        this.onAfterRender();
    }
    // Prevents from selecting closest (not empty) cell on double click
    prepareFakeElement() {
        let fake = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        fake.innerHTML = '&nbsp;';
        utilities_dom_UtilitiesDOM.addClass(fake, [modules_constants_CLASS.CELL_FAKE_ELEMENT]);
        this.element.appendChild(fake);
    }
    isVisible() {
        return this.services.columns.getColumnById(this.column.id, false).visible;
    }
    prepareDisplay() {
        this.prepareElement();
        if (this.services.columns.isGroupedColumn(this.column.id)) {
            let column = this.services.state.sort.state.find((sortColumn) => {
                return sortColumn.columnId === this.column.id;
            });
            utilities_dom_UtilitiesDOM.removeClass(this.element, [constants_ASC, constants_DESC]);
            if (column) {
                utilities_dom_UtilitiesDOM.addClass(this.element, [column.order]);
            }
        }
    }
    prepareEdit() {
        this.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_EDIT]);
        this.checkChanges();
    }
    prepareElement() {
        this.prepareColoring();
        this.checkCollapsed();
        this.checkDisabled();
    }
    prepareColoring() {
        return void 0;
    }
    prepareClear() {
        this.clear = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_CLEAR]);
        let ico = utilities_dom_UtilitiesDOM.create('vui-icon-close');
        ico.hoverable = true;
        ico.size = 'medium';
        this.clear.appendChild(ico);
        this.element.appendChild(this.clear);
    }
    prepareDictionary() {
        let { dictionary } = this.services.extensions.getColumnById(this.column.id);
        if (this.services.dictionaries.isDictionary(dictionary)) {
            this.dictionaryId = dictionary;
        }
        else {
            console.warn(`No dictionary for column '${this.column.id}'. Dictionary '${dictionary}' is undefined.`);
        }
    }
    checkChanges() {
        let changed = !!this.isChanged();
        let containClass = this.element.classList.contains(modules_constants_CLASS.CELL_CHANGED);
        if (changed && !containClass) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_CHANGED]);
        }
        else if (!changed && containClass) {
            utilities_dom_UtilitiesDOM.removeClass(this.element, [modules_constants_CLASS.CELL_CHANGED]);
        }
    }
    checkError() {
        let error = false;
        if (this.input) {
            error = this.errorValue === this.input.value;
        }
        utilities_dom_UtilitiesDOM.toggleClass(error, this.element, [modules_constants_CLASS.ERROR]);
    }
    checkCollapsed() {
        let { collapsable } = this.services.extensions.getColumnById(this.column.id);
        if (!collapsable) {
            return void 0;
        }
        utilities_dom_UtilitiesDOM.toggleClass(!this.services.columns.getColumnById(this.column.id, false).visible, this.element, [modules_constants_CLASS.CELL_COLLAPSED]);
    }
    checkDisabled() {
        if (this.services.state.edit.enabled && !this.isEditable()) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_DISABLED]);
        }
    }
    fireChange(value) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, {
            rowId: this.rowWrapped.getId(),
            columnId: this.column.id,
            value
        });
    }
    onInputChange(data) {
        this.fireChange(data !== undefined && !(data instanceof Event) ? data : this.input.value);
    }
    onInput(data) {
        this.onInputChange(data);
        this.hasResetValue = false;
        if (!this.isChanged()) {
            this.hasResetValue = true;
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.CELL.RESET, {
                rowId: this.rowWrapped.getId(),
                columnId: this.column.id
            });
        }
        this.toggleClear();
        this.checkChanges();
        if (this.errorValue) {
            this.checkError();
        }
    }
    onClear() {
        this.input.value = '';
        this.onInput();
    }
    canToggleClear() {
        return this.input.value !== '';
    }
    toggleClear() {
        if (this.clear) {
            utilities_dom_UtilitiesDOM.toggleClass(!this.canToggleClear(), this.clear, [modules_constants_CLASS.CELL_CLEAR_DISABLED]);
        }
    }
    onRejectDataSave({ errors }) {
        let dataError = errors.find(({ rowId, columnId }) => {
            return rowId === this.rowWrapped.getId() && columnId === this.column.id;
        });
        if (!dataError) {
            delete this.errorValue;
        }
        else {
            let changedCell = this.services.state.edit.cells.find((cell) => {
                return cell.columnId === dataError.columnId && cell.rowId === dataError.rowId;
            });
            if (!changedCell) {
                console.warn(`Cannot find changed value for columnId '${dataError.columnId}' in rowId '${dataError.rowId}'`);
            }
            else {
                this.errorValue = changedCell.value;
            }
        }
        utilities_dom_UtilitiesDOM.toggleClass(!!dataError, this.element, [modules_constants_CLASS.ERROR]);
    }
    onDoneDataRollback() {
        if (this.rowWrapped && this.input) {
            this.input.value = this.rowWrapped.getDataRowCell(this.column.id);
        }
        this.onDoneDataSave();
    }
    onDoneDataSave() {
        this.checkChanges();
        utilities_dom_UtilitiesDOM.removeClass(this.element, [modules_constants_CLASS.ERROR]);
    }
    onAfterDataColumnsCollapsed() {
        this.checkCollapsed();
    }
    onAfterDataFormatSet({ columnId }) {
        if (columnId === this.column.id && !this.isEditable()) {
            this.prepare();
        }
    }
    isVisibleChanged({ newState, currentState }) {
        if (!columns_UtilsColumns.isColumnLeaf(this.column)) {
            return false;
        }
        let changedColumnId = columns_UtilsColumns.getAllNonRootColumnIds(currentState.columns.collection)
            .find((columnId) => {
            let column_1 = columns_UtilsColumns.findColumnInState(columnId, currentState.columns.collection) || {};
            let column_2 = columns_UtilsColumns.findColumnInState(columnId, newState.columns.collection) || {};
            return column_1.visible !== column_2.visible;
        });
        return changedColumnId === this.column.id;
    }
    onChangeDataColumnsCollection(params) {
        if (this.isVisibleChanged(params)) {
            let column = columns_UtilsColumns.findColumnInState(this.column.id, params.newState.columns.collection);
            utilities_dom_UtilitiesDOM.toggleClass(!column || !column.visible, this.element, [modules_constants_CLASS.CELL_COLLAPSED]);
        }
    }
    destroy() {
        this.__destroyed = true;
        utilities_dom_UtilitiesDOM.removeElement(this.element);
        if (this.subCells.length) {
            this.subCells.forEach((cell) => cell.destroy());
            this.subCells = [];
        }
        this.coloring = null;
        this.element = null;
        if (!this.params.measure) {
            this.unlive();
        }
    }
    liveEditable() {
        if (!this.isEditable()) {
            return void 0;
        }
        if (this.input) {
            if (this.getType() === modules_constants_TYPE.CHECKBOX) {
                this.input.addEventListener(modules_constants_EVENT.CHANGE, this.onInputBind);
            }
            else {
                this.input.addEventListener(modules_constants_EVENT.INPUT, this.onInputBind);
            }
        }
        if (this.clear) {
            this.clear.addEventListener(modules_constants_EVENT.CLICK, this.onClearBind);
        }
    }
    unliveEditable() {
        if (!this.isEditable()) {
            return void 0;
        }
        if (this.input) {
            this.input.removeEventListener(modules_constants_EVENT.INPUT, this.onInputBind);
        }
        if (this.clear) {
            this.clear.removeEventListener(modules_constants_EVENT.CHANGE, this.onClearBind);
        }
    }
    onChangeDataEditEnabled() {
        if (this.services.state.get().edit.enabled) {
            this.prepareClear();
            this.clear.addEventListener(modules_constants_EVENT.CLICK, this.onClearBind);
        }
        else {
            utilities_dom_UtilitiesDOM.removeElement(this.clear);
        }
    }
    unlive() {
        this.unliveEditable();
        this.eventBus.leave(eventsList_EVENTS.REJECT.DATA.SAVE, this.onRejectDataSaveBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.DATA.SAVE, this.onDoneDataSaveBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.STATE.EDIT.ROLLBACK, this.onDoneDataRollbackBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollectionBind);
        this.eventBus.leave(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSetBind);
        this.eventBus.leave(eventsList_EVENTS.AFTER.DATA.COLUMNS.COLLAPSED, this.onAfterDataColumnsCollapsedBind);
        this.eventBus.leave(eventsList_EVENTS.DESTROY, this.onDestroyBind);
    }
    live() {
        this.liveEditable();
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.EDIT.ENABLED, this.onChangeDataEditEnabled.bind(this));
        this.eventBus.join(eventsList_EVENTS.REJECT.DATA.SAVE, this.onRejectDataSaveBind);
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, this.onDoneDataSaveBind);
        this.eventBus.join(eventsList_EVENTS.DONE.STATE.EDIT.ROLLBACK, this.onDoneDataRollbackBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollectionBind);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSetBind);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.COLUMNS.COLLAPSED, this.onAfterDataColumnsCollapsedBind);
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.onDestroyBind);
    }
}
//# sourceMappingURL=cell.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/group.js





class group_Group extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this.keyAccordParams = { description: `${group_Group.name} handler` };
        this.onTabkeyAccord = this.onTabKey.bind(this);
        this.onShiftTabkeyAccord = this.onShiftTabKey.bind(this);
    }
    getEditableSubCells() {
        let editableSubcells = [];
        for (let i = 0; i < this.subCells.length; i += 1) {
            let subcell = this.subCells[i];
            if (!subcell.isVisible()) {
                continue;
            }
            if (subcell.getType() === modules_constants_TYPE.GROUP) {
                editableSubcells.push.apply(editableSubcells, subcell.getEditableSubCells());
            }
            else if (subcell.isEditable()) {
                editableSubcells.push(subcell);
            }
        }
        return editableSubcells;
    }
    blur() {
        super.blur();
        this.focusedSubCell.blur();
        this.focusedSubCell = undefined;
        this.services.keyAccord.remove(MAP_KEYS.TAB, this.onTabkeyAccord);
        this.services.keyAccord.remove(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onShiftTabkeyAccord);
    }
    focus(event) {
        super.focus(event);
        let editableSubCells = this.getEditableSubCells();
        this.focusedSubCell =
            (event && editableSubCells.find((cell) => utilities_dom_UtilitiesDOM.isInDescendants(event.target, cell.get()))) || editableSubCells[0];
        this.focusedSubCell.focus(event);
        this.services.keyAccord.add(MAP_KEYS.TAB, this.onTabkeyAccord, this.keyAccordParams);
        this.services.keyAccord.add(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onShiftTabkeyAccord, this.keyAccordParams);
    }
    prepare() {
        this.prepareElement();
        this.applyExtensions();
        this.generateCells();
        this.onAfterRender();
    }
    prepareElement() {
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_GROUP]);
    }
    extendPosition({ position }) {
        if (position) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [position]);
        }
    }
    extendStyle({ style }) {
        if (style) {
            utilities_dom_UtilitiesDOM.addClass(this.element, [style]);
        }
    }
    applyExtensions() {
        let { group } = this.services.extensions.getColumnById(this.column.id);
        if (group) {
            this.extendPosition(group);
            this.extendStyle(group);
        }
    }
    generateCells() {
        super.prepareElement();
        let params = Object.assign({}, this.params, { child: true });
        this.column.columns.forEach((column) => {
            let cell = new (cell_types_namespaceObject[column.type] || types_text_Text)(this.eventBus, this.services, this.rowWrapped, column, params);
            this.subCells.push(cell);
            this.element.appendChild(cell.get());
        });
    }
    onTabKey() {
        this.focusedSubCell.blur();
        let editableSubCells = this.getEditableSubCells();
        if (editableSubCells[editableSubCells.length - 1] === this.focusedSubCell) {
            this.focusedSubCell = editableSubCells[0];
        }
        else {
            this.focusedSubCell = editableSubCells[editableSubCells.indexOf(this.focusedSubCell) + 1];
        }
        this.focusedSubCell.focus();
    }
    onShiftTabKey() {
        this.focusedSubCell.blur();
        let editableSubCells = this.getEditableSubCells();
        if (editableSubCells[0] === this.focusedSubCell) {
            this.focusedSubCell = editableSubCells[editableSubCells.length - 1];
        }
        else {
            this.focusedSubCell = editableSubCells[editableSubCells.indexOf(this.focusedSubCell) - 1];
        }
        this.focusedSubCell.focus();
    }
}
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/checkbox.js




class types_checkbox_Checkbox extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this.keyAccordParams = { description: `${types_checkbox_Checkbox.name} handler` };
        this.onSpaceKeyBind = this.onSpaceKey.bind(this);
    }
    prepareDisplay() {
        super.prepareDisplay();
        this.input.disabled = true;
    }
    prepareElement() {
        super.prepareElement();
        let data = this.getRawData();
        this.input = document.createElement(VUIELEMENT.CHECKBOX);
        this.input.checked = data.value;
        this.element.appendChild(this.input);
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_CHECKBOX.ELEMENT]);
    }
    focus() {
        super.focus();
        this.services.keyAccord.add(MAP_KEYS.SPACE, this.onSpaceKeyBind, this.keyAccordParams);
    }
    blur() {
        super.blur();
        this.services.keyAccord.remove(MAP_KEYS.SPACE, this.onSpaceKeyBind);
    }
    onSpaceKey() {
        this.input.checked = !this.input.checked;
        this.onInput();
    }
    onInputChange() {
        let data = this.getRawData();
        let newData = Object.assign({}, data, { value: this.input.checked });
        this.fireChange(newData);
    }
    checkError() {
        let error = this.errorValue.value === this.input.checked;
        utilities_dom_UtilitiesDOM.toggleClass(error, this.element, [modules_constants_CLASS.ERROR]);
    }
}
//# sourceMappingURL=checkbox.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/rowMark.js





class rowMark_RowMark extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    before() {
        super.before();
        this.params = Object.assign({}, this.params, { abstract: true });
    }
    prepare() {
        super.prepareDisplay();
        this.onAfterRender();
    }
    prepareElement() {
        this.input = document.createElement(VUIELEMENT.CHECKBOX);
        this.element.appendChild(this.input);
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_CHECKBOX.ELEMENT]);
        if (!this.params.measure) {
            this.onChangeData();
        }
    }
    onClick(event) {
        let marked = event.target.checked;
        this.eventBus.fire(eventsList_EVENTS.ACTION.ROW.MARK, {
            rowIds: [this.rowWrapped.getId()],
            marked
        });
    }
    onChangeData() {
        let marked = this.services.state.mark.state.indexOf(this.rowWrapped.getId()) > -1;
        if (marked !== this.input.checked) {
            this.input.checked = marked;
        }
    }
    unlive() {
        this.input.removeEventListener(modules_constants_EVENT.CHANGE, this.onClickBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.ROW.MARK, this.onChangeDataBind);
    }
    live() {
        this.onClickBind = this.onClick.bind(this);
        this.onChangeDataBind = this.onChangeData.bind(this);
        this.input.addEventListener(modules_constants_EVENT.CHANGE, this.onClickBind);
        this.element.addEventListener(modules_constants_EVENT.CLICK, UtilsEvent.stopPropagation);
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.MARK, this.onChangeDataBind);
    }
}
//# sourceMappingURL=rowMark.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/rowGroup.js




class rowGroup_RowGroup extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    before() {
        super.before();
        this.params = Object.assign({}, this.params, { abstract: true });
    }
    setCollapseVisible(state) {
        this._collapse.visible = state;
    }
    setExpandVisible(state) {
        this._expand.visible = state;
    }
    getGroup() {
        return this.group;
    }
    prepareGroup() {
        if (!this.params.subColumn) {
            console.error(`Subcolumn is missing`);
            return void 0;
        }
        this.viewCell = new (cell_types_namespaceObject[this.params.subColumn.type] || types_text_Text)(this.eventBus, this.services, this.rowWrapped, this.params.subColumn, this.params);
        this.group = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ROW_GROUP]);
        this.title = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN, [modules_constants_CLASS.CELL]);
        this.cell = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN, [modules_constants_CLASS.CELL]);
        this.title.innerText = `${this.params.subColumn.label}`;
        this._toggle = utilities_dom_UtilitiesDOM.create(VUIELEMENT.BUTTON);
        this._collapse = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.CHEVRON_RIGHT);
        this._collapse.size = VUIICON.SIZE.MEDIUM;
        this._expand = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.CHEVRON_DOWN);
        this._expand.size = VUIICON.SIZE.MEDIUM;
        this._toggle.appendChild(this._collapse);
        this._toggle.appendChild(this._expand);
        this.group.appendChild(this._toggle);
        this.group.appendChild(this.title);
        this.group.appendChild(this.cell);
        this.cell.appendChild(this.viewCell.get());
        this.element.appendChild(this.group);
        if (this.params.eventParams) {
            this.liveGroup();
        }
    }
    liveGroup() {
        this.eventBus.addListener(this.title, modules_constants_EVENT.CLICK, this.params.eventParams);
        this.eventBus.addListener(this._collapse, modules_constants_EVENT.CLICK, this.params.eventParams);
        this.eventBus.addListener(this._expand, modules_constants_EVENT.CLICK, this.params.eventParams);
    }
    prepareElement() {
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_ABSTRACT_GROUP]);
        if (this.rowWrapped.getType() === constants_VIEW.ROW.TYPE.GROUP) {
            this.prepareGroup();
        }
    }
    unliveGroup() {
        if (this.params.eventParams) {
            this.eventBus.removeListener(this.title);
            this.eventBus.removeListener(this._collapse);
            this.eventBus.removeListener(this._expand);
        }
    }
    unlive() {
        this.unliveGroup();
        super.unlive();
    }
}
//# sourceMappingURL=rowGroup.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/graphic.js



class types_graphic_Graphic extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_GRAPHICS]);
        this.wrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        this.graphic = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.IMAGE);
        this.graphic.src = this.getRawData();
        this.element.appendChild(this.wrapper);
        this.wrapper.appendChild(this.graphic);
    }
}
//# sourceMappingURL=graphic.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/intervals.js
class UtilsInterval {
    static closed(interval, data) {
        return interval.hasOwnProperty('from') && interval.hasOwnProperty('to') &&
            data >= interval.from && data <= interval.to;
    }
    static openRight(interval, data) {
        return interval.hasOwnProperty('from') && !interval.hasOwnProperty('to') &&
            data >= interval.from;
    }
    static openLeft(interval, data) {
        return !interval.hasOwnProperty('from') && interval.hasOwnProperty('to') &&
            data <= interval.to;
    }
    static open(interval) {
        return !interval.hasOwnProperty('from') && !interval.hasOwnProperty('to');
    }
}
//# sourceMappingURL=intervals.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/cell.coloring.js



class cell_coloring_CellColoring {
    constructor(services, element, column, getRow, getData) {
        this.services = services;
        this.element = element;
        this.column = column;
        this.getRow = getRow;
        this.getData = getData;
        this.prepare();
    }
    prepare() {
        this.apply(this.prepareColoring.bind(this));
    }
    apply(method) {
        let coloring;
        if (this.services.coloring.hasExternal()) {
            coloring = this.services.coloring.get(this.column.id, this.getRow(), this.getData());
        }
        else {
            coloring = this.services.extensions.getColumnById(this.column.id).coloring;
        }
        if (coloring) {
            coloring.forEach(method);
        }
    }
    refresh() {
        this.apply(this.removeColoring.bind(this));
        this.prepare();
    }
    getClass(coloring) {
        return `${modules_constants_CLASS[coloring.type.toUpperCase()]}-${coloring.color}`;
    }
    removeColoringByColor(coloring) {
        if (coloring) {
            utilities_dom_UtilitiesDOM.removeClass(this.element, [this.getClass(coloring)]);
        }
    }
    removeColoringById(coloringId) {
        this.services.dictionaries.getValueByKey(DICTIONARY_NAME.COLORING, coloringId).then((data) => {
            this.removeColoringByColor((data && data[coloringId]));
        });
    }
    removeColoring(coloring) {
        let colorApplier = typeof coloring === 'string' ? this.removeColoringById : this.removeColoringByColor;
        colorApplier.call(this, coloring);
    }
    setColoring(coloring) {
        utilities_dom_UtilitiesDOM.addClass(this.element, [this.getClass(coloring)]);
    }
    prepareColoringById(coloringId) {
        this.services.dictionaries.getValueByKey(DICTIONARY_NAME.COLORING, coloringId)
            .then((data) => {
            this.prepareColoringByColor(data);
        });
    }
    prepareColoringByColor(coloring) {
        if (coloring && this.foundMatch(coloring)) {
            this.setColoring(coloring);
        }
    }
    prepareColoring(coloring) {
        let colorApplier = typeof coloring === 'string' ? this.prepareColoringById : this.prepareColoringByColor;
        colorApplier.call(this, coloring);
    }
    foundMatch(coloring) {
        let data = this.getData();
        if (!data && data !== 0) {
            return false;
        }
        return this.shouldPaintCell(coloring, data);
    }
    shouldPaintCell(coloring, data) {
        return UtilsInterval.closed(coloring, data) ||
            UtilsInterval.openRight(coloring, data) ||
            UtilsInterval.openLeft(coloring, data) ||
            UtilsInterval.open(coloring);
    }
}
//# sourceMappingURL=cell.coloring.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/cell.dictionary.js



class cell_dictionary_CellDictionary extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this._onSearchBind = this.onSearch.bind(this);
        this._onSelectedBind = this.onSelected.bind(this);
        if (!cell_dictionary_CellDictionary.selectList) {
            cell_dictionary_CellDictionary._initSelectList();
        }
    }
    static _initSelectList() {
        this.selectList = utilities_dom_UtilitiesDOM.create(VUIELEMENT.SELECT_LIST);
    }
    selectListUpdate(options) {
        cell_dictionary_CellDictionary.selectList.options = options.map(({ key, value }) => `${key}:${value}`)
            .join(',');
    }
    selectListFocus() {
        cell_dictionary_CellDictionary.selectList.focus();
    }
    selectListBlur() {
        cell_dictionary_CellDictionary.selectList.blur();
    }
    selectListGet(options, selected, mode, justification = 'right') {
        cell_dictionary_CellDictionary.selectList.options = options.map(({ key, value }) => `${key}:${value}`)
            .join(',');
        cell_dictionary_CellDictionary.selectList.selected = selected.join(',');
        cell_dictionary_CellDictionary.selectList.mode = mode;
        cell_dictionary_CellDictionary.selectList.justification = justification;
        if (mode === SELECT_TYPE.SINGLE) {
            cell_dictionary_CellDictionary.selectList.blank = '';
        }
        cell_dictionary_CellDictionary.selectList.search = true;
        cell_dictionary_CellDictionary.selectList.addEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this._onSelectedBind);
        cell_dictionary_CellDictionary.selectList.addEventListener(modules_constants_EVENT.VALUECHANGED, this._onSearchBind);
        return cell_dictionary_CellDictionary.selectList;
    }
    selectListDestroy() {
        cell_dictionary_CellDictionary.selectList.blur();
        cell_dictionary_CellDictionary.selectList.mode = SELECT_TYPE.SINGLE;
        cell_dictionary_CellDictionary.selectList.options = '';
        cell_dictionary_CellDictionary.selectList.selected = '';
        cell_dictionary_CellDictionary.selectList.removeEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this._onSelectedBind);
        cell_dictionary_CellDictionary.selectList.removeEventListener(modules_constants_EVENT.VALUECHANGED, this._onSearchBind);
    }
}
//# sourceMappingURL=cell.dictionary.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/number.js
var number_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class number_NumberCell extends cell_dictionary_CellDictionary {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    onSelected(event) {
        return void 0;
    }
    onSearch(event) {
        return number_awaiter(this, void 0, void 0, function* () {
            return void 0;
        });
    }
    prepareDisplay() {
        super.prepareDisplay();
        let data = this.getData();
        this.element.innerText = data !== null ? data : '';
    }
    superPrepareEdit() {
        super.prepareEdit();
    }
    prepareEdit() {
        super.prepareEdit();
        this.input = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.INPUT);
        this.input.type = modules_constants_TYPE.TEXT;
        let data = this.getRawData();
        this.lastValidValue = data;
        this.input.value = data !== null ? data : '';
        this.element.appendChild(this.input);
        super.prepareClear();
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_NUMBER]);
    }
    prepareColoring() {
        super.prepareColoring();
        this.coloring = new cell_coloring_CellColoring(this.services, this.element, this.column, this.getRowData.bind(this), this.getRawData.bind(this));
    }
    getInputFloatValue() {
        return parseFloat(this.input.value.replace(',', '.'));
    }
    getInputSafeValue() {
        let floatValue = this.getInputFloatValue();
        if (!isNaN(floatValue) && !UtilsNumber.isSafeInteger(floatValue)) {
            console.warn(`Value ${floatValue} is not a safe value. Value will be changed to safe value.`);
            return UtilsNumber.getSafeInteger(floatValue);
        }
        return floatValue;
    }
    onInput() {
        if (/^-?\d*(\.|,)?\d*$/.test(this.input.value)) {
            let floatValue = this.getInputFloatValue();
            this.setValidValue(floatValue);
        }
        else {
            this.input.value = this.lastValidValue;
        }
    }
    onClear() {
        this.lastValidValue = '';
        super.onClear();
    }
    refreshColors() {
        if (this.coloring) {
            this.coloring.refresh();
        }
    }
    blur() {
        super.blur();
        let floatValue = this.getInputSafeValue();
        if (isNaN(floatValue) && this.input.value === '') {
            this.refreshColors();
            return;
        }
        if (floatValue.toString() !== this.input.value) {
            this.setValidValue(floatValue);
            this.input.value = this.lastValidValue;
        }
        this.refreshColors();
    }
    setValidValue(floatValue) {
        let isNumber = !isNaN(floatValue);
        this.lastValidValue = isNumber ? floatValue.toString() : '';
        super.onInput(isNumber ? floatValue : null);
    }
    checkError() {
        let error = this.errorValue === parseFloat(this.input.value);
        utilities_dom_UtilitiesDOM.toggleClass(error, this.element, [modules_constants_CLASS.ERROR]);
    }
    live() {
        super.live();
    }
}
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/select.js
var select_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class types_select_Select extends cell_dictionary_CellDictionary {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    focus(event) {
        const _super = name => super[name];
        return select_awaiter(this, void 0, void 0, function* () {
            _super("focus").call(this);
            if (this.dictionaryId && this.isEditable()) {
                let options = yield this.services.dictionaries.getDictionary(this.dictionaryId);
                this.popupOpen([this.selectListGet(options.data, [this.getData()], SELECT_TYPE.SINGLE)], this.element);
                this.selectListFocus();
            }
        });
    }
    blur() {
        super.blur();
        if (this.dictionaryId && this.isEditable()) {
            this.popupClose();
            this.selectListBlur();
        }
    }
    onSelected(event) {
        this.onInput(event.detail[0]);
        this.setElementText();
        this.popupClose();
        this.selectListDestroy();
        this.unliveEditable();
        // Tip: temporary hack for reopen popup after selecting value
        dispatchEvent(new KeyboardEvent(modules_constants_EVENT.KEYDOWN, { 'key': MAP_KEYS.ESCAPE }));
    }
    onSearch(event) {
        return select_awaiter(this, void 0, void 0, function* () {
            let predicate = (dictionary) => dictionary.value.toString().toLowerCase().includes(event.detail.toString().toLowerCase());
            let dict = yield this.services.dictionaries.getDictionary(this.dictionaryId);
            this.selectListUpdate(dict.filterBy(predicate));
        });
    }
    prepare() {
        super.prepareDictionary();
        this.dictionaryId ? super.prepare() : super.prepareFakeElement();
        super.prepare();
    }
    prepareDisplay() {
        super.prepareDisplay();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_NUMBER]);
        this.setElementText();
    }
    prepareEdit() {
        super.prepareEdit();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_SELECT]);
        this.setElementText();
    }
    setElementText() {
        let key = this.getRawData();
        this.services.dictionaries.getValueByKey(this.dictionaryId, key).then((value) => {
            this.element.innerText = value ? value : key;
        });
    }
    checkError() {
        let error = this.errorValue === this.getRawData();
        utilities_dom_UtilitiesDOM.toggleClass(error, this.element, [modules_constants_CLASS.ERROR]);
    }
}
//# sourceMappingURL=select.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/text.js



class types_text_Text extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    prepareDisplay() {
        super.prepareDisplay();
        this.element.innerText = this.getRawData();
    }
    prepareEdit() {
        super.prepareEdit();
        this.input = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.INPUT);
        this.input.type = modules_constants_TYPE.TEXT;
        this.input.value = this.getRawData();
        this.element.appendChild(this.input);
        super.prepareClear();
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_TEXT]);
    }
}
//# sourceMappingURL=text.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/date.js





const types_date_DATE_ZEROS = '0000-00-00';
class types_date_CellDate extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this._onDateSelectedBind = this._onDateSelected.bind(this);
    }
    prepareDisplay() {
        super.prepareDisplay();
        let data = '';
        if (this.isProperDateString(this.getRawData())) {
            data = this.getData();
        }
        this.text = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_DATE_TEXT]);
        this.text.innerHTML = data;
        this.element.appendChild(this.text);
    }
    prepareEdit() {
        super.prepareEdit();
        this.prepareDisplay();
        super.prepareClear();
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_DATE]);
    }
    focus(event) {
        super.focus();
        let rawData = this.getRawData();
        if (rawData !== types_date_DATE_ZEROS && this.isProperDateString(rawData)) {
            this.date = UtilsDate.getDateFromISOString(rawData);
        }
        else {
            this.date = new Date();
        }
        this.popupOpen([this._calendarGet()], this.element);
    }
    _calendarGet() {
        this.calendar = document.createElement(VUIELEMENT.CALENDAR);
        this.calendar.addEventListener(modules_constants_EVENT.DATESELECTED, this._onDateSelectedBind);
        this.calendar.date = this.date.toISOString();
        return this.calendar;
    }
    _onDateSelected(event) {
        let date = event.detail;
        this.date = date;
        this.text.innerText = this.services.formatter.formatValue(this.column, this.getRowData(), date.toISOString());
        super.onInput(UtilsDate.getDateString(date));
        this.popupClose();
        this._calendarDestroy();
        // Tip: temporary hack for reopen popup after selecting value
        dispatchEvent(new KeyboardEvent(modules_constants_EVENT.KEYDOWN, { 'key': MAP_KEYS.ESCAPE }));
    }
    _calendarDestroy() {
        this.calendar.removeEventListener(modules_constants_EVENT.DATESELECTED, this._onDateSelectedBind);
    }
    blur() {
        super.blur();
        this.popupClose();
        this._calendarDestroy();
    }
    onClear() {
        this.text.innerText = '';
        super.onInput('');
    }
    canToggleClear() {
        return !UtilsDate.isDateEmpty(this.text.innerText);
    }
    isProperDateString(dateString) {
        return !UtilsDate.isDateEmpty(dateString) && UtilsDate.isDateStringValid(dateString);
    }
    liveEditable() {
        if (!this.isEditable()) {
            return void 0;
        }
        if (this.clear) {
            this.clear.addEventListener(modules_constants_EVENT.CLICK, this.onClearBind);
        }
    }
}
//# sourceMappingURL=date.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/link.js



class types_link_Link extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    setOptional(key, value) {
        if (value) {
            this.link[key] = value;
        }
    }
    prepareElement() {
        super.prepareElement();
        let data = this.getRawData();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_LINK]);
        this.link = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.ANCHOR);
        this.link.text = data.text;
        this.link.target = '_blank';
        this.setOptional('title', data.title);
        this.setOptional('href', data.href);
        this.element.appendChild(this.link);
    }
}
//# sourceMappingURL=link.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/button.js



class types_button_Button extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    onClick() {
        let name = this.params.actions[this.column.id];
        console.warn(name, this.rowWrapped.getId());
        this.eventBus.fire(name, { name, rowId: this.rowWrapped.getId() });
    }
    prepareElement() {
        super.prepareElement();
        this.button = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.BUTTON);
        this.button.innerText = this.column.label;
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_BUTTON]);
        if (this.params.abstract) {
            this.button.addEventListener(modules_constants_EVENT.CLICK, this.onClick.bind(this));
        }
        this.element.appendChild(this.button);
    }
}
//# sourceMappingURL=button.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/custom.js




class types_custom_Custom extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    prepareElement() {
        super.prepareElement();
        this.shadowRoot = this.element.attachShadow({ mode: 'open' });
        this.shadowRoot.innerHTML = '<div>Some text .. some text .. some text</div>';
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_CUSTOM]);
        this.fireCreate();
    }
    prepareEdit() {
        super.prepareEdit();
        this.prepareDisplay();
    }
    destroy() {
        super.destroy();
        this.fireDestroy();
    }
    fireCreate() {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEW.CELL.CREATE, {
            columnId: this.column.id,
            rowId: this.rowWrapped.getId(),
            cell: this.element
        });
    }
    fireDestroy() {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEW.CELL.DESTROY, {
            columnId: this.column.id,
            rowId: this.rowWrapped.getId(),
        });
    }
}
//# sourceMappingURL=custom.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/multiselect.js
var multiselect_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class types_multiselect_Multiselect extends cell_dictionary_CellDictionary {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    onAfterRender() {
        return void 0;
    }
    focus(event) {
        const _super = name => super[name];
        return multiselect_awaiter(this, void 0, void 0, function* () {
            _super("focus").call(this);
            if (this.dictionaryId && this.isEditable()) {
                let options = yield this.services.dictionaries.getDictionary(this.dictionaryId);
                this.popupOpen([this.selectListGet(options.data, this.getData(), SELECT_TYPE.MULTI, VUIPOPUP.JUSTIFICATION.LEFT)], this.element);
                this.selectListFocus();
            }
        });
    }
    blur() {
        super.blur();
        if (this.dictionaryId && this.isEditable()) {
            this.popupClose();
            this.selectListDestroy();
        }
    }
    isEditable() {
        return this.services.cell.isEditable(this.getRowData(), this.column);
    }
    prepare() {
        super.prepareDictionary();
        super.prepare();
    }
    prepareElement() {
        super.prepareElement();
        this.items = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        this.prepareItems();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_MULTISELECT.ELEMENT]);
        this.element.appendChild(this.items);
        super.prepareClear();
    }
    prepareItems() {
        const _super = name => super[name];
        return multiselect_awaiter(this, void 0, void 0, function* () {
            let data = this.getRawData();
            for (let i = 0; i < data.length; i++) {
                if (this.params.measure && i > 0) {
                    continue;
                }
                let key = data[i];
                let value = yield this.services.dictionaries.getValueByKey(this.dictionaryId, key);
                this.prepareItem(value ? value : key, i, data.length);
            }
            _super("onAfterRender").call(this);
        });
    }
    prepareItem(text, index, valuesLength) {
        let itemElement = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN);
        utilities_dom_UtilitiesDOM.addClass(itemElement, [modules_constants_CLASS.CELL_MULTISELECT.ITEM]);
        let textElement = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN);
        utilities_dom_UtilitiesDOM.addClass(textElement, [modules_constants_CLASS.CELL_MULTISELECT.ITEM_TEXT]);
        textElement.innerText = text;
        let moreElement = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN);
        utilities_dom_UtilitiesDOM.addClass(moreElement, [modules_constants_CLASS.CELL_MULTISELECT.ITEM_MORE]);
        if (index < valuesLength - 1) {
            moreElement.innerText = `+${valuesLength - index - 1}`;
        }
        itemElement.appendChild(textElement);
        itemElement.appendChild(moreElement);
        this.items.appendChild(itemElement);
    }
    onSelected(event) {
        this.updateItems(event.detail);
        this.selectListFocus();
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    onSearch(event) {
        return multiselect_awaiter(this, void 0, void 0, function* () {
            let predicate = (dictionary) => dictionary.value.toString().toLowerCase().includes(event.detail.toString().toLowerCase());
            let dict = yield this.services.dictionaries.getDictionary(this.dictionaryId);
            this.selectListUpdate(dict.filterBy(predicate));
        });
    }
    updateItems(data) {
        this.onInput(data);
        this.reloadItems();
    }
    deleteItems() {
        utilities_dom_UtilitiesDOM.removeChildren(this.items);
    }
    getRawData() {
        let data = super.getRawData();
        if (data) {
            data = UtilitiesArray.wrapInArray(data);
            // TODO do we want to sort keys instead of values and sort always as strings?
            data.sort();
            data = data.slice();
        }
        return data;
    }
    canToggleClear() {
        return !!this.getData().length;
    }
    reloadItems() {
        this.deleteItems();
        this.prepareItems();
    }
    checkError() {
        let data = super.getRawData();
        let error = data.every((element) => {
            return this.errorValue.indexOf(element) > -1;
        });
        utilities_dom_UtilitiesDOM.toggleClass(error, this.element, [modules_constants_CLASS.ERROR]);
    }
    onClear() {
        this.onInput([]);
        this.reloadItems();
    }
    destroy() {
        if (this.items) {
            utilities_dom_UtilitiesDOM.removeChildren(this.items);
            this.element.removeChild(this.items);
            this.items = null;
        }
        super.destroy();
    }
}
//# sourceMappingURL=multiselect.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/currency.js
var currency_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class types_currency_Currency extends number_NumberCell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this.onTabkeyAccord = this.onTabKey.bind(this);
    }
    focus(event) {
        const _super = name => super[name];
        return currency_awaiter(this, void 0, void 0, function* () {
            _super("focus").call(this, event);
            yield this.changeFocus(event);
            this.services.keyAccord.add(MAP_KEYS.TAB, this.onTabkeyAccord);
            this.services.keyAccord.add(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onTabkeyAccord);
        });
    }
    blur() {
        super.blur();
        this.focusedElement = null;
        this.services.keyAccord.remove(MAP_KEYS.TAB, this.onTabkeyAccord);
        this.services.keyAccord.remove(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onTabkeyAccord);
        if (this.dictionaryId && this.isEditable()) {
            this.popupClose();
            this.selectListDestroy();
        }
    }
    onTabKey() {
        return currency_awaiter(this, void 0, void 0, function* () {
            if (this.focusedElement && this.focusedElement === this.input) {
                yield this.setFocusOnPopup();
            }
            else {
                this.setFocusOnInput();
            }
        });
    }
    setFocusOnInput() {
        this.popupClose();
        this.input.focus();
        this.focusedElement = this.input;
    }
    setFocusOnPopup() {
        return currency_awaiter(this, void 0, void 0, function* () {
            yield this.onPopupShow();
            this.input.blur();
            this.focusedElement = this.select;
            this.selectListFocus();
        });
    }
    changeFocus(event) {
        return currency_awaiter(this, void 0, void 0, function* () {
            let element = (event && [this.input, this.select].find((cell) => utilities_dom_UtilitiesDOM.isInDescendants(event.target, cell))) || this.input;
            if (element === this.input) {
                this.setFocusOnInput();
            }
            else if (element === this.select) {
                yield this.setFocusOnPopup();
            }
        });
    }
    prepare() {
        super.prepareDictionary();
        super.prepare();
        let data = this.getRawData();
        if (data) {
            if (typeof data.value === 'undefined') {
                console.warn(`No value provided for column '${this.column.id}' in '${this.rowWrapped.getId()}' row`);
            }
            if (typeof data.currency === 'undefined') {
                console.warn(`No currency provided for column '${this.column.id}' in '${this.rowWrapped.getId()}' row`);
            }
        }
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_CURRENCY.ELEMENT]);
    }
    getCurrencyValue() {
        let data = this.getRawData();
        return data && data.value;
    }
    prepareColoring() {
        this.coloring = new cell_coloring_CellColoring(this.services, this.element, this.column, this.getRowData.bind(this), this.getCurrencyValue.bind(this));
    }
    prepareDisplay() {
        super.prepareDisplay();
        let { value, currency } = this.getRawData();
        if ((!value && value !== 0) || !currency) {
            this.element.innerText = '';
            return void 0;
        }
        if (this.dictionaryId) {
            this.services.dictionaries.getValueByKey(this.dictionaryId, currency)
                .then((currencyDictionary) => {
                this.element.innerText = currencyDictionary ?
                    `${this.getData()} ${currencyDictionary}` : `${this.getData()}`;
            });
        }
        else {
            this.element.innerText = `${this.getData()}`;
        }
    }
    prepareEdit() {
        const _super = name => super[name];
        return currency_awaiter(this, void 0, void 0, function* () {
            _super("superPrepareEdit").call(this);
            this.input = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.INPUT);
            this.input.type = modules_constants_TYPE.TEXT;
            this.select = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_CURRENCY.SELECT]);
            this.prepareEditDisplay();
            this.element.appendChild(this.input);
            this.element.appendChild(this.select);
            _super("prepareClear").call(this);
        });
    }
    setSelectText(currency) {
        let innerText = '';
        if (this.dictionaryId) {
            this.services.dictionaries.getValueByKey(this.dictionaryId, currency).then((value) => {
                this.select.innerText = value ? value : innerText;
            });
        }
        else {
            let data = this.getRawData();
            this.select.innerText = (data && data.currency || innerText).toUpperCase();
            this.select.disabled = true;
            utilities_dom_UtilitiesDOM.addClass(this.select, [modules_constants_CLASS.CELL_DISABLED]);
        }
    }
    prepareEditDisplay() {
        let { value = null, currency = '' } = this.getRawData();
        let plainValue = value !== null ? value.toString() : '';
        this.input.value = plainValue;
        this.lastValidValue = plainValue;
        this.selectedCurrency = currency;
        this.setSelectText(currency);
    }
    canToggleClear() {
        return value_UtilsValue.stringifyCurrency(this.input.value, this.selectedCurrency) !== '';
    }
    onClear() {
        this.input.value = '';
        this.selectedCurrency = '';
        this.setSelectText(this.selectedCurrency);
        super.onClear();
        this.popupClose();
    }
    onInputChange(data) {
        let floatValue = parseFloat(this.input.value);
        let value = !isNaN(floatValue) ? floatValue : null;
        super.onInputChange({ value, currency: this.selectedCurrency });
    }
    onPopupShow() {
        return currency_awaiter(this, void 0, void 0, function* () {
            if (this.isEditable() && this.dictionaryId) {
                let options = yield this.services.dictionaries.getDictionary(this.dictionaryId);
                this.popupOpen([this.selectListGet(options.data, [this.selectedCurrency], SELECT_TYPE.SINGLE)], this.element);
            }
        });
    }
    onSelected({ detail }) {
        this.selectedCurrency = detail[0];
        super.onInput();
        this.setSelectText(detail[0]);
        this.popupClose();
        this.selectListDestroy();
        this.setFocusOnInput();
    }
    onSearch(event) {
        return currency_awaiter(this, void 0, void 0, function* () {
            let predicate = (dictionary) => dictionary.value.toString().toLowerCase().includes(event.detail.toString().toLowerCase());
            let dict = yield this.services.dictionaries.getDictionary(this.dictionaryId);
            this.selectListUpdate(dict.filterBy(predicate));
        });
    }
    live() {
        this.onPopupShowBind = this.onPopupShow.bind(this);
        super.live();
    }
    liveEditable() {
        super.liveEditable();
        if (!this.isEditable()) {
            return void 0;
        }
        if (this.select && this.dictionaryId) {
            this.select.addEventListener(modules_constants_EVENT.CLICK, this.onPopupShowBind);
        }
    }
    unliveEditable() {
        super.unliveEditable();
        if (!this.isEditable()) {
            return void 0;
        }
        if (this.select && this.dictionaryId) {
            this.select.removeEventListener(modules_constants_EVENT.CLICK, this.onPopupShowBind);
        }
    }
}
//# sourceMappingURL=currency.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/progressbar.js



class types_progressbar_ProgressBar extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
        this.keyAccordParams = { description: `${types_progressbar_ProgressBar.name} handler` };
        this.onResizeBind = this.onResize.bind(this);
        this.onResizeEndBind = this.onResizeEnd.bind(this);
        this.onIncreseBind = this.onIncrese.bind(this);
        this.onDecreseBind = this.onDecrese.bind(this);
        this.onLiveResize = this.liveResize.bind(this);
    }
    prepare() {
        this.calculate();
        this.config ? super.prepare() : super.prepareFakeElement();
    }
    focus() {
        super.focus();
        this.toggleResizerClass(true);
        this.focusLive();
        UtilitiesBrowser.removeAllSelections();
    }
    blur() {
        super.blur();
        this.toggleResizerClass(false);
        this.focusUnlive();
    }
    before() {
        super.before();
        let { config } = this.services.extensions.getColumnById(this.column.id);
        this.config = config;
    }
    calculate() {
        if (!this.config) {
            return void 0;
        }
        this.calculateUnit();
        this.calculateWidth();
    }
    live() {
        if (!this.config) {
            return void 0;
        }
        super.live();
    }
    prepareEdit() {
        super.prepareEdit();
        this.prepareResizer();
    }
    prepareElement() {
        super.prepareElement();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_PROGRESS_BAR]);
        this.wrapper = utilities_dom_UtilitiesDOM.createNS(modules_constants_ELEMENT.SVG, {}, [modules_constants_CLASS.PROGRESS_BAR.WRAPPER]);
        this.element.appendChild(this.wrapper);
        this.prepareProgressBarBounding();
        this.prepareProgressBar();
        super.prepareFakeElement();
    }
    calculateUnit() {
        this.unit = PROGRESS_BAR.MAX_WIDTH / (this.config.to - this.config.from);
    }
    calculateWidth() {
        let value = this.getData();
        if (isNaN(value) || value < this.config.from) {
            value = this.config.from;
        }
        else if (value > this.config.to) {
            value = this.config.to;
        }
        this.width = Math.abs((value - this.config.from) * this.unit);
    }
    prepareProgressBarBounding() {
        this.progressBarBounding = utilities_dom_UtilitiesDOM.createNS(STATIC_TYPE.RECT, {
            x: PROGRESS_BAR.POSITION_X,
            y: PROGRESS_BAR.POSITION_Y,
            width: PROGRESS_BAR.MAX_WIDTH,
            height: PROGRESS_BAR.HEIGHT
        }, [modules_constants_CLASS.PROGRESS_BAR.BOUNDING]);
        this.wrapper.appendChild(this.progressBarBounding);
    }
    prepareProgressBar() {
        this.progressBar = utilities_dom_UtilitiesDOM.createNS(STATIC_TYPE.RECT, {
            x: PROGRESS_BAR.POSITION_X,
            y: PROGRESS_BAR.POSITION_Y,
            width: this.width,
            height: PROGRESS_BAR.HEIGHT
        }, [modules_constants_CLASS.PROGRESS_BAR.ELEMENT]);
        this.wrapper.appendChild(this.progressBar);
    }
    prepareResizer() {
        this.resizer = utilities_dom_UtilitiesDOM.createNS(STATIC_TYPE.RECT, {
            x: PROGRESS_BAR.POSITION_X + this.width - (PROGRESS_BAR.RESIZER.WIDTH / 2),
            y: PROGRESS_BAR.POSITION_Y,
            width: PROGRESS_BAR.RESIZER.WIDTH,
            height: PROGRESS_BAR.HEIGHT
        }, [modules_constants_CLASS.PROGRESS_BAR.RESIZER]);
        this.wrapper.appendChild(this.resizer);
    }
    focusLive() {
        if (!this.isEditable()) {
            return void 0;
        }
        if (UtilitiesBrowser.isIE11()) {
            this.services.keyAccord.add(DIRECTION.LEFT_IE, this.onDecreseBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.RIGHT_IE, this.onIncreseBind, this.keyAccordParams);
        }
        else {
            this.services.keyAccord.add(DIRECTION.LEFT, this.onDecreseBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.RIGHT, this.onIncreseBind, this.keyAccordParams);
        }
        this.resizer.addEventListener(modules_constants_EVENT.MOUSEDOWN, this.onLiveResize);
        this.resizer.addEventListener(modules_constants_EVENT.TOUCHSTART, this.onLiveResize);
    }
    focusUnlive() {
        if (!this.isEditable()) {
            return void 0;
        }
        if (UtilitiesBrowser.isIE11()) {
            this.services.keyAccord.remove(DIRECTION.LEFT_IE, this.onDecreseBind);
            this.services.keyAccord.remove(DIRECTION.RIGHT_IE, this.onIncreseBind);
        }
        else {
            this.services.keyAccord.remove(DIRECTION.LEFT, this.onDecreseBind);
            this.services.keyAccord.remove(DIRECTION.RIGHT, this.onIncreseBind);
        }
        if (this.resizer) {
            this.resizer.removeEventListener(modules_constants_EVENT.MOUSEDOWN, this.onLiveResize);
            this.resizer.removeEventListener(modules_constants_EVENT.TOUCHSTART, this.onLiveResize);
        }
    }
    liveResize() {
        document.addEventListener(modules_constants_EVENT.MOUSEMOVE, this.onResizeBind);
        document.addEventListener(modules_constants_EVENT.TOUCHMOVE, this.onResizeBind);
        document.addEventListener(modules_constants_EVENT.MOUSEUP, this.onResizeEndBind);
        document.addEventListener(modules_constants_EVENT.TOUCHEND, this.onResizeEndBind);
    }
    unliveResize() {
        document.removeEventListener(modules_constants_EVENT.MOUSEMOVE, this.onResizeBind);
        document.removeEventListener(modules_constants_EVENT.TOUCHMOVE, this.onResizeBind);
        document.removeEventListener(modules_constants_EVENT.MOUSEUP, this.onResizeEndBind);
        document.removeEventListener(modules_constants_EVENT.TOUCHEND, this.onResizeEndBind);
    }
    calculateBoundings() {
        if (!this.progressBarClientRect) {
            this.progressBarClientRect = this.progressBar.getBoundingClientRect();
        }
    }
    onResize(event) {
        this.calculateBoundings();
        let position = event.pageX - this.progressBarClientRect.left;
        this.changePositions(position);
    }
    onResizeEnd() {
        delete this.progressBarClientRect;
        this.unliveResize();
    }
    onIncrese() {
        let position = Number(this.progressBar.getAttributeNS(null, 'width')) + this.unit;
        this.changePositions(position);
    }
    onDecrese() {
        let position = Number(this.progressBar.getAttributeNS(null, 'width')) - this.unit;
        this.changePositions(position);
    }
    changePositions(position) {
        if (position + PROGRESS_BAR.POSITION_X < PROGRESS_BAR.POSITION_X) {
            position = 0;
        }
        let maxPosition = Number(this.progressBarBounding.getAttributeNS(null, 'width'));
        if (position > maxPosition) {
            position = Math.min(position, maxPosition);
        }
        let resizerXPosition = position + PROGRESS_BAR.POSITION_X - (PROGRESS_BAR.RESIZER.WIDTH / 2);
        this.progressBar.setAttributeNS(null, 'width', (position).toString());
        this.resizer.setAttributeNS(null, 'x', (resizerXPosition).toString());
        this.setValue(position);
    }
    setValue(base) {
        let value = (base / this.unit) + this.config.from;
        value = Math.max(Math.min(value, this.config.to), this.config.from);
        this.onInput(value);
    }
    toggleResizerClass(toggled) {
        utilities_dom_UtilitiesDOM.toggleClass(toggled, this.resizer, [modules_constants_CLASS.PROGRESS_BAR.RESIZER_ENABLED]);
    }
}
//# sourceMappingURL=progressbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/harveyBall.js



class types_harveyBall_HarveyBall extends number_NumberCell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    prepareElement() {
        super.prepareElement();
        if (!this.config || this.getRawData() === null) {
            return void 0;
        }
        let radius = SPRITE_CIRCLES.DIAMETER * SPRITE_CIRCLES.RATIO;
        let c = Math.round(2 * Math.PI * radius);
        this.circle = utilities_dom_UtilitiesDOM.createNS(modules_constants_TYPE.CIRCLE, {
            'stroke-dasharray': `${(((this.getMetrics()) - this.config.from) / (this.config.to - this.config.from)) * c} ${c}`,
            'r': radius,
            'cx': SPRITE_CIRCLES.DIAMETER / 2,
            'cy': SPRITE_CIRCLES.DIAMETER / 2,
            'class': modules_constants_CLASS.CIRCLE_SVG
        });
        this.harveyBall = utilities_dom_UtilitiesDOM.createNS(modules_constants_ELEMENT.SVG, {
            'width': SPRITE_CIRCLES.DIAMETER,
            'height': SPRITE_CIRCLES.DIAMETER,
            'class': modules_constants_CLASS.HARVEY_BALL
        });
        this.harveyBall.appendChild(this.circle);
        this.element.classList.add(modules_constants_CLASS.CELL_HARVEY_BALL);
        this.element.appendChild(this.harveyBall);
    }
    getMetrics() {
        let data = this.getRawData();
        if (isNaN(data) || data < this.config.from) {
            data = this.config.from;
        }
        else if (data > this.config.to) {
            data = this.config.to;
        }
        return data;
    }
    before() {
        super.before();
        let { config } = this.services.extensions.getColumnById(this.column.id);
        this.config = config;
    }
    blur() {
        super.blur();
        this.refreshHarveyBall();
        utilities_dom_UtilitiesDOM.toggleClass(this.getRawData() === null, this.harveyBall, [modules_constants_CLASS.HIDDEN]);
    }
    prepareDisplay() {
        let { editable, showValue } = this.services.extensions.getColumnById(this.column.id);
        this.prepareElement();
        if (!this.services.state.get().edit.enabled && !showValue || !editable && !showValue) {
            return void 0;
        }
        let item = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN, [modules_constants_CLASS.CELL_NUMBER]);
        item.innerText = this.getData();
        this.element.appendChild(item);
    }
    refreshHarveyBall() {
        if (!this.config) {
            return void 0;
        }
        let radius = SPRITE_CIRCLES.DIAMETER * SPRITE_CIRCLES.RATIO;
        let c = Math.round(2 * Math.PI * radius);
        let strokeDasharray = `${(((this.getMetrics() - this.config.from) / (this.config.to - this.config.from)) * c)} ${c}`;
        this.circle.setAttributeNS(null, 'stroke-dasharray', strokeDasharray);
    }
}
//# sourceMappingURL=harveyBall.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/trend.js



class types_trend_Trend extends number_NumberCell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    prepareElement() {
        super.prepareElement();
        if (!this.config || this.getRawData() === null) {
            return void 0;
        }
        let indicator = this.getIndicator();
        this.trendWrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        let trend = utilities_dom_UtilitiesDOM.create(`${VUIELEMENT.ICON.TREND}-${indicator}`);
        this.trendWrapper.appendChild(trend);
        this.element.classList.add(modules_constants_CLASS.CELL_TREND);
        this.element.appendChild(this.trendWrapper);
    }
    getIndicator() {
        let metrics = this.getMetrics();
        let average = (this.config.to - this.config.from) / 2 + this.config.from;
        return metrics === average
            ? INDICATOR.STILL
            : (metrics < average ? INDICATOR.DOWN : INDICATOR.UP);
    }
    getMetrics() {
        let data = this.getRawData();
        if (isNaN(data) || data < this.config.from) {
            data = this.config.from;
        }
        else if (data > this.config.to) {
            data = this.config.to;
        }
        return data;
    }
    prepareDisplay() {
        let { editable, showValue } = this.services.extensions.getColumnById(this.column.id);
        this.prepareElement();
        if (!this.services.state.get().edit.enabled && !showValue || !editable && !showValue) {
            return void 0;
        }
        let item = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN, [modules_constants_CLASS.CELL_NUMBER]);
        item.innerText = this.getData();
        this.element.appendChild(item);
    }
    before() {
        super.before();
        let { config } = this.services.extensions.getColumnById(this.column.id);
        this.config = config;
    }
    blur() {
        super.blur();
        this.refreshTrend();
        utilities_dom_UtilitiesDOM.toggleClass(this.getRawData() === null, this.trendWrapper, [modules_constants_CLASS.HIDDEN]);
    }
    refreshTrend() {
        if (!this.config) {
            return void 0;
        }
        let indicator = this.getIndicator();
        utilities_dom_UtilitiesDOM.removeChildren(this.trendWrapper);
        let trend = utilities_dom_UtilitiesDOM.create(`${VUIELEMENT.ICON.TREND}-${indicator}`);
        this.trendWrapper.appendChild(trend);
    }
}
//# sourceMappingURL=trend.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types/action.js




class action_Action extends cell_cell_Cell {
    constructor(eventBus, services, rowWrapped, column, params = {}) {
        super(eventBus, services, rowWrapped, column, params);
        this.eventBus = eventBus;
        this.services = services;
        this.rowWrapped = rowWrapped;
        this.column = column;
        this.params = params;
    }
    before() {
        super.before();
        this.params = Object.assign({}, this.params, { abstract: true });
    }
    prepareDisplay() {
        super.prepareDisplay();
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.CELL_ACTION]);
        let rowActions = this.getRowAction();
        let columnActions = this.getColumnAction();
        let actions = rowActions.length ? rowActions : columnActions;
        if (actions) {
            this.params.actions = {};
            this.column.columns = actions.reduce((acc, action, index) => {
                let columnId = `${this.column.id}_${index}`;
                this.params.actions[columnId] = action.name;
                acc.push({
                    id: columnId,
                    label: action.label,
                    type: modules_constants_TYPE.BUTTON,
                    visible: true
                });
                return acc;
            }, []);
            let group = new group_Group(this.eventBus, this.services, this.rowWrapped, this.column, this.params).get();
            this.element.appendChild(group);
        }
    }
    getColumnAction() {
        let { actions } = this.services.extensions.getColumnById(this.column.id);
        return actions ? actions : [];
    }
    getRowAction() {
        let { actions } = this.services.extensions.getRows();
        let rowId = this.rowWrapped.getId();
        return actions && actions[rowId] ? actions[rowId] : [];
    }
}
//# sourceMappingURL=action.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/cell/types.js



















//# sourceMappingURL=types.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/layer.js



class layer_Layer {
    constructor(eventBus, row, params) {
        this.eventBus = eventBus;
        this.row = row;
        this.params = params;
        this.removeQueue = [];
        this.elements = [];
        this.flushQueueDebounce = UtilitiesDelay.debounce(this.flushQueue.bind(this), 100);
        this.prepare();
        this.live();
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.LAYER]);
    }
    add(row) {
        this.elements.push(row);
        this.element.appendChild(row.get());
    }
    isMainView() {
        return !!this.params.isMainView;
    }
    flushQueue(clean) {
        this.removeQueue.forEach((viewRow) => {
            let index = this.elements.indexOf(viewRow);
            if (index !== -1) {
                this.element.removeChild(viewRow.get());
                this.elements.splice(index, 1);
                viewRow.unHold();
            }
        });
        this.removeQueue = [];
        if (clean && this.isEmpty() && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
    }
    remove(viewRow, clean = false) {
        this.removeQueue.push(viewRow);
        if (this.params.mode === constants_VIEW.MODE.INFINITE) {
            this.flushQueueDebounce(clean);
        }
        else {
            this.flushQueue(clean);
        }
    }
    get() {
        return this.element;
    }
    isEmpty() {
        return !this.elements.length;
    }
    destroy() {
        this.elements = [];
        this.flushQueue(true);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
//# sourceMappingURL=layer.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/row.js




class row_row_Row {
    constructor(eventBus, services, columnsDelegate) {
        this.eventBus = eventBus;
        this.services = services;
        this.columnsDelegate = columnsDelegate;
        this.cells = {};
        this.holden = false;
        this.releasePending = false;
        this.prepare();
        this.live();
    }
    setDataIndex(dataIndex) {
        this.dataIndex = dataIndex;
    }
    getDataIndex() {
        return this.dataIndex;
    }
    getLayer() {
        return this.layer;
    }
    get() {
        return this.element;
    }
    isHold() {
        return this.holden;
    }
    isReleasePending() {
        return this.releasePending;
    }
    hold(layer) {
        if (this.layer) {
            this.layer.remove(this);
        }
        this.layer = layer;
        layer.add(this);
        this.holden = true;
    }
    unHoldWrapped() {
        if (this.rowWrapped) {
            this.rowWrapped.unhold(this.layer.isMainView());
            this.rowWrapped = undefined;
        }
    }
    unHold() {
        this.unHoldWrapped();
        this.holden = false;
        this.releasePending = false;
        this.layer = null;
    }
    fill(rowWrapped) {
        if (!this.layer) {
            console.warn('CANNOT FILL NOT ATTACHED ROW', rowWrapped);
            return void 0;
        }
        if (this.rowWrapped) {
            this.rowWrapped.unhold(this.layer.isMainView());
        }
        this.rowWrapped = rowWrapped;
        rowWrapped.hold(this, this.layer.isMainView());
    }
    release(clean = false) {
        if (this.isHold() && !this.isReleasePending()) {
            this.releasePending = true;
            this.layer.remove(this, clean);
        }
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ROW, this.services.sizeHeight.getRowLevelsClass()]);
    }
    setCurrentOrder() {
        this.currentOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
    }
    updateColumnsOrder() {
        let newOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
        let diff = columns_UtilsColumns.diff(this.currentOrder, newOrder);
        diff.add.forEach((columnId) => {
            let column = this.columnsDelegate().find((column) => column.id === columnId);
            this.addCell(column);
        });
        diff.remove.forEach((columnId) => this.removeCell(columnId));
        if (diff.order) {
            columns_UtilsColumns.sort(newOrder, this.currentOrder, this.cells);
        }
        this.setCurrentOrder();
    }
    rebuildCells() {
        let newCells = {};
        this.columnsDelegate().forEach((column) => {
            newCells[column.id] = this.cells[column.id];
        });
        this.cells = newCells;
    }
    fillCell(columnId, cell) {
        this.services.logger.warn(`This is only placeholder method. You should use more specified type of Row`);
    }
    prepareCell(column) {
        this.services.logger.warn(`This is only placeholder method. You should use more specified type of Row`);
    }
    removeCell(columnId) {
        this.cells[columnId].parentNode.removeChild(this.cells[columnId]);
        this.rebuildCells();
    }
    addCell(column) {
        this.services.logger.warn(`This is only placeholder method. You should use more specified type of Row`);
    }
    setCellWidth(columnId, width) {
        if (width === undefined || !this.cells.hasOwnProperty(columnId)) {
            return void 0;
        }
        this.cells[columnId].style.width = this.services.sizeWidth.getWidthString(width || 0);
        this.cells[columnId].style.display = this.services.columns.isVisibleById(columnId) ? 'inline-block' : 'none';
    }
    onDoneColumnWidth({ changed }) {
        Object.keys(changed).forEach((columnId) => this.setCellWidth(columnId, changed[columnId].width));
    }
    onChangeDataColumnsOrder() {
        this.updateColumnsOrder();
    }
    destroy() {
        utilities_dom_UtilitiesDOM.removeElement(this.element);
        this.rowWrapped = undefined;
        this.layer = undefined;
        this.element = undefined;
        this.cells = {};
        this.currentOrder = [];
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
//# sourceMappingURL=row.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types/normal.js





class normal_Normal extends row_row_Row {
    fillCell(columnId, viewCell) {
        if (this.cells.hasOwnProperty(columnId)) {
            this.clearCell(columnId);
            this.cells[columnId].appendChild(viewCell.get());
        }
    }
    superFill(rowWrapped) {
        super.fill(rowWrapped);
    }
    fill(rowWrapped) {
        this.superFill(rowWrapped);
        this.checkIfRemoved();
        this.checkIfMarked();
        this.checkIfNew();
        this.columnsDelegate().forEach((column) => this.fillCell(column.id, rowWrapped.getPreparedData().cells[column.id]));
    }
    clearCell(columnId) {
        utilities_dom_UtilitiesDOM.removeChildren(this.cells[columnId]);
    }
    clear() {
        this.columnsDelegate().forEach((column) => this.clearCell(column.id));
    }
    prepare() {
        super.prepare();
        this.type = constants_VIEW.ROW.TYPE.NORMAL;
        this.checkIfRemoved();
        this.setCurrentOrder();
        this.prepareCells();
    }
    checkIfRemoved() {
        if (this.services.state.edit.enabled && this.rowWrapped) {
            if (this.services.row.isRemoved(this.rowWrapped.getId())) {
                utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.REMOVED_ROW.ELEMENT]);
            }
        }
    }
    checkIfMarked() {
        if (this.services.state.mark.enabled && this.rowWrapped) {
            let marked = this.services.row.isMarked(this.rowWrapped.getId());
            utilities_dom_UtilitiesDOM.toggleClass(marked, this.element, [modules_constants_CLASS.ROW_MARKED]);
        }
    }
    checkIfNew() {
        if (this.services.state.edit.enabled && this.rowWrapped) {
            let newRow = this.services.state.edit.added.some((row) => row.id === this.rowWrapped.getId());
            utilities_dom_UtilitiesDOM.toggleClass(newRow, this.element, [modules_constants_CLASS.ROW_ADDED]);
        }
    }
    prepareCells() {
        this.columnsDelegate().forEach((column) => {
            this.prepareCell(column);
        });
        this.rebuildCells();
    }
    addCell(column) {
        this.prepareCell(column);
        this.rebuildCells();
        if (this.isHold()) {
            this.fillCell(column.id, this.rowWrapped.getPreparedData().cells[column.id]);
        }
    }
    getEventParams(columnId, cell, eventName) {
        let eventParams = { eventName };
        Object.defineProperty(eventParams, 'data', {
            get: function () {
                return {
                    columnId,
                    rowElement: this.element,
                    rowDescriptor: this.rowWrapped.getDataRowDescriptor(),
                    cellElement: cell
                };
            }.bind(this)
        });
        return eventParams;
    }
    prepareCell(column) {
        let cell = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL]);
        if (columns_UtilsColumns.isAbstractStatic(column.id)) {
            cell.classList.add(column.id);
        }
        this.eventBus.addListener(cell, modules_constants_EVENT.CLICK, this.getEventParams(column.id, cell, eventsList_EVENTS.CLICK.CELL));
        this.eventBus.addListener(cell, modules_constants_EVENT.MOUSELEAVE, this.getEventParams(column.id, cell, eventsList_EVENTS.MOUSELEAVE.CELL));
        this.eventBus.addListener(cell, modules_constants_EVENT.MOUSEENTER, this.getEventParams(column.id, cell, eventsList_EVENTS.MOUSEENTER.CELL));
        this.cells[column.id] = cell;
        let columnWidth = this.services.state.get().columns.width;
        this.setCellWidth(column.id, columnWidth[column.id] ?
            columnWidth[column.id].width
            : this.services.sizeWidth.getColumnWidth(column.id));
        this.element.appendChild(cell);
    }
    destroy() {
        this.clear();
        utilities_dom_UtilitiesDOM.removeChildren(this.element);
        this.rowWrapped = null;
        this.element = null;
    }
    onDoneRowMark() {
        this.checkIfMarked();
    }
    live() {
        super.live();
        let eventParams = { eventName: eventsList_EVENTS.CLICK.ROW, data: {} };
        Object.defineProperty(eventParams, 'data', {
            get: function () {
                return {
                    rowElement: this.element,
                    rowDescriptor: this.rowWrapped.getDataRowDescriptor()
                };
            }.bind(this)
        });
        this.eventBus.addListener(this.element, modules_constants_EVENT.CLICK, eventParams);
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onDoneColumnWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.MARK, this.onDoneRowMark.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
    }
}
//# sourceMappingURL=normal.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types/group.js
var group_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var group_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





class types_group_Group extends row_row_Row {
    constructor() {
        super(...arguments);
        this.fillAggregationDebounce = UtilitiesDelay.debounce(this.fillAggregation.bind(this), 100);
    }
    fill(rowWrapped) {
        super.fill(rowWrapped);
        this.params = rowWrapped.getGroupDataRow();
        this.requestSummary();
        this.fillGroup();
        this.fillAggregationDebounce();
    }
    prepare() {
        super.prepare();
        this.type = constants_VIEW.ROW.TYPE.GROUP;
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.GROUP_INDENT]);
        this.columnsDelegate().forEach((column) => this.addCellRecursive(column.id));
        this.setCurrentOrder();
    }
    setCellInitial(column) {
        let columnWidth = this.services.state.get().columns.width;
        if (columnWidth[column.id]) {
            this.cells[column.id].style.width = `${columnWidth[column.id].width}px`;
            this.cells[column.id].style.display = columnWidth[column.id].width ? 'inline-block' : 'none';
        }
        if (this.shouldBeCollapsed(column)) {
            this.cells[column.id].classList.add(modules_constants_CLASS.CELL_COLLAPSED);
        }
    }
    addCell(column) {
        this.addCellRecursive(column.id);
    }
    addCellRecursive(columnId, wrapper = this.element) {
        let column = this.services.columns.getColumnById(columnId, false);
        this.cells[columnId] = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL, modules_constants_CLASS.CELL_PADDING]);
        this.setCellInitial(column);
        if (column.type === STATIC_TYPE.ROW_GROUP) {
            this.cells[columnId].classList.add(`${modules_constants_CLASS.CELL}-${column.type}`);
        }
        if (column.type === modules_constants_TYPE.GROUP) {
            let cellGroup = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_GROUP]);
            column.columns.forEach((childColumn) => this.addCellRecursive(childColumn.id, cellGroup));
            this.cells[columnId].appendChild(cellGroup);
        }
        else {
            this.fillAggregationCell(columnId, this.getAggregations()[columnId]);
        }
        wrapper.appendChild(this.cells[columnId]);
    }
    removeCell(columnId) {
        this.element.removeChild(this.cells[columnId]);
        delete this.cells[columnId];
    }
    shouldBeCollapsed(column) {
        return !columns_UtilsColumns.isAbstractStatic(column.id)
            && this.services.extensions.getColumnById(column.id)
            && !column.visible;
    }
    fillGroup() {
        if (!this.cells[STATIC_CLASS.ROW_GROUP]) {
            return void 0;
        }
        this.viewCell = this.rowWrapped.getPreparedData().group;
        utilities_dom_UtilitiesDOM.removeChildren(this.cells[STATIC_CLASS.ROW_GROUP]);
        this.cells[STATIC_CLASS.ROW_GROUP].appendChild(this.viewCell.get());
        this.viewCell.getGroup().setAttribute(modules_constants_ATTRIBUTE.DEEP, this.params.deep.toString());
        this.rollUp();
    }
    fillAggregationCell(columnId, aggregation) {
        if (aggregation === undefined) {
            return void 0;
        }
        let aggregationEl = utilities_dom_UtilitiesDOM.create(VUIELEMENT.AGGREGATION);
        let wrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_PADDING, 'cell-aggregation']);
        let summaryState = this.services.state.get().summary;
        aggregationEl.init((element) => {
            this.services.animation.wrapAnimations(element, summaryState.animationType, { columnId }, () => summary_UtilsSummary.getOrderedAggregations(columnId, summaryState.state, aggregation));
        });
        aggregationEl.setAttribute('data', JSON.stringify({ aggregation }));
        this.cells[columnId].innerHTML = '';
        wrapper.appendChild(aggregationEl);
        this.cells[columnId].appendChild(wrapper);
    }
    fillAggregation() {
        let aggregation = this.getAggregations();
        Object.keys(aggregation).forEach((columnId) => {
            if (this.cells[columnId]) {
                this.fillAggregationCell(columnId, aggregation[columnId]);
            }
        });
    }
    requestSummaryRecursive(columns) {
        columns.forEach((column) => {
            if (column.type === modules_constants_TYPE.GROUP) {
                this.requestSummaryRecursive(column.columns);
            }
            else {
                this.params.dataGroup.groupSummary.getByColumnId(column.id);
            }
        });
    }
    requestSummary() {
        this.requestSummaryRecursive(this.columnsDelegate());
    }
    isHidden() {
        return this.params.dataGroup ? this.params.dataGroup.isHidden() : this.params.rolled;
    }
    toggle() {
        if (this.params.dataGroup) {
            this.params.dataGroup.toggle();
            this.rollUp();
        }
    }
    rollUp() {
        let groupHidden = this.isHidden();
        let rolledMarked = this.viewCell.getGroup().classList.contains(modules_constants_CLASS.ROLLED);
        this.viewCell.setCollapseVisible(groupHidden);
        this.viewCell.setExpandVisible(!groupHidden);
        if (groupHidden && !rolledMarked) {
            utilities_dom_UtilitiesDOM.addClass(this.viewCell.getGroup(), [modules_constants_CLASS.ROLLED]);
        }
        else if (rolledMarked && !groupHidden) {
            utilities_dom_UtilitiesDOM.removeClass(this.viewCell.getGroup(), [modules_constants_CLASS.ROLLED]);
        }
    }
    getAggregations() {
        if (!this.params) {
            return {};
        }
        let aggregationParamPath = this.params.dataGroup ? 'dataGroup.params.aggregation' : 'aggregation';
        return UtilsObject.getPropertyValue(aggregationParamPath, this.params) || {};
    }
    onDoneRowRemove() {
        let visibleRows = this.services.row.filterOutRemoved(this.params.dataGroup.rows);
        if (this.params.dataGroup.rows.length !== visibleRows.length) {
            this.requestSummary();
        }
    }
    onDoneRowRestore({ rowId }) {
        if (!!this.params.dataGroup.getRow(rowId)) {
            this.requestSummary();
        }
    }
    onAfterDataSummaryGroup({ groupPath, aggregation }) {
        if (this.params.dataGroup.getPath() === groupPath) {
            this.fillAggregationDebounce();
        }
    }
    hasRowInGroup(rowIds) {
        return rowIds.some((rowId) => !!this.params.dataGroup.getRow(rowId));
    }
    onAfterDataEditSetValues({ rowIds, columnId }) {
        if (summary_UtilsSummary.isColumnAggregated(this.services.state, columnId)
            && this.hasRowInGroup(rowIds)) {
            this.params.dataGroup.groupSummary.getByColumnId(columnId);
        }
    }
    onAfterDataFormatSet({ columnId }) {
        if (columnId && summary_UtilsSummary.isColumnAggregated(this.services.state, columnId)) {
            this.params.dataGroup.groupSummary.getByColumnId(columnId);
        }
    }
    destroy() {
        this.eventBus.leave(eventsList_EVENTS.AFTER.DATA.SUMMARY.GROUP, this.onAfterDataSummaryGroupBind);
        this.eventBus.leave(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSetBind);
        this.eventBus.leave(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, this.onAfterDataEditSetValuesBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.ROW.REMOVE, this.onDoneRowRemoveBind);
        this.eventBus.leave(eventsList_EVENTS.DONE.ROW.RESTORE, this.onDoneRowRestoreBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, this.onChangedColumnCollapsedBind);
    }
    onChangeColumnCollapsed({ columnIds, collapsed }) {
        columnIds.forEach((columnId) => {
            if (!this.cells[columnId]) {
                return void 0;
            }
            this.cells[columnId].classList[collapsed ? 'add' : 'remove'](modules_constants_CLASS.CELL_COLLAPSED);
        });
    }
    live() {
        this.onAfterDataSummaryGroupBind = this.onAfterDataSummaryGroup.bind(this);
        this.onAfterDataFormatSetBind = this.onAfterDataFormatSet.bind(this);
        this.onAfterDataEditSetValuesBind = this.onAfterDataEditSetValues.bind(this);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.SUMMARY.GROUP, this.onAfterDataSummaryGroupBind);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSetBind);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, this.onAfterDataEditSetValuesBind);
        this.onDoneRowRemoveBind = this.onDoneRowRemove.bind(this);
        this.onDoneRowRestoreBind = this.onDoneRowRestore.bind(this);
        this.onDoneColumnWidthBind = this.onDoneColumnWidth.bind(this);
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.REMOVE, this.onDoneRowRemoveBind);
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.RESTORE, this.onDoneRowRestoreBind);
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onDoneColumnWidthBind.bind(this));
        this.onChangedColumnCollapsedBind = this.onChangeColumnCollapsed.bind(this);
        this.onChangeDataColumnsOrderBind = this.onChangeDataColumnsOrder.bind(this);
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, this.onChangedColumnCollapsedBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrderBind.bind(this));
    }
}
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", [String, Object]),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "fillAggregationCell", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", []),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "fillAggregation", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", []),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "requestSummary", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", []),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "onDoneRowRemove", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", [Object]),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "onDoneRowRestore", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", [Object]),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "onAfterDataSummaryGroup", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", [Object]),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "onAfterDataEditSetValues", null);
group_decorate([
    permission_namespaceObject.summary,
    group_metadata("design:type", Function),
    group_metadata("design:paramtypes", [Object]),
    group_metadata("design:returntype", void 0)
], types_group_Group.prototype, "onAfterDataFormatSet", null);
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types/loader.js



class loader_Loader extends row_row_Row {
    prepare() {
        super.prepare();
        this.type = constants_VIEW.ROW.TYPE.LOADER;
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.LOADING]);
    }
}
//# sourceMappingURL=loader.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types/removed.js





class removed_Removed extends row_row_Row {
    prepare() {
        super.prepare();
        this.type = constants_VIEW.ROW.TYPE.REMOVED;
        this.rowFullWidth = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ROW_FULL_WIDTH]);
        this.iconWrap = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.REMOVED_ROW.ICON]);
        UtilitiesDelay.queue(() => {
            this.icon = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.REFRESH);
            this.icon.size = VUIICON.SIZE.LARGE;
            this.icon.accent = 3;
            this.iconWrap.appendChild(this.icon);
        }, 0);
        this.info = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN);
        this.restore = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN, [modules_constants_CLASS.REMOVED_ROW.RESTORE]);
        this.info.innerText = translation_Translation.translate(TRANSLATION.KEYS.ROW_REMOVED);
        this.restore.innerHTML = translation_Translation.translate(TRANSLATION.KEYS.RESTORE);
        this.rowFullWidth.appendChild(this.iconWrap);
        this.rowFullWidth.appendChild(this.info);
        this.rowFullWidth.appendChild(this.restore);
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.REMOVED_ROW.ELEMENT]);
        this.element.appendChild(this.rowFullWidth);
    }
    live() {
        this.restore.addEventListener(modules_constants_EVENT.CLICK, this.onRestore.bind(this));
    }
    onRestore() {
        this.eventBus.fire(eventsList_EVENTS.ACTION.ROW.RESTORE, { rowId: this.rowWrapped.getId() });
    }
}
//# sourceMappingURL=removed.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types/empty.js



class empty_Empty extends row_row_Row {
    fill(rowWrapped) {
        super.fill(rowWrapped);
        return void 0;
    }
    prepare() {
        super.prepare();
        this.type = constants_VIEW.ROW.TYPE.EMPTY;
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.EMPTY_ROW]);
    }
}
//# sourceMappingURL=empty.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/types.js






//# sourceMappingURL=types.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/free.js





class free_Free {
    constructor(eventBus, services, columnsDelegate, params) {
        this.eventBus = eventBus;
        this.services = services;
        this.columnsDelegate = columnsDelegate;
        this.params = params;
        this.rows = {
            normal: [],
            group: [],
            loader: [],
            summary: [],
            removed: [],
            empty: []
        };
        this.layers = [];
        this.refreshPositionDebounce = UtilitiesDelay.debounce(this.refreshPosition.bind(this), 100);
        this.live();
    }
    getLayer() {
        let layer = this.layers.find((layer) => layer.isEmpty());
        if (!layer) {
            layer = new layer_Layer(this.eventBus, this.services.row, this.params);
            this.layers.push(layer);
        }
        return layer;
    }
    isRowFree(viewRow) {
        return !viewRow.isHold() && !viewRow.isReleasePending();
    }
    getRow(type, dataIndex) {
        let viewRow = this.rows[type].find(this.isRowFree);
        let top = this.services.sizeHeight.getRowHeight();
        if (this.params.mode === constants_VIEW.MODE.INFINITE) {
            top *= dataIndex;
        }
        else {
            top *= dataIndex % this.services.state.get().page.itemPerPage;
        }
        if (!viewRow) {
            viewRow = new row_types_namespaceObject[type](this.eventBus, this.services, this.columnsDelegate);
            this.rows[type].push(viewRow);
        }
        viewRow.get().style.top = `${top}px`;
        viewRow.setDataIndex(dataIndex);
        return viewRow;
    }
    refreshPosition() {
        let rowHeight = this.services.sizeHeight.getRowHeight();
        let isInfinite = this.services.state.get().infinite.enabled;
        Object.keys(this.rows).forEach((type) => {
            this.rows[type].forEach((viewRow) => {
                let index = viewRow.getDataIndex();
                if (!isInfinite) {
                    index %= this.services.state.get().page.itemPerPage;
                }
                viewRow.get().style.top = `${rowHeight * index}px`;
            });
        });
    }
    onChangeViewRowHeight() {
        this.refreshPositionDebounce();
    }
    onDoneViewReload() {
        this.refreshPositionDebounce();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.VIEW.RELOAD, this.onDoneViewReload.bind(this));
    }
}
//# sourceMappingURL=free.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/mode/freeze.js
var freeze_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class freeze_Freeze {
    constructor(eventBus, data, preparator, layout, columnsDelegate, services, params) {
        this.eventBus = eventBus;
        this.data = data;
        this.preparator = preparator;
        this.layout = layout;
        this.columnsDelegate = columnsDelegate;
        this.services = services;
        this.params = params;
        this.prepare();
        this.live();
        this.after();
    }
    after() {
        if (this.data.isLoaded()) {
            this.load();
        }
        else {
            console.log('not loaded yet. waiting for data load event');
        }
    }
    isColumnFreeze() {
        return this.services.state.columns.freeze.enabled && this.params.isMainView;
    }
    getLayoutType() {
        return this.isColumnFreeze() ? LAYOUT.MODE.FREEZE_ROWS_FREEZE_COLUMNS : LAYOUT.MODE.FREEZE_ROWS;
    }
    getContainerClass() {
        return this.isColumnFreeze() ? modules_constants_CLASS.FREEZE_ROW_FREEZE_COLUMN : modules_constants_CLASS.FREEZE_ROW;
    }
    prepare() {
        this.free = new free_Free(this.eventBus, this.services, this.columnsDelegate, {
            mode: this.getLayoutType(),
            isMainView: this.params.isMainView
        });
        this.layer = this.free.getLayer();
        this.layout.getElement(this.getContainerClass()).appendChild(this.layer.get());
    }
    clear() {
        let freezeRows = this.services.state.get().freeze.state;
        this.services.view.getViewCluster(this.getLayoutType()).forEach((viewCluster) => {
            let freezeRowIndex = freezeRows.indexOf(viewCluster.rowWrapped.getId());
            if (freezeRowIndex !== -1) {
                viewCluster.dataIndex = freezeRowIndex;
            }
            this.free.getRow(constants_VIEW.ROW.TYPE.NORMAL, viewCluster.dataIndex).release();
            this.layer.remove(viewCluster.viewRow);
            this.services.view.deleteViewCluster(viewCluster);
        });
    }
    isRowExists(rowId) {
        return this.services.view.getViewCluster(this.getLayoutType())
            .find((viewCluster) => viewCluster.rowWrapped.getId() === rowId) !== undefined;
    }
    load() {
        return freeze_awaiter(this, void 0, void 0, function* () {
            yield UtilitiesArray.forEachAsync(this.services.state.get().freeze.state, (rowId, dataIndex) => freeze_awaiter(this, void 0, void 0, function* () {
                if (this.isRowExists(rowId)) {
                    return void 0;
                }
                let rowDescriptor = yield this.data.getByRowId(rowId);
                if (!rowDescriptor) {
                    console.log(`Cannot find row with id: '${rowId}'`);
                    return void 0;
                }
                let rowWrapped = this.preparator.get(rowDescriptor);
                let viewRow = this.free.getRow(rowWrapped.getType(), dataIndex);
                viewRow.hold(this.layer);
                viewRow.fill(rowWrapped);
                this.services.view.setViewCluster({
                    layoutType: this.getLayoutType(),
                    dataIndex,
                    viewRow,
                    rowWrapped
                });
            }));
            this.setHeight();
            this.setScrollPosition();
            this.eventBus.fire(eventsList_EVENTS.AFTER.ROW.FREEZE);
        });
    }
    setHeight() {
        this.layout.getElement(this.getContainerClass()).style.height
            = `${this.services.sizeHeight.getRowHeight() * this.services.state.get().freeze.state.length}px`;
    }
    setScrollPosition() {
        if (this.getContainerClass() === modules_constants_CLASS.FREEZE_ROW) {
            this.layout.getElement(modules_constants_CLASS.FREEZE_SCROLL_X).scrollLeft
                = this.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft;
        }
    }
    onActionRowFreeze(params) {
        return freeze_awaiter(this, void 0, void 0, function* () {
            let valid = (yield this.limitNotExceeded(params)) && (yield this.validRows(params));
            if (valid) {
                this.eventBus.fire(eventsList_EVENTS.COMMIT.ROW.FREEZE, params);
            }
            else {
                this.eventBus.fire(eventsList_EVENTS.REJECT.ROW.FREEZE);
            }
        });
    }
    limitNotExceeded(params) {
        return freeze_awaiter(this, void 0, void 0, function* () {
            let currentDataRows = yield this.data.getRowsIds();
            if (currentDataRows.freeze.length + params.rowIds.length > FREEZE_ROW_LIMIT) {
                console.warn(`Freezing is limited to '${FREEZE_ROW_LIMIT}' rows. ` +
                    `You are trying to have '${currentDataRows.freeze.length + params.rowIds.length}'.`);
                return false;
            }
            return true;
        });
    }
    validRow(rowId, action) {
        let stateIndex = this.services.state.get().freeze.state.indexOf(rowId);
        if (action === 'add' && stateIndex !== -1) {
            console.warn(`Row ${rowId} is already frozen`);
            return false;
        }
        if (action === 'remove' && stateIndex === -1) {
            console.warn(`Row ${rowId} is not frozen`);
            return false;
        }
        return true;
    }
    validRows(params) {
        return freeze_awaiter(this, void 0, void 0, function* () {
            let isValid = true;
            yield UtilitiesArray.forEachAsync(params.rowIds, (rowId) => freeze_awaiter(this, void 0, void 0, function* () {
                if (!isValid) {
                    return void 0;
                }
                let dataRow = yield this.data.getByRowId(rowId);
                if (dataRow === undefined) {
                    console.warn(`One of rows with id [${rowId.toString()}] not exists`);
                    isValid = false;
                }
                else {
                    isValid = this.validRow(rowId, params.action);
                }
            }));
            return isValid;
        });
    }
    onAfterData() {
        this.clear();
        this.load();
    }
    onDoneDataLoad() {
        this.onAfterData();
    }
    onActionViewRefresh() {
        this.onAfterData();
    }
    onChangeDataColumnsOrder() {
        this.onAfterData();
    }
    onChangeViewRowHeight() {
        this.setHeight();
    }
    onApiViewReload() {
        this.onAfterData();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA, this.onAfterData.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, this.onAfterData.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.VIEW.REFRESH, this.onActionViewRefresh.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.ROW.FREEZE, this.onActionRowFreeze.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.LOAD, this.onDoneDataLoad.bind(this));
        this.eventBus.join(eventsList_EVENTS.API.VIEW.RELOAD, this.onApiViewReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
    }
}
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/row/preparator.js



class preparator_ViewRowPreparator {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
    }
    prepareCells(dataRowDescriptor, rowWrapped) {
        switch (dataRowDescriptor.type) {
            case constants_VIEW.ROW.TYPE.GROUP:
                rowWrapped.setPreparedData(this.getGroup(rowWrapped));
                break;
            case constants_VIEW.ROW.TYPE.NORMAL:
            case constants_VIEW.ROW.TYPE.REMOVED:
                rowWrapped.setPreparedData(this.getCells(rowWrapped));
                break;
            case constants_VIEW.ROW.TYPE.EMPTY:
                break;
            default:
                console.warn(`Unsupported type of row '${dataRowDescriptor.type}'`);
        }
    }
    get(dataRowDescriptor) {
        let rowWrapped;
        switch (dataRowDescriptor.type) {
            case constants_VIEW.ROW.TYPE.NORMAL:
                rowWrapped = this.services.rowCache.wrapNormal(dataRowDescriptor);
                break;
            default:
                rowWrapped = this.services.rowCache.wrapSpecial(dataRowDescriptor);
        }
        this.prepareCells(dataRowDescriptor, rowWrapped);
        return rowWrapped;
    }
    getCells(rowWrapped) {
        let preparedData = Object.assign({ cells: {} }, rowWrapped.getPreparedData());
        this.services.columns.getAll().forEach((column) => {
            if (preparedData.cells[column.id]) {
                return void 0;
            }
            preparedData.cells[column.id] = new (cell_types_namespaceObject[column.type] || types_text_Text)(this.eventBus, this.services, rowWrapped, column);
        });
        return preparedData;
    }
    getGroup(rowWrapped) {
        let dataRow = rowWrapped.getGroupDataRow();
        let params = { subColumn: this.services.columns.getColumnById(dataRow.columnId) };
        if (dataRow.dataGroup) {
            params.dataGroup = dataRow.dataGroup;
        }
        params.eventParams = { eventName: eventsList_EVENTS.CLICK.GROUP, data: {} };
        Object.defineProperty(params.eventParams, 'data', {
            get: function () {
                return {
                    rowDescriptor: rowWrapped.getDataRowDescriptor(),
                };
            }.bind(this)
        });
        return {
            group: new rowGroup_RowGroup(this.eventBus, this.services, rowWrapped, this.services.columns.getColumnById(STATIC_CLASS.ROW_GROUP), params)
        };
    }
}
//# sourceMappingURL=preparator.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/mode/mode.js
var mode_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mode_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var mode_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








class mode_Mode {
    constructor(eventBus, data, services, layout, content, columnsDelegate, main, grid) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.layout = layout;
        this.content = content;
        this.columnsDelegate = columnsDelegate;
        this.main = main;
        this.grid = grid;
        this.reloadDebounce = UtilitiesDelay.debounce(this.reload.bind(this), 100);
        this.loaded = false;
        this.isEmptyScreen = false;
        this.rowLoadHandlers = {};
        this.async();
        window['t'] = this;
    }
    async() {
        this.compute().then(() => {
            this.prepare();
            this.live();
            this.after();
        });
    }
    after() {
        if (this.data.isLoaded()) {
            this.fullLoad();
        }
        else {
            console.log('not loaded yet. waiting for data load event');
        }
    }
    getContentHeight() {
        return mode_awaiter(this, void 0, void 0, function* () {
            let page = this.services.state.page;
            let dataLength = yield this.data.getLength();
            if (page.currentPage === page.numberOfPages && dataLength > page.itemPerPage) {
                return this.services.sizeHeight.getRowHeight() * (dataLength % page.itemPerPage || page.itemPerPage);
            }
            else {
                return this.services.sizeHeight.getRowHeight() * Math.min(dataLength, page.itemPerPage);
            }
        });
    }
    getHeight() {
        return mode_awaiter(this, void 0, void 0, function* () {
            if (this.numberOfRows === 0) {
                if (!this.isEmptyScreen) {
                    this.setEmptyScreenVisible(true);
                }
                return SIZE.EMPTY_SCREEN_HEIGHT;
            }
            else if (this.isEmptyScreen) {
                this.setEmptyScreenVisible(false);
            }
            return yield this.getContentHeight();
        });
    }
    compute() {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.layoutType = this.services.state.columns.freeze.enabled && this.main
                ? LAYOUT.MODE.CONTENT_FREEZE_COLUMNS
                : LAYOUT.MODE.CONTENT;
            yield this.setViewPosition();
        });
    }
    setViewPosition(current = 0) {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.services.view.setViewPosition({
                layoutType: this.layoutType,
                current: current,
                max: (yield this.data.getLength()) - 1
            });
        });
    }
    prepareFreeze() {
        this.freeze = new freeze_Freeze(this.eventBus, this.data, this.preparator, this.layout, this.columnsDelegate, this.services, {
            mode: this.mode,
            isMainView: this.main
        });
    }
    preparePreparator() {
        this.preparator = new preparator_ViewRowPreparator(this.eventBus, this.services);
    }
    prepareFree() {
        this.free = new free_Free(this.eventBus, this.services, this.columnsDelegate, {
            mode: this.mode,
            isMainView: this.main
        });
    }
    prepare() {
        this.preparePreparator();
        this.prepareFreeze();
        this.prepareFree();
        this.prepareFullscreen();
    }
    lessThanDataMax(value) {
        return mode_awaiter(this, void 0, void 0, function* () {
            return Math.min(value, yield this.data.getLength());
        });
    }
    reserveRow(dataIndex, layer, rowType) {
        let viewRow = this.free.getRow(rowType, dataIndex);
        viewRow.hold(layer);
        return viewRow;
    }
    prepareFullscreen() {
        if (this.services.state.fullscreen.visible) {
            this.activateFullscreen();
        }
    }
    shouldRowBeEmpty(rowDescriptor) {
        return !this.main && this.services.row.isRemoved(rowDescriptor.id);
    }
    releaseClusterByRowId(rowId) {
        this.releaseCluster(this.services.view.getViewClusterByRowId(this.layoutType, rowId));
    }
    releaseClusterByViewRow(viewRow) {
        if (viewRow) {
            this.releaseCluster(this.services.view.getViewClusterByViewRow(viewRow));
        }
    }
    releaseCluster(viewCluster) {
        if (viewCluster) {
            viewCluster.viewRow.release();
            this.services.view.deleteViewCluster(viewCluster);
        }
    }
    noNeedToLoad(dataIndex, rowDescriptor) {
        let viewCluster = this.services.view.getViewClusterByRowId(this.layoutType, rowDescriptor.id);
        return viewCluster
            && viewCluster.dataIndex === dataIndex
            && (viewCluster.viewRow.type === constants_VIEW.ROW.TYPE.NORMAL || viewCluster.viewRow.type === constants_VIEW.ROW.TYPE.GROUP)
            && viewCluster.viewRow.type === rowDescriptor.type;
    }
    notInRange(dataIndex) {
        let range = this.services.view.getViewRange();
        let viewPosition = this.services.view.getViewPosition(this.layoutType);
        return dataIndex < range.from + viewPosition.current || dataIndex >= range.to + viewPosition.current;
    }
    noNeedToSetUp(dataIndex, rowDescriptor) {
        return !rowDescriptor || this.notInRange(dataIndex) || this.noNeedToLoad(dataIndex, rowDescriptor);
    }
    setUpRow(dataIndex, layer, rowDescriptor) {
        if (this.noNeedToSetUp(dataIndex, rowDescriptor)) {
            return void 0;
        }
        let rowWrapped = this.shouldRowBeEmpty(rowDescriptor)
            ? this.services.rowCache.wrapEmpty()
            : this.preparator.get(rowDescriptor);
        let viewRow = this.reserveRow(dataIndex, layer, rowWrapped.getType());
        this.services.view.setViewCluster({
            layoutType: this.layoutType,
            dataIndex,
            viewRow,
            rowWrapped
        });
        viewRow.fill(rowWrapped);
    }
    loadRow(dataIndex, layer, loaderViewRow) {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.data.get(dataIndex).then((rowDescriptor) => {
                this.setUpRow(dataIndex, layer, rowDescriptor);
                this.releaseClusterByViewRow(loaderViewRow);
            }, () => void 0);
        });
    }
    appendLayer(layer) {
        this.content.appendChild(layer.get());
        this.services.view.getViewCluster(this.layoutType).forEach((viewCluster) => {
            UtilitiesDelay.queue(this.services.queue.flush.bind(this.services.queue, {
                loadRowDataIndex: Number(viewCluster.dataIndex)
            }));
        });
    }
    fullLoad() {
        return mode_awaiter(this, void 0, void 0, function* () {
            yield this.setUpLength();
            if (this.loaded) {
                this.reloadDebounce();
            }
            else {
                this.onChangeDataRows();
                this.load();
            }
        });
    }
    load() {
        return mode_awaiter(this, void 0, void 0, function* () {
            let layer = this.free.getLayer();
            let numberOfRows = this.numberOfRows;
            this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.LOAD);
            let promises = [];
            for (let dataIndex = 0; dataIndex < numberOfRows; dataIndex += 1) {
                promises.push(this.loadRow(dataIndex, layer));
            }
            return Promise.all(promises).then(() => {
                this.appendLayer(layer);
                this.loaded = true;
                this.eventBus.fire(eventsList_EVENTS.DONE.VIEW.LOAD);
            });
        });
    }
    reloadExisting() {
        return mode_awaiter(this, void 0, void 0, function* () {
            let layer = this.free.getLayer();
            let promises = [];
            this.services.view.getViewCluster(this.layoutType).forEach((viewCluster) => {
                promises.push(this.reloadExistingRow(Number(viewCluster.dataIndex), layer));
            });
            return Promise.all(promises).then(() => {
                this.appendLayer(layer);
                this.eventBus.fire(eventsList_EVENTS.AFTER.VIEW.RELOAD);
            });
        });
    }
    getCurrentIndexes() {
        let viewPosition = this.services.view.getViewPosition(this.layoutType);
        let existing = {};
        let nonExisting = {};
        let shortages = false;
        let count = 0;
        let viewRange = this.services.view.getViewRange();
        for (let i = viewRange.from; i < viewRange.to; i += 1) {
            let dataIndex = viewPosition.current + i;
            if (dataIndex > viewPosition.max || dataIndex < 0) {
                continue;
            }
            if (this.services.view.getViewClusterByDataIndex(this.layoutType, dataIndex)) {
                existing[dataIndex] = true;
            }
            else {
                nonExisting[dataIndex] = true;
                shortages = true;
            }
            count += 1;
        }
        return { existing, nonExisting, shortages, count };
    }
    releaseCachedIndexes({ existing }) {
        this.services.view.getViewCluster(this.layoutType).forEach((viewCluster) => {
            if (!existing[viewCluster.dataIndex]) {
                if (this.rowLoadHandlers[viewCluster.dataIndex] !== undefined) {
                    clearTimeout(this.rowLoadHandlers[viewCluster.dataIndex]);
                    delete this.rowLoadHandlers[viewCluster.dataIndex];
                }
                viewCluster.viewRow.release(true);
                this.services.view.deleteViewCluster(viewCluster);
            }
        });
    }
    processNonExisting({ nonExisting }) {
        return mode_awaiter(this, void 0, void 0, function* () {
            let layer = this.free.getLayer();
            let promises = [];
            yield UtilitiesArray.forEachAsync(Object.keys(nonExisting), (dataIndexString) => mode_awaiter(this, void 0, void 0, function* () {
                let dataIndex = Number(dataIndexString);
                let viewRow = this.free.getRow(constants_VIEW.ROW.TYPE.LOADER, dataIndex);
                this.services.view.setViewCluster({
                    layoutType: this.layoutType,
                    dataIndex,
                    viewRow
                });
                layer.add(viewRow);
                viewRow.hold(layer);
                if (this.mode === constants_VIEW.MODE.INFINITE) {
                    this.rowLoadHandlers[dataIndex] = UtilitiesDelay.queue(() => this.loadRow(dataIndex, layer, viewRow));
                }
                else {
                    promises.push(this.loadRow(dataIndex, layer, viewRow));
                }
            }));
            return Promise.all(promises).then(() => {
                this.appendLayer(layer);
            });
        });
    }
    processChange(indexes) {
        return mode_awaiter(this, void 0, void 0, function* () {
            indexes = indexes || this.getCurrentIndexes();
            this.releaseCachedIndexes(indexes);
            if (indexes.shortages) {
                yield this.processNonExisting(indexes);
            }
        });
    }
    reloadExistingRow(dataIndex, layer) {
        return mode_awaiter(this, void 0, void 0, function* () {
            if (dataIndex <= this.services.view.getViewPosition(this.layoutType).max) {
                yield this.loadRow(dataIndex, layer);
            }
            else {
                let viewCluster = this.services.view.getViewClusterByDataIndex(this.layoutType, dataIndex);
                viewCluster.viewRow.getLayer().remove(viewCluster.viewRow);
                this.services.view.deleteViewCluster(viewCluster);
            }
        });
    }
    reload(params) {
        return mode_awaiter(this, void 0, void 0, function* () {
            if ((params && params.main === this.main) || !params) {
                this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.RELOAD);
                this.processChange();
                yield this.reloadExisting();
                this.eventBus.fire(eventsList_EVENTS.DONE.VIEW.RELOAD);
            }
        });
    }
    isColumnInView(columnId) {
        return !!this.columnsDelegate().find((column) => column.id === columnId);
    }
    setUpLength() {
        return mode_awaiter(this, void 0, void 0, function* () {
            let dataLength = yield this.data.getLength();
            this.services.view.setViewPosition({ layoutType: this.layoutType, max: dataLength - 1 });
        });
    }
    onChangeViewCellError({ rowId, columnId }) {
        return mode_awaiter(this, void 0, void 0, function* () {
            if (!this.isColumnInView(columnId)) {
                return void 0;
            }
            let message = `View errors cannot find row with ID ${rowId}`;
            let rowDescriptor = yield this.data.getByRowId(rowId);
            if (!rowDescriptor) {
                console.warn(message);
                return void 0;
            }
            let group = yield this.data.getGroupByRow(rowDescriptor.data);
            if (!group) {
                console.warn(message);
                return void 0;
            }
            let dataIndex = yield this.data.getDataIndex(rowDescriptor.data);
            if (group.isHiddenRecursive()) {
                group.toggleRecursive.call(group, false);
                this.eventBus.once(eventsList_EVENTS.AFTER.VIEW.RELOAD, this.focusCell.bind(this, columnId, dataIndex));
            }
            else {
                this.focusCell(columnId, dataIndex);
            }
        });
    }
    focusCell(columnId, dataIndex) {
        let layoutType = this.services.columns.isFreeze(columnId)
            ? LAYOUT.MODE.CONTENT_FREEZE_COLUMNS
            : LAYOUT.MODE.CONTENT;
        let viewCluster = this.services.view.getViewClusterByDataIndex(layoutType, dataIndex);
        if (!viewCluster) {
            console.error(`Row with dataIndex ${dataIndex} not exists`);
            return void 0;
        }
        this.eventBus.fire(eventsList_EVENTS.CLICK.CELL, {
            columnId: columnId,
            rowElement: viewCluster.viewRow.get()
        });
    }
    onHeightChange() {
        this.services.logger.warn(`This is only placeholder method. You should use more specified type of VIew`);
    }
    onDoneDataGroup() {
        return mode_awaiter(this, void 0, void 0, function* () {
            yield this.setUpLength();
            yield this.reloadDebounce();
        });
    }
    onDoneDataSort() {
        this.reloadDebounce();
    }
    onAnimationHeightChange() {
        this.reloadDebounce();
    }
    onAfterDataEditable() {
        this.reloadDebounce();
    }
    onAfterDataEditSetValues({ rowIds }) {
        rowIds.forEach((rowId) => this.releaseClusterByRowId(rowId));
        this.reloadDebounce();
    }
    onAfterDataFormatSet() {
        this.reloadDebounce();
    }
    onAfterRowAdd() {
        return mode_awaiter(this, void 0, void 0, function* () {
            yield this.setViewPosition(this.services.view.getViewPosition(this.layoutType).current);
            this.reloadDebounce();
        });
    }
    onDoneRowRemove() {
        this.reloadDebounce();
    }
    onDoneRowRestore() {
        this.reloadDebounce();
    }
    onDoneDataSave() {
        return mode_awaiter(this, void 0, void 0, function* () {
            yield this.setViewPosition();
            this.reloadDebounce();
        });
    }
    onDoneStateLoad() {
        this.reloadDebounce();
    }
    setEmptyScreenVisible(isVisible) {
        this.isEmptyScreen = isVisible;
        utilities_dom_UtilitiesDOM.toggleClass(isVisible, this.layout.getElement(modules_constants_CLASS.EMPTY), [modules_constants_CLASS.VISIBLE]);
        utilities_dom_UtilitiesDOM.toggleClass(isVisible, this.layout.getElement(modules_constants_CLASS.CONTENT), [modules_constants_CLASS.HIDDEN]);
        if (this.services.state.columns.freeze.enabled) {
            utilities_dom_UtilitiesDOM.toggleClass(isVisible, this.layout.getElement(modules_constants_CLASS.FREEZE_COLUMN), [modules_constants_CLASS.HIDDEN]);
        }
    }
    onAfterData() {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.fullLoad();
        });
    }
    destroy() {
        this.rowLoadHandlers = {};
        this.error = null;
    }
    toggleFullscreen(params) {
        if (params.visible) {
            this.activateFullscreen();
        }
        else {
            this.deactivateFullscreen();
        }
    }
    activateFullscreen() {
        let parent = document.body.firstElementChild;
        this.container = this.grid.parentElement;
        parent.style.display = 'none';
        utilities_dom_UtilitiesDOM.addClass(this.grid, [modules_constants_CLASS.FULLSCREEN]);
        this.container.removeChild(this.grid);
        document.body.appendChild(this.grid);
        this.resizeObserver = new resize_observer_ResizeObserver((entries) => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.CONTAINER, {
                contentRect: entries[0].contentRect || entries[0].target.getBoundingClientRect()
            });
        });
        this.resizeObserver.observe(this.grid);
    }
    deactivateFullscreen() {
        let parent = document.body.firstElementChild;
        parent.style.display = '';
        utilities_dom_UtilitiesDOM.removeClass(this.grid, [modules_constants_CLASS.FULLSCREEN]);
        if (this.grid.parentNode === document.body) {
            document.body.removeChild(this.grid);
            this.container.appendChild(this.grid);
        }
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    }
    onActionRowMark(params) {
        return mode_awaiter(this, void 0, void 0, function* () {
            let valid = true;
            yield UtilitiesArray.forEachAsync(params.rowIds, (rowId) => mode_awaiter(this, void 0, void 0, function* () {
                if (!valid) {
                    return void 0;
                }
                let dataRow = yield this.data.getByRowId(rowId);
                if (dataRow === undefined) {
                    valid = false;
                }
            }));
            if (valid) {
                this.eventBus.fire(eventsList_EVENTS.COMMIT.ROW.MARK, params);
            }
            else {
                console.warn(`One of rows with ids [${params.rowIds.toString()}] not exists`);
                this.eventBus.fire(eventsList_EVENTS.REJECT.ROW.MARK);
            }
        });
    }
    onActionHeaderMark({ marked }) {
        return mode_awaiter(this, void 0, void 0, function* () {
            let { all } = yield this.data.getRowsIds();
            this.eventBus.fire(eventsList_EVENTS.COMMIT.HEADER.MARK, { rowIds: all, marked });
        });
    }
    onActionViewPage(params) {
        this.eventBus.fire(eventsList_EVENTS.COMMIT.VIEW.PAGE, params);
    }
    onDoneDataLoad() {
        this.fullLoad();
    }
    onChangeDataRows() {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.COMMIT.DATA.AGGREGATION, { aggregation: yield this.data.getTotalAggregation() });
        });
    }
    onActionViewRefresh() {
        this.services.loading.start(() => mode_awaiter(this, void 0, void 0, function* () {
            this.services.view.getViewCluster(this.layoutType).forEach((viewCluster) => {
                this.releaseCluster(viewCluster);
            });
            this.reloadDebounce();
        }));
    }
    onApiViewReload() {
        return mode_awaiter(this, void 0, void 0, function* () {
            this.services.view.getViewCluster(this.layoutType).forEach((viewCluster) => {
                this.releaseCluster(viewCluster);
            });
            this.fullLoad();
        });
    }
    live() {
        let onChangeViewCellErrorDebounce = UtilitiesDelay.debounce(this.onChangeViewCellError.bind(this), 100);
        this.eventBus.join(eventsList_EVENTS.ACTION.ROW.MARK, this.onActionRowMark.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.HEADER.MARK, this.onActionHeaderMark.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.VIEW.PAGE, this.onActionViewPage.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.VIEW.REFRESH, this.onActionViewRefresh.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.VIEW.CELL.FOCUS, onChangeViewCellErrorDebounce);
        this.eventBus.join(eventsList_EVENTS.ACTION.VIEW.CELL.ERROR, onChangeViewCellErrorDebounce);
        this.eventBus.join(eventsList_EVENTS.AFTER.ROW.ADD, this.onAfterRowAdd.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.REMOVE, this.onDoneRowRemove.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.RESTORE, this.onDoneRowRestore.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, this.onDoneDataSave.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.STATE.LOAD, this.onDoneStateLoad.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.EDIT.ENABLED, this.onAfterDataEditable.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, this.onAfterDataEditSetValues.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSet.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.ANIMATION, this.onAnimationHeightChange.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA, this.onAfterData.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.LOAD, this.onDoneDataLoad.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.GROUP, this.onDoneDataGroup.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SORT, this.onDoneDataSort.bind(this));
        this.eventBus.join(eventsList_EVENTS.API.VIEW.RELOAD, this.onApiViewReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.ROWS, this.onChangeDataRows.bind(this));
        if (this.main) {
            this.eventBus.join(eventsList_EVENTS.FULLSCREEN, this.toggleFullscreen.bind(this));
        }
    }
}
mode_decorate([
    measure(),
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", Promise)
], mode_Mode.prototype, "compute", null);
mode_decorate([
    permission_namespaceObject.freezeRows,
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", void 0)
], mode_Mode.prototype, "prepareFreeze", null);
mode_decorate([
    permission_namespaceObject.fullscreen,
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", void 0)
], mode_Mode.prototype, "prepareFullscreen", null);
mode_decorate([
    measure(),
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", Promise)
], mode_Mode.prototype, "load", null);
mode_decorate([
    measure(),
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", Promise)
], mode_Mode.prototype, "reloadExisting", null);
mode_decorate([
    permission_namespaceObject.fullscreen,
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", [Object]),
    mode_metadata("design:returntype", void 0)
], mode_Mode.prototype, "toggleFullscreen", null);
mode_decorate([
    permission_namespaceObject.summary,
    mode_metadata("design:type", Function),
    mode_metadata("design:paramtypes", []),
    mode_metadata("design:returntype", Promise)
], mode_Mode.prototype, "onChangeDataRows", null);
//# sourceMappingURL=mode.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/mode/types/normal.js
var normal_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var normal_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var normal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class types_normal_Normal extends mode_Mode {
    constructor(eventBus, data, services, layout, content, columnsDelegate, main = true, grid) {
        super(eventBus, data, services, layout, content, columnsDelegate, main, grid);
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.layout = layout;
        this.content = content;
        this.columnsDelegate = columnsDelegate;
        this.main = main;
        this.grid = grid;
    }
    prepare() {
        this.mode = constants_VIEW.MODE.NORMAL;
        super.prepare();
    }
    compute() {
        const _super = name => super[name];
        return normal_awaiter(this, void 0, void 0, function* () {
            _super("compute").call(this);
            this.numberOfRows = Math.min(this.services.state.page.itemPerPage, yield this.data.getLength());
            this.updateRange();
        });
    }
    reloadExisting() {
        const _super = name => super[name];
        return normal_awaiter(this, void 0, void 0, function* () {
            yield _super("reloadExisting").call(this);
            let heightChanged = this.updateNumberOfRows(this.services.view.countViewCluster(this.layoutType));
            if (heightChanged) {
                this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEIGHT, { height: yield this.getHeight() });
            }
        });
    }
    updateRange(numberOfRows = this.numberOfRows) {
        this.services.view.setViewRange({
            from: 0,
            to: numberOfRows
        });
    }
    updateNumberOfRows(numberOfRows) {
        let hasChanged = false;
        if (this.numberOfRows !== numberOfRows) {
            this.numberOfRows = numberOfRows;
            hasChanged = true;
        }
        return hasChanged;
    }
    reloadWithoutLoader({ itemPerPage, currentPage }) {
        return normal_awaiter(this, void 0, void 0, function* () {
            let indexes;
            let heightChanged;
            currentPage = Number(currentPage);
            itemPerPage = Number(itemPerPage);
            if ((this.services.view.getViewPosition(this.layoutType).current / itemPerPage) !== (currentPage - 1)) {
                this.services.view.setViewPosition({
                    layoutType: this.layoutType,
                    current: (currentPage - 1) * itemPerPage
                });
            }
            this.updateRange(itemPerPage);
            indexes = this.getCurrentIndexes();
            heightChanged = this.updateNumberOfRows(indexes.count);
            yield this.processChange(indexes);
            if (heightChanged) {
                this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEIGHT, { height: yield this.getHeight() });
            }
        });
    }
    reloadWithLoader(pagination) {
        return normal_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.RELOAD);
            yield this.reloadWithoutLoader(pagination);
            this.eventBus.fire(eventsList_EVENTS.DONE.VIEW.RELOAD);
        });
    }
    onWrapperChange(params) {
        if (this.numberOfRows === params.itemPerPage && (this.services.view.getViewPosition(this.layoutType).current / this.numberOfRows) === (params.currentPage - 1)) {
            return void 0;
        }
        if (params.itemPerPage > constants_VIEW.LOADING_STEP) {
            this.reloadWithLoader(params);
        }
        else {
            this.reloadWithoutLoader(params);
        }
    }
    onHeightChange() {
        this.onDoneDataGroup();
    }
    focusCell(columnId, dataIndex) {
        let page = Math.ceil((dataIndex + 1) / this.services.state.page.itemPerPage);
        if (this.services.state.page.currentPage !== page) {
            this.services.queue.add(super.focusCell.bind(this, columnId, dataIndex), { loadRowDataIndex: dataIndex });
            this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.PAGE, { page });
        }
        else {
            super.focusCell(columnId, dataIndex);
        }
    }
    live() {
        super.live();
        let onWrapperChangeDebounce = UtilitiesDelay.debounce(this.onWrapperChange.bind(this), 200);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, this.onHeightChange.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.VIEW.PAGE, onWrapperChangeDebounce);
    }
}
normal_decorate([
    measure(),
    normal_metadata("design:type", Function),
    normal_metadata("design:paramtypes", []),
    normal_metadata("design:returntype", Promise)
], types_normal_Normal.prototype, "compute", null);
normal_decorate([
    measure(),
    normal_metadata("design:type", Function),
    normal_metadata("design:paramtypes", [Object]),
    normal_metadata("design:returntype", Promise)
], types_normal_Normal.prototype, "reloadWithoutLoader", null);
//# sourceMappingURL=normal.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/view/mode/types/infinite.js
var infinite_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var infinite_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var infinite_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class infinite_Infinite extends mode_Mode {
    constructor(eventBus, data, services, layout, content, columnsDelegate, main = true, grid) {
        super(eventBus, data, services, layout, content, columnsDelegate, main, grid);
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.layout = layout;
        this.content = content;
        this.columnsDelegate = columnsDelegate;
        this.main = main;
        this.grid = grid;
        this.onScrollY = this.scrollY.bind(this);
        this.onScrollYEndDebounce = UtilitiesDelay.debounce(this.scrollYEnd.bind(this), 1000);
        this.numberOfVisibleRows = 0;
        this.padding = 0;
    }
    getHeight() {
        return infinite_awaiter(this, void 0, void 0, function* () {
            let numberOfRows = yield this.data.getLength();
            if (numberOfRows === 0) {
                if (!this.isEmptyScreen) {
                    this.setEmptyScreenVisible(true);
                }
                return SIZE.EMPTY_SCREEN_HEIGHT;
            }
            else if (this.isEmptyScreen) {
                this.setEmptyScreenVisible(false);
            }
            return this.services.sizeHeight.getRowHeight() * numberOfRows;
        });
    }
    prepare() {
        this.mode = constants_VIEW.MODE.INFINITE;
        super.prepare();
    }
    load() {
        return infinite_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.LOAD);
            yield this.processNonExisting(this.getCurrentIndexes());
            this.loaded = true;
            this.services.queue.flush({ infiniteLoaded: true });
            this.eventBus.fire(eventsList_EVENTS.DONE.VIEW.LOAD);
        });
    }
    compute() {
        const _super = name => super[name];
        return infinite_awaiter(this, void 0, void 0, function* () {
            yield _super("compute").call(this);
            this.numberOfVisibleRows = yield this.getNumberOfRows();
            this.numberOfRows = yield this.lessThanDataMax(3 * this.numberOfVisibleRows);
            this.services.view.setViewRange({
                from: -Math.floor(this.numberOfVisibleRows),
                to: Math.floor(2 * this.numberOfVisibleRows)
            });
        });
    }
    focusCell(columnId, dataIndex) {
        if (this.getCurrentIndexes().existing.hasOwnProperty(dataIndex)) {
            super.focusCell(columnId, dataIndex);
        }
        else {
            this.services.queue.add(super.focusCell.bind(this, columnId, dataIndex), { loadRowDataIndex: dataIndex });
            this.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop = dataIndex * this.services.sizeHeight.getRowHeight();
        }
    }
    getNumberOfRows() {
        return infinite_awaiter(this, void 0, void 0, function* () {
            if (this.services.sizeHeight.getRowHeight() === 0) {
                console.warn(`Something goes wrong. Row height equals zero`);
                return 0;
            }
            let numberOfRows = 1 + Math.ceil(this.services.sizeHeight.getGridHeight() / this.services.sizeHeight.getRowHeight());
            return yield this.lessThanDataMax(numberOfRows);
        });
    }
    scrollYEnd() {
        this.eventBus.fire(eventsList_EVENTS.SCROLL.Y);
    }
    scrollY(position) {
        this.padding = -(position.top % this.services.sizeHeight.getRowHeight());
        this.services.view.setViewPosition({
            layoutType: this.layoutType,
            current: Math.floor(position.top / this.services.sizeHeight.getRowHeight())
        });
        this.processChange();
        this.onScrollYEndDebounce();
    }
    onHeightChange() {
        return infinite_awaiter(this, void 0, void 0, function* () {
            yield this.compute();
            if (this.loaded) {
                this.load();
            }
            else {
                this.services.queue.add(this.load.bind(this), { infiniteLoaded: true });
            }
        });
    }
    onChangeViewRowHeight() {
        this.compute();
    }
    live() {
        super.live();
        let onHeightChangeDebounce = UtilitiesDelay.debounce(this.onHeightChange.bind(this), 300);
        this.eventBus.join(eventsList_EVENTS.CHANGE.LAYOUT.HEIGHT, onHeightChangeDebounce);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, onHeightChangeDebounce);
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
    }
}
infinite_decorate([
    measure(),
    infinite_metadata("design:type", Function),
    infinite_metadata("design:paramtypes", []),
    infinite_metadata("design:returntype", Promise)
], infinite_Infinite.prototype, "load", null);
infinite_decorate([
    measure(),
    infinite_metadata("design:type", Function),
    infinite_metadata("design:paramtypes", []),
    infinite_metadata("design:returntype", Promise)
], infinite_Infinite.prototype, "compute", null);
//# sourceMappingURL=infinite.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/mode/mode.js
var mode_mode_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mode_mode_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





class mode_LayoutMode {
    constructor(eventBus, state, coreHost) {
        this.eventBus = eventBus;
        this.state = state;
        this.coreHost = coreHost;
        this.elements = {};
        this.prepare();
        this.live();
    }
    getElement(name) {
        if (!this.elements[name]) {
            console.warn(`Element '${name}' not exists!`);
        }
        return this.elements[name];
    }
    prepare() {
        this.prepareWrapper();
        this.prepareHeader();
        this.prepareFreeze();
        this.prepareContent();
        this.prepareSummary();
        this.prepareEmptyScreen();
    }
    prepareWrapper() {
        this.createElement(modules_constants_CLASS.CORE_WRAPPER, this.coreHost);
        this.setElement(modules_constants_CLASS.CORE_WRAPPER, this.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.checkIfEditable();
        if (this.state.infinite.enabled) {
            utilities_dom_UtilitiesDOM.addClass(this.getElement(modules_constants_CLASS.CORE_WRAPPER), [modules_constants_CLASS.INFINITE]);
        }
        else {
            utilities_dom_UtilitiesDOM.addClass(this.getElement(modules_constants_CLASS.CORE_WRAPPER), [modules_constants_CLASS.NORMAL]);
        }
        utilities_dom_UtilitiesDOM.addClass(this.getElement(modules_constants_CLASS.CORE_WRAPPER), [
            modules_constants_CLASS.THEME.LAYOUT[this.state.theme.layout.value.toUpperCase()]
        ]);
    }
    prepareFreeze() {
        this.createElement(modules_constants_CLASS.FREEZE_SCROLL_Y, this.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.createElement(modules_constants_CLASS.FREEZE_SCROLL_X, this.getElement(modules_constants_CLASS.FREEZE_SCROLL_Y));
        this.createElement(modules_constants_CLASS.FREEZE_ROW, this.getElement(modules_constants_CLASS.FREEZE_SCROLL_X));
    }
    prepareHeader() {
        this.createElement(modules_constants_CLASS.HEADER_SCROLL_Y, this.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.createElement(modules_constants_CLASS.HEADER_SCROLL_X, this.getElement(modules_constants_CLASS.HEADER_SCROLL_Y));
        this.createElement(modules_constants_CLASS.HEADER, this.getElement(modules_constants_CLASS.HEADER_SCROLL_X));
        this.createElement(modules_constants_CLASS.HEADER_WRAPPER, this.getElement(modules_constants_CLASS.HEADER));
    }
    prepareContent() {
        this.createElement(modules_constants_CLASS.SCROLL_Y, this.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.createElement(modules_constants_CLASS.SCROLL_X, this.getElement(modules_constants_CLASS.SCROLL_Y));
        this.createElement(modules_constants_CLASS.CONTENT, this.getElement(modules_constants_CLASS.SCROLL_X));
    }
    prepareSummary() {
        this.createElement(modules_constants_CLASS.SUMMARY_SCROLL_Y, this.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.createElement(modules_constants_CLASS.SUMMARY_SCROLL_X, this.getElement(modules_constants_CLASS.SUMMARY_SCROLL_Y));
        this.createElement(modules_constants_CLASS.SUMMARY, this.getElement(modules_constants_CLASS.SUMMARY_SCROLL_X));
    }
    prepareEmptyScreen() {
        this.createElement(modules_constants_CLASS.EMPTY, this.getElement(modules_constants_CLASS.SCROLL_Y));
        this.elements[modules_constants_CLASS.EMPTY].innerText = translation_Translation.translate(NO_RECORDS);
    }
    createElement(name, parent) {
        if (this.elements[name]) {
            console.warn(`Container '${name}' already exists`);
            return void 0;
        }
        this.elements[name] = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [name]);
        if (parent) {
            parent.appendChild(this.elements[name]);
        }
    }
    setElement(name, element) {
        if (!this.elements[name]) {
            this.elements[name] = {};
        }
        this.elements[name] = element;
    }
    onChangeDataEditable() {
        this.checkIfEditable();
    }
    checkIfEditable() {
        utilities_dom_UtilitiesDOM.toggleClass(this.state.edit.enabled, this.getElement(modules_constants_CLASS.CORE_WRAPPER), [modules_constants_CLASS.CORE_WRAPPER_EDITABLE]);
    }
    onChangeThemeLayout({ layout }) {
        let onEnd = () => {
            this.elements[modules_constants_CLASS.CORE_WRAPPER].removeEventListener(modules_constants_EVENT.TRANSITIONEND, onEnd);
            this.eventBus.fire(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT);
        };
        this.elements[modules_constants_CLASS.CORE_WRAPPER].addEventListener(modules_constants_EVENT.TRANSITIONEND, onEnd);
        utilities_dom_UtilitiesDOM.removeClass(this.elements[modules_constants_CLASS.CORE_WRAPPER], Object.keys(modules_constants_CLASS.THEME.LAYOUT).map((key) => modules_constants_CLASS.THEME.LAYOUT[key]));
        utilities_dom_UtilitiesDOM.addClass(this.elements[modules_constants_CLASS.CORE_WRAPPER], [modules_constants_CLASS.THEME.LAYOUT[layout.toUpperCase()]]);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.EDIT.ENABLED, this.onChangeDataEditable.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.THEME.LAYOUT, this.onChangeThemeLayout.bind(this));
    }
}
mode_mode_decorate([
    permission_namespaceObject.freezeRows,
    mode_mode_metadata("design:type", Function),
    mode_mode_metadata("design:paramtypes", []),
    mode_mode_metadata("design:returntype", void 0)
], mode_LayoutMode.prototype, "prepareFreeze", null);
mode_mode_decorate([
    permission_namespaceObject.summary,
    mode_mode_metadata("design:type", Function),
    mode_mode_metadata("design:paramtypes", []),
    mode_mode_metadata("design:returntype", void 0)
], mode_LayoutMode.prototype, "prepareSummary", null);
//# sourceMappingURL=mode.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/mode/types/normal.js

class normal_LayoutNormal extends mode_LayoutMode {
    constructor(eventBus, state, coreHost) {
        super(eventBus, state, coreHost);
    }
    prepare() {
        super.prepare();
    }
}
//# sourceMappingURL=normal.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/mode/types/freeze.js
var freeze_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var freeze_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class freeze_LayoutFreeze extends mode_LayoutMode {
    constructor(eventBus, state, coreHost) {
        super(eventBus, state, coreHost);
    }
    prepare() {
        super.prepare();
        this.createElement(modules_constants_CLASS.FREEZE_COLUMN, this.getElement(modules_constants_CLASS.SCROLL_Y));
    }
    prepareWrapper() {
        super.prepareWrapper();
        if (this.state.get().columns.freeze.enabled) {
            utilities_dom_UtilitiesDOM.addClass(this.getElement(modules_constants_CLASS.CORE_WRAPPER), [modules_constants_CLASS.FREEZE_COLUMN]);
        }
    }
    prepareHeader() {
        super.prepareHeader();
        this.createElement(modules_constants_CLASS.HEADER_FREEZE, this.getElement(modules_constants_CLASS.HEADER_SCROLL_Y));
    }
    prepareFreeze() {
        super.prepareFreeze();
        this.createElement(modules_constants_CLASS.FREEZE_ROW_FREEZE_COLUMN, this.getElement(modules_constants_CLASS.FREEZE_SCROLL_Y));
    }
    prepareSummary() {
        super.prepareSummary();
        this.createElement(modules_constants_CLASS.SUMMARY_FREEZE_COLUMN, this.getElement(modules_constants_CLASS.SUMMARY_SCROLL_Y));
    }
}
freeze_decorate([
    permission_namespaceObject.freezeRows,
    freeze_metadata("design:type", Function),
    freeze_metadata("design:paramtypes", []),
    freeze_metadata("design:returntype", void 0)
], freeze_LayoutFreeze.prototype, "prepareFreeze", null);
freeze_decorate([
    permission_namespaceObject.summary,
    freeze_metadata("design:type", Function),
    freeze_metadata("design:paramtypes", []),
    freeze_metadata("design:returntype", void 0)
], freeze_LayoutFreeze.prototype, "prepareSummary", null);
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/header.order.js
var header_order_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_order_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





class header_order_HeaderOrder {
    constructor(eventBus, services, allCells) {
        this.eventBus = eventBus;
        this.services = services;
        this.allCells = allCells;
        this.onDropHandler = this.onDrop.bind(this);
        this.onOverHandler = this.onOver.bind(this);
        this.onLeaveHandler = this.onLeave.bind(this);
    }
    getDraggable() {
        return Object.keys(this.allCells)
            .filter((key) => {
            let column = this.services.columns.getColumnById(key);
            return !columns_UtilsColumns.isAbstract(column);
        })
            .map((key) => this.allCells[key]);
    }
    setDrag(columnId, dragElement) {
        this.services.dragAndDrop.setDrag(dragElement, {
            getData: this.getDataCallback.bind(this),
            start: this.startDragCallback.bind(this),
            end: this.endDragCallback.bind(this)
        });
        this.allCells[columnId] = dragElement;
    }
    unsetDrag(columnId, dragElement) {
        this.services.dragAndDrop.unsetDrag(dragElement);
        delete this.allCells[columnId];
    }
    setDrop(columnId, dropElement) {
        this.services.dragAndDrop.setDrop(dropElement, {
            drop: this.onDropHandler,
            over: this.onOverHandler,
            leave: this.onLeaveHandler
        });
        Object.keys(this.allCells).forEach((dragId) => {
            let dragElement = this.allCells[dragId];
            if (dragElement !== dropElement) {
                this.services.dragAndDrop.connect(dragElement, dropElement);
                this.services.dragAndDrop.connect(dropElement, dragElement);
            }
        });
    }
    unsetDrop(columnId, dropElement) {
        this.services.dragAndDrop.unsetDrop(dropElement);
    }
    orderFromRight(element) {
        if (this.dropLineElement !== element) {
            this.dropLineElement = element;
            utilities_dom_UtilitiesDOM.addClass(this.dropLineElement, [modules_constants_CLASS.HEADER_CELL_ORDER_RIGHT]);
        }
    }
    orderFromLeft(element) {
        if (element.previousSibling) {
            this.dropLineElement = element.previousSibling;
            utilities_dom_UtilitiesDOM.addClass(this.dropLineElement, [modules_constants_CLASS.HEADER_CELL_ORDER_RIGHT]);
        }
        else {
            this.dropLineElement = element;
            utilities_dom_UtilitiesDOM.addClass(this.dropLineElement, [modules_constants_CLASS.HEADER_CELL_ORDER_LEFT]);
        }
    }
    onOver(params) {
        if (params.dropPosition.indexOf(VC_DragAndDropConstants.POSITION.RIGHT) !== -1
            && this.lastDropPosition !== VC_DragAndDropConstants.POSITION.RIGHT) {
            this.clearOrder();
            this.lastDropPosition = VC_DragAndDropConstants.POSITION.RIGHT;
            this.orderFromRight(params.dropElement);
        }
        else if (params.dropPosition.indexOf(VC_DragAndDropConstants.POSITION.RIGHT) === -1
            && this.lastDropPosition !== VC_DragAndDropConstants.POSITION.LEFT) {
            this.clearOrder();
            this.lastDropPosition = VC_DragAndDropConstants.POSITION.LEFT;
            this.orderFromLeft(params.dropElement);
        }
    }
    clearOrder() {
        if (this.dropLineElement) {
            utilities_dom_UtilitiesDOM.removeClass(this.dropLineElement, [modules_constants_CLASS.HEADER_CELL_ORDER_LEFT, modules_constants_CLASS.HEADER_CELL_ORDER_RIGHT]);
        }
    }
    onLeave() {
        if (this.dropLineElement) {
            this.clearOrder();
            this.dropLineElement = null;
            this.lastDropPosition = undefined;
        }
    }
    getDataCallback(dragElement) {
        return this.getColumnId(dragElement);
    }
    startDragCallback(dragElement) {
        let columnId = this.getColumnId(dragElement);
        this.eventBus.fire(eventsList_EVENTS.DRAG_COLUMN.START, { columnId });
    }
    endDragCallback(dragElement) {
        let columnId = this.getColumnId(dragElement);
        this.eventBus.fire(eventsList_EVENTS.DRAG_COLUMN.END, { columnId });
    }
    getColumnId(element) {
        return Object.keys(this.allCells).find((columnId) => this.allCells[columnId] === element);
    }
    onDrop(params) {
        let columnId = this.getColumnId(params.dragElement);
        let isGroupByColumn = UtilsGroup.columnIsGrouped(this.services.state.group.groups, columnId);
        this.clearOrder();
        if (isGroupByColumn || !columnId) {
            return void 0;
        }
        this.eventBus.fire(eventsList_EVENTS.CHANGE.LAYOUT.HEADER.CELL.ORDER, {
            id: columnId,
            columnId: this.getColumnId(params.dropElement),
            position: params.dropPosition.indexOf(VC_DragAndDropConstants.POSITION.RIGHT) !== -1 ?
                modules_constants_POSITION.AFTER :
                modules_constants_POSITION.BEFORE
        });
    }
}
header_order_decorate([
    permission_namespaceObject.order,
    header_order_metadata("design:type", Function),
    header_order_metadata("design:paramtypes", [String, HTMLElement]),
    header_order_metadata("design:returntype", void 0)
], header_order_HeaderOrder.prototype, "setDrop", null);
header_order_decorate([
    permission_namespaceObject.order,
    header_order_metadata("design:type", Function),
    header_order_metadata("design:paramtypes", [String, HTMLElement]),
    header_order_metadata("design:returntype", void 0)
], header_order_HeaderOrder.prototype, "unsetDrop", null);
//# sourceMappingURL=header.order.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/header.menu.js
var header_menu_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_menu_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






class header_menu_HeaderMenu extends popup_aware_PopupAware {
    constructor(eventBus, services, cells) {
        super();
        this.eventBus = eventBus;
        this.services = services;
        this.cells = cells;
        this.showContextMenuBind = this._showContextMenu.bind(this);
        this.members = new WeakMap();
        this.searchItems = new WeakMap();
        this.onListItemClickBind = this._onListItemClick.bind(this);
        this.onSearchValueChangedBind = this._searchValueChanged.bind(this);
        this._live();
    }
    shouldInitializeMenu(headerCell, columnId) {
        let columnConfig = this.services.extensions.getColumnById(columnId);
        return headerCell && columnConfig.context;
    }
    getHeaderCellClasses(menuItemsCount) {
        let headerCellClasses = [modules_constants_CLASS.CONTEXT_MENU.CELL];
        if (menuItemsCount === 0) {
            headerCellClasses.push(modules_constants_CLASS.CONTEXT_MENU.CELL_EMPTY);
        }
        return headerCellClasses;
    }
    addContextMenu(column) {
        let headerCell = this.cells[column.id];
        if (!this.shouldInitializeMenu(headerCell, column.id)) {
            return void 0;
        }
        if (!columns_UtilsColumns.isValidLeafInState(this.services.state.columns.collection, column.id, true)) {
            console.warn(`Cannot initialize context menu in column '${column.id}'.`);
            return void 0;
        }
        let menuItemsCount = this.countMenuItems(column.id);
        let menuTrigger = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CONTEXT_MENU.WRAPPER]);
        let ico = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.MORE);
        ico.title = 'Column menu';
        let tooltip = document.createElement(VUIELEMENT.TOOLTIP);
        tooltip.attach(ico);
        ico.hoverable = true;
        menuTrigger.appendChild(ico);
        menuTrigger.addEventListener(modules_constants_EVENT.CLICK, this.showContextMenuBind);
        this.members.set(headerCell, ico);
        utilities_dom_UtilitiesDOM.addClass(headerCell, this.getHeaderCellClasses(menuItemsCount));
        headerCell.appendChild(menuTrigger);
    }
    getInputWithSearchIfApplicable(columnId) {
        if (search_UtilsSearch.testColumnExpression(this.services.state.header.search.value)) {
            let [label, value] = search_UtilsSearch.getColumnSearchMatches(this.services.state.header.search.value);
            let column = columns_UtilsColumns.findColumnInState(columnId, this.services.state.columns.collection);
            if (column && column.label === label) {
                return { columnId: column.id, value: value };
            }
        }
        return void 0;
    }
    isSearchAvailable(columnId) {
        return !!columns_UtilsColumns.isColumnRootInState(this.services.state.columns.collection, columnId);
    }
    refreshedSearchOption() {
        if (!this.isSearchAvailable(this._currentColumnId)) {
            this._list.removeEventListener(modules_constants_EVENT.VALUECHANGED, this.onSearchValueChangedBind);
            return document.createElement(modules_constants_ELEMENT.DIV);
        }
        this._list.addEventListener(modules_constants_EVENT.VALUECHANGED, this.onSearchValueChangedBind);
    }
    isSortAvailable(columnId, order) {
        let sortState = this.services.state.sort.state.find((sort) => sort.columnId === columnId);
        return columns_UtilsColumns.isValidLeafInState(this.services.state.columns.collection, columnId)
            && (!sortState || sortState.order !== order);
    }
    createSortOption(columnId, order) {
        if (!this.isSortAvailable(columnId, order)) {
            return void 0;
        }
        let label = order === constants_ASC ? TRANSLATION.KEYS.ASCENDING : TRANSLATION.KEYS.DESCENDING;
        let sortItem = {};
        sortItem[`sort_${order}`] = `${translation_Translation.translate(TRANSLATION.KEYS.SORT)} ${translation_Translation.translate(label)}`;
        return sortItem;
    }
    isHideAvailable(columnId) {
        let column = this.services.columns.getColumnById(columnId, false);
        return columns_UtilsColumns.isValidLeafInState(this.services.state.columns.collection, columnId, true)
            && this.services.columns.isCollapsableColumn(columnId, column.visible);
    }
    createHideOption(columnId) {
        if (!this.isHideAvailable(columnId)) {
            return void 0;
        }
        return {
            'hide': translation_Translation.translate(TRANSLATION.KEYS.HIDE)
        };
    }
    isGroupAvailable(columnId) {
        return !!columns_UtilsColumns.isColumnRootInState(this.services.state.columns.collection, columnId)
            && !this.services.columns.isGroupedColumn(columnId);
    }
    createGroupOption(columnId) {
        if (!this.isGroupAvailable(columnId)) {
            return void 0;
        }
        return {
            'group': translation_Translation.translate(TRANSLATION.KEYS.GROUP)
        };
    }
    isCompoundAvailable(columnId) {
        return !!columns_UtilsColumns.isColumnRootInState(this.services.state.columns.collection, columnId);
    }
    createCompoundOption(columnId) {
        if (!this.isCompoundAvailable(columnId)) {
            return void 0;
        }
        let freezeState = this.services.state.columns.freeze.state.indexOf(columnId) === -1;
        return {
            'compound': freezeState
                ? translation_Translation.translate(TRANSLATION.KEYS.FREEZE)
                : translation_Translation.translate(TRANSLATION.KEYS.UNFREEZE)
        };
    }
    countMenuItems(columnId) {
        return [
            this.isSortAvailable(columnId, constants_ASC),
            this.isSortAvailable(columnId, constants_DESC),
            this.isHideAvailable(columnId),
            this.isGroupAvailable(columnId),
            this.isCompoundAvailable(columnId)
        ].filter((visibility) => visibility).length;
    }
    getMenuItems(columnId) {
        return Object.assign({}, this.createSortOption(columnId, constants_ASC), this.createSortOption(columnId, constants_DESC), this.createHideOption(columnId), this.createGroupOption(columnId), this.createCompoundOption(columnId));
    }
    contentFactory(columnId) {
        let menuItems = this.getMenuItems(columnId);
        if (menuItems.length === 0) {
            return void 0;
        }
        let list = utilities_dom_UtilitiesDOM.create(VUIELEMENT.SELECT_LIST);
        list.justification = VUIPOPUP.JUSTIFICATION.LEFT;
        list.options = Object.keys(menuItems).map((key) => `${key}:${menuItems[key]},`).join(',');
        let enabled = this.services.state.get().header.search.enabled;
        let parsedValue = this.getInputWithSearchIfApplicable(this._currentColumnId);
        if (enabled && parsedValue) {
            list.searchValue = parsedValue.value;
        }
        // Tip: HACK FOR ViZi until we will introduce the configuration
        list.search = false; // enabled;
        list.addEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onListItemClickBind);
        return list;
    }
    _showContextMenu(event) {
        event.stopPropagation();
        event.preventDefault();
        this.popupClose();
        let target = event.target;
        this._currentColumnId = Object.keys(this.cells).find((columnId) => target === this.members.get(this.cells[columnId]));
        if (this._currentColumnId) {
            this._list = this.contentFactory(this._currentColumnId);
            this.popupOpen([this._list], this.cells[this._currentColumnId]);
        }
    }
    _searchValueChanged(event) {
        let column = columns_UtilsColumns.findColumnInState(this._currentColumnId, this.services.state.columns.collection);
        this.processInputValue(event.detail.toString(), `${constants_SEARCH_COLUMN_PREFIX}'${column.label}'`);
    }
    onOpened() {
        this.refreshedSearchOption();
    }
    processInputValue(value, searchTemplate) {
        this.searchItems.set(this.cells[this._currentColumnId], value);
        if (value) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_APPLY, { value: `${searchTemplate} ${value}` });
        }
        else if (!value
            && search_UtilsSearch.valueInSource(this.services.state.header.search.value, searchTemplate)) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_APPLY, { value: '' });
        }
    }
    _onListItemClick({ detail }) {
        if (this[detail]) {
            this[detail]();
        }
    }
    desc() {
        // todo add ctrlKey after selectlist fix;
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, { columnId: this._currentColumnId, order: constants_DESC });
        this._close();
    }
    asc() {
        // todo add ctrlKey after selectlist fix;
        this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SORT, { columnId: this._currentColumnId, order: constants_ASC });
        this._close();
    }
    hide() {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.VISIBILITY_APPLY, {
            columnId: this._currentColumnId,
            visibility: false
        });
        this._close();
    }
    group() {
        let columnId = this._currentColumnId;
        let sort = this.services.state.sort.state.find((sort) => sort.columnId === columnId);
        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.GROUP.ADD, { columnId, order: sort && sort.order || constants_ASC });
        this._close();
    }
    compound() {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.COMPOUND_APPLY, {
            columnId: this._currentColumnId,
            freeze: this.services.state.columns.freeze.state.indexOf(this._currentColumnId) === -1
        });
        this._close();
    }
    onAfterColumnHide() {
        if (Object.keys(this.cells).some((columnId) => this._currentColumnId === columnId)) {
            this._close();
        }
    }
    _removeEvents() {
        this._list.removeEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onListItemClickBind);
        this._list.removeEventListener(modules_constants_EVENT.VALUECHANGED, this.onSearchValueChangedBind);
    }
    _close() {
        this._removeEvents();
        this.popupClose();
        this._currentColumnId = null;
    }
    _onChangeColumnSearchList({ values, columnId }) {
        if (!(this._list && this._list.search)) {
            return void 0;
        }
        let column = columns_UtilsColumns.findColumnInState(columnId, this.services.state.columns.collection);
        this._list.setSearchHints(values, column.label);
    }
    _onChangeGridHeaderSearch(value) {
        if (!(this._list && this._list.search)) {
            return void 0;
        }
        if (value === '') {
            this._list.searchValue = value;
        }
        else {
            let parsedValue = this.getInputWithSearchIfApplicable(this._currentColumnId);
            if (parsedValue) {
                this.searchItems.set(this.cells[parsedValue.columnId], parsedValue.value);
                this._list.searchValue = parsedValue.value;
            }
        }
    }
    _destroy() {
        this._removeEvents();
        Object.keys(this.cells).forEach((columnId) => {
            let menu = this.members.get(this.cells[columnId]);
            if (menu) {
                menu.removeEventListener(modules_constants_EVENT.CLICK, this.showContextMenuBind);
            }
        });
        this.members = new WeakMap();
    }
    _live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.SEARCH, this._onChangeGridHeaderSearch.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_LIST, this._onChangeColumnSearchList.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onAfterColumnHide.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this._destroy.bind(this));
    }
}
header_menu_decorate([
    permission_namespaceObject.search,
    header_menu_metadata("design:type", Function),
    header_menu_metadata("design:paramtypes", [String]),
    header_menu_metadata("design:returntype", Boolean)
], header_menu_HeaderMenu.prototype, "isSearchAvailable", null);
header_menu_decorate([
    permission_namespaceObject.sort,
    header_menu_metadata("design:type", Function),
    header_menu_metadata("design:paramtypes", [String, String]),
    header_menu_metadata("design:returntype", Boolean)
], header_menu_HeaderMenu.prototype, "isSortAvailable", null);
header_menu_decorate([
    permission_namespaceObject.group,
    header_menu_metadata("design:type", Function),
    header_menu_metadata("design:paramtypes", [String]),
    header_menu_metadata("design:returntype", Boolean)
], header_menu_HeaderMenu.prototype, "isGroupAvailable", null);
header_menu_decorate([
    permission_namespaceObject.freezeColumns,
    header_menu_metadata("design:type", Function),
    header_menu_metadata("design:paramtypes", [String]),
    header_menu_metadata("design:returntype", Boolean)
], header_menu_HeaderMenu.prototype, "isCompoundAvailable", null);
//# sourceMappingURL=header.menu.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/cell/cell.resize.js
var cell_resize_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cell_resize_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class cell_resize_HeaderCellResize {
    constructor(eventBus, services, headerCellElement, columnId) {
        this.eventBus = eventBus;
        this.services = services;
        this.headerCellElement = headerCellElement;
        this.columnId = columnId;
        this.values = {};
        this.resizeMoved = false;
        this.prepare();
        this.live();
    }
    setInitialValues(event) {
        let headerCellBounding = this.headerCellElement.getBoundingClientRect();
        this.isFreezeColumnsEnabled = this.services.columns.getFreezeColumnIds().some((columnId) => columnId === this.columnId);
        this.values = {};
        this.values.positionX = this.getEventClientX(event);
        this.values.width = this.headerCellElement.getBoundingClientRect().width;
        this.values.rightEdge = headerCellBounding.left + this.services.sizeWidth.getColumnWidth(this.columnId);
        this.values.left = this.headerCellElement.offsetLeft;
        this.values.allColumnsWidth = this.services.sizeWidth.getAllColumnsWidth();
        if (this.isFreezeColumnsEnabled) {
            this.values.freezeColumnsWidth = this.services.sizeWidth.getFreezeColumnsWidth();
        }
    }
    prepare() {
        this.services.resize.set(this.headerCellElement, {
            start: this.onResizeStart.bind(this),
            move: this.onResizeMove.bind(this),
            end: this.onResizeEnd.bind(this),
            dblclick: this.onDblClick.bind(this)
        });
    }
    getEventClientX(event) {
        return (event instanceof MouseEvent) ? event.clientX : event.changedTouches[0].clientX;
    }
    onResizeStart(event) {
        this.setInitialValues(event);
    }
    updateValues(delta) {
        this.values.positionX += delta;
        this.values.width += delta;
        this.values.allColumnsWidth += delta;
        if (this.isFreezeColumnsEnabled) {
            this.values.freezeColumnsWidth += delta;
        }
    }
    isBoundariesNotExceeded(delta) {
        let wrapperWidth = this.services.sizeWidth.getGridWidth();
        let freezeExceeded = this.isFreezeColumnsEnabled
            && (wrapperWidth * SIZE.LIMIT_FACTOR) < (this.values.freezeColumnsWidth + delta);
        let widthExceeded = this.services.columns.isLastColumn(this.columnId)
            && wrapperWidth > (this.values.allColumnsWidth + delta);
        return !(freezeExceeded || widthExceeded);
    }
    isResizeAvailable(delta) {
        if (!delta || this.values.width + delta < SIZE.CELL_MIN_WIDTH) {
            return false;
        }
        return this.isBoundariesNotExceeded(delta);
    }
    onResizeMove(event) {
        let delta = this.getEventClientX(event) - this.values.positionX;
        if (!this.resizeMoved && delta) {
            this.resizeMoved = true;
            this.eventBus.fire(eventsList_EVENTS.RESIZE.START, { values: this.values });
        }
        if (!this.isResizeAvailable(delta)) {
            return void 0;
        }
        this.updateValues(delta);
        this.eventBus.fire(eventsList_EVENTS.RESIZE, { values: this.values });
    }
    onDblClick() {
        this.eventBus.fire(eventsList_EVENTS.RESIZE.STOP, {
            columnId: this.columnId,
            values: {
                left: this.values.left,
                width: null
            }
        });
    }
    onResizeEnd() {
        if (this.resizeMoved) {
            this.resizeMoved = false;
            this.eventBus.fire(eventsList_EVENTS.RESIZE.STOP, { columnId: this.columnId, values: this.values });
        }
    }
    destroy() {
        this.services.resize.unset(this.headerCellElement);
        this.values = null;
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
cell_resize_decorate([
    measure(),
    cell_resize_metadata("design:type", Function),
    cell_resize_metadata("design:paramtypes", [Number]),
    cell_resize_metadata("design:returntype", void 0)
], cell_resize_HeaderCellResize.prototype, "updateValues", null);
cell_resize_decorate([
    measure(),
    cell_resize_metadata("design:type", Function),
    cell_resize_metadata("design:paramtypes", [Object]),
    cell_resize_metadata("design:returntype", void 0)
], cell_resize_HeaderCellResize.prototype, "onResizeMove", null);
//# sourceMappingURL=cell.resize.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/cell/cell.mark.js




class cell_mark_HeaderCellMark {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.HEADER_CELL_ABSTRACT_MARK]);
        this.input = document.createElement(VUIELEMENT.CHECKBOX);
        this.input.title = translation_Translation.translate(TRANSLATION.KEYS.MARK_ALL);
        document.createElement(VUIELEMENT.TOOLTIP).attach(this.input);
        this.element.appendChild(this.input);
    }
    onClick() {
        this.eventBus.fire(eventsList_EVENTS.ACTION.HEADER.MARK, { marked: this.input.checked });
    }
    onChangeDataMarkAll({ isAllMarked }) {
        if (this.input.checked !== isAllMarked) {
            this.input.checked = isAllMarked;
        }
    }
    destroy() {
        this.element.removeChild(this.input);
        utilities_dom_UtilitiesDOM.removeElement(this.element);
        this.input = null;
        this.element = null;
    }
    live() {
        this.input.addEventListener(modules_constants_EVENT.CHANGE, this.onClick.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.HEADER.MARK, this.onChangeDataMarkAll.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
//# sourceMappingURL=cell.mark.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/cell/cell.merge.collapse.js



class cell_merge_collapse_HeaderCellMergeCollapse {
    constructor(eventBus, services, column) {
        this.eventBus = eventBus;
        this.services = services;
        this.column = column;
        this.onColumnCollapseBind = this.onColumnCollapse.bind(this);
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV);
        this._collapse = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.ADD);
        this._collapse.size = VUIICON.SIZE.MEDIUM;
        this._collapse.hoverable = true;
        this._expand = utilities_dom_UtilitiesDOM.create(VUIELEMENT.ICON.SUBSTRACT);
        this._expand.size = VUIICON.SIZE.MEDIUM;
        this._expand.hoverable = true;
        this.prepareColapsable();
        this.checkCollapsed();
        this.element.appendChild(this._collapse);
        this.element.appendChild(this._expand);
    }
    prepareColapsable() {
        this.collapsableCollumnIds = this.getCollapsable(this.column.columns);
    }
    checkCollapsed() {
        this._collapse.visible = this.services.state.columns.collapsed[this.column.id];
        this._expand.visible = !this.services.state.columns.collapsed[this.column.id];
    }
    getCollapsable(columns) {
        let collapsableColumns = [];
        for (let i = 0; i < columns.length; i++) {
            if (columns[i].type === modules_constants_TYPE.GROUP) {
                collapsableColumns.push(...this.getCollapsable(columns[i].columns));
            }
            else {
                let { collapsable } = this.services.extensions.getColumnById(columns[i].id);
                if (collapsable) {
                    collapsableColumns.push(columns[i].id);
                }
            }
        }
        return collapsableColumns;
    }
    onColumnCollapse(event) {
        event.stopPropagation();
        this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, {
            columnId: this.column.id,
            columnIds: this.collapsableCollumnIds,
            collapsed: !this.services.state.columns.collapsed[this.column.id]
        });
        this.checkCollapsed();
    }
    onAfterDataColumnsCollapsed() {
        this.checkCollapsed();
    }
    destroy() {
        this.element.removeEventListener(modules_constants_EVENT.CLICK, this.onColumnCollapseBind);
    }
    live() {
        this.element.addEventListener(modules_constants_EVENT.CLICK, this.onColumnCollapseBind);
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.COLUMNS.COLLAPSED, this.onAfterDataColumnsCollapsed.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
//# sourceMappingURL=cell.merge.collapse.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/cell/cell.merge.js





class cell_merge_HeaderCellMerge {
    constructor(eventBus, services, column) {
        this.eventBus = eventBus;
        this.services = services;
        this.column = column;
        this._TEMPLATE = (name) => `${name} column / Right click for context menu`;
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_GROUP, modules_constants_POSITION.HORIZONTAL]);
        this.label = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_HEADER_TEXT]);
        this.group = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL_GROUP]);
        this.prepareCollapse();
        this.prepareRootLabel();
        this.prepareLeafs();
        this.setGroupClass();
        this.element.appendChild(this.label);
        this.element.appendChild(this.group);
    }
    prepareCollapse() {
        let { collapsed } = this.services.extensions.getColumnById(this.column.id);
        if (collapsed === undefined) {
            return void 0;
        }
        if (this.hasCollapsableColumns(this.column)) {
            let collapse = new cell_merge_collapse_HeaderCellMergeCollapse(this.eventBus, this.services, this.column);
            this.label.appendChild(collapse.get());
        }
    }
    hasCollapsableColumns(column) {
        let { collapsable } = this.services.extensions.getColumnById(column.id);
        if (column.type === modules_constants_TYPE.GROUP) {
            return column.columns.some(this.hasCollapsableColumns.bind(this));
        }
        return collapsable !== undefined ? collapsable : false;
    }
    prepareRootLabel() {
        let label = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.SPAN);
        label.innerText = this.column.label;
        this.label.appendChild(label);
    }
    prepareLeafs() {
        this.leafs = {};
        let parentName = this.column.label;
        this.column.columns.forEach((column) => {
            let leafClasses = columns_UtilsColumns.isColumnLeaf(column) ? [modules_constants_CLASS.CELL] : [];
            this.leafs[column.id] = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [...leafClasses]);
            this.leafs[column.id].innerText = column.label;
            this.leafs[column.id].title = this._TEMPLATE(`${parentName} - ${column.label}`);
            this.tooltip = document.createElement(VUIELEMENT.TOOLTIP);
            this.tooltip.attach(this.leafs[column.id]);
            this.addLeaf(column);
        });
    }
    addLeaf(column) {
        let columnState = this.services.columns.getColumnById(column.id, false);
        if (!columnState.visible) {
            return void 0;
        }
        this.group.appendChild(this.leafs[column.id]);
    }
    setGroupClass() {
        let { group } = this.services.extensions.getColumnById(this.column.id);
        if (group) {
            utilities_dom_UtilitiesDOM.addClass(this.group, [group.style]);
        }
    }
    rebuildLeafs() {
        utilities_dom_UtilitiesDOM.removeChildren(this.group);
        this.column.columns.forEach(this.addLeaf.bind(this));
    }
    onAfterDataColumnsCollapsed() {
        this.rebuildLeafs();
    }
    onChangeDataColumnsCollection() {
        this.rebuildLeafs();
    }
    onDragColumnStart() {
        if (this.tooltip) {
            this.tooltip.close();
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DRAG_COLUMN.START, this.onDragColumnStart.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollection.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.COLUMNS.COLLAPSED, this.onAfterDataColumnsCollapsed.bind(this));
    }
}
//# sourceMappingURL=cell.merge.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/cell/cell.js
var cell_cell_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cell_cell_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







class cell_HeaderCell {
    constructor(eventBus, services, column) {
        this.eventBus = eventBus;
        this.services = services;
        this.column = column;
        this._TEMPLATE = (name) => `${name} column`;
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    getLeafs() {
        return this.mergeElement && this.mergeElement.leafs || {};
    }
    prepare() {
        let column = this.services.columns.getColumnById(this.column.id);
        let columnWidth = this.services.state.get().columns.width;
        let classList = [modules_constants_CLASS.CELL];
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, classList);
        if (this.column.id) {
            this.element.classList.add(modules_constants_CLASS.HEADER_CELL_ABSTRACT_GROUP);
        }
        if (this.column.label) {
            this.element.title = this._TEMPLATE(this.column.label);
            this.tooltip = document.createElement(VUIELEMENT.TOOLTIP);
            this.tooltip.attach(this.element);
        }
        if (columnWidth && columnWidth[this.column.id]) {
            this.element.style.width = `${columnWidth[this.column.id].width}px`;
            this.element.style.display = `inline-block`;
        }
        this.prepareGroup(column);
        this.prepareMerge(column);
        this.prepareExtensions();
    }
    prepareGroup(column) {
        if (column.type === modules_constants_TYPE.GROUP) {
            this.element.classList.add(modules_constants_CLASS.HEADER_CELL_GROUP);
        }
    }
    validate() {
        let column = this.services.extensions.getColumns()[this.column.id];
        if (column && column.group.position === modules_constants_POSITION.HORIZONTAL) {
            console.warn(`Column ${this.column.id} may not be displayed properly`);
        }
    }
    setLabel() {
        if (!columns_UtilsColumns.isAbstractStatic(this.column.id)) {
            this.element.innerText = this.column.label;
        }
    }
    prepareMark() {
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.HEADER_CELL_ABSTRACT_MARK]);
        this.prepareMarkHandler();
    }
    prepareMarkHandler() {
        let markHandler = new cell_mark_HeaderCellMark(this.eventBus);
        this.element.title = '';
        this.element.appendChild(markHandler.get());
    }
    prepareResize() {
        let sizeHandler = new cell_resize_HeaderCellResize(this.eventBus, this.services, this.element, this.column.id);
    }
    prepareCellMerge() {
        this.mergeElement = new cell_merge_HeaderCellMerge(this.eventBus, this.services, this.column);
        this.element.appendChild(this.mergeElement.get());
    }
    prepareMerge(column) {
        if (this.services.columns.isMergeColumn(column)) {
            this.prepareCellMerge();
            this.validate();
        }
        else {
            this.setLabel();
        }
    }
    prepareExtensions() {
        if (this.column.id === STATIC_CLASS.ROW_MARK) {
            this.prepareMark();
        }
        else {
            this.prepareResize();
        }
    }
    onDoneColumnWidth({ changed }) {
        if (changed[this.column.id] !== undefined) {
            this.element.style.width = this.services.sizeWidth.getWidthString(changed[this.column.id].width);
        }
        this.element.style.display = this.services.columns.isVisibleById(this.column.id) ? 'inline-block' : 'none';
    }
    destroy() {
        utilities_dom_UtilitiesDOM.removeChildren(this.element);
        utilities_dom_UtilitiesDOM.removeElement(this.element);
        this.element = null;
    }
    bindClickSortEvent(element, columnId) {
        this.eventBus.addListener(element, modules_constants_EVENT.CLICK, {
            eventName: eventsList_EVENTS.ACTION.DATA.SORT,
            data: { columnId },
            processor: this._onClickSortProcessEvent.bind(this)
        });
    }
    addSortListeners() {
        if (columns_UtilsColumns.isAbstract(this.column)) {
            return void 0;
        }
        if (this.services.columns.isMergeColumn(this.column)) {
            this.column.columns.forEach((column) => {
                if (columns_UtilsColumns.isColumnLeaf(column)) {
                    this.bindClickSortEvent(this.mergeElement.leafs[column.id], column.id);
                }
            });
        }
        else if (this.column.type !== modules_constants_TYPE.GROUP) {
            this.bindClickSortEvent(this.element, this.column.id);
        }
    }
    _onClickSortProcessEvent(event, data) {
        return Object.assign({}, data, { multisort: event.ctrlKey });
    }
    onDragColumnStart() {
        if (this.tooltip) {
            this.tooltip.close();
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onDoneColumnWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.DRAG_COLUMN.START, this.onDragColumnStart.bind(this));
        this.addSortListeners();
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
cell_cell_decorate([
    permission_namespaceObject.mark,
    cell_cell_metadata("design:type", Function),
    cell_cell_metadata("design:paramtypes", []),
    cell_cell_metadata("design:returntype", void 0)
], cell_HeaderCell.prototype, "prepareMark", null);
cell_cell_decorate([
    permission_namespaceObject.resize,
    cell_cell_metadata("design:type", Function),
    cell_cell_metadata("design:paramtypes", []),
    cell_cell_metadata("design:returntype", void 0)
], cell_HeaderCell.prototype, "prepareResize", null);
cell_cell_decorate([
    permission_namespaceObject.sort,
    cell_cell_metadata("design:type", Function),
    cell_cell_metadata("design:paramtypes", []),
    cell_cell_metadata("design:returntype", void 0)
], cell_HeaderCell.prototype, "addSortListeners", null);
//# sourceMappingURL=cell.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/header.manager.js






class header_manager_HeaderManager extends popup_aware_PopupAware {
    constructor(eventBus, services) {
        super();
        this.eventBus = eventBus;
        this.services = services;
        this.columns = [];
        this.onDestroyBind = this.destroy.bind(this);
        this.onChangeDataColumnsCollectionBind = this.setContent.bind(this);
        this.onShowAllCheckboxChangeBind = this.showAllCheckboxChange.bind(this);
        this.onLabelClickBind = this.onLabelClick.bind(this);
        this._prepare();
        this._live();
    }
    _prepare() {
        this.visibleList = utilities_dom_UtilitiesDOM.create(VUIELEMENT.SELECT_LIST);
        this.visibleList.justification = VUIPOPUP.JUSTIFICATION.LEFT;
        this.hiddenList = utilities_dom_UtilitiesDOM.create(VUIELEMENT.SELECT_LIST);
        this.hiddenList.justification = VUIPOPUP.JUSTIFICATION.LEFT;
        this.showAll = document.createElement(VUIELEMENT.BUTTON);
        this.showAll.innerText = translation_Translation.translate(TRANSLATION.KEYS.SHOW_ALL);
    }
    clearLists() {
        utilities_dom_UtilitiesDOM.removeChildren(this.hiddenList);
        utilities_dom_UtilitiesDOM.removeChildren(this.visibleList);
        this.hiddenList.selected = '';
        this.visibleList.selected = '';
        this.showAll.checked = false;
    }
    prepareLists() {
        this.visibleList.title = translation_Translation.translate(TRANSLATION.KEYS.HIDE);
        this.hiddenList.title = translation_Translation.translate(TRANSLATION.KEYS.SHOW);
        let allVisibleColumns = this.columns.every((column) => column.visible);
        let allHiddenColumns = this.columns.every((column) => !column.visible);
        utilities_dom_UtilitiesDOM.toggleClass(allVisibleColumns, this.hiddenList, [modules_constants_CLASS.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(allVisibleColumns, this.showAll, [modules_constants_CLASS.HIDDEN]);
        utilities_dom_UtilitiesDOM.toggleClass(allHiddenColumns, this.visibleList, [modules_constants_CLASS.HIDDEN]);
    }
    setContent() {
        this.clearColumns();
        this.clearLists();
        this.findColumns();
        this.prepareLists();
        let visible = [];
        let hidden = [];
        this.columns.forEach((column) => {
            let item = this.getEntry(column);
            if (column.visible) {
                visible.push(item);
            }
            else {
                hidden.push(item);
            }
        });
        this.visibleList.options = visible.map((el) => `${el.key}:${el.value}`).join(',');
        this.hiddenList.options = hidden.map((el) => `${el.key}:${el.value}`)
            .join(',');
    }
    clearColumns() {
        this.columns = [];
    }
    findColumns() {
        let columnsCollection = this.services.state.columns.collection;
        Object.keys(columnsCollection).forEach((columnId) => {
            this.columns.push(columnsCollection[columnId]);
            if (Array.isArray(columnsCollection[columnId].columns)) {
                this.findColumnsRecursively(columnsCollection[columnId]);
            }
        });
        this.columns = this.columns.filter((column) => {
            let extensionColumn = this.services.extensions.getColumnById(column.id);
            return column.id !== STATIC_CLASS.ROW_MARK && extensionColumn && extensionColumn.context
                && extensionColumn.collapsable !== false;
        });
    }
    findColumnsRecursively(column) {
        column.columns.forEach((column) => {
            if (columns_UtilsColumns.isColumnLeaf(column) && column.label) {
                this.columns.push(column);
            }
            if (Array.isArray(column.columns)) {
                this.findColumnsRecursively(column);
            }
        });
    }
    getEntry(column) {
        return { key: column.id, value: this.getLabel(column) };
    }
    onLabelClick(event) {
        this.close();
        this.onInputChange(event.detail[0]);
    }
    getLabel(column) {
        if (columns_UtilsColumns.isColumnLeaf(column)) {
            let parent = columns_UtilsColumns.findColumnRootInState(column.id, this.services.state.columns.collection);
            if (parent.id !== column.id) {
                return `${parent.label} ${column.label}`;
            }
        }
        return column.label;
    }
    show(target) {
        this.target = target;
        this.popupClose();
        this.popupOpen([this.hiddenList, this.visibleList, this.showAll], this.target);
    }
    close() {
        this.popupClose();
    }
    onInputChange(columnId) {
        let column = this.columns.find((col) => col.id === columnId);
        if (column.visible) {
            this.eventBus.fire(eventsList_EVENTS.API.COLUMN.HIDE, column.id);
        }
        else {
            this.eventBus.fire(eventsList_EVENTS.API.COLUMN.SHOW, column.id);
        }
    }
    showAllCheckboxChange(event) {
        this.columns.forEach((column) => {
            if (!column.visible) {
                this.eventBus.fire(eventsList_EVENTS.API.COLUMN.SHOW, column.id);
            }
        });
        this.close();
    }
    destroy() {
        this.showAll.removeEventListener(modules_constants_EVENT.CLICK, this.onShowAllCheckboxChangeBind);
        this.visibleList = null;
        this.hiddenList = null;
        this.target = null;
        this.showAll = null;
        this.columns = [];
        this.eventBus.leave(eventsList_EVENTS.DESTROY, this.onDestroyBind);
        this.eventBus.leave(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollectionBind);
        this.hiddenList.removeEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onLabelClickBind);
        this.visibleList.removeEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onLabelClickBind);
    }
    _live() {
        this.showAll.addEventListener(modules_constants_EVENT.CLICK, this.onShowAllCheckboxChangeBind);
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.onDestroyBind);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollectionBind);
        this.hiddenList.addEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onLabelClickBind);
        this.visibleList.addEventListener(modules_constants_EVENT.LISTELEMENTSELECTED, this.onLabelClickBind);
    }
}
//# sourceMappingURL=header.manager.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/header/header.js
var header_header_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var header_header_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var header_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};








const CTX_MENU_INTERVAL = 1000;
class header_LayoutHeader {
    constructor(eventBus, services, columnsDelegate, allCells) {
        this.eventBus = eventBus;
        this.services = services;
        this.columnsDelegate = columnsDelegate;
        this.allCells = allCells;
        this.cells = {};
        this.sorter = {};
        this.onContextManagerBind = this._onContextManager.bind(this);
        this.onMouseDownBind = this._onMouseDown.bind(this);
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    setCurrentOrder() {
        this.currentOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
    }
    prepare() {
        this.prepareOrder();
        this.prepareContextMenu();
        if (this.isContextManagerEnabled()) {
            this.prepareContextManager();
        }
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ROW]);
        this.columnsDelegate().forEach((column) => {
            this.addCell(column);
        });
        this.setGroupClass();
        this.setSortClass();
        this.setCurrentOrder();
    }
    getDraggable() {
        return this.order.getDraggable();
    }
    prepareOrder() {
        this.order = new header_order_HeaderOrder(this.eventBus, this.services, this.allCells);
    }
    prepareContextMenu() {
        this.contextMenu = new header_menu_HeaderMenu(this.eventBus, this.services, this.cells);
    }
    prepareContextManager() {
        this.contextManager = new header_manager_HeaderManager(this.eventBus, this.services);
    }
    addContextMenu(column) {
        this.contextMenu.addContextMenu(column);
        if (this.services.columns.isMergeColumn(column)) {
            column.columns.forEach(this.contextMenu.addContextMenu.bind(this.contextMenu));
        }
    }
    setGroupClass() {
        let columns = this.services.extensions.getColumns();
        Object.keys(columns).forEach((columnId) => {
            let cell = this.cells[columnId];
            let column = columns[columnId];
            if (cell && column.hasOwnProperty('group')) {
                utilities_dom_UtilitiesDOM.addClass(cell, [column.group.style]);
            }
        });
    }
    prepareSortPriority(column, level = 1) {
        let priority = utilities_dom_UtilitiesDOM.create('vui-counter');
        priority.visible = false;
        priority.circled = true;
        if (!columns_UtilsColumns.isAbstract(column)) {
            priority.count = level;
            if (level > 0 && this.services.state.sort.state.length > 1) {
                priority.visible = true;
            }
        }
        return priority;
    }
    prepareSortIcon(sortState) {
        let className = this.services.columns.isGroupedColumn(sortState.columnId)
            ? modules_constants_CLASS.SORT_GROUPED :
            modules_constants_CLASS.SORT_UNGROUPED;
        let icoName = sortState.order === constants_ASC ? VUIELEMENT.ICON.CHEVRON_UP : VUIELEMENT.ICON.CHEVRON_DOWN;
        let ico = utilities_dom_UtilitiesDOM.create(icoName, [className]);
        ico.size = VUIICON.SIZE.MEDIUM;
        return ico;
    }
    setColumnSort(column) {
        utilities_dom_UtilitiesDOM.removeChildren(this.sorter[column.id]);
        let sorts = [].concat(this.services.state.sort.state, this.services.state.sort.groups);
        let sortState = sorts.find((value) => value.columnId === column.id);
        if (sortState && this.cells[column.id]) {
            let priority = this.prepareSortPriority(column, this.services.state.sort.state.indexOf(sortState) + 1);
            let sortIcon = this.prepareSortIcon(sortState);
            this.sorter[column.id].appendChild(sortIcon);
            this.sorter[column.id].appendChild(priority);
            this.cells[column.id].appendChild(this.sorter[column.id]);
        }
    }
    setSortClass() {
        columns_UtilsColumns.filterAbstract(this.columnsDelegate()).forEach((column) => {
            if (this.services.columns.isMergeColumn(column)) {
                column.columns.forEach(this.setColumnSort.bind(this));
            }
            else {
                this.setColumnSort(column);
            }
        });
    }
    createSorter(columnId) {
        this.sorter[columnId] = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL__SORTER]);
    }
    addLeafCells(cell) {
        let leafs = cell.getLeafs();
        for (let columnId in leafs) {
            if (leafs.hasOwnProperty(columnId)) {
                this.cells[columnId] = leafs[columnId];
                this.createSorter(columnId);
            }
        }
    }
    addCell(column) {
        let cell = new cell_HeaderCell(this.eventBus, this.services, column);
        this.cells[column.id] = cell.get();
        this.createSorter(column.id);
        this.addLeafCells(cell);
        this.addContextMenu(column);
        if (!columns_UtilsColumns.isAbstractStatic(column.id)) {
            this.order.setDrag(column.id, this.cells[column.id]);
            this.order.setDrop(column.id, this.cells[column.id]);
        }
        this.element.appendChild(cell.get());
    }
    removeCell(columnId) {
        this.cells[columnId].parentNode.removeChild(this.cells[columnId]);
        if (!columns_UtilsColumns.isAbstractStatic(columnId)) {
            this.order.unsetDrag(columnId, this.cells[columnId]);
            this.order.unsetDrop(columnId, this.cells[columnId]);
        }
        delete this.cells[columnId];
    }
    onChangeDataColumnsOrder() {
        return header_awaiter(this, void 0, void 0, function* () {
            let newOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
            let diff = columns_UtilsColumns.diff(this.currentOrder, newOrder);
            yield UtilitiesArray.forEachAsync(diff.remove, (columnId) => header_awaiter(this, void 0, void 0, function* () {
                this.removeCell(columnId);
            }));
            yield UtilitiesArray.forEachAsync(diff.add, (columnId) => header_awaiter(this, void 0, void 0, function* () {
                let column = this.columnsDelegate().find((column) => column.id === columnId);
                this.addCell(column);
            }));
            if (diff.order) {
                columns_UtilsColumns.sort(newOrder, this.currentOrder, this.cells);
            }
            this.setCurrentOrder();
            this.setGroupClass();
            this.setSortClass();
        });
    }
    onResizeStart() {
        utilities_dom_UtilitiesDOM.addClass(this.element, [modules_constants_CLASS.SIZED_UP]);
    }
    onResizeStop() {
        utilities_dom_UtilitiesDOM.removeClass(this.element, [modules_constants_CLASS.SIZED_UP]);
    }
    onAfterDataSort() {
        this.setSortClass();
    }
    onDoneDataGroup() {
        this.setSortClass();
    }
    destroy() {
        this.element.removeEventListener(modules_constants_EVENT.MOUSEDOWN, this.onMouseDownBind);
        this.element.removeEventListener(modules_constants_EVENT.CONTEXT_MENU, this.onContextManagerBind);
        utilities_dom_UtilitiesDOM.removeChildren(this.element);
        utilities_dom_UtilitiesDOM.removeElement(this.element);
        this.element = null;
        this.cells = {};
        this.currentOrder = [];
    }
    isContextManagerEnabled() {
        let columns = this.services.extensions.getColumns();
        return columns ? Object.keys(columns).some((column) => columns[column].context) : false;
    }
    _onContextManager(event) {
        if (this._contextMenuFired) {
            event.preventDefault();
        }
        UtilitiesDelay.clear(this._contextMenuQueueXref);
        this._contextMenuFired = false;
    }
    _onMouseDown(event) {
        if (event.button === MOUSE_BUTTON.RIGHT) {
            let eventTarget = event.target;
            this._contextMenuQueueXref = UtilitiesDelay.queue(() => {
                this.contextManager.setContent();
                this.contextManager.show(eventTarget);
                this._contextMenuFired = true;
            }, CTX_MENU_INTERVAL);
        }
    }
    live() {
        if (this.isContextManagerEnabled()) {
            this.element.addEventListener(modules_constants_EVENT.MOUSEDOWN, this.onMouseDownBind);
            this.element.addEventListener(modules_constants_EVENT.CONTEXT_MENU, this.onContextManagerBind);
        }
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.GROUP, this.onDoneDataGroup.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this.onAfterDataSort.bind(this));
        this.eventBus.join(eventsList_EVENTS.RESIZE.START, this.onResizeStart.bind(this));
        this.eventBus.join(eventsList_EVENTS.RESIZE.STOP, this.onResizeStop.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
header_header_decorate([
    permission_namespaceObject.sort,
    header_header_metadata("design:type", Function),
    header_header_metadata("design:paramtypes", []),
    header_header_metadata("design:returntype", void 0)
], header_LayoutHeader.prototype, "setSortClass", null);
//# sourceMappingURL=header.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/summary/summary.js
var summary_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class summary_LayoutSummary {
    constructor(eventBus, services, columnsDelegate) {
        this.eventBus = eventBus;
        this.services = services;
        this.columnsDelegate = columnsDelegate;
        this.aggregation = {};
        this.cells = {};
        this.prepare();
        this.live();
    }
    get() {
        return this.element;
    }
    prepare() {
        this.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.ROW, `${modules_constants_CLASS.ROW_LEVEL}-1`]);
        this.columnsDelegate().forEach((column) => this.addCell(column.id));
        this.setCurrentOrder();
    }
    setCurrentOrder() {
        this.currentOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
    }
    shouldBeCollapsed(column) {
        return !columns_UtilsColumns.isAbstractStatic(column.id)
            && this.services.extensions.getColumnById(column.id)
            && !column.visible;
    }
    setCellInitial(column) {
        let columnWidth = this.services.state.get().columns.width;
        if (columnWidth[column.id]) {
            this.cells[column.id].style.width = `${columnWidth[column.id].width}px`;
            this.cells[column.id].style.display = columnWidth[column.id].width ? 'inline-block' : 'none';
        }
        if (this.shouldBeCollapsed(column)) {
            this.cells[column.id].classList.add(modules_constants_CLASS.CELL_COLLAPSED);
        }
    }
    addCell(columnId, wrapper = this.element) {
        let column = this.services.columns.getColumnById(columnId, false);
        this.cells[columnId] = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL]);
        this.setCellInitial(column);
        if (column.type === modules_constants_TYPE.GROUP) {
            let flexWrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, ['cell-summary-wrapper']);
            column.columns.forEach((childColumn) => this.addCell(childColumn.id, flexWrapper));
            this.cells[columnId].appendChild(flexWrapper);
        }
        else if (this.aggregation[columnId]) {
            this.fillAggregation(columnId, this.aggregation[columnId]);
        }
        wrapper.appendChild(this.cells[columnId]);
    }
    removeCell(columnId) {
        this.element.removeChild(this.cells[columnId]);
        delete this.cells[columnId];
    }
    onChangeDataColumnsOrder() {
        return summary_awaiter(this, void 0, void 0, function* () {
            let newOrder = columns_UtilsColumns.getIdFromData(this.columnsDelegate());
            let diff = columns_UtilsColumns.diff(this.currentOrder, newOrder);
            yield UtilitiesArray.forEachAsync(diff.remove, (columnId) => summary_awaiter(this, void 0, void 0, function* () {
                this.removeCell(columnId);
            }));
            yield UtilitiesArray.forEachAsync(diff.add, (columnId) => summary_awaiter(this, void 0, void 0, function* () {
                this.addCell(columnId);
            }));
            if (diff.order) {
                columns_UtilsColumns.sort(newOrder, this.currentOrder, this.cells);
            }
            this.setCurrentOrder();
        });
    }
    fillAggregation(columnId, aggregation) {
        let aggregationEl = utilities_dom_UtilitiesDOM.create(VUIELEMENT.AGGREGATION);
        let wrapper = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, ['cell-summary-freeze', modules_constants_CLASS.CELL_PADDING]);
        let summaryState = this.services.state.get().summary;
        aggregationEl.init((element) => {
            this.services.animation.wrapAnimations(element, summaryState.animationType, { columnId }, () => summary_UtilsSummary.getOrderedAggregations(columnId, summaryState.state, aggregation));
        });
        aggregationEl.setAttribute('data', JSON.stringify({ aggregation }));
        this.cells[columnId].innerHTML = '';
        wrapper.appendChild(aggregationEl);
        this.cells[columnId].appendChild(wrapper);
    }
    onDoneDataAggregation(aggregation) {
        this.aggregation = aggregation;
        Object.keys(aggregation).forEach((columnId) => {
            if (this.cells[columnId]) {
                this.fillAggregation(columnId, this.aggregation[columnId]);
            }
        });
    }
    onDoneColumnWidth({ changed }) {
        Object.keys(changed).forEach((columnId) => {
            if (this.cells.hasOwnProperty(columnId)) {
                this.cells[columnId].style.width = this.services.sizeWidth.getWidthString(changed[columnId].width);
                this.cells[columnId].style.display =
                    this.services.columns.isVisibleById(columnId) ? 'inline-block' : 'none';
            }
        });
    }
    onChangeColumnCollapsed({ columnIds, collapsed }) {
        columnIds.forEach((columnId) => {
            if (!this.cells[columnId]) {
                return void 0;
            }
            this.cells[columnId].classList[collapsed ? 'add' : 'remove'](modules_constants_CLASS.CELL_COLLAPSED);
        });
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onDoneColumnWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.AGGREGATION, this.onDoneDataAggregation.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, this.onChangeColumnCollapsed.bind(this));
    }
}
//# sourceMappingURL=summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/size/size.height.js




class size_size_height_SizeHeight {
    constructor(eventBus, logger, grid, views, initialCoreHeight) {
        this.eventBus = eventBus;
        this.logger = logger;
        this.grid = grid;
        this.views = views;
        this.initialCoreHeight = initialCoreHeight;
        this.gridHeight = 0;
        this.current = 0;
        this.contentHeightMin = 0;
        this.prepare();
        this.compute();
        this.live();
    }
    prepare() {
        let attributeGridHeight = parseInt(this.grid.getAttribute(PROPERTIES.HEIGHT), 10);
        if (!isNaN(attributeGridHeight)) {
            this.setGridHeight(attributeGridHeight);
        }
        else if (this.initialCoreHeight) {
            this.setGridHeight(Math.min(window.innerHeight, this.initialCoreHeight + this.getViewElementsHeight()));
        }
        else {
            this.setGridHeight(window.innerHeight * .8);
        }
        let values = this.getSafeHeights();
        this.setCoreHeight(values.core);
        this.setGridHeight(values.grid);
    }
    compute() {
        this.contentHeightMin = parseInt(window.getComputedStyle(this.views.coreHost)
            .getPropertyValue(PROPERTIES.MIN_HEIGHT), 10) || 0;
    }
    getSafeHeights(coreHeader = 0) {
        let core = this.gridHeight - this.getViewElementsHeight();
        let content = core - coreHeader;
        let diff = content - Math.max(this.contentHeightMin, content);
        return {
            grid: this.gridHeight - diff,
            content: content - diff,
            core: core - diff
        };
    }
    get() {
        return this.current;
    }
    setCoreHeight(coreHeight) {
        if (this.current !== coreHeight) {
            this.current = coreHeight;
            this.views.core.style.height = `${coreHeight}px`;
            this.views.coreHost.style.height = `${coreHeight}px`;
            UtilitiesDelay.queue(() => this.eventBus.fire(eventsList_EVENTS.CHANGE.LAYOUT.HEIGHT));
        }
    }
    getViewHeight(view) {
        return this.views[view] ?
            (new dimension_Dimension(this.views[view], { display: PROPERTIES.BLOCK })).getHeight() : 0;
    }
    getViewElementsHeight() {
        return this.getViewHeight(GRID_ELEMENTS.HEADER) + this.getViewHeight(GRID_ELEMENTS.FOOTER);
    }
    setGridHeight(gridHeight) {
        if (gridHeight !== this.gridHeight) {
            this.gridHeight = gridHeight;
            this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEIGHT, { height: gridHeight });
        }
    }
    onChangeAttributes({ name, newValue }) {
        switch (name) {
            case PROPERTIES.HEIGHT:
                this.setGridHeight(parseInt(newValue, 10));
                break;
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.ATTRIBUTES, this.onChangeAttributes.bind(this));
    }
}
//# sourceMappingURL=size.height.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/size/size.width.column.js
var size_width_column_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var size_width_column_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var size_width_column_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class size_width_column_SizeWidthColumn {
    constructor(eventBus, data, services, views) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.views = views;
        this.cache = {};
        this.sampleNormalRows = [];
        this.sampleGroupRows = [];
        this.sampleRange = {};
        this.columnExtendCompute = {};
        this.async();
    }
    async() {
        this.prepare().then(() => size_width_column_awaiter(this, void 0, void 0, function* () {
            yield this.compute();
            this.live();
        }));
    }
    createSampleRows(start, end) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let promises = [];
            this.sampleNormalRows = [];
            this.sampleGroupRows = [];
            for (let i = start; i < end; i++) {
                promises.push(this.data.get(i));
            }
            return Promise.all(promises).then((rowsDescriptors) => rowsDescriptors.forEach((rowDescriptor) => {
                if (this.services.row.isNormalRow(rowDescriptor)) {
                    this.sampleNormalRows.push(this.services.rowCache.wrapNormal(rowDescriptor));
                }
                else if (this.services.row.isNormalRow(rowDescriptor)) {
                    this.sampleGroupRows.push(this.services.rowCache.wrapSpecial(rowDescriptor));
                }
            }));
        });
    }
    prepare() {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let dataLength = yield this.data.getLength();
            let columnExtentions = this.services.extensions.getColumns();
            Object.keys(columnExtentions).forEach((columnId) => {
                if (!columnExtentions[columnId].widthCompute) {
                    return void 0;
                }
                this.columnExtendCompute[columnId] = columnExtentions[columnId].widthCompute === 'all';
            });
            yield this.createSampleRows(0, Math.min(dataLength, this.services.state.page.itemPerPage));
        });
    }
    compute() {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let columns = this.services.columns.getAll();
            yield this.computeStyle(columns[columns.length - 1]);
        });
    }
    getValueFromObject(value) {
        return value.text || value.value || JSON.stringify(value);
    }
    getValueFromRowWrapped(rowWrapped, columnId) {
        let value = rowWrapped.getDataRow()[columnId];
        switch (true) {
            case Array.isArray(value):
                value = value[0] || '';
                break;
            case value === null:
                value = '';
                break;
            case typeof value === 'object':
                value = this.getValueFromObject(value);
                break;
        }
        return value;
    }
    getRowByLongestCell(sampleRows, column) {
        let longestWidth = 0;
        let longestRow = void 0;
        sampleRows
            .filter((rowWrapped) => !this.services.row.isDisabled(rowWrapped.getId()))
            .forEach((rowWrapped) => {
            let value = this.getValueFromRowWrapped(rowWrapped, column.id);
            let width = size_width_column_SizeWidthColumn.text.measure(value);
            if (width > longestWidth) {
                longestWidth = width;
                longestRow = rowWrapped;
            }
        });
        return longestRow;
    }
    getNormalRowByLongestCell(column) {
        return this.getRowByLongestCell(this.sampleNormalRows, column);
    }
    getGroupRowByLongestCell(column) {
        return this.getRowByLongestCell(this.sampleGroupRows, column);
    }
    getViewCell(column) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let params = { measure: true };
            let sampleRow;
            if (column.id === STATIC_CLASS.ROW_GROUP) {
                sampleRow = this.getGroupRowByLongestCell(column) || (yield this.getSampleGroupRow());
                params.subColumn = this.services.columns.getColumnById(sampleRow.getGroupDataRow().columnId);
            }
            else {
                sampleRow = this.getNormalRowByLongestCell(column) || (yield this.getSampleNormalRow());
            }
            let cell = new (cell_types_namespaceObject[column.type] || types_text_Text)(this.eventBus, this.services, sampleRow, column, params);
            yield cell.waitForRender();
            return cell.get();
        });
    }
    computeStyle(column) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let cell = yield this.getViewCell(column);
            utilities_dom_UtilitiesDOM.addClass(cell, [modules_constants_CLASS.CELL_MEASURE]);
            utilities_dom_UtilitiesDOM.addClass(cell, [modules_constants_CLASS.CELL]);
            this.views.coreHost.appendChild(cell);
            let cellComputedStyle = window.getComputedStyle(cell);
            this.font = {
                size: cellComputedStyle.getPropertyValue('font-size'),
                family: cellComputedStyle.getPropertyValue('font-family'),
                padding: {
                    left: parseInt(cellComputedStyle.paddingLeft, 10) || 0,
                    right: parseInt(cellComputedStyle.paddingRight, 10) || 0
                },
                border: {
                    left: parseInt(cellComputedStyle.getPropertyValue('border-left-width'), 10),
                    right: parseInt(cellComputedStyle.getPropertyValue('border-right-width'), 10)
                }
            };
            size_width_column_SizeWidthColumn.text.setFont(this.font.size, this.font.family);
            this.views.coreHost.removeChild(cell);
        });
    }
    computeHeaderCell(column) {
        let headerWrapper = this.views.coreHost.querySelector(`.${modules_constants_CLASS.HEADER_WRAPPER} .${modules_constants_CLASS.ROW}`);
        let width = 0;
        if (!headerWrapper) {
            console.warn(`Cannot find header row wrapper`);
            return width;
        }
        let headerCell = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.CELL]);
        headerCell.innerText = column.label;
        headerCell.style.display = 'inline-block';
        headerWrapper.appendChild(headerCell);
        width = headerCell.offsetWidth;
        headerWrapper.removeChild(headerCell);
        return width;
    }
    computeSingle(column) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let cell = yield this.getViewCell(column);
            cell.style.display = 'inline-block';
            this.views.coreHost.appendChild(cell);
            let compareValues = [SIZE.CELL_MIN_WIDTH, cell.offsetWidth];
            if (!columns_UtilsColumns.isAbstractStatic(column.id) && this.columnExtendCompute[column.id]) {
                compareValues.push(this.computeHeaderCell(column));
            }
            if (column.id !== STATIC_CLASS.ROW_GROUP) {
                this.views.coreHost.removeChild(cell);
            }
            this.cache[column.id] = Math.max(...compareValues);
            return this.cache[column.id];
        });
    }
    computeGroup(column) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let extension = this.services.extensions.getColumnById(column.id);
            let width = 0;
            if (!this.services.columns.isVisibleById(column.id)) {
                return width;
            }
            if (UtilsObject.getPropertyValue('group.position', extension) === modules_constants_POSITION.HORIZONTAL) {
                yield UtilitiesArray.forEachAsync(column.columns, (column) => size_width_column_awaiter(this, void 0, void 0, function* () {
                    width = Math.max(width, (yield this.get(column)).width, 0);
                }));
            }
            else {
                yield UtilitiesArray.forEachAsync(column.columns, (column) => size_width_column_awaiter(this, void 0, void 0, function* () {
                    width += (yield this.get(column)).width;
                }));
            }
            return width;
        });
    }
    clearCache() {
        this.cache = {};
        this.sampleRange = {};
        this.sampleNormalRow = undefined;
        this.sampleGroupRow = undefined;
    }
    getWidth(column) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            if (this.cache[column.id] !== undefined) {
                return this.cache[column.id];
            }
            return column.type === modules_constants_TYPE.GROUP ?
                yield this.computeGroup(column) :
                yield this.computeSingle(column);
        });
    }
    getFontPadding(rootColumn) {
        if (rootColumn && this.font) {
            return this.font.padding.left + this.font.padding.right + this.font.border.left + this.font.border.right;
        }
        return 0;
    }
    get(column, params) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            params = Object.assign({ rootColumn: true, force: false, extendCompute: false }, params);
            if ((params.rootColumn && !this.services.columns.isVisibleById(column.id)) && !params.force) {
                return { width: 0, auto: true };
            }
            if (params.toggleExtend) {
                this.columnExtendCompute[column.id] = !this.columnExtendCompute[column.id];
            }
            let width = yield this.getWidth(column);
            width += this.getFontPadding(params.rootColumn);
            return { width, auto: true };
        });
    }
    getColumnsWidths(columns) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let sizeColumns = {};
            let columnWidth = this.services.state.get().columns.width;
            yield UtilitiesArray.forEachAsync(columns, (column) => size_width_column_awaiter(this, void 0, void 0, function* () {
                if (columnWidth[column.id]
                    && columnWidth[column.id].auto === false
                    && this.services.columns.isVisibleById(column.id)) {
                    sizeColumns[column.id] = columnWidth[column.id];
                }
                else {
                    sizeColumns[column.id] = yield this.get(column);
                }
            }));
            return sizeColumns;
        });
    }
    getHeaderRow() {
        let dataRow = {};
        this.services.columns.getAllFlat().forEach((column) => {
            dataRow[column.id] = column.label;
        });
        return this.services.rowCache.wrapNormal({
            id: 'header-row',
            type: constants_VIEW.ROW.TYPE.NORMAL,
            data: dataRow
        });
    }
    getTypeHandlers(type) {
        switch (type) {
            case constants_VIEW.ROW.TYPE.GROUP:
                return {
                    is: this.services.row.isGroupRow.bind(this.services.row),
                    wrap: this.services.rowCache.wrapSpecial.bind(this.services.rowCache)
                };
            case constants_VIEW.ROW.TYPE.NORMAL:
            default:
                return {
                    is: this.services.row.isNormalRow.bind(this.services.row),
                    wrap: this.services.rowCache.wrapNormal.bind(this.services.rowCache)
                };
        }
    }
    getSampleRow(type) {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let handlers = this.getTypeHandlers(type);
            let dataIndex = 0;
            let dataLength = yield this.data.getLength();
            let row;
            do {
                if (dataIndex >= dataLength) {
                    console.warn(`Cannot find any row of type '${type}'. Force to use header cells`);
                    row = this.getHeaderRow();
                    break;
                }
                let rowDescriptor = yield this.data.get(dataIndex++);
                if (handlers.is(rowDescriptor)) {
                    row = handlers.wrap(rowDescriptor);
                }
            } while (!row);
            return row;
        });
    }
    getSampleNormalRow() {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            if (this.sampleNormalRow) {
                return this.sampleNormalRow;
            }
            this.sampleNormalRow = yield this.getSampleRow(constants_VIEW.ROW.TYPE.NORMAL);
            return this.sampleNormalRow;
        });
    }
    getSampleGroupRow() {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            if (this.sampleGroupRow) {
                return this.sampleGroupRow;
            }
            this.sampleGroupRow = yield this.getSampleRow(constants_VIEW.ROW.TYPE.GROUP);
            return this.sampleGroupRow;
        });
    }
    refreshSample() {
        return size_width_column_awaiter(this, void 0, void 0, function* () {
            let currentIndex = this.services.view.getViewPosition(LAYOUT.MODE.CONTENT).current;
            let start = Math.max(0, currentIndex + this.services.view.getViewRange().from);
            let end = Math.min(currentIndex + this.services.view.getViewRange().to, (yield this.data.getLength()));
            if (this.sampleRange.start === start && this.sampleRange.end === end) {
                return void 0;
            }
            yield this.createSampleRows(start, end);
            this.clearCache();
        });
    }
    destroy() {
        this.sampleNormalRow = undefined;
        this.sampleNormalRows = [];
        this.sampleGroupRow = undefined;
        this.sampleGroupRows = [];
        this.sampleRange = {};
    }
    onChangeData() {
        this.clearCache();
    }
    onResizeStop({ columnId, values }) {
        if (values.width !== null) {
            this.cache[columnId] = values.width;
        }
        else {
            delete this.cache[columnId];
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.RESIZE.STOP, this.onResizeStop.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SEARCH, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.FILTER, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
size_width_column_SizeWidthColumn.text = new utilities_text_Text();
size_width_column_decorate([
    measure(),
    size_width_column_metadata("design:type", Function),
    size_width_column_metadata("design:paramtypes", [Object]),
    size_width_column_metadata("design:returntype", Promise)
], size_width_column_SizeWidthColumn.prototype, "computeSingle", null);
//# sourceMappingURL=size.width.column.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/size/size.width.js
var size_width_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class size_size_width_SizeWidth {
    constructor(eventBus, data, services, layout, grid, views) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.layout = layout;
        this.grid = grid;
        this.views = views;
        this.current = 0;
        this.gridWidth = 0;
        this.elements = {};
        this.computeAllBind = UtilitiesDelay.debounce(this.computeAll.bind(this), 100);
        this.fixDifferencesDebounce = UtilitiesDelay.debounce(this.fixDifferences.bind(this), 100);
        this.prepare();
        this.compute();
        this.live();
    }
    getElements() {
        return this.elements;
    }
    get() {
        return this.current;
    }
    set(value) {
        this.current = value;
    }
    publishColumnChanges(currentWidths, newWidths) {
        Object.keys(newWidths).forEach((columnId) => {
            let currentColumn = currentWidths[columnId] || {};
            if (newWidths[columnId].width !== currentColumn.width || newWidths[columnId].auto !== currentColumn.auto) {
                this.eventBus.fire(eventsList_EVENTS.COMMIT.COLUMN.WIDTH, Object.assign({ columnId }, newWidths[columnId]));
            }
        });
    }
    publishLayoutChanges(currentWidths, newWidths) {
        Object.keys(newWidths).forEach((columnId) => {
            if (newWidths[columnId] !== currentWidths[columnId]) {
                this.eventBus.fire(eventsList_EVENTS.CHANGE.CONTENT.WIDTH, { key: columnId, width: newWidths[columnId] });
            }
        });
    }
    getInnerWidth(element) {
        if (!(element instanceof HTMLElement)) {
            console.warn(`element is not HTMLElement`);
            return 0;
        }
        let computedStyle = window.getComputedStyle(element);
        return parseFloat(computedStyle.width)
            - parseFloat(computedStyle.paddingLeft)
            - parseFloat(computedStyle.paddingRight);
    }
    setGridWidth(width) {
        if (isNaN(width)) {
            width = this.getInnerWidth(this.grid.parentElement);
        }
        if (width !== this.gridWidth) {
            this.gridWidth = width;
            if (this.getInnerWidth(this.grid.parentElement) !== width) {
                this.grid.style.width = `${width}px`;
            }
            else {
                this.grid.style.width = ``;
            }
            this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.WIDTH, { width });
            this.computeAllBind();
        }
    }
    prepare() {
        this.widthColumn = new size_width_column_SizeWidthColumn(this.eventBus, this.data, this.services, this.views);
    }
    computeColumns() {
        return size_width_awaiter(this, void 0, void 0, function* () {
            let columns = this.services.columns.getAll();
            let sizeColumns = Object.assign({}, this.services.sizeWidth.getColumns(), yield this.widthColumn.getColumnsWidths(columns));
            this.publishColumnChanges(this.services.sizeWidth.getColumns(), sizeColumns);
        });
    }
    getByColumnId(columnId) {
        return size_width_awaiter(this, void 0, void 0, function* () {
            if (this.services.sizeWidth.getColumnWidth(columnId) !== undefined) {
                return this.services.sizeWidth.getColumnWidth(columnId);
            }
            return (yield this.widthColumn.get(this.services.columns.getColumnById(columnId))).width;
        });
    }
    getFullWidth() {
        return this.services.sizeWidth.getAllColumnsWidth() + this.services.sizeWidth.getContentDiff();
    }
    reduceElements(elements) {
        let reducedElements = Object.assign({}, elements);
        if (!this.services.state.get().freeze.enabled) {
            delete reducedElements[modules_constants_CLASS.FREEZE_ROW];
            delete reducedElements[modules_constants_CLASS.FREEZE_ROW_FREEZE_COLUMN];
        }
        if (!this.services.state.get().summary.enabled) {
            delete reducedElements[modules_constants_CLASS.SUMMARY];
            delete reducedElements[modules_constants_CLASS.SUMMARY_FREEZE_COLUMN];
        }
        return reducedElements;
    }
    computeElements() {
        let pinnedWidth = 0;
        let contentWidth = this.getFullWidth();
        let elements = Object.assign({}, this.elements);
        if (this.services.state.columns.freeze.enabled) {
            pinnedWidth = this.services.sizeWidth.getFreezeColumnsWidth() - this.services.sizeWidth.getFreezeDiff();
            elements[modules_constants_CLASS.FREEZE_COLUMN] = pinnedWidth;
            elements[modules_constants_CLASS.HEADER_FREEZE] = pinnedWidth;
            elements[modules_constants_CLASS.FREEZE_ROW_FREEZE_COLUMN] = pinnedWidth;
            elements[modules_constants_CLASS.SUMMARY_FREEZE_COLUMN] = pinnedWidth;
            contentWidth -= pinnedWidth;
        }
        elements[modules_constants_CLASS.CONTENT] = contentWidth;
        elements[modules_constants_CLASS.HEADER] = contentWidth;
        elements[modules_constants_CLASS.FREEZE_ROW] = contentWidth;
        elements[modules_constants_CLASS.SUMMARY] = contentWidth;
        elements = this.reduceElements(elements);
        this.publishLayoutChanges(this.elements, elements);
        this.elements = elements;
    }
    getStreatchableColumnIds(columnsDelegate = this.services.columns.getContent.bind(this.services.columns)) {
        return columnsDelegate()
            .filter((column) => {
            let stateColumn = this.services.state.get().columns.width[column.id] || {};
            return column.visible
                && !columns_UtilsColumns.isAbstract(column)
                && stateColumn.auto !== false;
        })
            .map((column) => column.id);
    }
    fixContentDiff() {
        return size_width_awaiter(this, void 0, void 0, function* () {
            let streatchableContentColumnIds = this.getStreatchableColumnIds();
            if (!streatchableContentColumnIds.length) {
                console.warn('No streachable content column available. Force to adjust last column(s)');
                return this.fixLastColumn();
            }
            let extraWidth = this.services.sizeWidth.getContentDiff() / streatchableContentColumnIds.length;
            let columns = Object.assign({}, this.services.sizeWidth.getColumns());
            yield UtilitiesArray.forEachAsync(streatchableContentColumnIds, (columnId) => size_width_awaiter(this, void 0, void 0, function* () {
                columns[columnId] = {
                    width: (yield this.getByColumnId(columnId)) + extraWidth,
                    auto: true
                };
            }));
            this.publishColumnChanges(this.services.sizeWidth.getColumns(), columns);
        });
    }
    fixFreezeDiff() {
        return size_width_awaiter(this, void 0, void 0, function* () {
            let streatchableFreezeColumnIds = this.getStreatchableColumnIds(this.services.columns.getFreeze.bind(this.services.columns));
            let freezeDiff = this.services.sizeWidth.getFreezeDiff();
            let columns = Object.assign({}, this.services.sizeWidth.getColumns());
            streatchableFreezeColumnIds.reverse();
            yield UtilitiesArray.forEachAsync(streatchableFreezeColumnIds, (columnId) => size_width_awaiter(this, void 0, void 0, function* () {
                if (freezeDiff > 0) {
                    let columnWidth = yield this.getByColumnId(columnId);
                    let width = Math.max(SIZE.CELL_MIN_WIDTH, columnWidth - freezeDiff);
                    freezeDiff -= columnWidth - width;
                    columns[columnId] = { width, auto: true };
                }
            }));
            if (freezeDiff !== 0) {
                return this.fixLastColumn(this.services.columns.getFreezeColumnIds.bind(this.services.columns), this.services.sizeWidth.getFreezeDiff.bind(this.services.sizeWidth, true));
            }
            this.publishColumnChanges(this.services.sizeWidth.getColumns(), columns);
        });
    }
    fixLastColumn(columnsDelegate = this.services.columns.getContentColumnIds.bind(this.services.columns), diffDelegate = this.services.sizeWidth.getContentDiff.bind(this.services.sizeWidth), lastColumnId = columnsDelegate().slice().pop()) {
        let columns = this.services.sizeWidth.getColumns();
        if (!columns[lastColumnId]) {
            console.warn('Cannot find last column');
            return void 0;
        }
        let width = columns[lastColumnId].width + diffDelegate();
        this.publishColumnChanges(this.services.sizeWidth.getColumns(), {
            [lastColumnId]: {
                width: Math.max(width, SIZE.CELL_MIN_WIDTH),
                auto: true
            }
        });
        if (width < SIZE.CELL_MIN_WIDTH) {
            console.warn('More space needed. Force to resize column previous');
            let previousColumnIndex = columnsDelegate().indexOf(lastColumnId) - 1;
            if (previousColumnIndex >= 0) {
                this.fixLastColumn(columnsDelegate, diffDelegate, columnsDelegate()[previousColumnIndex]);
            }
            else {
                console.warn('No previous column available ;-(');
            }
        }
    }
    fixDifferences(fixContentDiff = this.fixContentDiff.bind(this)) {
        if (this.services.sizeWidth.getFreezeDiff()) {
            this.fixFreezeDiff();
        }
        if (this.services.sizeWidth.getContentDiff()) {
            fixContentDiff();
        }
    }
    compute() {
        let gridWidth = parseInt(this.grid.getAttribute(PROPERTIES.WIDTH), 10);
        if (isNaN(gridWidth)) {
            gridWidth = (new dimension_Dimension(this.grid, { display: PROPERTIES.BLOCK })).getWidth();
        }
        this.setGridWidth(gridWidth);
        this.current = this.gridWidth;
        this.computeAllBind();
    }
    getOptimalColumnWidth(columnId) {
        return size_width_awaiter(this, void 0, void 0, function* () {
            yield this.widthColumn.refreshSample();
            let cellWidth = yield this.widthColumn.get(this.services.columns.getColumnById(columnId), { toggleExtend: true });
            return cellWidth.width;
        });
    }
    isFullSize(columnId) {
        let size = this.services.sizeWidth.getColumns();
        let columnsSum = Object.keys(size).reduce((acc, columnId) => acc + size[columnId].width, 0);
        return columnsSum === size[columnId].width;
    }
    onResizeStop({ columnId, values }) {
        return size_width_awaiter(this, void 0, void 0, function* () {
            if (!columnId || this.isFullSize(columnId)) {
                return void 0;
            }
            let columns = Object.assign({}, this.services.sizeWidth.getColumns());
            let width;
            if (values && values.width) {
                width = values.width;
            }
            else {
                width = yield this.getOptimalColumnWidth(columnId);
            }
            columns[columnId] = { width, auto: false };
            this.publishColumnChanges(this.services.sizeWidth.getColumns(), columns);
            this.services.sizeWidth.clearScrollCache();
            this.computeElements();
            this.fixDifferences(this.fixLastColumn.bind(this));
            this.eventBus.fire(eventsList_EVENTS.AFTER.COLUMNS.WIDTH, {
                left: values.left,
                width: columns[columnId]
            });
        });
    }
    isVisibleChanged({ newState, currentState }) {
        return Object.keys(currentState.columns.collection).some((columnId) => {
            let column_1 = currentState.columns.collection[columnId] || {};
            let column_2 = newState.columns.collection[columnId] || {};
            return column_1.visible !== column_2.visible;
        });
    }
    computeAll() {
        return this.computeColumns().then(() => size_width_awaiter(this, void 0, void 0, function* () {
            this.computeElements();
            this.fixDifferencesDebounce();
        }));
    }
    onChangeDataColumnsCollection(params) {
        if (this.isVisibleChanged(params)) {
            this.computeAllBind();
        }
    }
    computeColumn(columnId) {
        return size_width_awaiter(this, void 0, void 0, function* () {
            let sizeColumns = Object.assign({}, this.services.sizeWidth.getColumns());
            sizeColumns[columnId] = { width: yield this.getOptimalColumnWidth(columnId), auto: true };
            this.publishColumnChanges(this.services.sizeWidth.getColumns(), sizeColumns);
        });
    }
    onChangeDataColumnCollapsed({ columnId }) {
        this.computeColumn(columnId).then(() => {
            this.computeElements();
            this.fixDifferencesDebounce();
        });
    }
    onChangeStateLoad() {
        Object.keys(this.services.state.columns.collection).forEach((columnId) => {
            let column = this.services.state.columns.collection[columnId];
            this.onResizeStop({ columnId, values: { width: column.width } });
        });
    }
    onChangeAttributes({ name, newValue }) {
        switch (name) {
            case PROPERTIES.WIDTH:
                this.setGridWidth(parseInt(newValue, 10));
                break;
        }
    }
    onChangeDataColumnsOrder() {
        this.services.sizeWidth.clearCache();
        this.services.sizeWidth.clearScrollCache();
        this.computeElements();
        this.fixDifferencesDebounce();
    }
    onChangeScrollVertical() {
        this.fixDifferencesDebounce();
    }
    onChangeDataEditEnabled() {
        this.computeAllBind();
    }
    onDoneColumnWidth() {
        this.services.sizeWidth.setColumns(this.services.state.get().columns.width);
        this.fixDifferencesDebounce();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.SCROLL.VERTICAL, this.onChangeScrollVertical.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.ATTRIBUTES, this.onChangeAttributes.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollection.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, this.onChangeDataColumnCollapsed.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.EDIT.ENABLED, this.onChangeDataEditEnabled.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onDoneColumnWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.STATE.LOAD, this.onChangeStateLoad.bind(this));
        this.eventBus.join(eventsList_EVENTS.RESIZE.STOP, this.onResizeStop.bind(this));
    }
}
//# sourceMappingURL=size.width.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/styles.js
var styles_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var styles_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var styles_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class styles_Styles {
    constructor(eventBus, data, services, grid, views, layout, content) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.grid = grid;
        this.views = views;
        this.layout = layout;
        this.content = content;
        this.freezeStateCache = [];
        this.isVerticalScroll = false;
        this.isHorizontalScroll = false;
        this.scrollSize = 0;
        this.async();
    }
    getWidth() {
        return this.width.get();
    }
    getHeight() {
        return this.height.get();
    }
    async() {
        this.prepare().then(() => {
            this.compute();
            this.live();
        });
    }
    prepare() {
        return styles_awaiter(this, void 0, void 0, function* () {
            let coreHeight = yield this.getCoreHeight();
            this.freezeStateCache = this.services.columns.getFreezeColumnIds().slice();
            this.height = new size_size_height_SizeHeight(this.eventBus, this.services.logger, this.grid, this.views, coreHeight);
            this.width = new size_size_width_SizeWidth(this.eventBus, this.data, this.services, this.layout, this.grid, this.views);
            this.scrollSize = scroll_UtilsScroll.computeSize(this.views.coreHost);
        });
    }
    getHeaderHeight() {
        return this.layout.getElement(modules_constants_CLASS.HEADER).clientHeight;
    }
    getCoreHeight() {
        return styles_awaiter(this, void 0, void 0, function* () {
            let contentHeight = yield this.content.getHeight();
            return contentHeight + this.getHeaderHeight();
        });
    }
    getFreezeHeight() {
        return this.services.state.get().freeze.state.length * this.services.sizeHeight.getRowHeight();
    }
    getSummaryHeight() {
        return this.layout.getElement(modules_constants_CLASS.SUMMARY_SCROLL_Y).clientHeight;
    }
    computeScrollXBottom() {
        this.layout.getElement(modules_constants_CLASS.SCROLL_Y).style.bottom
            = `${(this.isHorizontalScroll ? this.scrollSize : 0) + (this.getSummaryHeight() || 0)}px`;
    }
    computeHeight() {
        return styles_awaiter(this, void 0, void 0, function* () {
            let contentHeight = yield this.content.getHeight();
            let headerHeight = this.getHeaderHeight();
            let heights = this.height.getSafeHeights(headerHeight);
            this.layout.getElement(modules_constants_CLASS.SCROLL_X).style.height = `${contentHeight}px`;
            this.layout.getElement(modules_constants_CLASS.CONTENT).style.height = `${contentHeight}px`;
            if (this.services.state.columns.freeze.enabled) {
                this.layout.getElement(modules_constants_CLASS.FREEZE_COLUMN).style.height = `${contentHeight}px`;
            }
            this.height.setCoreHeight(heights.core);
        });
    }
    computeFreezeTop() {
        this.layout.getElement(modules_constants_CLASS.FREEZE_SCROLL_Y).style.top = `${this.getHeaderHeight()}px`;
    }
    computeRight() {
        this.computeHeaderRight();
        this.computeFreezeRight();
        this.computeSummaryRight();
    }
    computeHeaderRight() {
        this.layout.getElement(modules_constants_CLASS.HEADER_SCROLL_Y).style.marginRight =
            this.isVerticalScroll ? `${this.scrollSize}px` : '';
    }
    computeFreezeRight() {
        this.layout.getElement(modules_constants_CLASS.FREEZE_SCROLL_Y).style.marginRight =
            this.isVerticalScroll ? `${this.scrollSize}px` : '';
    }
    computeSummaryRight() {
        this.layout.getElement(modules_constants_CLASS.SUMMARY_SCROLL_Y).style.marginRight =
            this.isVerticalScroll ? `${this.scrollSize}px` : '';
    }
    computeTop() {
        this.computeFreezeTop();
        this.layout.getElement(modules_constants_CLASS.SCROLL_Y).style.top =
            `${this.getHeaderHeight() + (this.getFreezeHeight() || 0)}px`;
    }
    computeSummaryBottom() {
        this.layout.getElement(modules_constants_CLASS.SUMMARY_SCROLL_Y).style.bottom =
            this.isHorizontalScroll ? `${this.scrollSize}px` : '';
    }
    computeBottom() {
        this.computeSummaryBottom();
        this.computeScrollXBottom();
    }
    computeScrolls() {
        return styles_awaiter(this, void 0, void 0, function* () {
            let isHorizontalScroll = this.isHorizontalScroll;
            let isVerticalScroll = this.isVerticalScroll;
            yield this.computeScrollsPass();
            if (isHorizontalScroll !== this.isHorizontalScroll) {
                this.eventBus.fire(eventsList_EVENTS.CHANGE.SCROLL.HORIZONTAL, {
                    visible: this.isHorizontalScroll,
                    size: this.scrollSize
                });
            }
            if (isVerticalScroll !== this.isVerticalScroll) {
                this.eventBus.fire(eventsList_EVENTS.CHANGE.SCROLL.VERTICAL, {
                    visible: this.isVerticalScroll,
                    size: this.scrollSize
                });
                this.computeWidth();
            }
            this.computeTop();
            this.computeRight();
            this.computeBottom();
        });
    }
    getScrollYHeight() {
        return this.height.get()
            - this.getHeaderHeight()
            - (this.getFreezeHeight() || 0)
            - (this.isHorizontalScroll ? this.scrollSize : 0)
            - (this.getSummaryHeight() || 0);
    }
    /* tslint:disable-next-line:cyclomatic-complexity */
    computeScrollsPass(pass = 1) {
        return styles_awaiter(this, void 0, void 0, function* () {
            let recompute = false;
            if (this.isHorizontalScroll !== (this.width.getFullWidth() + (this.isVerticalScroll ? this.scrollSize : 0)) >
                this.width.get()) {
                this.isHorizontalScroll = !this.isHorizontalScroll;
            }
            if (this.isVerticalScroll !== (yield this.content.getHeight()) > this.getScrollYHeight()) {
                this.isVerticalScroll = !this.isVerticalScroll;
                recompute = true;
            }
            if (recompute && pass < 10) {
                yield this.computeScrollsPass.bind(this, pass + 1);
            }
            else if (recompute) {
                console.log(`Infinite loop detected. Forcing scroll placeholders`);
                this.isHorizontalScroll = true;
                this.isVerticalScroll = true;
            }
        });
    }
    compute() {
        this.computeRight();
        this.computeTop();
        this.computeBottom();
    }
    onChangeDataColumnsOrder() {
        return styles_awaiter(this, void 0, void 0, function* () {
            if (this.services.columns.isFreezeChanged(this.freezeStateCache)) {
                this.freezeStateCache = this.services.columns.getFreezeColumnIds().slice();
                yield this.computeCore();
            }
        });
    }
    onChangeSizeHeight() {
        return styles_awaiter(this, void 0, void 0, function* () {
            this.services.sizeWidth.clearScrollCache();
            yield this.computeCore();
        });
    }
    onDoneDataGroup() {
        this.onChangeSizeHeight();
    }
    onAfterData() {
        this.onChangeSizeHeight();
    }
    onAfterRowAdd() {
        this.onChangeSizeHeight();
    }
    onApiViewReload() {
        this.onChangeSizeHeight();
    }
    computeWidth(width = this.width.getFullWidth()) {
        this.layout.getElement(modules_constants_CLASS.CONTENT).style.width = `${width}px`;
    }
    computeCore(secondPass = false) {
        return styles_awaiter(this, void 0, void 0, function* () {
            let height = this.height.get();
            yield this.computeScrolls();
            yield this.computeHeight();
            if (!secondPass && height !== this.height.get()) {
                yield this.computeCore(true);
                return void 0;
            }
        });
    }
    onChangeContentWidth({ key, width }) {
        return styles_awaiter(this, void 0, void 0, function* () {
            if (key === modules_constants_CLASS.CONTENT) {
                yield this.computeCore();
                this.computeWidth(width);
            }
            else if (key === modules_constants_CLASS.FREEZE_COLUMN) {
                this.computeScrolls();
                this.layout.getElement(modules_constants_CLASS.FREEZE_COLUMN).style.width = `${width}px`;
            }
            else if (this.layout.getElement(key)) {
                this.layout.getElement(key).style.width = `${width}px`;
            }
            else {
                console.warn(`Cannot find '${key}' element`);
            }
        });
    }
    onViewRowsVisible() {
        return styles_awaiter(this, void 0, void 0, function* () {
            yield this.computeHeight();
        });
    }
    onClearCache() {
        this.freezeStateCache = [];
    }
    onChangeViewRowHeight() {
        this.onChangeSizeHeight();
        this.computeTop();
    }
    onDoneRowFreeze() {
        this.onChangeSizeHeight();
        this.computeTop();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEIGHT, this.onChangeSizeHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER, this.onChangeSizeHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.FOOTER, this.onChangeSizeHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onChangeDataColumnsOrder.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA, this.onAfterData.bind(this));
        this.eventBus.join(eventsList_EVENTS.API.VIEW.RELOAD, this.onApiViewReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.CONTENT.WIDTH, this.onChangeContentWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, this.onViewRowsVisible.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.GROUP, this.onDoneDataGroup.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.FREEZE, this.onDoneRowFreeze.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.ROW.ADD, this.onAfterRowAdd.bind(this));
    }
}
styles_decorate([
    measure(),
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", Promise)
], styles_Styles.prototype, "prepare", null);
styles_decorate([
    permission_namespaceObject.freezeRows,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", Number)
], styles_Styles.prototype, "getFreezeHeight", null);
styles_decorate([
    permission_namespaceObject.summary,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", Number)
], styles_Styles.prototype, "getSummaryHeight", null);
styles_decorate([
    measure(),
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", Promise)
], styles_Styles.prototype, "computeHeight", null);
styles_decorate([
    permission_namespaceObject.freezeRows,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", void 0)
], styles_Styles.prototype, "computeFreezeTop", null);
styles_decorate([
    permission_namespaceObject.freezeRows,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", void 0)
], styles_Styles.prototype, "computeFreezeRight", null);
styles_decorate([
    permission_namespaceObject.summary,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", void 0)
], styles_Styles.prototype, "computeSummaryRight", null);
styles_decorate([
    permission_namespaceObject.summary,
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", void 0)
], styles_Styles.prototype, "computeSummaryBottom", null);
styles_decorate([
    measure(),
    styles_metadata("design:type", Function),
    styles_metadata("design:paramtypes", []),
    styles_metadata("design:returntype", void 0)
], styles_Styles.prototype, "compute", null);
//# sourceMappingURL=styles.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/scrollV.js
var scrollV_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var scrollV_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class scrollV_ScrollV {
    constructor(eventBus, services, layout, views) {
        this.eventBus = eventBus;
        this.services = services;
        this.layout = layout;
        this.views = views;
        this.enabled = false;
        this.syncingScrollX = false;
        this.syncing = false;
        this.showScrollVMask = false;
        this.onScrollVBind = this.onScrollV.bind(this);
        this.scrollSize = 0;
        this.prepare();
        this.compute();
        this.live();
    }
    prepare() {
        this.scrollSize = scroll_UtilsScroll.computeSize(this.views.coreHost);
    }
    isEnabled() {
        return this.enabled;
    }
    setSyncingScrollX(state) {
        this.syncingScrollX = state;
    }
    isSyncing() {
        return this.syncing;
    }
    setPosition(value) {
        this.scrollV.scrollLeft = value;
    }
    shouldBeDestroyed() {
        return this.enabled && !this.isHorizontalScroll;
    }
    shouldBePrepared() {
        return !this.enabled && this.isHorizontalScroll;
    }
    run() {
        if (this.shouldBeDestroyed()) {
            this.destroyScrollV();
            this.enabled = false;
        }
        else if (this.shouldBePrepared()) {
            this.prepareScrollV();
            this.enabled = true;
        }
    }
    prepareScrollV() {
        this.scrollV = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.SCROLL_V]);
        this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).appendChild(this.scrollV);
        this.scrollVBar = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.SCROLL_V_BAR]);
        this.scrollV.appendChild(this.scrollVBar);
        if (this.services.state.columns.freeze.enabled) {
            this.scrollVMask = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.SCROLL_V_MASK]);
            this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).appendChild(this.scrollVMask);
        }
        this.scrollV.addEventListener(modules_constants_EVENT.SCROLL, this.onScrollVBind, { passive: true });
    }
    compute() {
        if (this.enabled) {
            this.computeScrollV();
        }
    }
    setScrollVWidth(width, marginLeft) {
        if (marginLeft !== undefined) {
            this.scrollV.style.marginLeft = `${marginLeft}px`;
            this.scrollVMask.style.width = `${marginLeft}px`;
        }
        this.scrollV.style.width = `${width - marginLeft}px`;
    }
    setScrollVBarWidth() {
        this.scrollVBar.style.width =
            `${this.services.sizeWidth.getContentColumnsWidth() + (this.isVerticalScroll ? this.scrollSize : 0)}px`;
    }
    computeScrollV() {
        if (this.services.state.get().columns.freeze.enabled) {
            this.setScrollVWidth(this.services.sizeWidth.getGridWidth(), this.services.sizeWidth.getFreezeColumnsWidth() - this.services.sizeWidth.getFreezeDiff());
            if (this.showScrollVMask) {
                this.scrollVMask.style.height = `${this.scrollSize}px`;
            }
        }
        else {
            this.setScrollVWidth(this.services.sizeWidth.getGridWidth());
        }
        this.setScrollVBarWidth();
        if (this.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft) {
            this.setPosition(this.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft);
        }
    }
    onScrollXFreeze() {
        this.layout.getElement(modules_constants_CLASS.FREEZE_SCROLL_X).scrollLeft = this.scrollV.scrollLeft;
    }
    onScrollXSummary() {
        this.layout.getElement(modules_constants_CLASS.SUMMARY_SCROLL_X).scrollLeft = this.scrollV.scrollLeft;
    }
    onScrollV() {
        if (!this.syncingScrollX) {
            this.syncing = true;
            this.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft = this.scrollV.scrollLeft;
            this.layout.getElement(modules_constants_CLASS.HEADER_SCROLL_X).scrollLeft = this.scrollV.scrollLeft;
            this.onScrollXFreeze();
            this.onScrollXSummary();
        }
        clearTimeout(this.syncingHandler);
        this.syncingHandler = UtilitiesDelay.queue(() => {
            this.syncing = false;
        }, 100);
    }
    onChangeGrid() {
        UtilitiesDelay.queue(() => {
            this.run();
            this.compute();
        });
    }
    onChangeGridHeight() {
        this.onChangeGrid();
    }
    onChangeGridWidth() {
        this.onChangeGrid();
    }
    onChangeViewRowsVisible() {
        this.onChangeGrid();
    }
    onChangeViewRowHeight() {
        this.onChangeGrid();
    }
    onChangeContentWidth({ key }) {
        if (key === modules_constants_CLASS.CONTENT || key === modules_constants_CLASS.FREEZE_COLUMN) {
            this.onChangeGrid();
        }
    }
    destroyScrollV() {
        this.scrollV.removeChild(this.scrollVBar);
        this.scrollVBar = null;
        if (this.scrollVMask) {
            this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).removeChild(this.scrollVMask);
            this.scrollVMask = null;
        }
        this.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).removeChild(this.scrollV);
        this.scrollV.removeEventListener(modules_constants_EVENT.SCROLL, this.onScrollVBind);
        this.scrollV = null;
    }
    onChangeScrollVertical({ visible }) {
        if (this.isVerticalScroll !== visible) {
            this.isVerticalScroll = visible;
            this.onChangeGrid();
        }
    }
    onChangeScrollHorizontal({ visible }) {
        if (this.isHorizontalScroll !== visible) {
            this.isHorizontalScroll = visible;
            this.onChangeGrid();
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.CONTENT.WIDTH, this.onChangeContentWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.WIDTH, this.onChangeGridWidth.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEIGHT, this.onChangeGridHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, this.onChangeViewRowsVisible.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.SCROLL.VERTICAL, this.onChangeScrollVertical.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.SCROLL.HORIZONTAL, this.onChangeScrollHorizontal.bind(this));
    }
}
scrollV_decorate([
    measure(),
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "run", null);
scrollV_decorate([
    measure(),
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "prepareScrollV", null);
scrollV_decorate([
    measure(),
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "computeScrollV", null);
scrollV_decorate([
    permission_namespaceObject.freezeRows,
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "onScrollXFreeze", null);
scrollV_decorate([
    permission_namespaceObject.summary,
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "onScrollXSummary", null);
scrollV_decorate([
    measure(),
    scrollV_metadata("design:type", Function),
    scrollV_metadata("design:paramtypes", []),
    scrollV_metadata("design:returntype", void 0)
], scrollV_ScrollV.prototype, "destroyScrollV", null);
//# sourceMappingURL=scrollV.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/scroll.js
var scroll_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var scroll_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





class scroll_Scroll {
    constructor(eventBus, services, layout, master, views, freeze) {
        this.eventBus = eventBus;
        this.services = services;
        this.layout = layout;
        this.master = master;
        this.views = views;
        this.freeze = freeze;
        this.__destroyed = false;
        this.onScrollYBind = this.onScrollY.bind(this);
        this.onScrollXBind = this.onScrollX.bind(this);
        this.onChangeScrollTopDebounce = UtilitiesDelay.debounce(this.onChangeScrollTop.bind(this), 300);
        this.position = {
            top: 0,
            left: 0,
            deltaY: 0,
            deltaX: 0
        };
        this.prepare();
        this.live();
    }
    destroy() {
        this.__destroyed = true;
    }
    prepare() {
        this.scrollV = new scrollV_ScrollV(this.eventBus, this.services, this.layout, this.views);
    }
    updatePosition() {
        if (!this.position.deltaY) {
            return void 0;
        }
        this.master.onScrollY(this.position);
        if (this.freeze) {
            this.freeze.onScrollY(this.position);
        }
    }
    onScrollY() {
        let scrollTop = this.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop;
        if (this.position.top === scrollTop) {
            return void 0;
        }
        this.position.deltaY = this.position.top;
        this.position.top = scrollTop;
        this.position.deltaY -= this.position.top;
        this.updatePosition();
        this.onChangeScrollTopDebounce();
    }
    onScrollXFreeze() {
        this.layout.getElement(modules_constants_CLASS.FREEZE_SCROLL_X).scrollLeft = this.position.left;
    }
    onScrollXSummary() {
        this.layout.getElement(modules_constants_CLASS.SUMMARY_SCROLL_X).scrollLeft = this.position.left;
    }
    onScrollX() {
        let scrollLeft = this.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft;
        if (this.position.left === scrollLeft) {
            return void 0;
        }
        this.position.deltaX = this.position.left;
        this.position.left = scrollLeft;
        this.position.deltaX -= this.position.left;
        this.layout.getElement(modules_constants_CLASS.HEADER_SCROLL_X).scrollLeft = this.position.left;
        this.onScrollXFreeze();
        this.onScrollXSummary();
        if (this.scrollV.isEnabled()) {
            if (!this.scrollV.isSyncing()) {
                this.scrollV.setSyncingScrollX(true);
                this.scrollV.setPosition(this.position.left);
            }
            clearTimeout(this.syncingHandler);
            this.syncingHandler = UtilitiesDelay.queue(() => {
                this.scrollV.setSyncingScrollX(false);
            }, 100);
        }
    }
    onChangeScrollTop() {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.SCROLL, this.position);
    }
    onChangeViewRowHeight() {
        this.position.top = this.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop;
        this.position.deltaY = 1;
        this.updatePosition();
    }
    onChangeStateLoad() {
        this.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop = this.services.state.scroll.top;
    }
    live() {
        if (this.services.state.infinite.enabled) {
            this.layout.getElement(modules_constants_CLASS.SCROLL_Y).addEventListener(modules_constants_EVENT.SCROLL, this.onScrollYBind, { passive: true });
        }
        this.eventBus.join(eventsList_EVENTS.CHANGE.VIEW.ROW.HEIGHT, this.onChangeViewRowHeight.bind(this));
        this.layout.getElement(modules_constants_CLASS.SCROLL_X).addEventListener(modules_constants_EVENT.SCROLL, this.onScrollXBind, { passive: true });
        this.eventBus.join(eventsList_EVENTS.DONE.STATE.LOAD, this.onChangeStateLoad.bind(this));
    }
}
scroll_decorate([
    measure(),
    scroll_metadata("design:type", Function),
    scroll_metadata("design:paramtypes", []),
    scroll_metadata("design:returntype", void 0)
], scroll_Scroll.prototype, "onScrollY", null);
scroll_decorate([
    permission_namespaceObject.freezeRows,
    scroll_metadata("design:type", Function),
    scroll_metadata("design:paramtypes", []),
    scroll_metadata("design:returntype", void 0)
], scroll_Scroll.prototype, "onScrollXFreeze", null);
scroll_decorate([
    permission_namespaceObject.summary,
    scroll_metadata("design:type", Function),
    scroll_metadata("design:paramtypes", []),
    scroll_metadata("design:returntype", void 0)
], scroll_Scroll.prototype, "onScrollXSummary", null);
scroll_decorate([
    measure(),
    scroll_metadata("design:type", Function),
    scroll_metadata("design:paramtypes", []),
    scroll_metadata("design:returntype", void 0)
], scroll_Scroll.prototype, "onScrollX", null);
scroll_decorate([
    permission_namespaceObject.infinite,
    scroll_metadata("design:type", Function),
    scroll_metadata("design:paramtypes", []),
    scroll_metadata("design:returntype", void 0)
], scroll_Scroll.prototype, "onChangeViewRowHeight", null);
//# sourceMappingURL=scroll.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/layout/layout.js
var layout_layout_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var layout_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








class layout_Layout {
    constructor(eventBus, data, services) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.allCells = {};
        this.freeze = undefined;
        this.draggable = [];
    }
    getDraggable() {
        return this.draggable;
    }
    initialize(grid, views) {
        this.grid = grid;
        this.views = views;
        this.prepare();
    }
    getMode() {
        return this.mode;
    }
    getWidth() {
        return this.styles.getWidth();
    }
    getHeight() {
        return this.styles.getHeight();
    }
    setViews(content, freeze) {
        this.content = content;
        this.freeze = freeze;
        this.prepareStyles();
        this.prepareScroll();
    }
    prepare() {
        this.prepareContent();
        this.prepareHeader();
        this.prepareSummary();
        this.prepareDraggable();
    }
    prepareContent() {
        this.prepareContentPinned();
        this.prepareContentNormal();
    }
    prepareContentPinned() {
        this.mode = new freeze_LayoutFreeze(this.eventBus, this.services.state, this.views.coreHost);
    }
    prepareContentNormal() {
        this.mode = new normal_LayoutNormal(this.eventBus, this.services.state, this.views.coreHost);
    }
    prepareHeader() {
        this.prepareHeaderFreeze();
        this.prepareHeaderNormal();
    }
    prepareHeaderFreeze() {
        let headerFreeze = new header_LayoutHeader(this.eventBus, this.services, this.services.columns.getFreeze.bind(this.services.columns), this.allCells);
        this.mode.getElement(modules_constants_CLASS.HEADER_FREEZE).appendChild(headerFreeze.get());
        let headerContent = new header_LayoutHeader(this.eventBus, this.services, this.services.columns.getContent.bind(this.services.columns), this.allCells);
        this.mode.getElement(modules_constants_CLASS.HEADER_WRAPPER).appendChild(headerContent.get());
    }
    prepareHeaderNormal() {
        let headerAll = new header_LayoutHeader(this.eventBus, this.services, this.services.columns.getAll.bind(this.services.columns), this.allCells);
        this.mode.getElement(modules_constants_CLASS.HEADER_WRAPPER).appendChild(headerAll.get());
    }
    prepareSummary() {
        this.prepareSummaryNormal();
        this.prepareSummaryPinned();
    }
    prepareSummaryNormal() {
        let summary = new summary_LayoutSummary(this.eventBus, this.services, this.services.columns.getAll.bind(this.services.columns));
        this.mode.getElement(modules_constants_CLASS.SUMMARY).appendChild(summary.get());
    }
    prepareSummaryPinned() {
        let summaryPinned = new summary_LayoutSummary(this.eventBus, this.services, this.services.columns.getFreeze.bind(this.services.columns));
        let summaryNormal = new summary_LayoutSummary(this.eventBus, this.services, this.services.columns.getContent.bind(this.services.columns));
        this.mode.getElement(modules_constants_CLASS.SUMMARY_FREEZE_COLUMN).appendChild(summaryPinned.get());
        this.mode.getElement(modules_constants_CLASS.SUMMARY).appendChild(summaryNormal.get());
    }
    prepareDraggable() {
        this.draggable = Object.keys(this.allCells).map((columnId) => this.allCells[columnId]);
    }
    prepareStyles() {
        let styles = new styles_Styles(this.eventBus, this.data, this.services, this.grid, this.views, this.mode, this.content);
    }
    prepareScroll() {
        let scroll = new scroll_Scroll(this.eventBus, this.services, this.mode, this.content, this.views, this.freeze);
    }
}
layout_layout_decorate([
    permission_namespaceObject.freezeColumns,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareContentPinned", null);
layout_layout_decorate([
    permission_namespaceObject.nonFreezeColumns,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareContentNormal", null);
layout_layout_decorate([
    permission_namespaceObject.freezeColumns,
    measure(),
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareHeaderFreeze", null);
layout_layout_decorate([
    permission_namespaceObject.nonFreezeColumns,
    measure(),
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareHeaderNormal", null);
layout_layout_decorate([
    permission_namespaceObject.summary,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareSummary", null);
layout_layout_decorate([
    permission_namespaceObject.nonFreezeColumns,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareSummaryNormal", null);
layout_layout_decorate([
    permission_namespaceObject.summary,
    permission_namespaceObject.freezeColumns,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareSummaryPinned", null);
layout_layout_decorate([
    permission_namespaceObject.order,
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareDraggable", null);
layout_layout_decorate([
    measure(),
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareStyles", null);
layout_layout_decorate([
    measure(),
    layout_metadata("design:type", Function),
    layout_metadata("design:paramtypes", []),
    layout_metadata("design:returntype", void 0)
], layout_Layout.prototype, "prepareScroll", null);
//# sourceMappingURL=layout.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/services/flying.parts.js



class flying_parts_FlyingParts {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.vertical = {};
        this.focus = {};
        this.prepare();
        this.live();
    }
    prepare() {
        this.focus.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.FOCUS_BORDER]);
        this.focus.parent = modules_constants_CLASS.CONTENT;
        this.vertical.element = utilities_dom_UtilitiesDOM.create(modules_constants_ELEMENT.DIV, [modules_constants_CLASS.VERTICAL_LINE]);
    }
    initialize() {
        this.services.layout.getElement(modules_constants_CLASS.CORE_WRAPPER).appendChild(this.vertical.element);
        this.services.layout.getElement(this.focus.parent).appendChild(this.focus.element);
    }
    onResize({ values }) {
        this.vertical.element.style.left = `${values.positionX - this.vertical.initialLeft}px`;
    }
    onResizeStart({ values, groupResize }) {
        let diffToEdge = values.positionX - values.rightEdge;
        if (groupResize) {
            utilities_dom_UtilitiesDOM.addClass(this.vertical.element, [modules_constants_CLASS.GROUP_RESIZE]);
        }
        this.vertical.element.style.left = `0px`;
        utilities_dom_UtilitiesDOM.addClass(this.vertical.element, [modules_constants_CLASS.VISIBLE]);
        this.vertical.initialLeft = this.vertical.element.getBoundingClientRect().left + diffToEdge;
        this.vertical.element.style.left = `${values.positionX - this.vertical.initialLeft}px`;
    }
    onResizeStop({ groupResize }) {
        if (groupResize) {
            utilities_dom_UtilitiesDOM.removeClass(this.vertical.element, [modules_constants_CLASS.GROUP_RESIZE]);
        }
        utilities_dom_UtilitiesDOM.removeClass(this.vertical.element, [modules_constants_CLASS.VISIBLE]);
    }
    focusReset() {
        this.focus.element.style.left = `0px`;
        this.focus.element.style.top = `0px`;
        this.focus.element.style.width = `0px`;
        this.focus.element.style.height = `0px`;
    }
    focusCell(classList = []) {
        this.focusReset();
        utilities_dom_UtilitiesDOM.addClass(this.focus.element, [modules_constants_CLASS.VISIBLE, ...classList]);
        this.focus.visible = true;
    }
    blurCell() {
        utilities_dom_UtilitiesDOM.removeClass(this.focus.element, [modules_constants_CLASS.VISIBLE]);
        this.focus.visible = false;
    }
    onFocusLost() {
        this.blurCell();
    }
    setFocusPosition(params, property) {
        this.focus.element.style[property] = `${parseFloat(params[property])}px`;
    }
    getFocusParent(params) {
        let isColumnFreeze = this.services.columns.isFreeze(params.columnId);
        let isRowFreeze = this.services.row.isFreeze(params.rowId);
        if (isColumnFreeze) {
            return isRowFreeze ? modules_constants_CLASS.FREEZE_ROW_FREEZE_COLUMN : modules_constants_CLASS.FREEZE_COLUMN;
        }
        else {
            return isRowFreeze ? modules_constants_CLASS.FREEZE_ROW : modules_constants_CLASS.CONTENT;
        }
    }
    processPosition(params) {
        Object.keys(params).forEach((property) => {
            if (document.body.style[property] !== typeof undefined) {
                this.setFocusPosition(params, property);
            }
        });
        if (params.columnId) {
            let focusParent = this.getFocusParent(params);
            if (focusParent !== this.focus.parent) {
                this.services.layout.getElement(focusParent).appendChild(this.focus.element);
                this.focus.parent = focusParent;
            }
        }
    }
    onFocusCell(params) {
        if (params.columnId && !this.services.columns.getColumnById(params.columnId).visible) {
            console.warn(`Cannot focus hidden column`);
            return void 0;
        }
        if (!this.focus.visible) {
            this.focusCell(params.classList);
        }
        this.processPosition(params);
    }
    onFocusLeave() {
        utilities_dom_UtilitiesDOM.removeClass(this.focus.element, [modules_constants_CLASS.FOCUS_ENTERED]);
    }
    onFocusEnter() {
        utilities_dom_UtilitiesDOM.addClass(this.focus.element, [modules_constants_CLASS.FOCUS_ENTERED]);
    }
    destroy() {
        utilities_dom_UtilitiesDOM.removeChildren(this.services.layout.getElement(modules_constants_CLASS.CORE_WRAPPER));
        this.vertical.element = null;
        this.focus.element = null;
        this.focus = {};
        this.vertical = {};
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.RESIZE, this.onResize.bind(this));
        this.eventBus.join(eventsList_EVENTS.RESIZE.START, this.onResizeStart.bind(this));
        this.eventBus.join(eventsList_EVENTS.RESIZE.STOP, this.onResizeStop.bind(this));
        this.eventBus.join(eventsList_EVENTS.GROUP.RESIZE, this.onResize.bind(this));
        this.eventBus.join(eventsList_EVENTS.GROUP.RESIZE.START, this.onResizeStart.bind(this));
        this.eventBus.join(eventsList_EVENTS.GROUP.RESIZE.STOP, this.onResizeStop.bind(this));
        this.eventBus.join(eventsList_EVENTS.FOCUS.LOST, this.onFocusLost.bind(this));
        this.eventBus.join(eventsList_EVENTS.FOCUS.CELL, this.onFocusCell.bind(this));
        this.eventBus.join(eventsList_EVENTS.FOCUS.ENTER, this.onFocusEnter.bind(this));
        this.eventBus.join(eventsList_EVENTS.FOCUS.LEAVE, this.onFocusLeave.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
//# sourceMappingURL=flying.parts.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build-in/services/focus.js
var focus_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var focus_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





class focus_Focus {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.isHorizontalScroll = false;
        this.keyAccordParams = { description: `${focus_Focus.name} handler` };
        this.onLostBind = this.lost.bind(this);
        this.onKeyRightBind = this.onKeyRight.bind(this);
        this.onKeyLeftBind = this.onKeyLeft.bind(this);
        this.onKeyDownBind = this.onKeyDown.bind(this);
        this.onKeyTopBind = this.onKeyTop.bind(this);
        this.onKeyEnterBind = this.onKeyEnter.bind(this);
        this.onKeyEscBind = this.onKeyEsc.bind(this);
        this.onEnterCellData = {};
        this.focused = false;
        this.entered = false;
        this.live();
    }
    init(grid) {
        this.grid = grid;
    }
    getLayoutMode() {
        return this.services.columns.isFreeze(this.columnId)
            ? LAYOUT.MODE.CONTENT_FREEZE_COLUMNS
            : LAYOUT.MODE.CONTENT;
    }
    safeLeave() {
        if (this.entered) {
            this.leave();
        }
    }
    isEditable(columnId = this.columnId, viewCluster = this.viewCluster) {
        return this.services.columns.isEditable(this.services.columns.getColumnById(columnId))
            && !this.services.row.isDisabled(viewCluster.rowWrapped.getId());
    }
    getLastEditableColumn(columns) {
        return this.services.columns.getFirstEditableColumn(columns.slice(0).reverse());
    }
    getLowerEditableViewCluster() {
        let viewCluster = this.viewCluster;
        while (viewCluster = this.services.view.getNextViewCluster(viewCluster)) {
            if (this.services.row.isNormalRow(viewCluster.rowWrapped.getDataRowDescriptor())
                && !this.services.row.isDisabled(viewCluster.rowWrapped.getId())) {
                return viewCluster;
            }
        }
        return null;
    }
    getUpperEditableViewCluster() {
        let viewCluster = this.viewCluster;
        while (viewCluster = this.services.view.getPreviousViewCluster(viewCluster)) {
            if (this.services.row.isNormalRow(viewCluster.rowWrapped.getDataRowDescriptor())
                && !this.services.row.isDisabled(viewCluster.rowWrapped.getId())) {
                return viewCluster;
            }
        }
        return null;
    }
    isMoveDownPossible() {
        return !!this.getLowerEditableViewCluster();
    }
    isMoveTopPossible() {
        return !!this.getUpperEditableViewCluster();
    }
    onKeyEmptyEvent() {
        return void 0;
    }
    onKeyEsc() {
        this.leave();
    }
    onKeyEnter(event) {
        event = event || Object.assign({}, new MouseEvent(modules_constants_EVENT.CLICK), { currentTarget: this.viewCell.get() });
        this.enter(event);
    }
    onKeyRight() {
        let columns = this.services.columns.getAllVisibleColumnIdsByOrder();
        let index = columns.indexOf(this.columnId);
        if (this.columnId === this.getLastEditableColumn(columns)) {
            if (this.isMoveDownPossible()) {
                this.columnId = this.services.columns.getFirstEditableColumn(columns);
                return this.onKeyDown();
            }
            return void 0;
        }
        this.columnId = columns[index + 1];
        if (!this.isEditable()) {
            return this.onKeyRight();
        }
        this.onPositionChange();
    }
    onKeyLeft() {
        let columns = this.services.columns.getAllVisibleColumnIdsByOrder();
        if (this.columnId === this.services.columns.getFirstEditableColumn(columns)) {
            if (this.isMoveTopPossible()) {
                this.columnId = this.getLastEditableColumn(columns);
                return this.onKeyTop();
            }
            return void 0;
        }
        this.columnId = columns[columns.indexOf(this.columnId) - 1];
        if (!this.isEditable()) {
            return this.onKeyLeft();
        }
        this.onPositionChange();
    }
    onKeyDown() {
        let viewCluster = this.getLowerEditableViewCluster();
        if (!viewCluster) {
            return void 0;
        }
        this.viewCluster = viewCluster;
        this.onPositionChange();
    }
    onKeyTop() {
        let viewCluster = this.getUpperEditableViewCluster();
        if (!viewCluster) {
            return void 0;
        }
        this.viewCluster = viewCluster;
        this.onPositionChange();
    }
    getChangedDataColumnIds() {
        let columnIds = [];
        let onLeaveCellData = this.viewCell.getViewData();
        for (let columnId in this.onEnterCellData) {
            if (this.onEnterCellData[columnId] !== onLeaveCellData[columnId]) {
                columnIds.push(columnId);
            }
        }
        return columnIds;
    }
    enter(event) {
        this.entered = true;
        this.onEnterCellData = this.viewCell.getViewData();
        this.viewCell.focus(event);
        this.unbindKeys();
        this.services.keyAccord.add(MAP_KEYS.ESCAPE, this.onKeyEscBind, this.keyAccordParams);
        this.services.keyAccord.add(MAP_KEYS.TAB, this.onKeyEmptyEvent, this.keyAccordParams);
        this.services.keyAccord.add(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onKeyEmptyEvent, this.keyAccordParams);
        this.eventBus.fire(eventsList_EVENTS.FOCUS.ENTER);
    }
    leave() {
        this.entered = false;
        if (this.viewCell) {
            this.viewCell.blur();
        }
        this.bindKeys();
        this.services.keyAccord.remove(MAP_KEYS.ESCAPE, this.onKeyEscBind);
        this.services.keyAccord.remove(MAP_KEYS.TAB, this.onKeyEmptyEvent);
        this.services.keyAccord.remove(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onKeyEmptyEvent);
        this.eventBus.fire(eventsList_EVENTS.FOCUS.LEAVE, {
            rowId: this.viewCell ? this.viewCell.getRowWrapped().getId() : undefined,
            changedDataColumnIds: this.getChangedDataColumnIds()
        });
        this.onEnterCellData = {};
    }
    focus() {
        if (this.focused) {
            return void 0;
        }
        this.focused = true;
        this.bindKeys();
        document.addEventListener(modules_constants_EVENT.CLICK, this.onLostBind);
        document.addEventListener(modules_constants_EVENT.DROP, this.onLostBind);
        document.addEventListener(modules_constants_EVENT.VISIBILITYCHANGE, this.onLostBind);
        window.addEventListener(modules_constants_EVENT.BLUR, this.onLostBind);
    }
    lost(event) {
        this.removeCellFocus();
        this.focused = false;
        this.columnId = undefined;
        this.viewCluster = undefined;
        if (this.entered) {
            this.onKeyEsc();
        }
        this.unbindKeys();
        document.removeEventListener(modules_constants_EVENT.CLICK, this.onLostBind);
        document.removeEventListener(modules_constants_EVENT.DROP, this.onLostBind);
        document.removeEventListener(modules_constants_EVENT.VISIBILITYCHANGE, this.onLostBind);
        window.removeEventListener(modules_constants_EVENT.BLUR, this.onLostBind);
        this.eventBus.fire(eventsList_EVENTS.FOCUS.LOST);
    }
    isSameCell(viewCluster, columnId) {
        return viewCluster === this.viewCluster && columnId === this.columnId;
    }
    enterOnCellClick(viewCluster, columnId, event) {
        if (this.isSameCell(viewCluster, columnId)) {
            if (!event) {
                return false;
            }
            else if (!this.entered) {
                this.onKeyEnter(event);
            }
            else {
                this.viewCell.blur();
                this.viewCell.focus(event);
            }
            return true;
        }
        else if (this.entered) {
            this.onKeyEsc();
            return false;
        }
        return false;
    }
    onCellClick({ columnId, rowElement, classList }, event) {
        let viewCluster = this.services.view.getViewClusterByElement(rowElement);
        if (!this.services.columns.isEditable(this.services.columns.getColumnById(columnId))
            || this.services.row.isDisabled(viewCluster.rowWrapped.getId())) {
            return void 0;
        }
        if (event) {
            event.stopPropagation();
        }
        if (!this.enterOnCellClick(viewCluster, columnId, event)) {
            this.columnId = columnId;
            this.viewCluster = viewCluster;
            this.focus();
            this.onPositionChange(classList);
        }
    }
    setViewPortToPositionWidth({ left, width }) {
        let scrollLeft = this.services.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft;
        let scrollWidth = this.services.layout.getElement(modules_constants_CLASS.SCROLL_X).clientWidth;
        if (left < scrollLeft) {
            this.services.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft = left;
        }
        else if ((left + width) > (scrollLeft + scrollWidth)) {
            this.services.layout.getElement(modules_constants_CLASS.SCROLL_X).scrollLeft += (left + width) - (scrollLeft + scrollWidth);
        }
    }
    setViewPortToPositionHeight({ top, height }) {
        let scrollTop = this.services.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop;
        if (top < scrollTop) {
            this.services.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop = top;
            return void 0;
        }
        let scrollHeight = this.services.layout.getElement(modules_constants_CLASS.SCROLL_Y).clientHeight;
        let verticalScrollHeight = this.isHorizontalScroll ? scroll_UtilsScroll.computeSize(this.grid) : 0;
        top += this.services.layout.getElement(modules_constants_CLASS.SCROLL_X).offsetTop;
        if ((top + height) > (scrollTop + scrollHeight - verticalScrollHeight)) {
            this.services.layout.getElement(modules_constants_CLASS.SCROLL_Y).scrollTop
                += (top + height) - (scrollTop + scrollHeight - verticalScrollHeight);
        }
    }
    setViewportToPosition({ left, top, width, height }) {
        if (!this.services.columns.isFreeze(this.columnId)) {
            this.setViewPortToPositionWidth({ left, width });
        }
        if (!this.services.row.isFreeze(this.viewCluster.rowWrapped.getId())) {
            this.setViewPortToPositionHeight({ top, height });
        }
    }
    onPositionChange(classList) {
        if (this.columnId === undefined || this.viewCluster === undefined) {
            return void 0;
        }
        if (!this.viewCluster) {
            this.viewCluster = this.services.view.getPreviousViewCluster(this.viewCluster);
            return void 0;
        }
        let left = this.services.sizeWidth.getLeftOffset(this.columnId);
        let width = this.services.sizeWidth.getColumnWidth(this.columnId);
        let height = this.services.sizeHeight.getRowHeight();
        let top = this.viewCluster.viewRow.get().offsetTop;
        this.setViewportToPosition({ left, top, width, height });
        this.eventBus.fire(eventsList_EVENTS.FOCUS.CELL, {
            columnId: this.columnId,
            rowId: this.viewCluster.viewRow.rowWrapped.getId(),
            classList,
            left,
            top,
            width,
            height
        });
        this.removeCellFocus();
        this.viewCell = this.viewCluster.rowWrapped.getPreparedData().cells[this.columnId];
        this.setCellFocus();
    }
    setCellFocus() {
        utilities_dom_UtilitiesDOM.addClass(this.viewCell.get(), [modules_constants_CLASS.CELL_FOCUS]);
    }
    removeCellFocus() {
        if (this.viewCell && this.viewCell.get()) {
            utilities_dom_UtilitiesDOM.removeClass(this.viewCell.get(), [modules_constants_CLASS.CELL_FOCUS]);
        }
    }
    onChangeColumnCollapsed() {
        if (this.entered) {
            this.onKeyEsc();
        }
    }
    onAfterDataColumnsResize({ left, width }) {
        this.setViewPortToPositionWidth({ left, width });
    }
    unbindKeys() {
        if (UtilitiesBrowser.isIE11()) {
            this.services.keyAccord.remove(DIRECTION.TOP_IE, this.onKeyTopBind);
            this.services.keyAccord.remove(DIRECTION.DOWN_IE, this.onKeyDownBind);
            this.services.keyAccord.remove(DIRECTION.LEFT_IE, this.onKeyLeftBind);
            this.services.keyAccord.remove(DIRECTION.RIGHT_IE, this.onKeyRightBind);
        }
        else {
            this.services.keyAccord.remove(DIRECTION.TOP, this.onKeyTopBind);
            this.services.keyAccord.remove(DIRECTION.DOWN, this.onKeyDownBind);
            this.services.keyAccord.remove(DIRECTION.LEFT, this.onKeyLeftBind);
            this.services.keyAccord.remove(DIRECTION.RIGHT, this.onKeyRightBind);
        }
        this.services.keyAccord.remove(MAP_KEYS.TAB, this.onKeyRightBind);
        this.services.keyAccord.remove(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onKeyLeftBind);
        this.services.keyAccord.remove(MAP_KEYS.ENTER, this.onKeyEnterBind);
    }
    bindKeys() {
        if (UtilitiesBrowser.isIE11()) {
            this.services.keyAccord.add(DIRECTION.TOP_IE, this.onKeyTopBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.DOWN_IE, this.onKeyDownBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.LEFT_IE, this.onKeyLeftBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.RIGHT_IE, this.onKeyRightBind, this.keyAccordParams);
        }
        else {
            this.services.keyAccord.add(DIRECTION.TOP, this.onKeyTopBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.DOWN, this.onKeyDownBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.LEFT, this.onKeyLeftBind, this.keyAccordParams);
            this.services.keyAccord.add(DIRECTION.RIGHT, this.onKeyRightBind, this.keyAccordParams);
        }
        this.services.keyAccord.add(MAP_KEYS.TAB, this.onKeyRightBind, this.keyAccordParams);
        this.services.keyAccord.add(`${MAP_KEYS.SHIFT} + ${MAP_KEYS.TAB}`, this.onKeyLeftBind, this.keyAccordParams);
        this.services.keyAccord.add(MAP_KEYS.ENTER, this.onKeyEnterBind, this.keyAccordParams);
    }
    onChangeScrollHorizontal({ visible }) {
        if (this.isHorizontalScroll !== visible) {
            this.isHorizontalScroll = visible;
        }
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DONE.COLUMN.WIDTH, this.onPositionChange.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.CONTENT.WIDTH, this.onPositionChange.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, this.onPositionChange.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, this.onChangeColumnCollapsed.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.COLUMNS.WIDTH, this.onAfterDataColumnsResize.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLICK.CELL, this.onCellClick.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.SCROLL.HORIZONTAL, this.onChangeScrollHorizontal.bind(this));
    }
}
focus_decorate([
    permission_namespaceObject.editable,
    focus_metadata("design:type", Function),
    focus_metadata("design:paramtypes", [Object, MouseEvent]),
    focus_metadata("design:returntype", void 0)
], focus_Focus.prototype, "onCellClick", null);
//# sourceMappingURL=focus.js.map
// CONCATENATED MODULE: ./dist-es/modules/renderer/build.in.js
var build_in_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var build_in_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var build_in_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Renderer_1;











let build_in_Renderer = Renderer_1 = class Renderer {
    constructor() {
        this.freezeColumns = undefined;
    }
    getDraggable() {
        return this.layout.getDraggable();
    }
    boot(eventBus, data, services, externalParams = {}) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.externalFormatter = externalParams.formatter;
        this.externalColoring = externalParams.coloring;
        this.prepare();
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
    }
    prepare() {
        this.layout = new layout_Layout(this.eventBus, this.data, this.services);
        this.focus = new focus_Focus(this.eventBus, this.services);
        this.flyingParts = new flying_parts_FlyingParts(this.eventBus, this.services);
    }
    prepareColoring() {
        this.services.coloring.initialize(this.externalColoring);
    }
    prepareFormatter() {
        let extensionColumns = UtilsObject.getPropertyValue('config.extensions.columns', this._metadata);
        let extensionRows = UtilsObject.getPropertyValue('config.extensions.rows.format', this._metadata);
        this.services.formatter.initialize(extensionColumns, extensionRows, this.externalFormatter);
    }
    prepareDebugger() {
        let options = UtilsObject.getPropertyValue('config.options', this._metadata) || {};
        this.services.debuggerService.initialize(options);
        UtilsDebug.init(this.services.debuggerService);
    }
    prepareEventBus() {
        let disallowedInstances = [wrapped_RowWrapped];
        let allowedInstances = [];
        Object.keys(cell_types_namespaceObject).forEach((key) => {
            if (allowedInstances.indexOf(cell_types_namespaceObject[key]) === -1) {
                allowedInstances.push(cell_types_namespaceObject[key]);
            }
        });
        this.eventBus.addConditionalFireWarningConstructors(disallowedInstances, allowedInstances);
    }
    prepareExtensions() {
        let extensions = UtilsObject.getPropertyValue('config.extensions', this._metadata);
        this.services.extensions.set(extensions);
    }
    setMetadata(metadata) {
        this._metadata = metadata;
        this.prepareDebugger();
        this.prepareEventBus();
        this.prepareExtensions();
        this.prepareColoring();
        this.prepareFormatter();
    }
    loadLoading(loaderXRef, callback) {
        this.services.loading.prepare(this.layout.getMode(), loaderXRef);
        this.services.loading.start(callback);
    }
    loadViews(grid) {
        let mode = this.layout.getMode();
        if (this.services.state.infinite.enabled) {
            this.viewModeHandler = infinite_Infinite;
        }
        else {
            this.viewModeHandler = types_normal_Normal;
        }
        if (this.services.state.columns.freeze.enabled) {
            this.freezeColumns = new this.viewModeHandler(this.eventBus, this.data, this.services, mode, mode.getElement(modules_constants_CLASS.FREEZE_COLUMN), this.services.columns.getFreeze.bind(this.services.columns), true, grid);
            this.content = new this.viewModeHandler(this.eventBus, this.data, this.services, mode, mode.getElement(modules_constants_CLASS.CONTENT), this.services.columns.getContent.bind(this.services.columns), false, grid);
        }
        else {
            this.content = new this.viewModeHandler(this.eventBus, this.data, this.services, mode, mode.getElement(modules_constants_CLASS.CONTENT), this.services.columns.getAll.bind(this.services.columns), true, grid);
        }
        this.layout.setViews(this.content, this.freezeColumns);
    }
    connect(grid, views, callback) {
        views.core.shadowRoot.appendChild(Renderer_1.styles.cloneNode(true));
        let start = performance.now();
        this.layout.initialize(grid, views);
        this.live();
        this.setInstances(grid);
        this.loadLoading(views.loader || document.createElement('div'), () => {
            this.loadViews(grid);
            if (callback && callback instanceof Function) {
                callback();
            }
            UtilsDebug.writeMeasure(`${Renderer_1.name}.load`, performance.now() - start, { bad: 2000, good: 1000 });
        });
    }
    setInstances(grid) {
        this.services.layout.setLayout(this.layout.getMode());
        this.focus.init(grid);
        this.flyingParts.initialize();
    }
    onRefreshView() {
        this.services.loading.start(() => build_in_awaiter(this, void 0, void 0, function* () {
            let { current, marked } = yield this.data.getRowsIds();
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA, {
                length: current.length,
                selected: marked.length
            });
        }));
    }
    onChangeDataEditable() {
        this.services.loading.start(() => build_in_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.EDIT.ENABLED);
        }));
    }
    onClickGroup({ rowDescriptor }) {
        return build_in_awaiter(this, void 0, void 0, function* () {
            // TODO: rebuild - should not shave events with data
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.GROUP);
            // TODO: toggle should be made in view/row - not thru rowCache
            this.services.rowCache.getSpecial(rowDescriptor).getViewRow().toggle();
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.GROUP);
        });
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CLICK.GROUP, this.onClickGroup.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.EDIT.ENABLED, this.onChangeDataEditable.bind(this));
        this.eventBus.join(eventsList_EVENTS.REFRESH_VIEW, this.onRefreshView.bind(this));
    }
};
build_in_decorate([
    measure(),
    build_in_metadata("design:type", Function),
    build_in_metadata("design:paramtypes", [HTMLElement, Function]),
    build_in_metadata("design:returntype", void 0)
], build_in_Renderer.prototype, "loadLoading", null);
build_in_decorate([
    measure(),
    build_in_metadata("design:type", Function),
    build_in_metadata("design:paramtypes", [HTMLElement]),
    build_in_metadata("design:returntype", void 0)
], build_in_Renderer.prototype, "loadViews", null);
build_in_Renderer = Renderer_1 = build_in_decorate([
    VUI('vc-core', {html: "'-'", style: "/* TheGRID 3.0 */@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");@import url(\"https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900\");.host .row .cell-button button button {  background: transparent;  border-radius: var(--vc-grid-border-radius, 20px);  border: 0;  cursor: pointer;  color: var(--vc-color--default, #666);  display: inline-block;  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px);  font-weight: 500;  height: 30px;  letter-spacing: 1px;  overflow: hidden;  padding: 4px 8px;  position: relative;  text-transform: uppercase;  text-decoration: none;  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  width: auto; }  .host .row .cell-button button button:focus {    outline: 0; }  .host .row .cell-button button button:hover {    color: var(--vc-color--highlight, #4680FE);    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .row .cell-button button button--primary {    background: var(--vc-color--highlight, #4680FE);    color: white; }    .host .row .cell-button button button--primary:hover {      background: #2b66e6;      color: white;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .row .cell-button button button--secondary {    border: 2px solid var(--vc-color--highlight, #4680FE); }  .host .row .cell-button button button--ghost {    border: 0; }  .host .row .cell-button button button--info {    background: var(--color-info, #4680FE); }  .host .row .cell-button button button--success {    background: var(--color-success, #50B12D); }  .host .row .cell-button button button--warning {    background: var(--color-warning, #FFB64D); }  .host .row .cell-button button button--danger {    background: var(--color-danger, #fb5252); }  .host .row .cell-button button button--small {    transform: scale(0.8); }  .host .row .cell-button button button--disabled, .host .row .cell-button button button[disabled] {    color: #bbb;    cursor: default; }  .host .row .cell-button button button.vui-select-trigger > span + * {    transform: rotate3d(0, 0, 0, 0);    transition: all 0.2s ease-in-out; }  .host .row .cell-button button button.vui-select-trigger.active > span + * {    transform: rotate3d(1, 0, 0, -180deg) translateY(3px);    transition: all 0.2s ease-in-out; }.host .row .cell-button button {  background: transparent;  border-radius: 2px;  border: 1px solid #d6e3ff;  color: #4a83fe;  height: auto;  margin: 0 auto;  padding: 3px 6px;  text-overflow: ellipsis;  font-weight: 400;  transition-duration: var(--vc-transition-time, 0.2s); }  .host .row .cell-button button:hover {    background: var(--vc-color--highlight, #4680FE);    border: 1px solid var(--vc-color--highlight, #4680FE);    color: white;    transition-duration: var(--vc-transition-time, 0.2s); }.host .row .cell-button button:hover {  background: var(--vc-color--highlight, #4680FE);  color: white;  transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input {  background: transparent;  border: 1px solid transparent;  color: var(--vc-color--default, #666);  display: inline-block;  height: calc(100% - 1px);  padding: 0 4px;  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  width: 100%; }  .host .cell-currency.cell-edit input:focus, .host div.cell-date.cell-edit-text:focus, .host .cell-group.cell-edit input:focus, .host .cell-number.cell-edit input:focus, .host .cell-text.cell-edit input:focus {    outline: 0;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }.host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input {  padding: 0;  flex-grow: 1;  text-overflow: ellipsis; }.host .cell-link a {  color: var(--vc-color--highlight, #4680FE);  cursor: pointer;  transition: all 0.2s ease-in-out;  text-decoration: none; }  .host .cell-link a:hover {    color: #135dfe;    transition: all 0.2s ease-in-out; }.host .cell {  box-sizing: border-box;  border-right: 1px solid var(--vc-grid-vertical-border, #eaeaea);  color: var(--vc-color--default, #666);  font-size: var(--vc-font-size, 13px);  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap; }.host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .core-wrapper .cell-clear, .host div.cell-date, .host .cell-group, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-icon, .host .cell-graphics, .host .cell-graphics > div, .host .cell-number.cell-trend, .host .cell-number.cell-harvey-ball, .host .cell-number.cell-edit, .host .cell-progress-bar, .host .cell-text.cell-edit, .host .cell-aggregation, .host .cell-abstract-group .row-group, .host .core-wrapper.freeze-column .scroll-y,.host .core-wrapper.freeze-column .freeze-scroll-y,.host .core-wrapper.freeze-column .summary-scroll-y,.host .core-wrapper.freeze-column .header-scroll-y, .host .row.removed-row .removed-row-icon, .host .row .row-full-width, .host .grid-group-summary, .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .scene, .host .core-wrapper .freeze-scroll-y.visible,.host .core-wrapper .summary-scroll-y.visible, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-wrapper,.host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-wrapper, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,.host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .cell__sorter,.host .core-wrapper .header-scroll-y .header-freeze .cell__sorter,.host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter, .host .core-wrapper .header-scroll-y .header .row,.host .core-wrapper .header-scroll-y .header-freeze .row,.host .core-wrapper .header-scroll-y .header-scroll-x .row, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,.host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,.host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,.host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,.host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {  display: flex; }  .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-graphics, .host .cell-graphics > div, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {    justify-content: center; }  .host div.cell-date, .host .cell-icon {    justify-content: flex-start; }  .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item {    justify-content: flex-end; }  .host .cell-number {    justify-content: space-between; }  .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host div.cell-date, .host .cell-group.horizontal, .host .cell-icon, .host .cell-graphics, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark {    height: 100%;    flex-direction: column; }.host .cell.align-left, .host .cell-group.align-left > *, .host .cell-group.currency > *:nth-child(2) {  text-align: left; }.host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host .cell.align-right, .host .cell.currency, .host .cell-group.align-right > *, .host .cell-group.currency > *:first-child, .host .cell-number, .host .row .cell__sorter {  text-align: right; }.host .row .cell-button button button, .host .cell.align-center, .host .cell-group.align-center > *, .host .error-wrapper, .host .loader__messenger, .host .row.loading:after, .host .grid-group-summary .summary-aggregation-title, .host .carousel__cell, .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group,.host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group,.host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group {  text-align: center; }.host .row .cell-button button button--hidden, .host .cell-icon .hidden {  display: none !important; }.host .loader {  position: absolute; }  .host .loader {    z-index: 1; }.host .cell-icon .svg__circle, .host .cell-number.cell-trend .svg__circle, .host .cell-number.cell-harvey-ball .svg__circle {  fill: #ddd;  stroke: var(--vc-color--highlight, #4680FE);  stroke-width: 10px;  transition: stroke-dasharray .3s ease; }.host .cell-icon svg.svg__harvey, .host .cell-number.cell-trend svg.svg__harvey, .host .cell-number.cell-harvey-ball svg.svg__harvey {  transform: rotate(-90deg);  background: #ddd;  border-radius: 50%;  flex-shrink: 0; }.host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {  border: 1px solid rgba(0, 0, 0, 0.1);  border-radius: var(--vc-pill-border-radius, 20px);  transition: all var(--vc-transition-time, 0.2s) ease-in-out;  height: 20px;  padding: 2px 10px;  margin: 5px 0;  cursor: default; }  .host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {    background: var(--vc-pill-background, white);    color: var(--vc-pill-color, #4680FE); }.host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host, .host .cell-measure {  font-family: var(--vc-font-family, \"Montserrat\", sans-serif);  font-size: var(--vc-font-size, 13px); }@keyframes ripple {  0% {    transform: scale(0, 0);    opacity: 1; }  20% {    transform: scale(25, 25);    opacity: 1; }  100% {    opacity: 0;    transform: scale(40, 40); } }@-webkit-keyframes sk-foldCubeAngle {  0%, 10% {    -webkit-transform: perspective(140px) rotateX(-180deg);    transform: perspective(140px) rotateX(-180deg);    opacity: 0; }  25%, 75% {    -webkit-transform: perspective(140px) rotateX(0deg);    transform: perspective(140px) rotateX(0deg);    opacity: 1; }  90%, 100% {    -webkit-transform: perspective(140px) rotateY(180deg);    transform: perspective(140px) rotateY(180deg);    opacity: 0; } }@keyframes popup-slide-up {  0% {    opacity: 0;    margin-top: -10px; }  100% {    opacity: 1;    margin-top: 0; } }@keyframes bounce {  0% {    transform: scale(0.9); }  50% {    transform: scale(1.05); }  100% {    transform: scale(0.95); } }@-webkit-keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@keyframes anim-effect-ivana-1 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  100% {    opacity: 0;    -webkit-transform: scale3d(1.1, 1.1, 1);    transform: scale3d(1.1, 1.1, 1); } }@-webkit-keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }@keyframes anim-effect-ivana-2 {  0% {    opacity: 1;    -webkit-transform: scale3d(0.5, 0.5, 1);    transform: scale3d(0.5, 0.5, 1); }  50%, 100% {    opacity: 0;    -webkit-transform: scale3d(1.2, 1.2, 1);    transform: scale3d(1.2, 1.2, 1); } }.host {  color: var(--vc-color--default, #666);  display: block;  min-height: 200px;  overflow: hidden;  position: relative;  /* Grid Grouping */  /* ./Grid Grouping */  /* Grid Infinite */  /* ./Grid Infinite */  /* Grid Loading */  /* ./Grid Loading */  /* Grid Freeze Columns */  /* ./Grid freeze Columns */  /* Grid Custom Scroll */  /* ./Grid Custom Scroll */  /* Grid Sorting */  /* ./Grid Sorting */ }  .host .cell {    background: transparent;    position: relative; }    .host .cell input {      height: calc(100% - 1px); }  .host .cell.subtitle {    font-size: 0.7rem; }  .host .row .cell-button {    border-bottom: 1px solid transparent; }    .host .row .cell-button.cell-padding {      padding: 0; }  .host .theme-layout--compact .row.row-level-1 .cell-button button {    font-size: 11px;    padding: 1px 6px; }  .host .row .cell .cell-changed {    background: var(--vc-grid-cell-changed-background, #fffce4);    transition: .1s ease-in-out; }  .host .core-wrapper .cell-clear {    background-position: center;    background-repeat: no-repeat;    background-size: contain;    box-sizing: border-box;    color: #bbb;    cursor: pointer;    flex-basis: 14px;    flex-shrink: 0;    height: 100%;    width: 14px;    opacity: 0;    transform: scale(1.1);    transition: opacity color var(--vc-transition-time, 0.2s) ease-in-out; }    .host .core-wrapper .cell-clear:hover {      color: var(--vc-color--default, #666);      transition: color var(--vc-transition-time, 0.2s) ease-in-out; }    .host .core-wrapper .cell-clear-disabled {      visibility: hidden; }  .host .core-wrapper .cell-focus .cell-clear {    opacity: 1;    transition: opacity var(--vc-transition-time, 0.2s) ease-in-out; }  .host .cell .cell-collapsed {    display: none !important; }  .host .cell-currency.cell-edit .cell-clear {    margin-right: 4px; }  .host .cell-currency-select {    cursor: pointer;    flex-basis: 36px;    flex-shrink: 0;    height: 100%;    padding: 0 4px;    width: 36px; }  .host .cell-currency.cell-disabled {    padding: 0 4px; }  .host .core-wrapper-editable .cell-currency:not(.cell-disabled) {    padding: 0; }  .host div.cell-date.cell-edit-text {    flex-grow: 1; }  .host div.cell-date.cell-edit .cell-clear {    position: absolute;    right: 4px; }  .host div.cell-date.cell-disabled {    padding-right: 15px; }  .host .cell > .cell-disabled {    background: var(--vc-grid-cell-disabled-background, rgba(0, 0, 0, 0.05));    cursor: default;    height: 100%;    opacity: 0.5; }    .host .cell > .cell-disabled .cell-disabled {      opacity: 1; }    .host .cell > .cell-disabled a,    .host .cell > .cell-disabled input,    .host .cell > .cell-disabled select {      pointer-events: none;      cursor: not-allowed; }  .host .core-wrapper .row .cell-edit > * {    pointer-events: none; }  .host .core-wrapper .row .cell-edit.cell-group {    pointer-events: auto; }  .host .core-wrapper .row .cell-edit.cell-currency.cell-focus > * {    pointer-events: auto; }  .host .core-wrapper .row .cell-edit.focus {    cursor: default; }    .host .core-wrapper .row .cell-edit.focus > * {      pointer-events: auto; }    .host .core-wrapper .row .cell-edit.focus.cell-group * {      pointer-events: auto; }    .host .core-wrapper .row .cell-edit.focus .cell-clear {      opacity: 1;      background: initial; }  .host .cell-fake-element {    opacity: 0;    position: absolute;    width: 0;    height: 0; }  .host .cell-group {    height: 100%; }    .host .cell-group.currency > *:first-child {      padding-right: 2px;      width: 75%; }    .host .cell-group.currency > *:nth-child(2) {      padding: 0; }    .host .cell-group.subtitle > * {      font-size: 0.8rem; }    .host .cell-group.cell-edit div {      padding: 0; }    .host .cell-group > * {      height: 100%;      width: 100%; }      .host .cell-group > *:last-child {        border-right: 0; }  .host .content .cell-group.horizontal div:not(.cell-clear) {    line-height: 40px; }  .host .cell-header-text {    overflow: hidden;    text-overflow: ellipsis; }    .host .cell-header-text .hidden {      display: none; }  .host .cell.header-cell-order-left {    border-left: solid 2px var(--vc-color--highlight, #4680FE) !important; }  .host .cell.header-cell-order-right {    border-right: solid 2px var(--vc-color--highlight, #4680FE) !important; }  .host .cell-multiselect {    box-sizing: border-box;    padding-right: 25px;    height: 100%;    overflow: hidden;    white-space: normal; }    .host .cell-multiselect > div {      margin-top: -1px; }      .host .cell-multiselect > div .multiselect-item {        display: inline-block;        height: 100%;        position: relative;        white-space: pre;        padding-left: 5px;        padding-right: 40px;        margin-top: 1px;        margin-left: -40px; }        .host .cell-multiselect > div .multiselect-item:first-child {          margin-left: 0; }        .host .cell-multiselect > div .multiselect-item-text {          padding: 4px 6px 4px 6px; }        .host .cell-multiselect > div .multiselect-item-more {          height: 100%;          padding-left: 10px;          position: absolute; }    .host .cell-multiselect .cell-clear {      background: white;      position: absolute;      right: 4px;      top: 0;      line-height: 40px; }    .host .cell-multiselect.cell-changed .cell-clear {      background: var(--vc-grid-cell-changed-background, #fffce4); }  .host .static-class_row-group .cell-multiselect {    padding-right: 0; }  .host .theme-layout--compact .row.row-level-1 .cell-multiselect > div .multiselect-item-text {    font-size: 11px;    font-weight: 500;    padding: 1px 4px; }  .host .theme-layout--compact .row.row-level-1 .cell-multiselect .cell-clear {    line-height: 20px; }  .host .cell-number {    align-items: center;    height: 100%;    overflow: hidden;    text-overflow: ellipsis; }    .host .cell-number > div {      flex-grow: 0;      flex-basis: 24px;      /* below is required for proper get column width */      width: 24px;      display: inline-block; }  .host .cell-padding {    padding: 0 4px; }    .host .cell-padding.cell-group {      padding: 0; }  .host .cell-select {    height: 100%; }  .host .cell-text {    height: 100%;    overflow: hidden;    text-overflow: ellipsis; }  .host .cell--background-success {    background: rgba(var(--color-success, #50B12D), 0.15); }  .host .cell--background-warning {    background: rgba(var(--color-warning, #FFB64D), 0.25); }  .host .cell--background-danger {    background: rgba(var(--color-danger, #fb5252), 0.25); }  .host .cell--background-info {    background: rgba(var(--color-info, #4680FE), 0.15); }  .host .cell--background-disabled {    background: rgba(154, 154, 154, 0.1); }  .host .cell-group.cell-disabled .cell--background-success,  .host .cell-group.cell-disabled .cell--background-warning,  .host .cell-group.cell-disabled .cell--background-danger,  .host .cell-group.cell-disabled .cell--background-info,  .host .cell-group.cell-disabled .cell--background-disabled {    background: transparent; }  .host .cell--bar-success {    border-left: 4px solid var(--color-success, #50B12D); }  .host .cell--bar-warning {    border-left: 4px solid var(--color-warning, #FFB64D); }  .host .cell--bar-danger {    border-left: 4px solid var(--color-danger, #fb5252); }  .host .cell--bar-info {    border-left: 4px solid var(--color-info, #4680FE); }  .host .cell--bar-disabled {    border-left: 4px solid rgba(154, 154, 154, 0.1); }  .host .cell--text-success, .host .cell--text-success * {    color: var(--color-success, #50B12D); }  .host .cell--text-warning, .host .cell--text-warning * {    color: var(--color-warning, #FFB64D); }  .host .cell--text-danger, .host .cell--text-danger * {    color: var(--color-danger, #fb5252); }  .host .cell--text-info, .host .cell--text-info * {    color: var(--color-info, #4680FE); }  .host .cell--text-disabled, .host .cell--text-disabled * {    color: rgba(var(--color-text-2, #42526E), 0.5); }  .host .cell--triangle-success:before, .host .cell--triangle-warning:before, .host .cell--triangle-danger:before, .host .cell--triangle-info:before, .host .cell--triangle-disabled:before {    transition: all 0.2s ease-in-out;    width: 0;    height: 0;    content: \"\";    font-size: 28px;    position: absolute;    right: 0;    bottom: 0;    border-left: transparent 5px solid;    border-top: transparent 5px solid; }  .host .cell--triangle-success:before {    border-right: var(--color-success, #50B12D) 5px solid;    border-bottom: var(--color-success, #50B12D) 5px solid; }  .host .cell--triangle-warning:before {    border-right: var(--color-warning, #FFB64D) 5px solid;    border-bottom: var(--color-warning, #FFB64D) 5px solid; }  .host .cell--triangle-danger:before {    border-right: var(--color-danger, #fb5252) 5px solid;    border-bottom: var(--color-danger, #fb5252) 5px solid; }  .host .cell--triangle-info:before {    border-right: var(--color-info, #4680FE) 5px solid;    border-bottom: var(--color-info, #4680FE) 5px solid; }  .host .cell--triangle-disabled:before {    border-right: 5px solid rgba(154, 154, 154, 0.1);    border-bottom: 5px solid rgba(154, 154, 154, 0.1); }  .host .error-wrapper {    padding: 30px 0;    width: 100%; }  .host .vertical-line {    display: none;    position: absolute;    background-color: var(--vc-color--highlight, #4680FE);    top: 0;    bottom: 0;    left: 0;    width: 2px;    z-index: 10;    pointer-events: none;    transform: translate3d(0, 0, 0); }    .host .vertical-line.visible {      display: block; }    .host .vertical-line.group-resize {      z-index: 0; }  .host .focus-border {    display: none;    border: 2px solid var(--vc-color--highlight, #4680FE);    opacity: 0;    position: absolute;    pointer-events: none;    transition: all 0.1s ease-in-out;    z-index: 20;    box-sizing: border-box; }    .host .focus-border.entered {      background: var(--vc-grid-cell-entered-background, rgba(152, 198, 255, 0.15));      transition: all 0.1s ease-in-out; }    .host .focus-border.visible {      display: block;      opacity: 1; }    .host .focus-border.error {      border: 2px solid var(--color-danger, #fb5252); }  .host .group {    display: block;    position: absolute;    padding-left: 10px;    z-index: 20;    border-bottom: 0;    background: #f7f7f7;    color: #666666;    height: inherit;    font-weight: 400;    line-height: inherit; }    .host .group:hover {      background: #efefef; }    .host .group .cell {      display: inline-block;      margin-right: 10px; }    .host .group .more {      display: none; }    .host .group.rolled .more {      display: inline-block;      width: auto; }    .host .group .cell-resize {      margin-right: 10px; }      .host .group .cell-resize:before {        content: '';        position: absolute;        border-right: 2px solid rgba(0, 0, 0, 0.1);        height: 20px;        width: 2px;        top: 10px; }  .host.group-indent .group[deep=\"0\"] {    z-index: 7;    padding-left: -15px; }    .host.group-indent .group[deep=\"0\"]:before {      left: -5px; }  .host.group-indent .group[deep=\"1\"] {    z-index: 6;    padding-left: 0px; }    .host.group-indent .group[deep=\"1\"]:before {      left: 10px; }  .host.group-indent .group[deep=\"2\"] {    z-index: 5;    padding-left: 15px; }    .host.group-indent .group[deep=\"2\"]:before {      left: 25px; }  .host.group-indent .group[deep=\"3\"] {    z-index: 4;    padding-left: 30px; }    .host.group-indent .group[deep=\"3\"]:before {      left: 40px; }  .host.group-indent .group[deep=\"4\"] {    z-index: 3;    padding-left: 45px; }    .host.group-indent .group[deep=\"4\"]:before {      left: 55px; }  .host.group-indent .group[deep=\"5\"] {    z-index: 2;    padding-left: 60px; }    .host.group-indent .group[deep=\"5\"]:before {      left: 70px; }  .host.group-indent .group[deep=\"6\"] {    z-index: 1;    padding-left: 75px; }    .host.group-indent .group[deep=\"6\"]:before {      left: 85px; }  .host.group-indent .group[deep=\"7\"] {    z-index: 0;    padding-left: 90px; }    .host.group-indent .group[deep=\"7\"]:before {      left: 100px; }  .host.group-indent .group[deep=\"8\"] {    z-index: -1;    padding-left: 105px; }    .host.group-indent .group[deep=\"8\"]:before {      left: 115px; }  .host.group-indent .group[deep=\"9\"] {    z-index: -2;    padding-left: 120px; }    .host.group-indent .group[deep=\"9\"]:before {      left: 130px; }  .host.group-indent .group[deep=\"10\"] {    z-index: -3;    padding-left: 135px; }    .host.group-indent .group[deep=\"10\"]:before {      left: 145px; }  .host.group-indent .group[deep=\"11\"] {    z-index: -4;    padding-left: 150px; }    .host.group-indent .group[deep=\"11\"]:before {      left: 160px; }  .host.group-indent .group[deep=\"12\"] {    z-index: -5;    padding-left: 165px; }    .host.group-indent .group[deep=\"12\"]:before {      left: 175px; }  .host.group-indent .group[deep=\"13\"] {    z-index: -6;    padding-left: 180px; }    .host.group-indent .group[deep=\"13\"]:before {      left: 190px; }  .host.group-indent .group[deep=\"14\"] {    z-index: -7;    padding-left: 195px; }    .host.group-indent .group[deep=\"14\"]:before {      left: 205px; }  .host.group-indent .group[deep=\"15\"] {    z-index: -8;    padding-left: 210px; }    .host.group-indent .group[deep=\"15\"]:before {      left: 220px; }  .host .cell-abstract-group .row-group {    border-bottom: 0;    background: var(--vc-header-background, #ffffff);    color: var(--vc-color--default, #666);    font-weight: inherit;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host .cell-abstract-group .row-group .cell {      border: 0;      background: transparent; }    .host .cell-abstract-group .row-group > .cell:not(.more) {      min-width: 40px; }    .host .cell-abstract-group .row-group .cell-group > div {      overflow: visible; }  .host .row .cell-group .cell {    border-right: none; }  .host .row:hover.event-click {    cursor: pointer; }  .host .row:hover .row-group {    background: rgba(0, 0, 0, 0.05);    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .content .row .static-class_row-group .row-group .event-click {    transition: color var(--vc-transition-time, 0.2s) ease-in-out; }    .host .content .row .static-class_row-group .row-group .event-click:hover {      color: var(--vc-color--highlight, #4680FE);      transition: color var(--vc-transition-time, 0.2s) ease-in-out; }  .host .content .row .static-class_row-group .row-group .cell-disabled {    background: transparent;    opacity: 1; }  .host .content .row .static-class_row-group .row-group .multiselect-item:last-child {    padding-right: 0; }    .host .content .row .static-class_row-group .row-group .multiselect-item:last-child-more {      display: none; }  .host .core-wrapper.infinite .content .layer .row .static-class_row-group .row-group .cell.asc,  .host .core-wrapper.infinite .content .layer .row .static-class_row-group .row-group .cell.desc,  .host .core-wrapper.infinite .freeze-column .layer .row .static-class_row-group .row-group .cell.asc,  .host .core-wrapper.infinite .freeze-column .layer .row .static-class_row-group .row-group .cell.desc {    padding-right: 18px; }  .host .core-wrapper.infinite .content .layer .row.loading,  .host .core-wrapper.infinite .freeze-column .layer .row.loading {    z-index: 15; }  .host .loader {    display: none;    pointer-events: none;    top: 0;    bottom: 0;    left: 0;    right: 0;    background-color: rgba(255, 255, 255, 0);    transition: background-color 0.1s ease-in-out; }    .host .loader__wrapper {      position: absolute;      top: 50%;      left: 50%;      margin-left: -20px;      margin-top: -20px; }    .host .loader__messenger {      position: absolute;      top: 50%;      left: 0;      height: 20px;      margin-top: 40px;      right: 0;      color: var(--vc-color--highlight, #4680FE);      z-index: 2; }    .host .loader--enabled {      display: block;      background-color: rgba(255, 255, 255, 0.5);      pointer-events: auto; }  .host .core-wrapper.freeze-column .context-menu-wrapper {    cursor: pointer;    height: 24px;    position: absolute;    right: 1px;    top: 0;    width: 24px; }  .host .core-wrapper.freeze-column .freeze-column,  .host .core-wrapper.freeze-column .freeze-row-freeze-column,  .host .core-wrapper.freeze-column .summary-freeze-column,  .host .core-wrapper.freeze-column .header-freeze {    box-shadow: var(--vc-grid-layer-shadow, 0 0 20px 0 rgba(0, 0, 0, 0.1));    position: relative;    z-index: 10; }  .host .core-wrapper.freeze-column .freeze-column {    flex-shrink: 0; }    .host .core-wrapper.freeze-column .freeze-column .row {      left: 0;      width: 100%;      min-width: inherit;      position: absolute; }      .host .core-wrapper.freeze-column .freeze-column .row.removed-row {        overflow: inherit; }      .host .core-wrapper.freeze-column .freeze-column .row .cell.summary-aggregation:last-child {        border-right: 1px solid var(--vc-grid-border-color, #e7e7e7); }    .host .core-wrapper.freeze-column .freeze-column.hidden {      display: none; }  .host .core-wrapper.freeze-column .scroll-y .scroll-x,  .host .core-wrapper.freeze-column .freeze-scroll-x,  .host .core-wrapper.freeze-column .summary-scroll-x,  .host .core-wrapper.freeze-column .header-scroll-x {    order: 1;    flex-shrink: 1;    flex-grow: 1; }  .host .progress-bar-wrapper {    width: 150px;    height: 3px;    user-select: none; }  .host .progress-bar-bounding {    fill: #f1f1f1;    height: 10px; }  .host .progress-bar-element {    fill: var(--vc-color--highlight, #4680FE);    height: 10px; }  .host .progress-bar-resizer {    fill: var(--vc-color--highlight, #4680FE);    height: 10px; }    .host .progress-bar-resizer-enabled {      cursor: e-resize; }  .host .row .cell-button button button {    background: transparent;    border-radius: var(--vc-grid-border-radius, 20px);    border: 0;    cursor: pointer;    color: var(--vc-color--default, #666);    display: inline-block;    font-family: var(--vc-font-family, \"Montserrat\", sans-serif);    font-size: var(--vc-font-size, 13px);    font-weight: 500;    height: 30px;    letter-spacing: 1px;    overflow: hidden;    padding: 4px 8px;    position: relative;    text-transform: uppercase;    text-decoration: none;    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    width: auto; }    .host .row .cell-button button button:focus {      outline: 0; }    .host .row .cell-button button button:hover {      color: var(--vc-color--highlight, #4680FE);      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host .row .cell-button button button--primary {      background: var(--vc-color--highlight, #4680FE);      color: white; }      .host .row .cell-button button button--primary:hover {        background: #2b66e6;        color: white;        transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host .row .cell-button button button--secondary {      border: 2px solid var(--vc-color--highlight, #4680FE); }    .host .row .cell-button button button--ghost {      border: 0; }    .host .row .cell-button button button--info {      background: var(--color-info, #4680FE); }    .host .row .cell-button button button--success {      background: var(--color-success, #50B12D); }    .host .row .cell-button button button--warning {      background: var(--color-warning, #FFB64D); }    .host .row .cell-button button button--danger {      background: var(--color-danger, #fb5252); }    .host .row .cell-button button button--small {      transform: scale(0.8); }    .host .row .cell-button button button--disabled, .host .row .cell-button button button[disabled] {      color: #bbb;      cursor: default; }    .host .row .cell-button button button.vui-select-trigger > span + * {      transform: rotate3d(0, 0, 0, 0);      transition: all 0.2s ease-in-out; }    .host .row .cell-button button button.vui-select-trigger.active > span + * {      transform: rotate3d(1, 0, 0, -180deg) translateY(3px);      transition: all 0.2s ease-in-out; }  .host .row .cell-button button {    background: transparent;    border-radius: 2px;    border: 1px solid #d6e3ff;    color: #4a83fe;    height: auto;    margin: 0 auto;    padding: 3px 6px;    text-overflow: ellipsis;    font-weight: 400;    transition-duration: var(--vc-transition-time, 0.2s); }    .host .row .cell-button button:hover {      background: var(--vc-color--highlight, #4680FE);      border: 1px solid var(--vc-color--highlight, #4680FE);      color: white;      transition-duration: var(--vc-transition-time, 0.2s); }  .host .row .cell-button button:hover {    background: var(--vc-color--highlight, #4680FE);    color: white;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input {    background: transparent;    border: 1px solid transparent;    color: var(--vc-color--default, #666);    display: inline-block;    height: calc(100% - 1px);    padding: 0 4px;    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    width: 100%; }    .host .cell-currency.cell-edit input:focus, .host div.cell-date.cell-edit-text:focus, .host .cell-group.cell-edit input:focus, .host .cell-number.cell-edit input:focus, .host .cell-text.cell-edit input:focus {      outline: 0;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input {    padding: 0;    flex-grow: 1;    text-overflow: ellipsis; }  .host .cell-link a {    color: var(--vc-color--highlight, #4680FE);    cursor: pointer;    transition: all 0.2s ease-in-out;    text-decoration: none; }    .host .cell-link a:hover {      color: #135dfe;      transition: all 0.2s ease-in-out; }  .host .cell {    box-sizing: border-box;    border-right: 1px solid var(--vc-grid-vertical-border, #eaeaea);    color: var(--vc-color--default, #666);    font-size: var(--vc-font-size, 13px);    height: 100%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap; }  .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .core-wrapper .cell-clear, .host div.cell-date, .host .cell-group, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-icon, .host .cell-graphics, .host .cell-graphics > div, .host .cell-number.cell-trend, .host .cell-number.cell-harvey-ball, .host .cell-number.cell-edit, .host .cell-progress-bar, .host .cell-text.cell-edit, .host .cell-aggregation, .host .cell-abstract-group .row-group, .host .core-wrapper.freeze-column .scroll-y,  .host .core-wrapper.freeze-column .freeze-scroll-y,  .host .core-wrapper.freeze-column .summary-scroll-y,  .host .core-wrapper.freeze-column .header-scroll-y, .host .row.removed-row .removed-row-icon, .host .row .row-full-width, .host .grid-group-summary, .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .scene, .host .core-wrapper .freeze-scroll-y.visible,  .host .core-wrapper .summary-scroll-y.visible, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-wrapper,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-wrapper, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .cell__sorter,  .host .core-wrapper .header-scroll-y .header-freeze .cell__sorter,  .host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter, .host .core-wrapper .header-scroll-y .header .row,  .host .core-wrapper .header-scroll-y .header-freeze .row,  .host .core-wrapper .header-scroll-y .header-scroll-x .row, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {    display: flex; }    .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-graphics, .host .cell-graphics > div, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,    .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {      justify-content: center; }    .host div.cell-date, .host .cell-icon {      justify-content: flex-start; }    .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item {      justify-content: flex-end; }    .host .cell-number {      justify-content: space-between; }    .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host div.cell-date, .host .cell-group.horizontal, .host .cell-icon, .host .cell-graphics, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,    .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark {      height: 100%;      flex-direction: column; }  .host .cell.align-left, .host .cell-group.align-left > *, .host .cell-group.currency > *:nth-child(2) {    text-align: left; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host .cell.align-right, .host .cell.currency, .host .cell-group.align-right > *, .host .cell-group.currency > *:first-child, .host .cell-number, .host .row .cell__sorter {    text-align: right; }  .host .row .cell-button button button, .host .cell.align-center, .host .cell-group.align-center > *, .host .error-wrapper, .host .loader__messenger, .host .row.loading:after, .host .grid-group-summary .summary-aggregation-title, .host .carousel__cell, .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group {    text-align: center; }  .host .row .cell-button button button--hidden, .host .cell-icon .hidden {    display: none !important; }  .host .loader {    position: absolute; }    .host .loader {      z-index: 1; }  .host .cell-icon .svg__circle, .host .cell-number.cell-trend .svg__circle, .host .cell-number.cell-harvey-ball .svg__circle {    fill: #ddd;    stroke: var(--vc-color--highlight, #4680FE);    stroke-width: 10px;    transition: stroke-dasharray .3s ease; }  .host .cell-icon svg.svg__harvey, .host .cell-number.cell-trend svg.svg__harvey, .host .cell-number.cell-harvey-ball svg.svg__harvey {    transform: rotate(-90deg);    background: #ddd;    border-radius: 50%;    flex-shrink: 0; }  .host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {    border: 1px solid rgba(0, 0, 0, 0.1);    border-radius: var(--vc-pill-border-radius, 20px);    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    height: 20px;    padding: 2px 10px;    margin: 5px 0;    cursor: default; }    .host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {      background: var(--vc-pill-background, white);      color: var(--vc-pill-color, #4680FE); }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host .host, .host .cell-measure {    font-family: var(--vc-font-family, \"Montserrat\", sans-serif);    font-size: var(--vc-font-size, 13px); }  .host .row {    box-sizing: content-box;    height: 40px;    line-height: 40px;    left: 0;    margin: 0;    min-width: inherit;    overflow: hidden;    transition: height var(--vc-transition-time, 0.2s) ease-in-out, top var(--vc-transition-time, 0.2s) ease-in-out;    width: inherit;    white-space: nowrap; }    .host .row > .cell:not(.header-cell-abstract-group):not(.static-class_row-group):not(.cell-rowGroup) {      border-bottom: 1px solid var(--vc-grid-horizontal-border, #eaeaea); }    .host .row > .cell.cell-rowGroup {      border-top: 1px solid var(--vc-grid-horizontal-border, #eaeaea); }    .host .row.row-level-2 {      height: 40px;      line-height: 40px;      transition: all .1s ease; }    .host .row.row-level-3 {      height: 60px;      line-height: 60px;      transition: all .1s ease; }    .host .row.row-level-4 {      height: 80px;      line-height: 80px;      transition: all .1s ease; }    .host .row.row-level-5 {      height: 100px;      line-height: 100px;      transition: all .1s ease; }    .host .row.row-level-6 {      height: 120px;      line-height: 120px;      transition: all .1s ease; }    .host .row.row-level-7 {      height: 140px;      line-height: 140px;      transition: all .1s ease; }    .host .row.row-level-8 {      height: 160px;      line-height: 160px;      transition: all .1s ease; }    .host .row.row-level-9 {      height: 180px;      line-height: 180px;      transition: all .1s ease; }    .host .row.row-level-10 {      height: 200px;      line-height: 200px;      transition: all .1s ease; }    .host .row.removed-row {      position: relative;      border-bottom: 1px solid var(--vc-grid-border-color, #e7e7e7); }      .host .row.removed-row .removed-row-icon {        width: auto;        margin: 0 10px; }      .host .row.removed-row .removed-row-restore {        color: var(--vc-color--highlight, #4680FE);        padding-left: 10px;        transition: all 0.1s ease-in-out; }        .host .row.removed-row .removed-row-restore:hover {          color: #135dfe;          cursor: pointer;          transition: all 0.1s ease-in-out; }    .host .row.hidden {      display: none; }    .host .row.loading {      z-index: 15;      background-color: rgba(255, 255, 255, 0.6); }      .host .row.loading:after {        display: block;        height: 24px;        width: auto; }      .host .row.loading .group,      .host .row.loading .cell {        display: none; }    .host .row .row-full-width {      background: #ffffff;      position: absolute;      width: 100vw;      z-index: 15; }  .host .content .layer {    position: absolute;    height: inherit;    width: inherit;    min-width: inherit; }    .host .content .layer .row {      position: absolute;      z-index: 5; }  .host .scroll-v {    width: 100%;    overflow-x: auto;    position: absolute;    bottom: 0;    right: 0;    left: 0; }  .host .scroll-v-bar {    height: 1px; }  .host .scroll-v-mask {    position: absolute;    left: 0;    bottom: 0;    height: 0; }  .host .scroll-measure-wrapper {    overflow: scroll;    width: 100px;    height: 100px; }    .host .scroll-measure-wrapper .scroll-measure {      height: 150px; }  .host .row .cell {    position: relative; }    .host .row .cell.event-click {      cursor: pointer; }    .host .row .cell__sorter {      position: absolute;      z-index: 10;      top: 0;      bottom: 0;      right: 2px; }      .host .row .cell__sorter vui-counter {        margin-top: 16px; }  .host .row .cell-button button button {    background: transparent;    border-radius: var(--vc-grid-border-radius, 20px);    border: 0;    cursor: pointer;    color: var(--vc-color--default, #666);    display: inline-block;    font-family: var(--vc-font-family, \"Montserrat\", sans-serif);    font-size: var(--vc-font-size, 13px);    font-weight: 500;    height: 30px;    letter-spacing: 1px;    overflow: hidden;    padding: 4px 8px;    position: relative;    text-transform: uppercase;    text-decoration: none;    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    width: auto; }    .host .row .cell-button button button:focus {      outline: 0; }    .host .row .cell-button button button:hover {      color: var(--vc-color--highlight, #4680FE);      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host .row .cell-button button button--primary {      background: var(--vc-color--highlight, #4680FE);      color: white; }      .host .row .cell-button button button--primary:hover {        background: #2b66e6;        color: white;        transition: all var(--vc-transition-time, 0.2s) ease-in-out; }    .host .row .cell-button button button--secondary {      border: 2px solid var(--vc-color--highlight, #4680FE); }    .host .row .cell-button button button--ghost {      border: 0; }    .host .row .cell-button button button--info {      background: var(--color-info, #4680FE); }    .host .row .cell-button button button--success {      background: var(--color-success, #50B12D); }    .host .row .cell-button button button--warning {      background: var(--color-warning, #FFB64D); }    .host .row .cell-button button button--danger {      background: var(--color-danger, #fb5252); }    .host .row .cell-button button button--small {      transform: scale(0.8); }    .host .row .cell-button button button--disabled, .host .row .cell-button button button[disabled] {      color: #bbb;      cursor: default; }    .host .row .cell-button button button.vui-select-trigger > span + * {      transform: rotate3d(0, 0, 0, 0);      transition: all 0.2s ease-in-out; }    .host .row .cell-button button button.vui-select-trigger.active > span + * {      transform: rotate3d(1, 0, 0, -180deg) translateY(3px);      transition: all 0.2s ease-in-out; }  .host .row .cell-button button {    background: transparent;    border-radius: 2px;    border: 1px solid #d6e3ff;    color: #4a83fe;    height: auto;    margin: 0 auto;    padding: 3px 6px;    text-overflow: ellipsis;    font-weight: 400;    transition-duration: var(--vc-transition-time, 0.2s); }    .host .row .cell-button button:hover {      background: var(--vc-color--highlight, #4680FE);      border: 1px solid var(--vc-color--highlight, #4680FE);      color: white;      transition-duration: var(--vc-transition-time, 0.2s); }  .host .row .cell-button button:hover {    background: var(--vc-color--highlight, #4680FE);    color: white;    transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input {    background: transparent;    border: 1px solid transparent;    color: var(--vc-color--default, #666);    display: inline-block;    height: calc(100% - 1px);    padding: 0 4px;    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    width: 100%; }    .host .cell-currency.cell-edit input:focus, .host div.cell-date.cell-edit-text:focus, .host .cell-group.cell-edit input:focus, .host .cell-number.cell-edit input:focus, .host .cell-text.cell-edit input:focus {      outline: 0;      transition: all var(--vc-transition-time, 0.2s) ease-in-out; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input {    padding: 0;    flex-grow: 1;    text-overflow: ellipsis; }  .host .cell-link a {    color: var(--vc-color--highlight, #4680FE);    cursor: pointer;    transition: all 0.2s ease-in-out;    text-decoration: none; }    .host .cell-link a:hover {      color: #135dfe;      transition: all 0.2s ease-in-out; }  .host .cell {    box-sizing: border-box;    border-right: 1px solid var(--vc-grid-vertical-border, #eaeaea);    color: var(--vc-color--default, #666);    font-size: var(--vc-font-size, 13px);    height: 100%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap; }  .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .core-wrapper .cell-clear, .host div.cell-date, .host .cell-group, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-icon, .host .cell-graphics, .host .cell-graphics > div, .host .cell-number.cell-trend, .host .cell-number.cell-harvey-ball, .host .cell-number.cell-edit, .host .cell-progress-bar, .host .cell-text.cell-edit, .host .cell-aggregation, .host .cell-abstract-group .row-group, .host .core-wrapper.freeze-column .scroll-y,  .host .core-wrapper.freeze-column .freeze-scroll-y,  .host .core-wrapper.freeze-column .summary-scroll-y,  .host .core-wrapper.freeze-column .header-scroll-y, .host .row.removed-row .removed-row-icon, .host .row .row-full-width, .host .grid-group-summary, .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .scene, .host .core-wrapper .freeze-scroll-y.visible,  .host .core-wrapper .summary-scroll-y.visible, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-wrapper,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-wrapper, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,  .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .cell__sorter,  .host .core-wrapper .header-scroll-y .header-freeze .cell__sorter,  .host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter, .host .core-wrapper .header-scroll-y .header .row,  .host .core-wrapper .header-scroll-y .header-freeze .row,  .host .core-wrapper .header-scroll-y .header-scroll-x .row, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {    display: flex; }    .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host .cell-group.horizontal, .host .cell-header-text, .host .cell-graphics, .host .cell-graphics > div, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,    .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark > div,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark > div,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark > div {      justify-content: center; }    .host div.cell-date, .host .cell-icon {      justify-content: flex-start; }    .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item, .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item {      justify-content: flex-end; }    .host .cell-number {      justify-content: space-between; }    .host .cell.summary-group, .host .cell .cell-action, .host .row .cell-button, .host .cell-checkbox, .host div.cell-date, .host .cell-group.horizontal, .host .cell-icon, .host .cell-graphics, .host .cell-progress-bar, .host .cell-aggregation, .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group, .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,    .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze, .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-abstract-mark,    .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-abstract-mark {      height: 100%;      flex-direction: column; }  .host .cell.align-left, .host .cell-group.align-left > *, .host .cell-group.currency > *:nth-child(2) {    text-align: left; }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host .cell.align-right, .host .cell.currency, .host .cell-group.align-right > *, .host .cell-group.currency > *:first-child, .host .cell-number, .host .row .cell__sorter {    text-align: right; }  .host .row .cell-button button button, .host .cell.align-center, .host .cell-group.align-center > *, .host .error-wrapper, .host .loader__messenger, .host .row.loading:after, .host .grid-group-summary .summary-aggregation-title, .host .carousel__cell, .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group,  .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group,  .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group {    text-align: center; }  .host .row .cell-button button button--hidden, .host .cell-icon .hidden {    display: none !important; }  .host .loader {    position: absolute; }    .host .loader {      z-index: 1; }  .host .cell-icon .svg__circle, .host .cell-number.cell-trend .svg__circle, .host .cell-number.cell-harvey-ball .svg__circle {    fill: #ddd;    stroke: var(--vc-color--highlight, #4680FE);    stroke-width: 10px;    transition: stroke-dasharray .3s ease; }  .host .cell-icon svg.svg__harvey, .host .cell-number.cell-trend svg.svg__harvey, .host .cell-number.cell-harvey-ball svg.svg__harvey {    transform: rotate(-90deg);    background: #ddd;    border-radius: 50%;    flex-shrink: 0; }  .host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {    border: 1px solid rgba(0, 0, 0, 0.1);    border-radius: var(--vc-pill-border-radius, 20px);    transition: all var(--vc-transition-time, 0.2s) ease-in-out;    height: 20px;    padding: 2px 10px;    margin: 5px 0;    cursor: default; }    .host .cell-multiselect > div .multiselect-item-text, .host .grid-group-summary .summary-aggregation-wrapper {      background: var(--vc-pill-background, white);      color: var(--vc-pill-color, #4680FE); }  .host .cell-currency.cell-edit input, .host .cell-number.cell-edit input, .host .cell-text.cell-edit input, .host div.cell-date.cell-edit-text, .host .cell-group.cell-edit input, .host .host, .host .cell-measure {    font-family: var(--vc-font-family, \"Montserrat\", sans-serif);    font-size: var(--vc-font-size, 13px); }  .host .grid-group-summary {    flex-wrap: wrap;    height: auto;    width: 100%; }    .host .grid-group-summary .summary-aggregation-title {      height: 24px;      line-height: 24px;      display: inline-block;      padding: 0 8px;      color: white; }    .host .grid-group-summary .summary-aggregation-wrapper {      background: transparent;      border-radius: 0;      border: 0;      color: #ffffff;      cursor: pointer;      display: inline-block;      height: 24px;      line-height: 24px;      padding: 0;      width: 130px; }      .host .grid-group-summary .summary-aggregation-wrapper > div {        margin-bottom: 0; }      .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item .summary-aggregation-label {        height: 100%;        background-size: contain;        background-position: center; }      .host .grid-group-summary .summary-aggregation-wrapper .summary-aggregation-item .summary-aggregation-value {        overflow: hidden;        text-overflow: ellipsis;        white-space: nowrap;        padding-right: 20px;        margin-left: 5px; }      .host .grid-group-summary .summary-aggregation-wrapper .carousel__cell {        line-height: 24px; }  .host .row.summary-row > .cell {    border: 0; }    .host .row.summary-row > .cell.summary-aggregation {      overflow: hidden;      height: 40px; }      .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item {        height: 40px;        overflow: hidden;        text-overflow: ellipsis;        white-space: nowrap; }        .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item .summary-aggregation-label {          height: 100%;          background-size: contain;          background-position: center; }        .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item .summary-aggregation-value {          overflow: hidden;          text-overflow: ellipsis;          white-space: nowrap;          padding-right: 20px; }        .host .row.summary-row > .cell.summary-aggregation .summary-aggregation-item .icon-range + .summary-aggregation-value {          text-overflow: clip; }      .host .row.summary-row > .cell.summary-aggregation .scene {        background: transparent;        border-radius: 0;        height: 40px;        margin: 0; }        .host .row.summary-row > .cell.summary-aggregation .scene .carousel__cell {          background: white;          line-height: 40px; }        .host .row.summary-row > .cell.summary-aggregation .scene .icon-avg:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-count:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-est:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-max:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-min:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-range:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-median:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-mode:before,        .host .row.summary-row > .cell.summary-aggregation .scene .icon-sum:before {          background: white;          color: var(--vc-color--highlight, #4680FE); }  .host .core-wrapper.theme-layout--compact .summary-scroll-y,  .host .core-wrapper.theme-layout--compact .grid-group-summary {    height: 26px;    padding: 1px 0;    width: 100%; }    .host .core-wrapper.theme-layout--compact .summary-scroll-y .scene,    .host .core-wrapper.theme-layout--compact .grid-group-summary .scene {      margin: 0 3px 0 0; }      .host .core-wrapper.theme-layout--compact .summary-scroll-y .scene .carousel__cell,      .host .core-wrapper.theme-layout--compact .grid-group-summary .scene .carousel__cell {        line-height: 20px; }  .host .core-wrapper.theme-layout--compact .row.summary-row > .cell.summary-aggregation {    height: 20px; }    .host .core-wrapper.theme-layout--compact .row.summary-row > .cell.summary-aggregation .summary-aggregation-item {      height: 20px; }    .host .core-wrapper.theme-layout--compact .row.summary-row > .cell.summary-aggregation .scene {      height: 20px; }      .host .core-wrapper.theme-layout--compact .row.summary-row > .cell.summary-aggregation .scene .carousel__cell {        line-height: 20px; }  .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group .summary-aggregation-title,  .host .core-wrapper.theme-layout--compact .row.row-level-1 .summary-group .summary-aggregation-wrapper {    height: 20px;    margin-top: -1px;    line-height: 20px; }  .host .core-wrapper.theme-layout--compact .row.row-level-1 .cell.summary-aggregation .summary-aggregation-label {    line-height: 20px;    height: 20px; }  .host .core-wrapper.freeze-column .row.summary-row > .cell:first-child {    border-right: 1px solid var(--vc-grid-border-color, #e7e7e7); }  .host .core-wrapper.freeze-column .row .row-group .grid-group-summary {    flex-wrap: unset; }  .host .icon-avg:before,  .host .icon-count:before,  .host .icon-est:before,  .host .icon-max:before,  .host .icon-min:before,  .host .icon-range:before,  .host .icon-median:before,  .host .icon-mode:before,  .host .icon-sum:before {    background: rgba(0, 0, 0, 0.15);    color: white;    margin-right: 3px;    padding: 0 2px;    border-radius: 2px; }  .host .icon-avg:before {    content: 'AVG'; }  .host .icon-count:before {    content: 'QTY'; }  .host .icon-median:before {    content: 'MED'; }  .host .icon-mode:before {    content: 'MDE'; }  .host .icon-est:before {    content: 'EST'; }  .host .icon-max:before {    content: 'MAX'; }  .host .icon-min:before {    content: 'MIN'; }  .host .icon-range:before {    content: 'RNG'; }  .host .icon-sum:before {    content: 'SUM'; }  .host .scene {    background: var(--vc-color--highlight, #4680FE);    border-radius: var(--vc-pill-border-radius, 20px);    box-shadow: none;    cursor: pointer;    overflow: hidden;    position: relative;    width: auto;    transition: all 0.2s ease-in-out; }    .host .scene:active .carousel__cell,    .host .scene:active .summary-aggregation-title {      background: #6f9dff;      transition: all 0.2s ease-in-out; }  .host .carousel {    margin: 0;    padding: 0;    width: 100%;    height: 100%;    position: relative;    transform: translateZ(-288px);    transform-style: preserve-3d; }  .host .carousel__cell {    background: var(--vc-color--highlight, #4680FE);    position: absolute;    width: 100%;    height: 100%;    line-height: 24px;    overflow: hidden;    padding: 0 10px 0 0; }  .host .core-wrapper {    background: var(--vc-grid-background, #ffffff);    box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.1);    position: absolute;    top: 0;    left: 0;    right: 0;    bottom: 0; }    .host .core-wrapper.theme-layout--compact .row.row-level-1 {      height: 26px;      line-height: 26px;      transition: height var(--vc-transition-time, 0.2s) ease-in-out, top var(--vc-transition-time, 0.2s) ease-in-out; }    .host .core-wrapper .freeze-scroll-y,    .host .core-wrapper .summary-scroll-y {      background: var(--vc-grid-background, #ffffff);      box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.1);      position: absolute;      overflow: hidden;      left: 0;      right: 0;      z-index: 1; }      .host .core-wrapper .freeze-scroll-y .freeze-scroll-x,      .host .core-wrapper .freeze-scroll-y .summary-scroll-x,      .host .core-wrapper .summary-scroll-y .freeze-scroll-x,      .host .core-wrapper .summary-scroll-y .summary-scroll-x {        transform: translate3d(0, 0, 0);        overflow: hidden;        position: relative; }    .host .core-wrapper .freeze-scroll-y {      top: 0; }    .host .core-wrapper .summary-scroll-y {      bottom: 0;      height: 40px; }      .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell,      .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell {        display: inline-block; }        .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-wrapper,        .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-wrapper {          height: 100%; }        .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell-summary-freeze,        .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell-summary-freeze {          padding-right: 18px; }        .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell.cell-collapsed,        .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell.cell-collapsed {          display: none !important; }        .host .core-wrapper .summary-scroll-y .summary-scroll-x .row .cell .cell,        .host .core-wrapper .summary-scroll-y .summary-freeze-column .row .cell .cell {          flex: 1;          border-right: none; }    .host .core-wrapper .scroll-y {      position: absolute;      top: 0;      left: 0;      right: 0;      bottom: 0;      overflow-y: auto;      overflow-x: hidden;      transform: translate3d(0, 0, 0); }      .host .core-wrapper .scroll-y .scroll-x {        flex-shrink: 0;        overflow-x: hidden;        overflow-y: hidden;        transform: translate3d(0, 0, 0);        z-index: 9; }      .host .core-wrapper .scroll-y .empty {        display: none;        position: absolute;        top: 50%;        left: 50%;        transform: translate(-50%, -50%); }        .host .core-wrapper .scroll-y .empty.visible {          display: block; }    .host .core-wrapper .header-scroll-y {      background: var(--vc-grid-row-header-bg, #ffffff);      box-shadow: var(--vc-grid-row-header-shadow, 0 5px 10px rgba(0, 0, 0, 0.05));      border-bottom: var(--vc-grid-row-header-border, 0);      height: 40px;      overflow: hidden;      position: relative;      z-index: 8; }      .host .core-wrapper .header-scroll-y .header,      .host .core-wrapper .header-scroll-y .header-freeze,      .host .core-wrapper .header-scroll-y .header-scroll-x {        height: 40px;        position: relative; }        .host .core-wrapper .header-scroll-y .header .cell__sorter,        .host .core-wrapper .header-scroll-y .header-freeze .cell__sorter,        .host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter {          pointer-events: none;          transition: all 0.2s ease-in-out; }          .host .core-wrapper .header-scroll-y .header .cell__sorter .priority,          .host .core-wrapper .header-scroll-y .header-freeze .cell__sorter .priority,          .host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter .priority {            position: absolute;            top: -6px;            right: 0;            font-size: .8em; }            .host .core-wrapper .header-scroll-y .header .cell__sorter .priority.hidden,            .host .core-wrapper .header-scroll-y .header-freeze .cell__sorter .priority.hidden,            .host .core-wrapper .header-scroll-y .header-scroll-x .cell__sorter .priority.hidden {              display: none; }        .host .core-wrapper .header-scroll-y .header .header-wrapper,        .host .core-wrapper .header-scroll-y .header-freeze .header-wrapper,        .host .core-wrapper .header-scroll-y .header-scroll-x .header-wrapper {          display: inline-block;          width: inherit;          user-select: none;          -moz-user-select: none; }          .host .core-wrapper .header-scroll-y .header .header-wrapper .context-menu-wrapper,          .host .core-wrapper .header-scroll-y .header-freeze .header-wrapper .context-menu-wrapper,          .host .core-wrapper .header-scroll-y .header-scroll-x .header-wrapper .context-menu-wrapper {            cursor: pointer;            height: 24px;            position: absolute;            right: 1px;            top: 0;            width: 24px; }        .host .core-wrapper .header-scroll-y .header .row,        .host .core-wrapper .header-scroll-y .header-freeze .row,        .host .core-wrapper .header-scroll-y .header-scroll-x .row {          border: 0;          height: 40px;          white-space: nowrap;          overflow: hidden; }          .host .core-wrapper .header-scroll-y .header .row.sized-up *,          .host .core-wrapper .header-scroll-y .header-freeze .row.sized-up *,          .host .core-wrapper .header-scroll-y .header-scroll-x .row.sized-up * {            pointer-events: none; }          .host .core-wrapper .header-scroll-y .header .row.dragged .cell .cell-resize,          .host .core-wrapper .header-scroll-y .header-freeze .row.dragged .cell .cell-resize,          .host .core-wrapper .header-scroll-y .header-scroll-x .row.dragged .cell .cell-resize {            display: none; }          .host .core-wrapper .header-scroll-y .header .row.dragged .cell.header-cell-order .cell-left-half,          .host .core-wrapper .header-scroll-y .header .row.dragged .cell.header-cell-order .cell-right-half,          .host .core-wrapper .header-scroll-y .header-freeze .row.dragged .cell.header-cell-order .cell-left-half,          .host .core-wrapper .header-scroll-y .header-freeze .row.dragged .cell.header-cell-order .cell-right-half,          .host .core-wrapper .header-scroll-y .header-scroll-x .row.dragged .cell.header-cell-order .cell-left-half,          .host .core-wrapper .header-scroll-y .header-scroll-x .row.dragged .cell.header-cell-order .cell-right-half {            display: block; }            .host .core-wrapper .header-scroll-y .header .row.dragged .cell.header-cell-order .cell-left-half.hover,            .host .core-wrapper .header-scroll-y .header .row.dragged .cell.header-cell-order .cell-right-half.hover,            .host .core-wrapper .header-scroll-y .header-freeze .row.dragged .cell.header-cell-order .cell-left-half.hover,            .host .core-wrapper .header-scroll-y .header-freeze .row.dragged .cell.header-cell-order .cell-right-half.hover,            .host .core-wrapper .header-scroll-y .header-scroll-x .row.dragged .cell.header-cell-order .cell-left-half.hover,            .host .core-wrapper .header-scroll-y .header-scroll-x .row.dragged .cell.header-cell-order .cell-right-half.hover {              opacity: 1; }          .host .core-wrapper .header-scroll-y .header .row .cell,          .host .core-wrapper .header-scroll-y .header-freeze .row .cell,          .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell {            color: var(--vc-header-color, #666);            font-size: 13px;            font-weight: 500;            padding: 0 17px 0 5px;            flex-shrink: 0;            transition: background var(--vc-transition-time, 0.2s) ease-in-out; }            .host .core-wrapper .header-scroll-y .header .row .cell:hover,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell:hover,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell:hover {              background: rgba(0, 0, 0, 0.035);              transition: background var(--vc-transition-time, 0.2s) ease-in-out; }              .host .core-wrapper .header-scroll-y .header .row .cell:hover .cell__sorter,              .host .core-wrapper .header-scroll-y .header-freeze .row .cell:hover .cell__sorter,              .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell:hover .cell__sorter {                opacity: 0.3; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group {              cursor: pointer;              padding: 0;              line-height: 20px; }              .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group .cell,              .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group .cell,              .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group .cell {                flex-shrink: 1; }              .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-group .cell-header-text,              .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-group .cell-header-text,              .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-group .cell-header-text {                padding-right: 12px; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-abstract-mark,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-abstract-mark,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-abstract-mark {              padding: 0; }            .host .core-wrapper .header-scroll-y .header .row .cell .cell-resize,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell .cell-resize,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .cell-resize {              position: absolute;              width: 6px;              cursor: e-resize;              z-index: 10;              top: 0;              bottom: 0;              right: 0; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order .cell-left-half,            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order .cell-right-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order .cell-left-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order .cell-right-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order .cell-left-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order .cell-right-half {              display: none;              position: absolute;              top: 0;              right: 0;              bottom: 0;              width: 100%;              border-right: solid 2px #64a5e2;              opacity: 0; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half,            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order.header-cell-order-duplex .cell-right-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order.header-cell-order-duplex .cell-right-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order.header-cell-order-duplex .cell-right-half {              width: 50%; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order.header-cell-order-duplex .cell-left-half {              left: 0;              right: auto;              border-right: none;              border-left: solid 1px #64a5e2; }            .host .core-wrapper .header-scroll-y .header .row .cell.header-cell-order.header-cell-order-duplex:first-child .cell-left-half,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell.header-cell-order.header-cell-order-duplex:first-child .cell-left-half,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell.header-cell-order.header-cell-order-duplex:first-child .cell-left-half {              border-left: solid 3px #64a5e2 !important; }            .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-merge-collapse,            .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-merge-collapse,            .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-merge-collapse {              color: #888888;              cursor: pointer;              display: inline-block;              font-size: 10px;              height: 15px;              width: 15px;              padding: 0 2px;              position: relative;              box-sizing: content-box;              transition: .1s ease all; }              .host .core-wrapper .header-scroll-y .header .row .cell .header-cell-merge-collapse:hover,              .host .core-wrapper .header-scroll-y .header-freeze .row .cell .header-cell-merge-collapse:hover,              .host .core-wrapper .header-scroll-y .header-scroll-x .row .cell .header-cell-merge-collapse:hover {                color: var(--vc-color--highlight, #4680FE);                transition: .1s ease all; }      .host .core-wrapper .header-scroll-y .header-scroll-x {        overflow: hidden;        transform: translate3d(0, 0, 0); }    .host .core-wrapper .content {      background: var(--vc-grid-background, #ffffff);      position: relative; }      .host .core-wrapper .content.hidden {        display: none; }  .host .fullscreen {    box-sizing: border-box;    position: absolute;    padding: 3px;    left: 0;    top: 0;    z-index: 20; }    .host .fullscreen > div {      box-shadow: var(--vc-grid-layer-shadow, 0 0 20px 0 rgba(0, 0, 0, 0.1)); }"})
], build_in_Renderer);

//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/group/group.cache.js


class group_cache_DataGroupCache {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.store = {};
        this.live();
    }
    normalizeKey(key) {
        return value_UtilsValue.normalizeValue(key);
    }
    get(key) {
        return this.store[this.normalizeKey(key)];
    }
    add(key, length) {
        this.store[this.normalizeKey(key)] = length;
    }
    clean() {
        this.store = {};
    }
    onClearCache() {
        this.clean();
    }
    onActionDataReload() {
        this.clean();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
    }
}
//# sourceMappingURL=group.cache.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/sort/sort.js


class sort_DataSort {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.cache = {};
    }
    static isAnyAdded(isAAdded, isBAdded) {
        return isAAdded || isBAdded;
    }
    static sortEmpty(cell, row, columns, index, a, b) {
        let isAAdded = row.isAdded(a.id);
        let isBAdded = row.isAdded(b.id);
        if (sort_DataSort.isAnyAdded(isAAdded, isBAdded)) {
            return Number(isBAdded) - Number(isAAdded);
        }
        let column = columns[index];
        let ignoreFormat = sort_DataSort.shouldIgnoreFormat(column.type);
        let sortValue = column.order === constants_ASC ?
            sort_DataSort.onRawSortAsc(cell, column.columnId, ignoreFormat, a, b) :
            sort_DataSort.onRawSortDesc(cell, column.columnId, ignoreFormat, a, b);
        index += 1;
        if (sortValue === 0 && index < columns.length) {
            return sort_DataSort.sortEmpty(cell, row, columns, index, a, b);
        }
        return sortValue;
    }
    static shouldIgnoreFormat(type) {
        return SORT_TYPES_WITHOUT_FORMAT.indexOf(type) !== -1;
    }
    static onRawSortAsc(cell, columnId, ignoreFormat, a, b) {
        if (cell.getMergedValue(a, columnId, ignoreFormat, true) > cell.getMergedValue(b, columnId, ignoreFormat, true)) {
            return 1;
        }
        else if (cell.getMergedValue(a, columnId, ignoreFormat, true) < cell.getMergedValue(b, columnId, ignoreFormat, true)) {
            return -1;
        }
        return 0;
    }
    static onRawSortDesc(cell, columnId, ignoreFormat, a, b) {
        if (cell.getMergedValue(a, columnId, ignoreFormat, true) > cell.getMergedValue(b, columnId, ignoreFormat, true)) {
            return -1;
        }
        else if (cell.getMergedValue(a, columnId, ignoreFormat, true) < cell.getMergedValue(b, columnId, ignoreFormat, true)) {
            return 1;
        }
        return 0;
    }
    initialize(rows) {
        this.rows = rows;
        this.live();
    }
    onIndexedSortDesc(cell, columnId, a, b) {
        if (this.cache[columnId].get(a) > this.cache[columnId].get(b)) {
            return -1;
        }
        else if (this.cache[columnId].get(a) < this.cache[columnId].get(b)) {
            return 1;
        }
        return 0;
    }
    onIndexedSortAsc(cell, columnId, a, b) {
        if (this.cache[columnId].get(a) > this.cache[columnId].get(b)) {
            return 1;
        }
        else if (this.cache[columnId].get(a) < this.cache[columnId].get(b)) {
            return -1;
        }
        return 0;
    }
    prepareIndex(columnId, order) {
        this.cache[columnId] = new WeakMap();
        this.rows.forEach((row, index) => {
            if (order === constants_ASC) {
                this.cache[columnId].set(row, index);
            }
            else {
                this.cache[columnId].set(row, this.rows.length - index - 1);
            }
        });
    }
    sortRaw(columns) {
        this.rows.sort(sort_DataSort.sortEmpty.bind(this, this.services.cell, this.services.row, columns, 0));
    }
    sortIndexed(columnId, order) {
        if (order === constants_ASC) {
            this.rows.sort(sort_DataSort.sortEmpty.bind(this, this.services.cell, this.services.row, columnId, this.onIndexedSortAsc.bind(this)));
        }
        else {
            this.rows.sort(sort_DataSort.sortEmpty.bind(this, this.services.cell, this.services.row, columnId, this.onIndexedSortDesc.bind(this)));
        }
    }
    run(columns) {
        if (columns.length > 0) {
            // if (this.cache[columnId]) {
            //     this.sortIndexed(columnId, order);
            // } else {
            this.sortRaw(columns);
            // }
            //
            // if (!this.cache[columnId]) {
            //     this.prepareIndex(columnId, order);
            // }
        }
    }
    onClearCache() {
        this.cache = {};
    }
    onClearColumnCache({ columnId }) {
        if (this.cache[columnId]) {
            delete this.cache[columnId];
        }
    }
    onActionDataReload() {
        this.rows = [];
        this.cache = {};
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.ADD, this.onClearCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, this.onClearColumnCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.RESET, this.onClearColumnCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.ALL, this.onClearCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.CLEAR_CACHE.SORT, this.onClearCache.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
    }
}
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/group/group.sort.js
var group_sort_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class group_sort_DataGroupSort {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.sorts = {};
        this.live();
    }
    initialize(group) {
        this.group = group;
        this.prepare();
    }
    createSort(rows, column) {
        if (columns_UtilsColumns.isColumnLeaf(column)) {
            let dataSort = new sort_DataSort(this.eventBus, this.services);
            dataSort.initialize(rows);
            this.sorts[column.id] = dataSort;
        }
    }
    prepare() {
        this.services.columns.getAll().forEach((column) => {
            if (this.services.columns.isMergeColumn(column)) {
                column.columns.forEach(this.createSort.bind(this, this.group.rows));
            }
            else {
                this.createSort(this.group.rows, column);
            }
        });
    }
    rootGroupSort(column) {
        this.group.groups.sort((a, b) => sort_DataSort.sortEmpty(this.services.cell, this.services.row, [column], 0, a.params.row, b.params.row));
    }
    getSortColumns(columns, groups) {
        let cols = [...groups];
        if (columns[0]) {
            cols.push(columns[0]);
        }
        return cols;
    }
    groupsSort(columns, groups, column) {
        return group_sort_awaiter(this, void 0, void 0, function* () {
            let groupColIdx = groups.findIndex((col) => col.columnId === column.columnId);
            let nextGroups = groups.slice();
            if (groupColIdx !== -1) {
                nextGroups = nextGroups.splice(groupColIdx, 1);
            }
            yield UtilitiesArray.forEachAsync(this.group.groups, (group) => group_sort_awaiter(this, void 0, void 0, function* () {
                yield group.sort({ groups: nextGroups, columns });
            }));
        });
    }
    wrapWithType(columns) {
        return columns.map((column) => (Object.assign({}, column, { type: this.services.columns.getColumnById(column.columnId, false).type })));
    }
    sort({ columns = [], groups = [] }) {
        return group_sort_awaiter(this, void 0, void 0, function* () {
            let colsWithType = this.wrapWithType(columns);
            let groupsWithType = this.wrapWithType(groups);
            let cols = this.getSortColumns(colsWithType, groupsWithType);
            yield UtilitiesArray.forEachAsync(cols, (col) => group_sort_awaiter(this, void 0, void 0, function* () {
                if (col.columnId === this.group.groupId) {
                    this.rootGroupSort(col);
                }
                else if (this.group.groups.length) {
                    yield this.groupsSort(columns, groups, col);
                }
                else {
                    if (this.sorts[col.columnId]) {
                        this.sorts[col.columnId].run(colsWithType);
                    }
                    else {
                        console.warn(`No definition for column '${col.columnId}' in metadata`);
                    }
                }
            }));
        });
    }
    onActionDataReload() {
        this.sorts = {};
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
    }
}
//# sourceMappingURL=group.sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/utils/aggregation.js
function aggregation_average(count, sum) {
    return (count === 0 && !isNaN(sum)) || sum === 0 ? 0 : sum / count;
}
function countAvg(data, isCurrency) {
    let avg, sum = countSum(data, isCurrency)['sum'];
    if (!isCurrency) {
        let count = countQuantity(data, isCurrency)['count'];
        avg = aggregation_average(count, sum);
    }
    else {
        avg = sum.map((sum) => {
            let count = data.filter((cell) => {
                return cell.currency === sum[0] && cell.value !== '';
            }).length;
            return [sum[0], aggregation_average(count, sum[1])];
        });
    }
    return { avg };
}
function countMode(data) {
    let count = {};
    let mode = [];
    let max = 0;
    for (let i = 0; i < data.length; i++) {
        let value = data[i];
        if (!(value in count)) {
            count[value] = 0;
        }
        count[value]++;
        if (count[value] === max) {
            mode.push(value);
        }
        else if (count[value] > max) {
            max = count[value];
            mode = [value];
        }
    }
    return { mode: mode.sort() };
}
function _median(data) {
    let middle = (data.length + 1) / 2;
    let sorted = data.slice().sort((a, b) => a - b);
    let isEven = sorted.length % 2 === 0;
    return isEven ? (sorted[middle - 1.5] + sorted[middle - 0.5]) / 2 : sorted[middle - 1];
}
function countMedian(data, isCurrency) {
    let median;
    if (!isCurrency) {
        median = _median(data);
    }
    else {
        median = countCurrencyData(data, [], (prev, next) => [...prev, next]).map((currencyData) => [currencyData[0], _median(currencyData[1])]);
    }
    return { median };
}
function countQuantity(data, isCurrency) {
    let count;
    if (!isCurrency) {
        count = data.length;
    }
    else {
        count = countCurrencyData(data, 0, (prev) => ++prev);
    }
    return { count };
}
function maximum(maxValue, value) {
    return Math.max(maxValue, value);
}
function countMax(data, isCurrency) {
    let max, initialMax = data.length > 0 ? -Infinity : NaN;
    if (!isCurrency) {
        max = data.reduce(maximum, initialMax);
    }
    else {
        max = countCurrencyData(data, initialMax, maximum);
    }
    return { max };
}
function minimum(min, value) {
    return Math.min(min, value);
}
function countMin(data, isCurrency) {
    let min, initialMin = data.length > 0 ? Infinity : NaN;
    if (!isCurrency) {
        min = data.reduce(minimum, initialMin);
    }
    else {
        min = countCurrencyData(data, initialMin, minimum);
    }
    return { min };
}
function aggregation_range(data, isCurrency) {
    return {
        min: countMin(data, isCurrency)['min'],
        max: countMax(data, isCurrency)['max']
    };
}
function countSum(data, isCurrency) {
    let sum, initialSum = data.length > 0 ? 0 : NaN;
    if (!isCurrency) {
        sum = data.reduce((result, value) => result + value, initialSum);
    }
    else {
        sum = countCurrencyData(data, initialSum, (prev, next) => prev + next);
    }
    return { sum };
}
function isCurrencyNaN(value, isNan) {
    return isFinite(value) && isNan ? value : NaN;
}
function countCurrencyData(data, initialValue, aggregationCallback) {
    let uniqueCurrenciesSet = new Set(data.map((cell) => cell.currency));
    let currencies = [];
    let values = [];
    let hasNaN = [];
    let valuesCount = [];
    uniqueCurrenciesSet.forEach((currency) => {
        currencies.push(currency);
        values.push(initialValue);
        hasNaN.push(0);
        valuesCount.push(0);
    });
    currencies = currencies.filter((currency) => currency).sort();
    data.forEach((cell) => {
        let index = currencies.indexOf(cell.currency);
        if (index !== -1) {
            valuesCount[index]++;
            if (cell.value !== null) {
                values[index] = aggregationCallback(values[index], Number(cell.value));
            }
            else {
                hasNaN[index]++;
            }
        }
    });
    return currencies.map((currency, idx) => {
        let isNan = hasNaN[idx] !== valuesCount[idx];
        return [
            currency,
            !Array.isArray(values[idx])
                ? isCurrencyNaN(values[idx], isNan)
                : values[idx].map((a, valIdx) => isCurrencyNaN(values[idx][valIdx], isNan))
        ];
    });
}
const onmessage = (event) => {
    let { data, columnType, type } = event.data;
    let isCurrency = columnType === 'currency';
    /* tslint:disable-next-line:cyclomatic-complexity */
    switch (type) {
        case 'avg':
            return postMessage(countAvg(data, isCurrency));
        case 'min':
            return postMessage(countMin(data, isCurrency));
        case 'max':
            return postMessage(countMax(data, isCurrency));
        case 'range':
            return postMessage(aggregation_range(data, isCurrency));
        case 'sum':
            return postMessage(countSum(data, isCurrency));
        case 'count':
            return postMessage(countQuantity(data, isCurrency));
        case 'median':
            return postMessage(countMedian(data, isCurrency));
        case 'mode':
            return postMessage(!isCurrency ? countMode(data) : '-');
        default:
            return postMessage('-');
    }
};
//# sourceMappingURL=aggregation.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/group/group.summary.js




class group_summary_DataGroupSummary {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
    }
    initialize(group) {
        this.group = group;
    }
    getDataGroupPath() {
        return this.group.getPath();
    }
    get() {
        this.services.state.summary.state.forEach(({ columnId, aggregation }) => {
            aggregation.forEach((type) => {
                this.getAggregation(columnId, type);
            });
        });
    }
    getByColumnId(id) {
        this.services.state.summary.state.forEach(({ columnId, aggregation }) => {
            if (columnId === id) {
                aggregation.forEach((type) => {
                    this.getAggregation(columnId, type);
                });
            }
        });
    }
    setAggregation(columnId, type, value) {
        this.group.params.aggregation[columnId][type] = value;
    }
    getAggregation(columnId, type) {
        let worker = new UtilitiesWorker(aggregation_namespaceObject);
        let columnType = this.services.columns.getColumnById(columnId, false).type;
        let rows = this.services.row.filterOutRemoved(this.group.rows);
        let data = summary_UtilsSummary.filterEmptyData(this.services.cell, rows, columnId, columnType);
        worker.postMessage({ data, columnType, type });
        worker.onResponse((event) => {
            let value = this.services.formatter.formatAggregation(columnId, type, event.data);
            this.setAggregation(columnId, type, value);
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.SUMMARY.GROUP, { groupPath: this.getDataGroupPath(), aggregation: { [columnId]: { [type]: value } } });
            worker.terminate();
        });
    }
}
//# sourceMappingURL=group.summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/group/group.js
var group_group_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var group_group_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var group_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






class group_DataGroup {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.groups = [];
        this.length = 0;
        this.rowLength = 0;
        this.visibleLength = 0;
    }
    initialize(rows, params, rootGroup = false) {
        this.rows = rows;
        this.params = params;
        this.rootGroup = rootGroup;
        this.prepare();
        this.live();
    }
    getPath() {
        return this.path;
    }
    addRow(row) {
        this.rows.push(row);
        this.length += 1;
        this.rowLength += 1;
        this.visibleLength += 1;
    }
    loadRows(rows) {
        this.rows = rows;
        this.reset();
        this.prepare();
    }
    getGroupByRow(dataRow) {
        if (!this.groups.length) {
            return this.rows.find((row) => row.data === dataRow) ? this : null;
        }
        else {
            for (let i = 0; i < this.groups.length; i += 1) {
                let group = this.groups[i].getGroupByRow(dataRow);
                if (group) {
                    return group;
                }
            }
            return null;
        }
    }
    getDataIndex(dataRow) {
        if (!this.groups.length) {
            return this.rows.findIndex((row) => row.data === dataRow);
        }
        else {
            let position = 0;
            let result = false;
            for (let i = 0; i < this.groups.length; i += 1) {
                let dataIndex = this.groups[i].getDataIndex(dataRow);
                position += 1;
                if (dataIndex !== -1) {
                    position += dataIndex;
                    result = true;
                    break;
                }
                else {
                    position += this.groups[i].visibleLength - 1;
                }
            }
            return result ? position : -1;
        }
    }
    isRowVisible(group, dataIndex) {
        return !(group.isHidden() || dataIndex >= group.visibleLength);
    }
    getRowFromGroup(dataGroup, dataIndex) {
        if (dataIndex === 0) {
            return {
                id: `group-${dataGroup.getPath()}`,
                type: constants_VIEW.ROW.TYPE.GROUP,
                data: dataGroup.params.row.data,
                group: this.getParams(dataGroup.params.row, dataGroup.params.deep, dataGroup)
            };
        }
        else if (!this.isRowVisible(dataGroup, dataIndex)) {
            return null;
        }
        return dataGroup.get(dataIndex - 1);
    }
    deepGet(dataIndex) {
        let row;
        for (let i = 0; i < this.groups.length; i++) {
            row = this.getRowFromGroup(this.groups[i], dataIndex);
            if (!row) {
                dataIndex -= this.groups[i].visibleLength;
                continue;
            }
            else {
                break;
            }
        }
        if (!row) {
            this.services.logger.warn(`Row with data index '${dataIndex}' was not found in groups`);
        }
        return row;
    }
    _get(dataIndex) {
        if (this.groups.length) {
            return this.deepGet(dataIndex);
        }
        let isRremoved = this.services.state.edit.removed.indexOf(this.rows[dataIndex].id) !== -1;
        return {
            id: this.rows[dataIndex].id,
            type: isRremoved ? constants_VIEW.ROW.TYPE.REMOVED : constants_VIEW.ROW.TYPE.NORMAL,
            data: this.rows[dataIndex].data
        };
    }
    get(dataIndex) {
        return this._get(dataIndex);
    }
    getRow(rowId) {
        return this.rows.find((row) => row.id === rowId);
    }
    sort(params) {
        return group_awaiter(this, void 0, void 0, function* () {
            yield this.groupSort.sort(params);
        });
    }
    isHiddenRecursive() {
        return this.params && this.params.parentDataGroup.isHiddenRecursive() ? true : this.isHidden();
    }
    isHidden(group = this) {
        let path = this.getPathInTree(group);
        return this.services.state.groupVisibility[path] || false;
    }
    toggleRecursive(state) {
        if (this.params) {
            this.params.parentDataGroup.toggleRecursive(state);
        }
        this.toggle(state);
    }
    toggle(state = !this.isHidden()) {
        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.GROUP.TOGGLE, { path: this.getPathInTree(this), state });
        this.onToggle();
    }
    onToggle() {
        this.updateVisibleLength();
        if (this.params) {
            this.params.parentDataGroup.onToggle();
        }
    }
    getLength() {
        return this.length;
    }
    getRowLength() {
        return this.rowLength;
    }
    reset() {
        this.groups = [];
        this.groupId = null;
        this.path = '';
        this.length = this.rows.length;
        this.rowLength = this.length;
        this.visibleLength = 0;
    }
    clean() {
        this.groupCache.clean();
        this.reset();
    }
    getParams(row, deep, dataGroup) {
        return {
            columnId: this.groupId,
            row,
            deep,
            dataGroup,
            parentDataGroup: this,
            length: dataGroup ? dataGroup.getRowLength() : this.getRowLength(),
            aggregation: summary_UtilsSummary.prepareInitialAggregation(this.services.state.summary)
        };
    }
    build(groups) {
        let groupsCopy = groups.slice();
        this.groupId = groupsCopy.shift();
        this.rows.forEach((row) => {
            let key = this.services.cell.getValue(row, this.groupId);
            if (this.groupCache.get(key) === undefined) {
                this.groupCache.add(key, this.groups.length);
                let group = new group_DataGroup(this.eventBus, this.services);
                let params = this.getParams(row, this.params ? this.params.deep + 1 : 1);
                group.initialize([], params);
                this.groups.push(group);
                this.length += 1;
            }
            this.groups[this.groupCache.get(key)].addRow(row);
        });
        if (groupsCopy.length) {
            this.groups.forEach((group) => {
                group.build(groupsCopy);
                this.length += group.length;
            });
        }
        let { state: sortColumns, groups: sortGroup } = this.services.state.sort;
        let sort = sortGroup.find((value) => value.columnId === this.groupId);
        if (sort) {
            this.sort({ groups: sortGroup, columns: sortColumns });
        }
        this.updateVisibleLengthRecursive();
    }
    prepareSummary() {
        this.groupSummary = new group_summary_DataGroupSummary(this.eventBus, this.services);
        this.groupSummary.initialize(this);
    }
    prepareSort() {
        return group_awaiter(this, void 0, void 0, function* () {
            let { state, groups } = this.services.state.sort;
            yield this.sort({ columns: state, groups });
        });
    }
    prepare() {
        let groupSort = new group_sort_DataGroupSort(this.eventBus, this.services);
        groupSort.initialize(this);
        this.groupCache = new group_cache_DataGroupCache(this.eventBus);
        this.groupSort = groupSort;
        this.prepareSummary();
        this.prepareSort();
    }
    getPathInTree(group) {
        if (!this.path) {
            this.path = this.processPath(group).reverse().join('/');
        }
        return this.path;
    }
    processPath(group) {
        let parentDataGroup;
        let pathArray = [];
        let processedGroup;
        do {
            if (processedGroup) {
                processedGroup = processedGroup.params.parentDataGroup;
            }
            else {
                processedGroup = group;
            }
            parentDataGroup = processedGroup.params && processedGroup.params.parentDataGroup;
            if (parentDataGroup) {
                let value = this.services.cell.getMergedValue(processedGroup.params.row, processedGroup.params.columnId);
                pathArray.push(`${processedGroup.params.columnId}_${value}`);
            }
            else {
                pathArray.push(processedGroup.groupId);
            }
        } while (parentDataGroup);
        return pathArray;
    }
    getVisibleLength() {
        let visibleLength = this.params ? 1 : 0;
        if (this.isHidden()) {
            return 1;
        }
        if (this.groups.length) {
            for (let i = 0; i < this.groups.length; i++) {
                visibleLength += this.groups[i].getVisibleLength();
            }
        }
        else {
            visibleLength += this.length;
        }
        return visibleLength;
    }
    updateVisibleLengthRecursive() {
        if (this.groups.length) {
            for (let i = 0; i < this.groups.length; i++) {
                this.groups[i].updateVisibleLengthRecursive.call(this.groups[i]);
            }
        }
        this.updateVisibleLength();
    }
    updateVisibleLength() {
        let visibleLength = this.visibleLength;
        this.visibleLength = this.getVisibleLength();
        if (!this.params && this.visibleLength !== visibleLength) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, { number: this.visibleLength });
        }
    }
    destroy() {
        this.groupSummary = null;
        this.groupSort = null;
        this.groups = [];
    }
    onDoneDataGroup() {
        this.updateVisibleLengthRecursive();
    }
    onActionDataReload() {
        this.rows = [];
        this.clean();
    }
    onDoneStateLoad() {
        this.updateVisibleLengthRecursive();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.VIEW.PAGE, this.prepareSummary.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SORT, this.prepareSummary.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.STATE.LOAD, this.onDoneStateLoad.bind(this));
        if (this.rootGroup) {
            this.eventBus.join(eventsList_EVENTS.DONE.DATA.GROUP, this.onDoneDataGroup.bind(this));
        }
    }
}
group_group_decorate([
    permission_namespaceObject.summary,
    group_group_metadata("design:type", Function),
    group_group_metadata("design:paramtypes", []),
    group_group_metadata("design:returntype", void 0)
], group_DataGroup.prototype, "prepareSummary", null);
group_group_decorate([
    permission_namespaceObject.sort,
    group_group_metadata("design:type", Function),
    group_group_metadata("design:paramtypes", []),
    group_group_metadata("design:returntype", Promise)
], group_DataGroup.prototype, "prepareSort", null);
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/search/search.js
var search_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var search_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var search_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class search_DataSearch {
    constructor(data, eventBus, services) {
        this.data = data;
        this.eventBus = eventBus;
        this.services = services;
        this.visibleColumnsAll = [];
        this.visibleColumnsLeafs = [];
        this.uptodate = false;
        this.stringified = new WeakMap();
        this.live();
    }
    getRows(rows) {
        if (!this.services.state.header.search.enabled) {
            return rows;
        }
        let value = this.services.state.header.search.value.toLowerCase();
        if (!value) {
            return rows;
        }
        let result = this.getSearchedRows(rows, value);
        if (!this.uptodate) {
            this.uptodate = true;
        }
        return result;
    }
    getSearchListData(columnId) {
        return search_awaiter(this, void 0, void 0, function* () {
            let column = columns_UtilsColumns.findColumnInState(columnId, this.services.state.columns.collection);
            let [columnLabel, searchText] = search_UtilsSearch.getColumnSearchMatches(this.services.state.header.search.value);
            let { dictionary } = this.services.extensions.getColumnById(column.id);
            if (!columns_UtilsColumns.isColumnLeaf(column)) {
                return yield this.getCellValuesFromGroupColumn(column, searchText);
            }
            else {
                let currentRows = yield this.data.getCurrentRows();
                let values = currentRows.map((row) => {
                    let rawValue = this.services.cell.getValue(row, column.id);
                    return this.services.cell.getCellField(rawValue, column);
                });
                if (dictionary) {
                    values = this.getFromDictionary(values, column, dictionary, searchText);
                }
                return UtilitiesArray.unique(UtilitiesArray.sort(values));
            }
        });
    }
    getCellValuesFromGroupColumn(column, search) {
        return search_awaiter(this, void 0, void 0, function* () {
            let values = [];
            let { dictionary } = this.services.extensions.getColumnById(column.id);
            let columns = this.services.columns.getColumnsRecursively(column);
            let currentRows = yield this.data.getCurrentRows();
            yield UtilitiesArray.forEachAsync(currentRows, (row) => search_awaiter(this, void 0, void 0, function* () {
                yield UtilitiesArray.forEachAsync(columns, (column) => search_awaiter(this, void 0, void 0, function* () {
                    let value = this.services.cell.getValue(row, column.id);
                    let inSource = value && search_UtilsSearch.valueInSource(value.toString().toLowerCase(), search.toLowerCase());
                    if (inSource && values.indexOf(value) === -1) {
                        values.push(value);
                    }
                }));
            }));
            if (dictionary) {
                values = this.getFromDictionary(values, column, dictionary, search);
            }
            return values;
        });
    }
    getFromDictionary(values, column, id, search) {
        if (column.type === modules_constants_TYPE.MULTISELECT) {
            let matches = [];
            values.forEach((array) => array
                .map((key) => this.services.dictionaries.getCachedValue(id, key))
                .forEach((value) => {
                let inSource = search_UtilsSearch.valueInSource(value.toLowerCase(), search.toLowerCase());
                if (inSource && values.indexOf(value) === -1) {
                    matches.push(value);
                }
            }));
            return matches;
        }
        else if (column.type === modules_constants_TYPE.CURRENCY) {
            return values;
        }
        else {
            return values.map((key) => {
                return this.services.dictionaries.getCachedValue(id, key);
            });
        }
    }
    hasEmptyValue(value) {
        return typeof value === 'undefined' || value === null;
    }
    isKeyForbidden(key) {
        return Object.keys(SEARCH_EXCLUDED_KEYS).some((forbidden) => SEARCH_EXCLUDED_KEYS[forbidden] === key);
    }
    simplifyCellData(data) {
        if (this.hasEmptyValue(data)) {
            return '';
        }
        if (data instanceof Object) {
            return Object.keys(data).reduce((acc, next) => {
                return !this.isKeyForbidden(next) ? [...acc, this.simplifyCellData(data[next])] : acc;
            }, []).join(modules_constants_SEPARATOR.SEARCH_SEPARATOR);
        }
        return value_UtilsValue.normalizeValue(data).toLowerCase();
    }
    getStringifiedValue(row, column) {
        let isFormatable = !this.services.cell.isEditable(row, column) && columns_UtilsColumns.isFormatable(column);
        if (isFormatable || column.type === modules_constants_TYPE.DATE) {
            return this.services.cell.getValue(row, column.id);
        }
        return this.services.cell.getRawValue(row, column.id);
    }
    getStringifiedDictionary(id, row, column) {
        let cellValue = this.services.cell.getRawValue(row, column.id);
        switch (column.type) {
            case modules_constants_TYPE.CURRENCY:
                let { value, currency = '' } = cellValue;
                let currencyValue = this.services.dictionaries.getCached(id)[currency];
                return value_UtilsValue.stringifyCurrency(value, currencyValue, !currencyValue).toLowerCase();
            case modules_constants_TYPE.MULTISELECT:
                let values = [];
                cellValue.forEach((key) => {
                    let multiselectValue = this.services.dictionaries.getCached(id)[key];
                    if (multiselectValue) {
                        values.push(multiselectValue);
                    }
                });
                return values.sort();
            default:
                return this.services.dictionaries.getCached(id)[cellValue];
        }
    }
    getStringified(row) {
        let values = [];
        this.visibleColumnsLeafs.forEach((column) => {
            let { dictionary } = this.services.extensions.getColumnById(column.id);
            let value;
            if (dictionary) {
                value = this.getStringifiedDictionary(dictionary, row, column);
            }
            else {
                value = this.getStringifiedValue(row, column);
            }
            values.push(this.simplifyCellData(value));
        });
        return values.join(modules_constants_SEPARATOR.STRINGIFIED_SEARCH_SEPARATOR);
    }
    checkColumnValue(rowDataSearch, value = '') {
        let [columnLabel, searchText] = search_UtilsSearch.getColumnSearchMatches(value);
        let searchConfig = search_UtilsSearch.getSearchedColumnsConfig(columnLabel, this.visibleColumnsAll);
        let columnId = searchConfig.column && searchConfig.column.id;
        let isValidLeaf = columns_UtilsColumns.isValidLeafInState(this.services.state.columns.collection, columnId, true);
        if (!searchConfig.column || !isValidLeaf) {
            return false;
        }
        if (!columns_UtilsColumns.isColumnLeaf(searchConfig.column)) {
            let leafsCount = columns_UtilsColumns.getColumnIdsRecursive(searchConfig.column.columns, false).length;
            let leafsStartIndex = this.visibleColumnsAll.indexOf(searchConfig.root) - searchConfig.omittedGroupCount;
            let leafsEndIndex = leafsStartIndex + leafsCount;
            let groupColumnValues = rowDataSearch
                .split(modules_constants_SEPARATOR.STRINGIFIED_SEARCH_SEPARATOR)
                .slice(leafsStartIndex, leafsEndIndex)
                .join(modules_constants_SEPARATOR.STRINGIFIED_SEARCH_SEPARATOR);
            return search_UtilsSearch.valueInSource(groupColumnValues, searchText);
        }
        else {
            let index = this.visibleColumnsLeafs.indexOf(searchConfig.column);
            let columnValue = rowDataSearch.split(modules_constants_SEPARATOR.STRINGIFIED_SEARCH_SEPARATOR)[index];
            return search_UtilsSearch.valueInSource(columnValue, searchText);
        }
    }
    checkValue(row, value = '') {
        let rowDataSearch = this.stringified.get(row);
        if (search_UtilsSearch.testColumnExpression(value)) {
            return this.checkColumnValue(rowDataSearch, value);
        }
        return search_UtilsSearch.valueInSource(rowDataSearch, value);
    }
    shouldRowBeVisible(row, value) {
        if (!this.uptodate || !this.stringified.has(row)) {
            this.stringified.set(row, this.getStringified(row));
        }
        return this.checkValue(row, value);
    }
    updateVisibleRows() {
        let stateColumnsSet = this.services.state.columns.collection;
        let groupedColumnIds = this.services.state.group.groups;
        this.clearColumns();
        Object.keys(stateColumnsSet).forEach((columnId) => {
            let isVisible = stateColumnsSet[columnId].visible || groupedColumnIds.indexOf(columnId) !== -1;
            if (isVisible && !columns_UtilsColumns.isAbstract(stateColumnsSet[columnId])) {
                this.visibleColumnsAll.push(stateColumnsSet[columnId]);
                if (Array.isArray(stateColumnsSet[columnId].columns)) {
                    this.findColumns(stateColumnsSet[columnId]);
                }
                else {
                    this.visibleColumnsLeafs.push(stateColumnsSet[columnId]);
                }
            }
        });
    }
    findColumns(column) {
        column.columns.forEach((column) => {
            if (columns_UtilsColumns.isColumnLeaf(column)) {
                this.visibleColumnsAll.push(column);
            }
            if (Array.isArray(column.columns)) {
                this.findColumns(column);
            }
            else {
                this.visibleColumnsLeafs.push(column);
            }
        });
    }
    getSearchedRows(rows, value) {
        if (!this.uptodate) {
            this.updateVisibleRows();
        }
        return rows.filter((row) => this.shouldRowBeVisible(row, value));
    }
    onChangeDataColumnsCollection() {
        this.uptodate = false;
    }
    onCellFocusLeave({ rowId, changedDataColumnIds }) {
        return search_awaiter(this, void 0, void 0, function* () {
            if (changedDataColumnIds.length > 0) {
                let row = yield this.data.getByRowId(rowId);
                if (this.stringified.has(row)) {
                    this.stringified.set(row, this.getStringified(row));
                }
            }
        });
    }
    clearColumns() {
        this.visibleColumnsAll = [];
        this.visibleColumnsLeafs = [];
    }
    destroy() {
        this.clearColumns();
    }
    onActionDataReload() {
        this.clearColumns();
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, this.onChangeDataColumnsCollection.bind(this));
        this.eventBus.join(eventsList_EVENTS.FOCUS.LEAVE, this.onCellFocusLeave.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
search_decorate([
    measure(),
    search_metadata("design:type", Function),
    search_metadata("design:paramtypes", [Array]),
    search_metadata("design:returntype", Array)
], search_DataSearch.prototype, "getRows", null);
search_decorate([
    measure(),
    search_metadata("design:type", Function),
    search_metadata("design:paramtypes", [Array, String]),
    search_metadata("design:returntype", Array)
], search_DataSearch.prototype, "getSearchedRows", null);
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/filter/filter.js
var filter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var filter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var filter_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class filter_DataFilter {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.types = {};
        this.dates = {};
        this.live();
    }
    getRows(rows, filterSet) {
        return filter_awaiter(this, void 0, void 0, function* () {
            if (filterSet) {
                return yield this.getFilteredRows(rows, { state: filterSet });
            }
            else {
                let filter = this.services.state.filter;
                if (!filter.enabled || !filter.state) {
                    return rows;
                }
                let result = yield this.getFilteredRows(rows, filter);
                this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.FILTER);
                return result;
            }
        });
    }
    isNumberOperator(operator) {
        return FILTER_DATA_TYPE_ALLOWED_OPERATOR.NUMBER.indexOf(operator) !== -1;
    }
    isBooleanOperator(operator) {
        return FILTER_DATA_TYPE_ALLOWED_OPERATOR.BOOLEAN.indexOf(operator) !== -1;
    }
    getTimestamp(date) {
        if (!this.dates[date]) {
            this.dates[date] = date;
        }
        return this.dates[date];
    }
    getCellValue(cell, filter) {
        switch (filter.columnType) {
            case modules_constants_TYPE.DATE:
                return this.getTimestamp(cell);
            case modules_constants_TYPE.CHECKBOX:
                return cell.value;
            case modules_constants_TYPE.BUTTON:
            case modules_constants_TYPE.LINK:
                return cell.text;
            case modules_constants_TYPE.CURRENCY:
            default:
                return cell;
        }
    }
    getNormalizedBoolean(value) {
        return typeof value === 'boolean' ? value : value === 'true';
    }
    getNormalizedString(value, columnType) {
        let normalized;
        if (columnType === modules_constants_TYPE.CURRENCY) {
            let numericValue = parseFloat(String(value.value));
            normalized = value_UtilsValue.stringifyCurrency(numericValue, value.currency, isNaN(numericValue));
        }
        else {
            normalized = value_UtilsValue.normalizeValue(value);
        }
        return normalized.toLowerCase();
    }
    isValueEmpty(value) {
        return !value && value !== 0 && value !== false;
    }
    getNormalizedValue(value, columnType, operator) {
        if (this.isValueEmpty(value)) {
            return value;
        }
        if (!isNaN(Number(value)) && this.isNumberOperator(operator)) {
            return Number(value);
        }
        else if (this.isBooleanOperator(operator)) {
            return this.getNormalizedBoolean(value);
        }
        return this.getNormalizedString(value, columnType);
    }
    getNormalizedFilterValue(cellValue, filterSet) {
        return filter_awaiter(this, void 0, void 0, function* () {
            if (typeof cellValue === 'undefined') {
                return void 0;
            }
            let value = cellValue;
            let { dictionary } = this.services.extensions.getColumnById(filterSet.columnId);
            let { type } = this.services.columns.getColumnById(filterSet.columnId, false);
            if (dictionary) {
                value = yield this.getByStrigifiedValue(dictionary, String(cellValue), type);
            }
            return this.getNormalizedValue(value, type, filterSet.operator);
        });
    }
    notSupported(type, operator) {
        console.warn(`Operator '${operator}' not supported on type '${type}'`);
        return true;
    }
    compareString(value, filter) {
        /* tslint:disable-next-line:cyclomatic-complexity */
        switch (filter.operator) {
            case FILTER.OPERATORS.BETWEEN:
                return value >= filter.value && value <= filter.value2;
            case FILTER.OPERATORS.HAS:
                return value.includes(filter.value);
            case FILTER.OPERATORS.STARTS:
                return RegExp(`^${filter.value}`).test(value);
            case FILTER.OPERATORS.ENDS:
                return RegExp(`${filter.value}$`).test(value);
            case FILTER.OPERATORS.EQUALS:
                return value === filter.value;
            default:
                return this.notSupported('string', filter.operator);
        }
    }
    compareNumber(value, filter) {
        /* tslint:disable-next-line:cyclomatic-complexity */
        switch (filter.operator) {
            case FILTER.OPERATORS.BETWEEN:
                return value >= filter.value && value <= filter.value2;
            case FILTER.OPERATORS.BEFORE:
                return value < filter.value;
            case FILTER.OPERATORS.AFTER:
                return value > filter.value;
            case FILTER.OPERATORS.EQUALS:
                return value === filter.value;
            default:
                return this.notSupported('number', filter.operator);
        }
    }
    compareBoolean(value, filter) {
        switch (filter.operator) {
            case FILTER.OPERATORS.CHECKS:
                return value === filter.value;
            default:
                return this.notSupported('number', filter.operator);
        }
    }
    shouldBeVisibleEmptyRow(row) {
        return this.services.row.isAdded(row.id);
    }
    shouldBeVisibleSingle(row, filter) {
        let { type } = this.services.columns.getColumnById(filter.columnId, false);
        let value = this.getCellValue(this.services.cell.getValue(row, filter.columnId), filter);
        let result;
        value = this.getNormalizedValue(value, type, filter.operator);
        switch (typeof filter.value) {
            case 'number':
                result = this.compareNumber(value, filter);
                break;
            case 'boolean':
                result = this.compareBoolean(value, filter);
                break;
            default:
                result = this.compareString(value, filter);
        }
        return filter.negative ? !result : result;
    }
    shouldBeVisibleGroup(row, filter) {
        let handler;
        switch (filter.operator) {
            case FILTER.OPERATORS.OR:
                handler = Array.prototype.some;
                break;
            case FILTER.OPERATORS.AND:
                handler = Array.prototype.every;
                break;
            default:
                handler = () => this.notSupported('filter group', filter.operator);
        }
        let result = handler.call(filter.filters, (filter) => this.shouldBeVisible(row, filter));
        return filter.negative ? !result : result;
    }
    shouldBeVisible(row, filter) {
        if (this.shouldBeVisibleEmptyRow(row)) {
            return true;
        }
        if (filter_UtilsFilter.isFilterGroup(filter)) {
            return this.shouldBeVisibleGroup(row, filter);
        }
        else {
            return this.shouldBeVisibleSingle(row, filter);
        }
    }
    getColumnType(columnId, columns = this.services.columns.getAll()) {
        if (this.types[columnId]) {
            return this.types[columnId];
        }
        let type = '';
        columns.forEach((column) => {
            if (!type && column.type === modules_constants_TYPE.GROUP) {
                type = this.getColumnType(columnId, column.columns);
            }
            else if (!type && column.id === columnId) {
                type = column.type;
            }
        });
        return type;
    }
    prepareFiltersGroup(filter) {
        return filter_awaiter(this, void 0, void 0, function* () {
            let filters = [];
            yield UtilitiesArray.forEachAsync(filter.filters, (filter) => filter_awaiter(this, void 0, void 0, function* () {
                filters.push(yield this.prepareFilters(filter));
            }));
            return {
                filters,
                operator: value_UtilsValue.getUpperCase(filter.operator),
                negative: filter.negative
            };
        });
    }
    prepareFiltersSingle(filter) {
        return filter_awaiter(this, void 0, void 0, function* () {
            let single = {
                value: null,
                value2: null,
                operator: value_UtilsValue.getUpperCase(filter.operator),
                negative: filter.negative,
                columnId: filter.columnId,
                columnType: this.getColumnType(filter.columnId)
            };
            switch (single.columnType) {
                case modules_constants_TYPE.DATE:
                    single.value = this.getTimestamp(filter.value);
                    single.value2 = filter.value2 ? this.getTimestamp(filter.value2) : null;
                    break;
                default:
                    single.value = yield this.getNormalizedFilterValue(filter.value, single);
                    single.value2 = yield this.getNormalizedFilterValue(filter.value2, single);
            }
            return single;
        });
    }
    prepareFilters(filter) {
        return filter_awaiter(this, void 0, void 0, function* () {
            if (filter_UtilsFilter.isFilterGroup(filter)) {
                return yield this.prepareFiltersGroup(filter);
            }
            else {
                return yield this.prepareFiltersSingle(filter);
            }
        });
    }
    getFilteredRows(rows, filter) {
        return filter_awaiter(this, void 0, void 0, function* () {
            let filters = yield this.prepareFilters(filter.state);
            return rows.filter((row) => this.shouldBeVisible(row, filters));
        });
    }
    getByStrigifiedValue(id, stringified, type) {
        return filter_awaiter(this, void 0, void 0, function* () {
            let predicate = (val, dictionary) => (dictionary.value.toString().toLowerCase().includes(val.toLowerCase()));
            let value;
            switch (type) {
                case modules_constants_TYPE.CURRENCY:
                    let amount;
                    let data = stringified.split(' ');
                    if (!isNaN(parseFloat(data[0]))) {
                        [amount = '', value = ''] = data;
                    }
                    else {
                        [value = '', amount = ''] = data;
                    }
                    let currencyDictionary = yield this.services.dictionaries.getDictionary(id)
                        .then((dictionary) => dictionary.findBy(predicate.bind(this, value)));
                    return {
                        value: amount,
                        currency: currencyDictionary.key
                    };
                case modules_constants_TYPE.MULTISELECT:
                    let values = [];
                    yield UtilitiesArray.forEachAsync(stringified.split(modules_constants_SEPARATOR.JOINED_ARRAY).sort(), (key) => filter_awaiter(this, void 0, void 0, function* () {
                        let dictionaries = yield this.services.dictionaries.getDictionary(id)
                            .then((dictionary) => dictionary.filterBy(predicate.bind(this, key)));
                        if (dictionaries) {
                            dictionaries.forEach((dictionary) => {
                                values.push(dictionary.key);
                            });
                        }
                    }));
                    return values;
                default:
                    return yield this.services.dictionaries.getDictionary(id)
                        .then((dictionary) => dictionary.findBy(predicate.bind(this, value)));
            }
        });
    }
    destroy() {
        this.types = {};
        this.dates = {};
    }
    onActionDataReload() {
        this.types = {};
        this.dates = {};
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
filter_decorate([
    measure({ good: 200, bad: 400 }),
    filter_metadata("design:type", Function),
    filter_metadata("design:paramtypes", [Array, Object]),
    filter_metadata("design:returntype", Promise)
], filter_DataFilter.prototype, "getRows", null);
filter_decorate([
    measure({ good: 200, bad: 300 }),
    filter_metadata("design:type", Function),
    filter_metadata("design:paramtypes", [Array, Object]),
    filter_metadata("design:returntype", Promise)
], filter_DataFilter.prototype, "getFilteredRows", null);
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/summary/summary.js
var summary_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var summary_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var summary_summary_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class summary_DataSummary {
    constructor(data, eventBus, services) {
        this.data = data;
        this.eventBus = eventBus;
        this.services = services;
        this.live();
    }
    get(rows) {
        return summary_summary_awaiter(this, void 0, void 0, function* () {
            let result = {};
            yield UtilitiesArray.forEachAsync(this.services.state.summary.state, ({ columnId, aggregation }) => summary_summary_awaiter(this, void 0, void 0, function* () {
                yield UtilitiesArray.forEachAsync(aggregation, (type) => summary_summary_awaiter(this, void 0, void 0, function* () {
                    let aggregation = yield this.getAggregation(columnId, type, rows);
                    if (result[columnId]) {
                        Object.assign(result[columnId], aggregation[columnId]);
                    }
                    else {
                        Object.assign(result, aggregation);
                    }
                }));
            }));
            return result;
        });
    }
    getByColumnId(id, rows) {
        return summary_summary_awaiter(this, void 0, void 0, function* () {
            let result = {};
            yield UtilitiesArray.forEachAsync(this.services.state.summary.state, ({ columnId, aggregation }) => summary_summary_awaiter(this, void 0, void 0, function* () {
                if (columnId !== id) {
                    return;
                }
                yield UtilitiesArray.forEachAsync(aggregation, (type) => summary_summary_awaiter(this, void 0, void 0, function* () {
                    let aggregation = yield this.getAggregation(columnId, type, rows);
                    if (result[columnId]) {
                        Object.assign(result[columnId], aggregation[columnId]);
                    }
                    else {
                        Object.assign(result, aggregation);
                    }
                }));
            }));
            return result;
        });
    }
    getAggregation(columnId, type, rows) {
        let worker = new UtilitiesWorker(aggregation_namespaceObject);
        let columnType = this.services.columns.getColumnById(columnId, false).type;
        let data = summary_UtilsSummary.filterEmptyData(this.services.cell, rows, columnId, columnType);
        worker.postMessage({ data, columnType, type });
        return new Promise((resolve) => {
            worker.onResponse((event) => {
                let value = this.services.formatter.formatAggregation(columnId, type, event.data);
                worker.terminate();
                resolve({ [columnId]: { [type]: value } });
            });
        });
    }
    getTotalSummaryByColumnId(columnId) {
        return summary_summary_awaiter(this, void 0, void 0, function* () {
            if (columnId && summary_UtilsSummary.isColumnAggregated(this.services.state, columnId)) {
                this.eventBus.fire(eventsList_EVENTS.COMMIT.DATA.AGGREGATION, {
                    aggregation: yield this.getByColumnId(columnId, yield this.data.getCurrentRows())
                });
            }
        });
    }
    onCellFocusLeave({ changedDataColumnIds }) {
        changedDataColumnIds.forEach((columnId) => {
            this.getTotalSummaryByColumnId(columnId);
        });
    }
    onAfterDataFormatSet({ columnId }) {
        this.getTotalSummaryByColumnId(columnId);
    }
    onAfterDataEditSetValues({ columnId }) {
        this.getTotalSummaryByColumnId(columnId);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.FOCUS.LEAVE, this.onCellFocusLeave.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, this.onAfterDataFormatSet.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, this.onAfterDataEditSetValues.bind(this));
    }
}
summary_decorate([
    permission_namespaceObject.summary,
    summary_metadata("design:type", Function),
    summary_metadata("design:paramtypes", [String]),
    summary_metadata("design:returntype", Promise)
], summary_DataSummary.prototype, "getTotalSummaryByColumnId", null);
summary_decorate([
    permission_namespaceObject.summary,
    summary_metadata("design:type", Function),
    summary_metadata("design:paramtypes", [Object]),
    summary_metadata("design:returntype", void 0)
], summary_DataSummary.prototype, "onCellFocusLeave", null);
summary_decorate([
    permission_namespaceObject.summary,
    summary_metadata("design:type", Function),
    summary_metadata("design:paramtypes", [Object]),
    summary_metadata("design:returntype", void 0)
], summary_DataSummary.prototype, "onAfterDataFormatSet", null);
summary_decorate([
    permission_namespaceObject.summary,
    summary_metadata("design:type", Function),
    summary_metadata("design:paramtypes", [Object]),
    summary_metadata("design:returntype", void 0)
], summary_DataSummary.prototype, "onAfterDataEditSetValues", null);
//# sourceMappingURL=summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build-in/data/data.js
var data_data_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var data_data_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class data_DataBuildIn {
    constructor(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.focusAddedRowDebounce = UtilitiesDelay.debounce(this.focusAddedRow.bind(this), 200);
        this._rows = [];
        this.currentIds = [];
        this.loaded = false;
        this.async();
    }
    async() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.LOAD);
            yield this.prepare();
            this.live();
            this.loaded = true;
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.LOAD);
        });
    }
    isLoaded() {
        return this.loaded;
    }
    setRows(rows) {
        return data_awaiter(this, void 0, void 0, function* () {
            this._rows = rows || this._rows.slice(0);
            yield this.updateCurrentRows();
            if (this.loaded) {
                this.onChangeData();
            }
        });
    }
    get(dataIndex) {
        return data_awaiter(this, void 0, void 0, function* () {
            return this.group.get(dataIndex);
        });
    }
    getGroupByRow(dataRow) {
        return data_awaiter(this, void 0, void 0, function* () {
            return yield this.group.getGroupByRow(dataRow);
        });
    }
    getDataIndex(dataRow) {
        return data_awaiter(this, void 0, void 0, function* () {
            return yield this.group.getDataIndex(dataRow);
        });
    }
    getLength() {
        return data_awaiter(this, void 0, void 0, function* () {
            return (this.group || {}).visibleLength || (this.currentRows ? this.currentRows.length : 0);
        });
    }
    getByRowId(rowId) {
        return data_awaiter(this, void 0, void 0, function* () {
            return [
                ...this._rows,
                ...this.services.state.get().edit.added
            ].find((row) => row.id === rowId);
        });
    }
    getProperIds(rowIds) {
        return data_awaiter(this, void 0, void 0, function* () {
            let properRowIds = [];
            yield UtilitiesArray.forEachAsync(rowIds, (rowId) => data_awaiter(this, void 0, void 0, function* () {
                let dataRow = yield this.getByRowId(rowId);
                if (dataRow !== undefined) {
                    properRowIds.push(rowId);
                }
            }));
            return properRowIds;
        });
    }
    getRowsIds() {
        return data_awaiter(this, void 0, void 0, function* () {
            let [freeze, marked, added, removed, disabled] = [[], [], [], [], []];
            let state = this.services.state.get();
            if (state.freeze.enabled) {
                freeze = yield this.getProperIds(state.freeze.state);
            }
            if (state.mark.enabled) {
                marked = yield this.getProperIds(state.mark.state);
            }
            if (state.edit.enabled) {
                added = yield this.getProperIds(state.edit.added.map((row) => row.id));
                removed = yield this.getProperIds(state.edit.removed);
                disabled = yield this.getProperIds(state.edit.disabled);
            }
            return {
                all: [...freeze, ...this.currentIds],
                freeze, marked, added, removed, disabled,
                current: this.currentIds.slice(),
                initial: [...added, ...this._rows.map((row) => row.id)]
            };
        });
    }
    prepareRows() {
        return data_awaiter(this, void 0, void 0, function* () {
            let currentRows = yield this.getCurrentRows(false);
            if (this.group) {
                this.group.loadRows(currentRows);
            }
            else {
                let group = new group_DataGroup(this.eventBus, this.services);
                group.initialize(currentRows, undefined, true);
                this.group = group;
            }
            this.rebuildGroups();
        });
    }
    updateCurrentRows() {
        return data_awaiter(this, void 0, void 0, function* () {
            let rows = [...this._rows];
            rows = (yield this.prepareFilteredRows(rows)) || rows;
            rows = this.prepareSearchedRows(rows) || rows;
            rows = this.prepareFreezeRows(rows) || rows;
            rows = this.prepareAddeddRows(rows) || rows;
            this.currentRows = rows;
            this.currentIds = this.currentRows.map((row) => row.id);
        });
    }
    getCurrentRows(fromCache = true) {
        return data_awaiter(this, void 0, void 0, function* () {
            if (fromCache === true && this.currentRows) {
                return this.currentRows;
            }
            yield this.updateCurrentRows();
            return this.currentRows;
        });
    }
    getFreezeRows() {
        return data_awaiter(this, void 0, void 0, function* () {
            return this._rows.filter((row) => this.services.state.get().freeze.state.indexOf(row.id) !== -1);
        });
    }
    prepareFreezeRows(rows) {
        return rows.filter((row) => this.services.state.get().freeze.state.indexOf(row.id) === -1);
    }
    prepareAddeddRows(rows) {
        return [...this.services.state.get().edit.added, ...rows];
    }
    prepareFilteredRows(rows) {
        return data_awaiter(this, void 0, void 0, function* () {
            return yield this.filter.getRows(rows);
        });
    }
    prepareSearchedRows(rows) {
        return this.search.getRows(rows);
    }
    prepare() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.prepareOptions();
            yield this.prepareRows();
            UtilitiesDelay.queue(() => {
                this.fireChangeDataRows();
            });
        });
    }
    prepareOptions() {
        this.prepareSearch();
        this.prepareFilter();
        this.prepareSummary();
    }
    prepareSearch() {
        this.search = new search_DataSearch(this, this.eventBus, this.services);
    }
    prepareFilter() {
        this.filter = new filter_DataFilter(this.eventBus, this.services);
    }
    prepareSummary() {
        this.summary = new summary_DataSummary(this, this.eventBus, this.services);
    }
    rebuildGroups() {
        this.group.clean();
        if (this.services.state.group.groups.length) {
            this.group.build(this.services.state.group.groups);
        }
    }
    getTotalAggregation() {
        return data_awaiter(this, void 0, void 0, function* () {
            return yield this.summary.get(yield this.getCurrentRows());
        });
    }
    onDoneRowFreeze() {
        return data_awaiter(this, void 0, void 0, function* () {
            yield this.prepareRows();
            this.fireChangeDataRows();
            this.fireAfterData();
        });
    }
    onChangeDataSearch() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SEARCH);
            yield this.prepareRows();
            this.fireChangeDataRows();
            this.fireAfterData();
            yield this.prepareSearchList();
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.SEARCH);
        });
    }
    onChangeData() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.CHANGE);
            yield this.prepareRows();
            this.fireChangeDataRows();
            this.fireAfterData();
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.CHANGE, yield this.getRowsIds());
        });
    }
    focusAddedRow() {
        return data_awaiter(this, void 0, void 0, function* () {
            let { added } = yield this.getRowsIds();
            if (added.length) {
                let columnId = this.services.columns.getFirstEditableColumn(this.services.columns.getAllVisibleColumnIdsByOrder());
                let rowId = added[added.length - 1];
                this.eventBus.fire(eventsList_EVENTS.ACTION.VIEW.CELL.FOCUS, { rowId, columnId });
            }
        });
    }
    fireAfterData() {
        UtilitiesDelay.queue(() => data_awaiter(this, void 0, void 0, function* () {
            let { current, marked } = yield this.getRowsIds();
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA, {
                length: current.length,
                selected: marked.length
            });
        }));
    }
    fireChangeDataRows() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.ROWS, yield this.getRowsIds());
        });
    }
    onChangeDataGroup() {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.GROUP);
            yield this.prepareRows();
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.GROUP);
        });
    }
    onChangeDataSort({ columns, groups }) {
        return data_awaiter(this, void 0, void 0, function* () {
            if ([...columns, ...groups].length === 0) {
                yield this.prepareRows();
            }
            else {
                yield this.group.sort({ columns, groups });
            }
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.SORT, { columns, groups });
        });
    }
    getResetIds(rows, columnId, value) {
        let ids = [];
        for (let i = 0; i < rows.length; i += 1) {
            if (this.services.cell.compareValue(rows[i], columnId, value, true)) {
                if (this.services.cell.hasChanged(rows[i], columnId)) {
                    ids.push(rows[i].id);
                }
            }
        }
        return ids;
    }
    getChangedIds(rows, columnId, value) {
        let ids = [];
        for (let i = 0; i < rows.length; i += 1) {
            if (!this.services.row.isDisabled(rows[i].id)
                && !this.services.cell.compareValue(rows[i], columnId, value, true)
                && this.services.columns.isEditable(this.services.columns.getColumnById(columnId, false))) {
                ids.push(rows[i].id);
            }
        }
        return ids;
    }
    onMassChangeRows(rows, columnId, value) {
        let resetIds = this.getResetIds(rows, columnId, value);
        let changeIds = this.getChangedIds(rows, columnId, value);
        if (resetIds.length) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.RESET, { rowIds: resetIds, columnId });
        }
        if (changeIds.length) {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.VALUE, { rowIds: changeIds, columnId, value });
        }
    }
    onActionDataEdit({ changes, filterSet }) {
        return data_awaiter(this, void 0, void 0, function* () {
            let rows = [...yield this.getFreezeRows(), ...yield this.getCurrentRows()];
            rows = filterSet ? yield this.filter.getRows(rows, filterSet) : rows;
            rows = this.services.row.filterOutRemoved(rows);
            let editableRows = rows.filter((row) => !this.services.row.isDisabled(row.id));
            let rowsDiff = rows.length - editableRows.length;
            if (rowsDiff) {
                console.warn(`Value(s) in ${rowsDiff} not editable row(s) remain unchanged.`);
            }
            if (editableRows.length === 0) {
                return void 0;
            }
            Object.keys(changes).forEach((columnId) => {
                this.onMassChangeRows(editableRows, columnId, changes[columnId]);
                let rowIds = editableRows.map((row) => row.id);
                this.eventBus.fire(eventsList_EVENTS.CLEAR_CACHE.ALL);
                this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.EDIT.SET_VALUES, { columnId, rowIds });
            });
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.EDIT);
        });
    }
    onChangeDataFormatSet({ columnId, intl, filterSet }) {
        return data_awaiter(this, void 0, void 0, function* () {
            this.eventBus.fire(eventsList_EVENTS.ACTION.DATA.FORMAT);
            if (filterSet) {
                let rows = yield this.filter.getRows(yield this.getCurrentRows(), filterSet);
                rows.forEach((row) => {
                    this.services.formatter.registerRowFormat(this.services.columns.getColumnById(columnId, false), intl);
                    let index = this.services.formatter.getStateRowIndex(columnId, row.id);
                    if (index !== -1) {
                        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.FORMAT.UPDATE, { index, intl });
                    }
                    else {
                        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.FORMAT.ADD, {
                            columnId,
                            intl,
                            rowId: row.id
                        });
                    }
                });
            }
            else {
                this.services.formatter.registerColumnFormat(this.services.columns.getColumnById(columnId, false), intl);
            }
            this.eventBus.fire(eventsList_EVENTS.CLEAR_CACHE.ALL);
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.FORMAT.SET, { columnId: !filterSet ? columnId : undefined });
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.FORMAT);
        });
    }
    onDoneRowRemove() {
        this.eventBus.fire(eventsList_EVENTS.AFTER.ROW.REMOVE);
    }
    onDoneDataSave() {
        this.onChangeData();
    }
    onDoneRowAdd() {
        return data_awaiter(this, void 0, void 0, function* () {
            yield this.prepareRows();
            this.fireChangeDataRows();
            this.fireAfterData();
            this.focusAddedRowDebounce();
            this.eventBus.fire(eventsList_EVENTS.AFTER.ROW.ADD);
        });
    }
    mergeEditedData() {
        let editState = this.services.state.get().edit;
        this._rows.unshift(...editState.added);
        editState.removed.forEach((rowId) => {
            let rowIndex = this._rows.findIndex((row) => row.id === rowId);
            if (rowIndex !== -1) {
                this._rows.splice(rowIndex, 1);
            }
            else {
                console.warn(`Cannot remove unknown row with ID '${rowId}'`);
            }
        });
        editState.cells.forEach((cell) => {
            let rowIndex = this._rows.findIndex((row) => row.id === cell.rowId);
            if (rowIndex !== -1 && this._rows[rowIndex].data[cell.columnId] !== undefined) {
                this._rows[rowIndex].data[cell.columnId] = cell.value;
            }
            else {
                console.warn(`Cannot update row with ID '${cell.rowId}' or column with ID '${cell.columnId}'`);
            }
        });
    }
    mergeResponseData(saveResponse) {
        if (saveResponse.rows) {
            saveResponse.rows.forEach((row) => {
                let originalRowIndex = this.findDataIndex(row.id);
                if (originalRowIndex !== -1) {
                    Object.assign(this._rows[originalRowIndex], row.data);
                }
                else {
                    this.services.logger.warn(`Row with id ${row.id} doesn't exist in original set of data`);
                }
            });
        }
    }
    findDataIndex(rowId) {
        return this._rows.findIndex((row) => row.id === rowId);
    }
    onChangeDataCellValue({ columnId }) {
        if (UtilsGroup.columnIsGrouped(this.services.state.group.groups, columnId)) {
            this.onChangeDataGroup();
        }
    }
    onDoneRowMark() {
        return data_awaiter(this, void 0, void 0, function* () {
            let { all, marked } = yield this.getRowsIds();
            let stateMarked = this.services.state.get().mark.state;
            let isAllMarked = all.every((rowId) => stateMarked.indexOf(rowId) !== -1);
            this.eventBus.fire(eventsList_EVENTS.DONE.HEADER.MARK, { isAllMarked, marked });
        });
    }
    destroy() {
        this.search = null;
        this.group = null;
        this.filter = null;
        this.dataState = null;
    }
    onActionDataReload() {
        this._rows = [];
        this.currentRows = [];
        this.currentIds = [];
    }
    getDefaultValues(columns) {
        let data = {};
        columns.forEach((column) => {
            switch (true) {
                case column.type === modules_constants_TYPE.GROUP:
                    Object.assign(data, this.getDefaultValues(column.columns));
                    break;
                case column.abstract:
                    break;
                default:
                    data[column.id] = (types_namespaceObject[column.type] || CellRaw).getDefault();
            }
        });
        return data;
    }
    onActionRowAdd() {
        let id = `${Math.random().toString(36).substring(2)}_${Date.now()}`;
        let data = this.getDefaultValues(this.services.columns.getAll());
        this.eventBus.fire(eventsList_EVENTS.COMMIT.ROW.ADD, { row: { id, data } });
    }
    onActionRowRemove() {
        return data_awaiter(this, void 0, void 0, function* () {
            let rowIds = yield this.getRowsIds();
            let rowIdsToRemove = rowIds.marked.filter((rowId) => rowIds.current.indexOf(rowId) !== -1 && rowIds.disabled.indexOf(rowId) === -1);
            if (rowIds.marked.length !== rowIdsToRemove.length) {
                console.warn(`${rowIds.marked.length - rowIdsToRemove.length} undeletable row(s) remains unchanged.`);
            }
            this.eventBus.fire(eventsList_EVENTS.COMMIT.ROW.REMOVE, { rowIds: rowIdsToRemove });
        });
    }
    onActionRowRestore({ rowId }) {
        return data_awaiter(this, void 0, void 0, function* () {
            let rowIds = yield this.getRowsIds();
            if (rowIds.removed.indexOf(rowId) === -1) {
                console.warn(`Cannot restore unremoved row`);
                this.eventBus.fire(eventsList_EVENTS.REJECT.ROW.RESTORE);
            }
            else {
                this.eventBus.fire(eventsList_EVENTS.COMMIT.ROW.RESTORE, { rowId });
            }
        });
    }
    onActionDataSave({ callback }) {
        let responses = UtilitiesArray.wrapInArray(callback(this.services.state.edit));
        responses.forEach((response) => {
            let responseAsObject = response;
            switch (true) {
                case response === true:
                    this.mergeEditedData();
                    this.eventBus.fire(eventsList_EVENTS.COMMIT.DATA.SAVE);
                    this.eventBus.fire(eventsList_EVENTS.DONE.DATA.SAVE);
                    break;
                case !UtilitiesArray.isEmptyArray(responseAsObject.errors):
                    this.eventBus.fire(eventsList_EVENTS.REJECT.DATA.SAVE, responseAsObject);
                    break;
                case !UtilitiesArray.isEmptyArray(responseAsObject.rows):
                    this.mergeResponseData(responseAsObject);
                    this.eventBus.fire(eventsList_EVENTS.COMMIT.DATA.SAVE);
                    this.eventBus.fire(eventsList_EVENTS.DONE.DATA.SAVE);
                    break;
                default:
                    console.warn('Unknown save action');
                    this.eventBus.fire(eventsList_EVENTS.REJECT.DATA.SAVE);
            }
        });
    }
    prepareSearchList() {
        return data_awaiter(this, void 0, void 0, function* () {
            let [columnLabel] = search_UtilsSearch.getColumnSearchMatches(this.services.state.header.search.value);
            let column = search_UtilsSearch.findColumnRecursiveByLabel(columnLabel, this.services.columns.getAll());
            if (!column) {
                return void 0;
            }
            this.eventBus.fire(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_LIST, {
                values: yield this.search.getSearchListData(column.id),
                columnId: column.id
            });
        });
    }
    live() {
        let onChangeDataSearchDebounce = UtilitiesDelay.debounce(this.onChangeDataSearch.bind(this), 300);
        let onChangeSort = UtilitiesDelay.debounce(this.onChangeDataSort.bind(this), 100);
        this.eventBus.join(eventsList_EVENTS.ACTION.ROW.ADD, this.onActionRowAdd.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.ROW.REMOVE, this.onActionRowRemove.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.ROW.RESTORE, this.onActionRowRestore.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.EDIT, this.onActionDataEdit.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.SAVE, this.onActionDataSave.bind(this));
        this.eventBus.join(eventsList_EVENTS.ACTION.DATA.RELOAD, this.onActionDataReload.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.FREEZE, this.onDoneRowFreeze.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.MARK, this.onDoneRowMark.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, this.onDoneDataSave.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.ADD, this.onDoneRowAdd.bind(this));
        this.eventBus.join(eventsList_EVENTS.DONE.ROW.REMOVE, this.onDoneRowRemove.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.FORMAT.SET, this.onChangeDataFormatSet.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, this.onChangeDataCellValue.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, this.onChangeDataGroup.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, onChangeSort);
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.FILTER, this.onChangeData.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SEARCH, onChangeDataSearchDebounce);
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
}
data_data_decorate([
    permission_namespaceObject.freezeRows,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", [Array]),
    data_data_metadata("design:returntype", Array)
], data_DataBuildIn.prototype, "prepareFreezeRows", null);
data_data_decorate([
    permission_namespaceObject.editable,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", [Array]),
    data_data_metadata("design:returntype", Array)
], data_DataBuildIn.prototype, "prepareAddeddRows", null);
data_data_decorate([
    permission_namespaceObject.filter,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", [Array]),
    data_data_metadata("design:returntype", Promise)
], data_DataBuildIn.prototype, "prepareFilteredRows", null);
data_data_decorate([
    permission_namespaceObject.search,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", [Array]),
    data_data_metadata("design:returntype", Array)
], data_DataBuildIn.prototype, "prepareSearchedRows", null);
data_data_decorate([
    measure({ good: 500 }),
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", []),
    data_data_metadata("design:returntype", Promise)
], data_DataBuildIn.prototype, "prepare", null);
data_data_decorate([
    permission_namespaceObject.search,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", []),
    data_data_metadata("design:returntype", void 0)
], data_DataBuildIn.prototype, "prepareSearch", null);
data_data_decorate([
    permission_namespaceObject.summary,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", []),
    data_data_metadata("design:returntype", void 0)
], data_DataBuildIn.prototype, "prepareSummary", null);
data_data_decorate([
    permission_namespaceObject.group,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", []),
    data_data_metadata("design:returntype", void 0)
], data_DataBuildIn.prototype, "rebuildGroups", null);
data_data_decorate([
    permission_namespaceObject.summary,
    data_data_metadata("design:type", Function),
    data_data_metadata("design:paramtypes", []),
    data_data_metadata("design:returntype", Promise)
], data_DataBuildIn.prototype, "getTotalAggregation", null);
//# sourceMappingURL=data.js.map
// CONCATENATED MODULE: ./dist-es/modules/data/build.in.js
var data_build_in_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var data_build_in_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var data_build_in_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class build_in_Data {
    boot(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
    }
    init() {
        this.prepare();
        this.live();
    }
    isLoaded() {
        return this._data.isLoaded();
    }
    setRows(rows) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.setRows(rows);
        });
    }
    getByRowId(rowId) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            let row = yield this._data.getByRowId(rowId);
            if (!row) {
                console.warn(`Cannot find row with ID '${rowId}'`);
                return void 0;
            }
            return Object.assign({}, row, { type: constants_VIEW.ROW.TYPE.NORMAL });
        });
    }
    get(dataIndex) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            let dataRowDescriptor;
            try {
                dataRowDescriptor = yield this._data.get(dataIndex);
            }
            catch (e) {
                this.services.logger.warn(`Rejecting row with index '${dataIndex}'`);
                return void 0;
            }
            if (!dataRowDescriptor) {
                console.warn(`Row with index '${dataIndex}' not exists`);
                return void 0;
            }
            return dataRowDescriptor;
        });
    }
    getTotalAggregation() {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getTotalAggregation();
        });
    }
    getGroupByRow(dataRow) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getGroupByRow(dataRow);
        });
    }
    getDataIndex(dataRow) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getDataIndex(dataRow);
        });
    }
    getLength() {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getLength();
        });
    }
    getRowsIds() {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getRowsIds();
        });
    }
    getCurrentRows(fromCache) {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getCurrentRows(fromCache);
        });
    }
    getFreezeRows() {
        return data_build_in_awaiter(this, void 0, void 0, function* () {
            return yield this._data.getFreezeRows();
        });
    }
    prepare() {
        this._data = new data_DataBuildIn(this.eventBus, this.services);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.DESTROY, this.destroy.bind(this));
    }
    destroy() {
        this._data = null;
    }
}
data_build_in_decorate([
    measure(),
    data_build_in_metadata("design:type", Function),
    data_build_in_metadata("design:paramtypes", []),
    data_build_in_metadata("design:returntype", void 0)
], build_in_Data.prototype, "prepare", null);
//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/__vc-particles/vc-redux-thunk/index.js
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

/* harmony default export */ var vc_redux_thunk = (thunk);

// EXTERNAL MODULE: ./dist-es/__vc-particles/vc-redux/index.js
var vc_redux = __webpack_require__(0);

// CONCATENATED MODULE: ./dist-es/modules/state/build-in/constants.js
const ACTIONS = {
    SET_LANGUAGE: 'SET_LANGUAGE',
    SET_CONFIG: 'SET_CONFIG',
    SET_INITIAL: 'SET_INITIAL',
    CHANGE_ROWS_NUMBER: 'CHANGE_ROWS_NUMBER',
    SET_FOOTER_VISIBLE: 'SET_FOOTER_VISIBLE',
    SET_HEADER_VISIBLE: 'SET_HEADER_VISIBLE',
    SET_SUMMARY_VALUE: 'SET_SUMMARY_VALUE',
    SET_SUMMARY_TOTAL_VALUE: 'SET_SUMMARY_TOTAL_VALUE',
    SET_SUMMARY_VISIBLE: 'SET_SUMMARY_VISIBLE',
    SET_HEADER_BAR_FILTER_VISIBLE: 'SET_HEADER_BAR_FILTER_VISIBLE',
    SET_HEADER_BAR_GROUP_VISIBLE: 'SET_HEADER_BAR_GROUP_VISIBLE',
    RESIZE: 'RESIZE',
    FULLSCREEN_TOGGLE: 'FULLSCREEN_TOGGLE',
    THEME: {
        STYLING: {
            SET: 'THEME_STYLING_SET'
        },
        LAYOUT: {
            SET: 'THEME_LAYOUT_SET'
        }
    },
    EVENT: {
        JOIN: 'EVENT_JOIN',
        LEAVE: 'EVENT_LEAVE'
    },
    EDIT: {
        SET: 'EDIT_SET'
    },
    FORMAT: {
        ADD: 'FORMAT_ADD',
        UPDATE: 'FORMAT_UPDATE'
    },
    FILTER: {
        SET_VISIBLE: 'FILTER_SET_VISIBLE',
        SET: 'FILTER_SET',
        RESET: 'FILTER_RESET'
    },
    MARK: {
        SET: 'MARK_SET',
        SELECT: 'MARK_SELECT',
        DESELECT: 'MARK_DESELECT',
        REFRESH: 'MARK_REFRESH'
    },
    FREEZE: {
        SET: 'FREEZE_SET',
        ADD: 'FREEZE_ADD',
        REMOVE: 'FREEZE_REMOVE'
    },
    SEARCH: {
        SET_VISIBLE: 'SEARCH_SET_VISIBLE',
        CHANGE: 'SEARCH_CHANGE',
        SET: 'SEARCH_SET',
        RESET: 'SEARCH_RESET'
    },
    DATA: {
        CHANGE: 'DATA_CHANGE',
        ROWS: {
            ALL: {
                RESET: 'DATA_ROWS_ALL_RESET'
            },
            MASS: {
                CHANGE: 'DATA_ROWS_MASS_CHANGE',
                RESET: 'DATA_ROWS_MASS_RESET'
            },
            ADD: 'DATA_ROWS_ADD',
            REMOVE: 'DATA_ROWS_REMOVE',
            REMOVE_MARKED: 'DATA_ROWS_REMOVE_MARKED',
            RESTORE: 'DATA_ROWS_RESTORE',
            CHANGE: 'DATA_ROWS_CHANGE',
            SAVE: 'DATA_ROWS_SAVE',
            RESET: 'DATA_ROWS_RESET',
            AFTER_SAVE: 'DATA_ROWS_AFTER_SAVE',
            ERROR: 'DATA_ROWS_ERROR'
        }
    },
    SETTINGS: {
        SET_VISIBLE: 'SETTINGS_SET_VISIBLE',
        DISABLE: 'SETTINGS_DISABLE',
        ENABLE: 'SETTINGS_ENABLE'
    },
    COLUMNS: {
        COLLECTION: {
            SHOW: 'COLUMNS_SHOW',
            HIDE: 'COLUMNS_HIDE',
            TOGGLE: 'VISIBILITY_TOGGLE'
        },
        WIDTH: {
            SET: 'COLUMNS_WIDTH_SET'
        },
        ORDER: {
            SET: 'COLUMNS_ORDER_SET',
        },
        FREEZE: {
            ADD: 'COLUMNS_FREEZE_ADD',
            REMOVE: 'COLUMNS_FREEZE_REMOVE',
            TOGGLE: 'COLUMNS_FREEZE_TOGGLE'
        },
        MOVE: 'COLUMNS_MOVE',
        COLLAPSE: 'COLUMNS_COLLAPSE'
    },
    SORT: {
        SET_VISIBLE: 'SORT_SET_VISIBLE',
        ADD: 'SORT_ADD',
        CHANGE: 'SORT_CHANGE',
        CHANGE_GROUP: 'SORT_CHANGE_GROUP',
        REMOVE: 'SORT_REMOVE',
        RESET: 'SORT_RESET',
        SET: 'SORT_SET',
    },
    GROUP: {
        SET_VISIBLE: 'GROUP_SET_VISIBLE',
        ADD: 'GROUP_ADD',
        GROUP: 'GROUP_GROUP',
        SET: 'GROUP_SET',
        RESET: 'GROUP_RESET',
        REMOVE: 'GROUP_REMOVE',
        TOGGLE: 'TOGGLE',
        MOVE: 'GROUP_MOVE',
        SET_WIDTH: 'SET_WIDTH',
        SET_WIDTHS: 'SET_WIDTHS'
    },
    PAGINATION: {
        CHANGE_PAGE: 'PAGINATION_CHANGE_PAGE',
        SHOW_PAGINATION: 'SHOW_PAGINATION',
        NEXT_PAGE: 'NEXT_PAGE',
        PREV_PAGE: 'PREV_PAGE',
        CHANGE_NUMBER_PER_PAGE: 'CHANGE_NUMBER_PER_PAGE'
    },
    STATE: {
        LOAD: 'STATE_LOAD'
    },
    ERRORS: {
        SET_VISIBLE: 'ERRORS_SET_VISIBLE'
    },
    COLLAPSED: {
        SET: 'COLLAPSED_SET'
    },
    SCROLL: {
        SET: 'SCROLL_SET'
    }
};
const VIEW_SETTINGS_VIEWS = {
    SETTINGS: 'VIEW_SETTINGS_VIEWS_SETTINGS',
    ERRORS: 'VIEW_SETTINGS_VIEWS_ERRORS'
};
//# sourceMappingURL=constants.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/toast.js



const getInitial = () => UtilsObject.copy(state_initialState.toast);
class toast_ToastReducer {
    static reducer(state = getInitial(), action) {
        return UtilsReducer.runReducers(state, action, toast_ToastReducer.reducerMap);
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.toast.enabled', action) || false;
        return Object.assign({}, getInitial(), { enabled });
    }
}
toast_ToastReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: toast_ToastReducer.setConfig
};
//# sourceMappingURL=toast.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/title.js




const title_getInitial = () => UtilsObject.copy(state_initialState.header.title);
class title_HeaderTitleReducer {
    static reducer(state = title_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, title_HeaderTitleReducer.reducerMap);
    }
    static changeRowsNumber(state, action) {
        return Object.assign({}, state, {
            allRows: action.all,
            initialRows: action.initial
        });
    }
    static setConfig(state, action) {
        let title = UtilsObject.getPropertyValue('metadata.config.header.title', action);
        return Object.assign({}, state, title_getInitial(), {
            title: title || COMPONENT_TITLE
        });
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.header.title)) {
            return state;
        }
        else {
            return action.state.header.title || title_getInitial();
        }
    }
}
title_HeaderTitleReducer.reducerMap = {
    [ACTIONS.CHANGE_ROWS_NUMBER]: title_HeaderTitleReducer.changeRowsNumber,
    [ACTIONS.SET_CONFIG]: title_HeaderTitleReducer.setConfig,
    [ACTIONS.STATE.LOAD]: title_HeaderTitleReducer.loadState
};
//# sourceMappingURL=title.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/toolbar/settings.js



const settings_getInitial = () => UtilsObject.copy(state_initialState.header.toolbar.settings);
class settings_SettingsReducer {
    static reducer(state = settings_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, settings_SettingsReducer.reducerMap);
    }
    static stopOperation(state) {
        return Object.assign({}, state, { disabled: false });
    }
    static operationPending(state) {
        return Object.assign({}, state, { disabled: true });
    }
}
settings_SettingsReducer.reducerMap = {
    [ACTIONS.SETTINGS.DISABLE]: settings_SettingsReducer.stopOperation,
    [ACTIONS.SETTINGS.ENABLE]: settings_SettingsReducer.operationPending
};
//# sourceMappingURL=settings.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/bar/group.js



const group_getInitial = () => UtilsObject.copy(state_initialState.header.toolbar.bar.group);
class group_HeaderBarGroupReducer {
    static reducer(state = group_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, group_HeaderBarGroupReducer.reducerMap);
    }
    static setVisibility(state, action) {
        return Object.assign({}, state, { visible: action.visible });
    }
    static setConfig(state, action) {
        let group = UtilsObject.getPropertyValue('metadata.config.header.bar.group', action);
        return Object.assign({}, group_getInitial(), state, group && group.visible !== undefined ? group : { visible: true });
    }
}
group_HeaderBarGroupReducer.reducerMap = {
    [ACTIONS.SET_HEADER_BAR_GROUP_VISIBLE]: group_HeaderBarGroupReducer.setVisibility,
    [ACTIONS.SET_CONFIG]: group_HeaderBarGroupReducer.setConfig,
};
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/bar/filter.js



const filter_getInitial = () => UtilsObject.copy(state_initialState.header.toolbar.bar.filter);
class filter_HeaderBarFilterReducer {
    static reducer(state = filter_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, filter_HeaderBarFilterReducer.reducerMap);
    }
    static setVisibility(state, action) {
        return Object.assign({}, state, { visible: action.visible });
    }
    static setConfig(state, action) {
        let filter = UtilsObject.getPropertyValue('metadata.config.header.bar.filter', action);
        return Object.assign({}, state, filter_getInitial(), filter && filter.visible !== undefined ? filter : { visible: true });
    }
}
filter_HeaderBarFilterReducer.reducerMap = {
    [ACTIONS.SET_HEADER_BAR_FILTER_VISIBLE]: filter_HeaderBarFilterReducer.setVisibility,
    [ACTIONS.SET_CONFIG]: filter_HeaderBarFilterReducer.setConfig,
};
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/bar/sort.js



const sort_getInitial = () => UtilsObject.copy(state_initialState.header.toolbar.bar.sort);
class sort_HeaderBarSortReducer {
    static reducer(state = sort_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, sort_HeaderBarSortReducer.reducerMap);
    }
    static setVisibility(state, action) {
        return Object.assign({}, state, { visible: action.visible });
    }
    static setConfig(state, action) {
        let sort = UtilsObject.getPropertyValue('metadata.config.header.bar.sort', action);
        return Object.assign({}, state, sort && sort.visible !== undefined ? sort : { visible: true });
    }
}
sort_HeaderBarSortReducer.reducerMap = {
    [ACTIONS.SET_HEADER_BAR_FILTER_VISIBLE]: sort_HeaderBarSortReducer.setVisibility,
    [ACTIONS.SET_CONFIG]: sort_HeaderBarSortReducer.setConfig,
};
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/bar.js




const headerReducer = Object(vc_redux["b" /* combineReducers */])({
    filter: filter_HeaderBarFilterReducer.reducer,
    group: group_HeaderBarGroupReducer.reducer,
    sort: sort_HeaderBarSortReducer.reducer
});
class HeaderBarReducer {
    static reducer(state = {}, action) {
        return headerReducer(state, action);
    }
}
//# sourceMappingURL=bar.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/toolbar.js





class toolbar_HeaderToolbarReducer {
    // todo combinereducers
    static reducer(state = {}, action) {
        let settingsState = settings_SettingsReducer.reducer(state.settings, action);
        let barState = HeaderBarReducer.reducer(state.bar, action);
        let stateHeaderToolbar = UtilsReducer.runReducers(state, action, toolbar_HeaderToolbarReducer.reducerMap);
        if (state.settings !== settingsState || state.bar !== barState) {
            return Object.assign({}, stateHeaderToolbar, {
                settings: settingsState,
                bar: barState
            });
        }
        return stateHeaderToolbar;
    }
    static setSettingsVisibility(state, action) {
        return toolbar_HeaderToolbarReducer.setVisibility(state, action.visible, TRANSLATION.KEYS.SETTINGS);
    }
    static setErrorsVisibility(state, action) {
        return toolbar_HeaderToolbarReducer.setVisibility(state, action.visible, TRANSLATION.KEYS.ERRORS);
    }
    static setConfig(state, action) {
        let visible = UtilsObject.getPropertyValue('metadata.config.header.toolbar.visible', action) || false;
        let buttons = [];
        let config = action.metadata.config;
        if (toolbar_HeaderToolbarReducer.isEditEnabled(config)) {
            buttons.push({
                label: TRANSLATION.KEYS.ERRORS,
                type: VIEW_SETTINGS_VIEWS.ERRORS,
                visible: false
            });
        }
        if (toolbar_HeaderToolbarReducer.isSettingsEnabled(config)) {
            buttons.push({
                label: TRANSLATION.KEYS.SETTINGS,
                icon: ICON.SETTINGS,
                type: VIEW_SETTINGS_VIEWS.SETTINGS,
                visible: true
            });
        }
        return Object.assign({}, state, { visible, buttons });
    }
    static isSettingsEnabled(config) {
        return toolbar_HeaderToolbarReducer.isSortEnabled(config)
            || toolbar_HeaderToolbarReducer.isGroupEnabled(config)
            || toolbar_HeaderToolbarReducer.isOrderEnabled(config)
            || toolbar_HeaderToolbarReducer.isColumnFreezeEnabled(config);
    }
    static isSortEnabled(config) {
        return UtilsObject.getPropertyValue('options.sort.enabled', config);
    }
    static isGroupEnabled(config) {
        return UtilsObject.getPropertyValue('options.group.enabled', config);
    }
    static isOrderEnabled(config) {
        return UtilsObject.getPropertyValue('options.order.enabled', config);
    }
    static isColumnFreezeEnabled(config) {
        return UtilsObject.getPropertyValue('options.freezeColumns.enabled', config);
    }
    static isEditEnabled(config) {
        return UtilsObject.getPropertyValue('options.editable.enabled', config);
    }
    static setVisibility(state, isVisible, label) {
        let buttons = state.buttons.map((button) => {
            return Object.assign({}, button, {
                visible: button.label === label ? isVisible : button.visible
            });
        });
        return Object.assign({}, state, { buttons });
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.header.toolbar)) {
            return state;
        }
        else {
            return action.state.header.toolbar;
        }
    }
}
toolbar_HeaderToolbarReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: toolbar_HeaderToolbarReducer.setConfig,
    [ACTIONS.ERRORS.SET_VISIBLE]: toolbar_HeaderToolbarReducer.setErrorsVisibility,
    [ACTIONS.SETTINGS.SET_VISIBLE]: toolbar_HeaderToolbarReducer.setSettingsVisibility,
    [ACTIONS.DATA.ROWS.ERROR]: toolbar_HeaderToolbarReducer.setErrorsVisibility,
    [ACTIONS.STATE.LOAD]: toolbar_HeaderToolbarReducer.loadState
};
//# sourceMappingURL=toolbar.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/search.js



const search_getInitial = () => UtilsObject.copy(state_initialState.header.search);
class search_HeaderToolbarSearchReducer {
    static reducer(state = search_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, search_HeaderToolbarSearchReducer.reducerMap);
    }
    static set(state, action) {
        return Object.assign({}, state, { value: action.value });
    }
    static reset(state, action) {
        return Object.assign({}, state, { value: '' });
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.search.enabled', action) || false;
        let visible = UtilsObject.getPropertyValue('metadata.config.options.search.visible', action) || false;
        return Object.assign({}, search_getInitial(), state, { enabled, visible });
    }
    static setVisible(state, action) {
        return Object.assign({}, state, { visible: action.visible });
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.header.search)) {
            return state;
        }
        else {
            return action.state.header.search || search_getInitial();
        }
    }
}
search_HeaderToolbarSearchReducer.reducerMap = {
    [ACTIONS.SEARCH.SET]: search_HeaderToolbarSearchReducer.set,
    [ACTIONS.SEARCH.RESET]: search_HeaderToolbarSearchReducer.reset,
    [ACTIONS.SEARCH.SET_VISIBLE]: search_HeaderToolbarSearchReducer.setVisible,
    [ACTIONS.SET_CONFIG]: search_HeaderToolbarSearchReducer.setConfig,
    [ACTIONS.STATE.LOAD]: search_HeaderToolbarSearchReducer.loadState
};
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/visible.js



const visible_getInitial = () => UtilsObject.copy(state_initialState.header.visible);
class visible_HeaderVisibleReducer {
    static reducer(state = visible_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, visible_HeaderVisibleReducer.reducerMap);
    }
    static setVisibility(state, action) {
        return action.visible;
    }
    static setConfig(state, action) {
        let headerEnabled = UtilsObject.getPropertyValue('metadata.config.header.enabled', action);
        return headerEnabled !== undefined ? headerEnabled : false;
    }
    static loadState(state, action) {
        if (state === action.state.header.visible) {
            return state;
        }
        else {
            return action.state.header.visible || visible_getInitial();
        }
    }
}
visible_HeaderVisibleReducer.reducerMap = {
    [ACTIONS.SET_HEADER_VISIBLE]: visible_HeaderVisibleReducer.setVisibility,
    [ACTIONS.SET_CONFIG]: visible_HeaderVisibleReducer.setConfig,
    [ACTIONS.STATE.LOAD]: visible_HeaderVisibleReducer.loadState
};
//# sourceMappingURL=visible.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/header/header.js





const header_headerReducer = Object(vc_redux["b" /* combineReducers */])({
    title: title_HeaderTitleReducer.reducer,
    toolbar: toolbar_HeaderToolbarReducer.reducer,
    search: search_HeaderToolbarSearchReducer.reducer,
    visible: visible_HeaderVisibleReducer.reducer
});
class HeaderReducer {
    static reducer(state = {}, action) {
        return header_headerReducer(state, action);
    }
}
//# sourceMappingURL=header.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/translation.js





const translation_getInitial = () => UtilsObject.copy(state_initialState.translation);
class translation_TranslationReducer {
    static reducer(state = translation_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, translation_TranslationReducer.reducerMap);
    }
    static set(state, action) {
        return translation_TranslationReducer.private(state, action.language);
    }
    static setConfig(state, action) {
        let language = UtilsObject.getPropertyValue('metadata.config.language', action);
        if (language === undefined || TRANSLATION.SUPPORTED_LANGUAGES.indexOf(language) === -1) {
            language = DEFAULT.LANGUAGE;
        }
        return translation_TranslationReducer.private(state, language);
    }
    static private(state, language) {
        translation_Translation.setLanguage(language);
        return Object.assign({}, state, {
            language: language
        });
    }
    static loadState(state, action) {
        if (state.language === action.state.translation.language) {
            return state;
        }
        else {
            return action.state.translation || translation_getInitial();
        }
    }
}
translation_TranslationReducer.reducerMap = {
    [ACTIONS.SET_LANGUAGE]: translation_TranslationReducer.set,
    [ACTIONS.SET_CONFIG]: translation_TranslationReducer.setConfig,
    [ACTIONS.STATE.LOAD]: translation_TranslationReducer.loadState
};
//# sourceMappingURL=translation.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/footer/pagination.js



const pagination_getInitial = () => UtilsObject.copy(state_initialState.footer.pagination);
class pagination_PaginationReducer {
    static reducer(state = pagination_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, pagination_PaginationReducer.reducerMap);
    }
    static setConfig(state, action) {
        let infinite = UtilsObject.getPropertyValue('metadata.config.options.infinite', action);
        if (infinite) {
            let footerEnabled = UtilsObject.getPropertyValue('metadata.config.footer.enabled', action);
            return Object.assign({}, pagination_getInitial(), state, {
                visible: !(infinite && infinite.enabled && footerEnabled)
            });
        }
        return Object.assign({}, pagination_getInitial(), state, { visible: false });
    }
    static enableNextPrevButtons(state, action) {
        let currentPage = action.state.page.currentPage;
        let override = {
            isNextPage: currentPage < action.state.page.numberOfPages,
            isPrevPage: currentPage > 1
        };
        if (state.isNextPage !== override.isNextPage || state.isPrevPage !== override.isPrevPage) {
            return Object.assign({}, state, override);
        }
        else {
            return state;
        }
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.footer.pagination)) {
            return state;
        }
        else {
            return action.state.footer.pagination || pagination_getInitial();
        }
    }
}
pagination_PaginationReducer.reducerMap = {
    [ACTIONS.PAGINATION.NEXT_PAGE]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.PAGINATION.PREV_PAGE]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.CHANGE_ROWS_NUMBER]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.PAGINATION.CHANGE_PAGE]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.PAGINATION.CHANGE_NUMBER_PER_PAGE]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.SET_CONFIG]: pagination_PaginationReducer.setConfig,
    [ACTIONS.DATA.CHANGE]: pagination_PaginationReducer.enableNextPrevButtons,
    [ACTIONS.STATE.LOAD]: pagination_PaginationReducer.loadState
};
//# sourceMappingURL=pagination.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/footer/visible.js



const footer_visible_getInitial = () => UtilsObject.copy(state_initialState.footer.visible);
class visible_FooterVisibleReducer {
    static reducer(state = footer_visible_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, visible_FooterVisibleReducer.reducerMap);
    }
    static setVisibility(state, action) {
        return action.visible;
    }
    static setConfig(state, action) {
        let footerEnabled = UtilsObject.getPropertyValue('metadata.config.footer.enabled', action);
        return footerEnabled !== undefined ? footerEnabled : false;
    }
    static loadState(state, action) {
        if (state === action.state.footer.visible) {
            return state;
        }
        else {
            return action.state.footer.visible || footer_visible_getInitial();
        }
    }
}
visible_FooterVisibleReducer.reducerMap = {
    [ACTIONS.SET_FOOTER_VISIBLE]: visible_FooterVisibleReducer.setVisibility,
    [ACTIONS.SET_CONFIG]: visible_FooterVisibleReducer.setConfig,
    [ACTIONS.STATE.LOAD]: visible_FooterVisibleReducer.loadState
};
//# sourceMappingURL=visible.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/footer/footer.js



const footerReducer = Object(vc_redux["b" /* combineReducers */])({
    pagination: pagination_PaginationReducer.reducer,
    visible: visible_FooterVisibleReducer.reducer
});
class FooterReducer {
    static reducer(state = {}, action) {
        return footerReducer(state, action);
    }
}
//# sourceMappingURL=footer.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/debug.js



const debug_getInitial = () => UtilsObject.copy(state_initialState.debug);
class debug_DebugReducer {
    static reducer(state = debug_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, debug_DebugReducer.reducerMap);
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.debug.enabled', action);
        return Object.assign({}, debug_getInitial(), state, { enabled: enabled !== undefined ? enabled : false });
    }
    static loadState(state, action) {
        if (action.state.debug.enabled === state.enabled) {
            return state;
        }
        else {
            return action.state.debug || debug_getInitial();
        }
    }
}
debug_DebugReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: debug_DebugReducer.setConfig,
    [ACTIONS.STATE.LOAD]: debug_DebugReducer.loadState
};
//# sourceMappingURL=debug.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/theme/styling.js



const styling_getInitial = () => UtilsObject.copy(state_initialState.theme.styling);
class styling_ThemeStylingReducer {
    static reducer(state = styling_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, styling_ThemeStylingReducer.reducerMap);
    }
    static setConfig(state, action) {
        let styling = UtilsObject.getPropertyValue('metadata.config.theme.styling', action) || {};
        return Object.assign({}, styling_getInitial(), state, styling);
    }
    static set(state, { themeName }) {
        return Object.assign({}, state, { current: themeName });
    }
    static loadState(state, action) {
        if (state.current === action.state.theme.styling.current) {
            return state;
        }
        else {
            return action.state.theme.styling || styling_getInitial();
        }
    }
}
styling_ThemeStylingReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: styling_ThemeStylingReducer.setConfig,
    [ACTIONS.THEME.STYLING.SET]: styling_ThemeStylingReducer.set,
    [ACTIONS.STATE.LOAD]: styling_ThemeStylingReducer.loadState
};
//# sourceMappingURL=styling.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/theme/layout.js




const layout_getInitial = () => UtilsObject.copy(state_initialState.theme.layout);
class layout_ThemeLayoutReducer {
    static reducer(state = layout_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, layout_ThemeLayoutReducer.reducerMap);
    }
    static setConfig(state, action) {
        let layout = UtilsObject.getPropertyValue('metadata.config.theme.layout', action) || DEFAULT.THEME.LAYOUT;
        return Object.assign({}, layout_getInitial(), state, { value: layout });
    }
    static set(state, { layout }) {
        return Object.assign({}, state, { value: layout });
    }
    static loadState(state, action) {
        if (state.value === action.state.theme.layout.value) {
            return state;
        }
        else {
            return action.state.theme.layout || layout_getInitial();
        }
    }
}
layout_ThemeLayoutReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: layout_ThemeLayoutReducer.setConfig,
    [ACTIONS.THEME.LAYOUT.SET]: layout_ThemeLayoutReducer.set,
    [ACTIONS.STATE.LOAD]: layout_ThemeLayoutReducer.loadState
};
//# sourceMappingURL=layout.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/theme.js



const themeReducer = Object(vc_redux["b" /* combineReducers */])({
    styling: styling_ThemeStylingReducer.reducer,
    layout: layout_ThemeLayoutReducer.reducer
});
class ThemeReducer {
    static reducer(state = {}, action) {
        return themeReducer(state, action);
    }
}
//# sourceMappingURL=theme.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/summary.js




const summary_getInitial = () => UtilsObject.copy(state_initialState.summary);
class summary_SummaryReducer {
    static reducer(state = summary_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, summary_SummaryReducer.reducerMap);
    }
    static setSummaryValue(state, action) {
        return Object.assign({}, state, { value: action.value });
    }
    static setTotalSummary(state, { aggregation }) {
        let total = {};
        Object.keys(aggregation).forEach((columnId) => {
            total[columnId] = {};
            Object.keys(aggregation[columnId]).forEach((type) => {
                total[columnId][type] = aggregation[columnId][type];
            });
        });
        return Object.assign({}, state, { total });
    }
    static setConfig(state, action) {
        let summary = UtilsObject.getPropertyValue('metadata.config.options.summary', action);
        if (!UtilsObject.getPropertyValue('enabled', summary)) {
            return Object.assign({}, summary_getInitial(), state);
        }
        let summaryState = summary.state || [];
        let animationType = summary.animationType || DEFAULT.SUMMARY_ANIMATION_TYPE;
        let total = {};
        let length = 0;
        summary.state.forEach((item) => {
            item.aggregation.forEach(() => {
                length += 1;
            });
        });
        return Object.assign({}, summary_getInitial(), summary, { state: summaryState, total, length, animationType });
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.summary)) {
            return state;
        }
        else {
            return action.state.summary || summary_getInitial();
        }
    }
}
summary_SummaryReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: summary_SummaryReducer.setConfig,
    [ACTIONS.SET_SUMMARY_VALUE]: summary_SummaryReducer.setSummaryValue,
    [ACTIONS.SET_SUMMARY_TOTAL_VALUE]: summary_SummaryReducer.setTotalSummary,
    [ACTIONS.STATE.LOAD]: summary_SummaryReducer.loadState
};
//# sourceMappingURL=summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/groupVisibility.js



const groupVisibility_getInitial = () => UtilsObject.copy(state_initialState.groupVisibility);
// todo move to group branch
class groupVisibility_GroupVisibilityReducer {
    static reducer(state = groupVisibility_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, groupVisibility_GroupVisibilityReducer.reducerMap);
    }
    static group(state, action) {
        let override = {};
        override[action.path] = action.isGrouped;
        return Object.assign({}, state, override);
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.groupVisibility)) {
            return state;
        }
        else {
            return action.state.groupVisibility || groupVisibility_getInitial();
        }
    }
}
groupVisibility_GroupVisibilityReducer.reducerMap = {
    [ACTIONS.GROUP.GROUP]: groupVisibility_GroupVisibilityReducer.group,
    [ACTIONS.STATE.LOAD]: groupVisibility_GroupVisibilityReducer.loadState
};
//# sourceMappingURL=groupVisibility.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/page.js



const page_getInitial = () => UtilsObject.copy(state_initialState.page);
class page_PageReducer {
    static reducer(state = page_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, page_PageReducer.reducerMap);
    }
    static nextPage(state, action) {
        let source = {
            currentPage: action.page
        };
        return Object.assign({}, state, source);
    }
    static prevPage(state, action) {
        let source = {
            currentPage: action.page
        };
        return Object.assign({}, state, source);
    }
    static changeNumberPerPage(state, action) {
        let source = {
            itemPerPage: action.page,
            currentPage: Math.min(state.currentPage, action.numberOfPages),
            numberOfPages: action.numberOfPages
        };
        return Object.assign({}, state, source);
    }
    static toggle(state, action) {
        return page_PageReducer.numberOfItemsChanged(state, action.visibleLength);
    }
    static dataChange(state, action) {
        return page_PageReducer.numberOfItemsChanged(state, action.length);
    }
    static changeRowsNumbers(state, action) {
        let numberOfItems = (action.current || action.initial);
        let numberOfPages = Math.ceil(numberOfItems / state.itemPerPage) || 1;
        let source = {
            numberOfItems: numberOfItems,
            numberOfPages: numberOfPages,
            currentPage: 1
        };
        return Object.assign({}, state, source);
    }
    static changePage(state, action) {
        let source = {
            currentPage: action.page
        };
        return Object.assign({}, state, source);
    }
    static navigateToFirstPage(state) {
        if (state.currentPage !== 1) {
            return Object.assign({}, state, { currentPage: 1 });
        }
        return state;
    }
    static numberOfItemsChanged(state, length) {
        let numberOfPages = length > 0 ? Math.ceil(length / state.itemPerPage) : 1;
        let source = {
            currentPage: state.currentPage > numberOfPages ? 1 : state.currentPage,
            numberOfItems: length,
            numberOfPages: numberOfPages
        };
        return Object.assign({}, state, source);
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.page)) {
            return state;
        }
        else {
            return action.state.page || page_getInitial();
        }
    }
}
page_PageReducer.reducerMap = {
    // TODO last page / first page
    // TODO secure all actions to return state not object assign
    [ACTIONS.PAGINATION.NEXT_PAGE]: page_PageReducer.nextPage,
    [ACTIONS.PAGINATION.PREV_PAGE]: page_PageReducer.prevPage,
    [ACTIONS.PAGINATION.CHANGE_NUMBER_PER_PAGE]: page_PageReducer.changeNumberPerPage,
    [ACTIONS.PAGINATION.CHANGE_PAGE]: page_PageReducer.changePage,
    [ACTIONS.CHANGE_ROWS_NUMBER]: page_PageReducer.changeRowsNumbers,
    [ACTIONS.GROUP.TOGGLE]: page_PageReducer.toggle,
    // TODO either all sort/group + infinite or none // currently it is useless / missing events
    [ACTIONS.GROUP.ADD]: page_PageReducer.navigateToFirstPage,
    [ACTIONS.GROUP.SET]: page_PageReducer.navigateToFirstPage,
    [ACTIONS.SORT.ADD]: page_PageReducer.navigateToFirstPage,
    [ACTIONS.DATA.CHANGE]: page_PageReducer.dataChange,
    [ACTIONS.STATE.LOAD]: page_PageReducer.loadState
};
//# sourceMappingURL=page.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/filter.js



const core_filter_getInitial = () => UtilsObject.copy(state_initialState.filter);
class filter_FilterReducer {
    static reducer(state = core_filter_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, filter_FilterReducer.reducerMap);
    }
    static set(state, action) {
        return Object.assign({}, state, { state: action.set });
    }
    static reset(state, action) {
        return Object.assign({}, state, { state: null });
    }
    static setConfig(state, action) {
        let filter = UtilsObject.getPropertyValue('metadata.config.options.filter', action) || { enabled: false, state: undefined };
        if (filter) {
            let enabled = filter.enabled;
            return Object.assign({}, core_filter_getInitial(), state, {
                enabled,
                state: !enabled || filter_FilterReducer._isEmptyFilter(filter) ? null : filter.state
            });
        }
        return Object.assign({}, core_filter_getInitial(), state, { enabled: false, state: [] });
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.filter)) {
            return state;
        }
        else {
            return action.state.filter || core_filter_getInitial();
        }
    }
    static _isEmptyFilter(filter) {
        return !filter.state || Object.keys(filter.state).length === 0 && filter.state.constructor === Object;
    }
}
filter_FilterReducer.reducerMap = {
    [ACTIONS.FILTER.SET]: filter_FilterReducer.set,
    [ACTIONS.FILTER.RESET]: filter_FilterReducer.reset,
    [ACTIONS.SET_CONFIG]: filter_FilterReducer.setConfig,
    [ACTIONS.STATE.LOAD]: filter_FilterReducer.loadState
};
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns/collection.js




const collection_getInitial = () => UtilsObject.copy(state_initialState.columns.collection);
const getInitialRowGroup = () => {
    return {
        id: STATIC_CLASS.ROW_GROUP,
        type: STATIC_TYPE.ROW_GROUP,
        abstract: true,
        visible: false
    };
};
class collection_CollectionReducer {
    static reducer(state = collection_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, collection_CollectionReducer.reducersMap);
    }
    static showColumn(state, action) {
        return collection_CollectionReducer.changeColumn(state, action.columnIds || [action.columnId], { visible: true });
    }
    static hideColumn(state, action) {
        return collection_CollectionReducer.changeColumn(state, action.columnIds || [action.columnId], { visible: false });
    }
    static collapseColumns(state, action) {
        return collection_CollectionReducer.changeColumn(state, action.columnIds, { visible: !action.collapsed });
    }
    static toggleColumn(state, action) {
        let visible = columns_UtilsColumns.findColumnInState(action.columnId, state).visible;
        return collection_CollectionReducer.changeColumn(state, [action.columnId], { visible: !visible });
    }
    static deleteColumn(state, action) {
        return collection_CollectionReducer.changeColumn(state, [action.columnId], { visible: true });
    }
    static setConfig(state, action) {
        let config = action.metadata.config;
        let collapsed = collection_CollectionReducer.getCollapsedColumnIds(action.metadata.columns, action);
        let grouped = UtilsObject.getPropertyValue('options.group.state', config) || [];
        let initial = action.metadata.columns.reduce((previousValue, currentValue) => {
            return Object.assign({}, collection_getInitial(), previousValue, { [currentValue.id]: currentValue });
        }, {});
        let rowGroup;
        if (UtilsObject.getPropertyValue('options.group.enabled', config)) {
            rowGroup = getInitialRowGroup();
            initial[rowGroup.id] = rowGroup;
            if (UtilsObject.getPropertyValue('options.group.state.length', config) > 0) {
                initial[rowGroup.id].visible = true;
            }
        }
        if (UtilsObject.getPropertyValue('options.group.state.length', config) <= MAX_GROUP_NUMBER) {
            return collection_CollectionReducer.setColumnVisibility(initial, {
                type: action.type,
                groups: [
                    ...UtilsObject.getPropertyValue('metadata.config.options.group.state', action),
                    ...collapsed
                ],
                grouped
            });
        }
        return collection_CollectionReducer.setColumnVisibility(initial, {
            type: action.type,
            groups: collapsed,
            grouped
        });
    }
    static resetGroupColumnVisibility(state, action) {
        return collection_CollectionReducer.changeColumn(state, action.grouped, { visible: true });
    }
    static setGroupColumnVisibility(state, action) {
        let intermediateState = collection_CollectionReducer.changeColumn(state, action.grouped, { visible: true });
        return collection_CollectionReducer.changeColumn(intermediateState, action.groups, { visible: false });
    }
    static setColumnVisibility(state, action) {
        let hidden = [];
        let visible = [];
        columns_UtilsColumns.getAllColumnIds(state).forEach((columnId) => {
            if (!columns_UtilsColumns.isAbstractStatic(columnId)) {
                (action.groups.indexOf(columnId) !== -1 ? hidden : visible).push(columnId);
            }
        });
        let intermediateState = collection_CollectionReducer.changeColumn(state, hidden, { visible: false });
        return collection_CollectionReducer.changeColumn(intermediateState, visible, { visible: true });
    }
    static changeColumn(state, columnIds, overrideProps) {
        let newState = {};
        columnIds.forEach((columnId) => {
            if (!state.hasOwnProperty(columnId)) {
                let column = columns_UtilsColumns.findColumnInState(columnId, state);
                if (column) {
                    let newStateColumn = columns_UtilsColumns.findColumnInState(columnId, newState);
                    if (newStateColumn) {
                        Object.assign(newStateColumn, overrideProps);
                    }
                    else {
                        // in order to receive proper notification with column update
                        // for children columns in arrays we have to clone root column to not mutate state data
                        let rootCol = UtilsObject.copy(columns_UtilsColumns.findColumnRootInState(columnId, state));
                        let newColumn = columns_UtilsColumns.findColumnInState(column.id, { [rootCol.id]: rootCol });
                        Object.assign(newColumn, overrideProps);
                        newState[rootCol.id] = rootCol;
                    }
                }
                else {
                    newState[columnId] = Object.assign({}, { id: columnId, abstract: true }, overrideProps);
                }
            }
            else {
                newState[columnId] = Object.assign({}, state[columnId], overrideProps);
            }
        });
        return Object.assign({}, state, newState);
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.columns.collection)) {
            return state;
        }
        else {
            return action.state.columns.collection || collection_getInitial();
        }
    }
    static getCollapsedColumnIds(columns, action, collapsed) {
        let columnsCollapsed = [];
        columns.forEach((column) => {
            let extension = UtilsObject.getPropertyValue(`metadata.config.extensions.columns.${column.id}`, action) || {};
            if (column.type === modules_constants_TYPE.GROUP) {
                columnsCollapsed.push(...collection_CollectionReducer.getCollapsedColumnIds(column.columns, action, extension.collapsed));
            }
            else if (collapsed && extension.collapsable) {
                columnsCollapsed.push(column.id);
            }
        });
        return columnsCollapsed;
    }
}
collection_CollectionReducer.reducersMap = {
    [ACTIONS.GROUP.RESET]: collection_CollectionReducer.resetGroupColumnVisibility,
    [ACTIONS.GROUP.SET]: collection_CollectionReducer.setGroupColumnVisibility,
    [ACTIONS.GROUP.REMOVE]: collection_CollectionReducer.deleteColumn,
    [ACTIONS.GROUP.ADD]: collection_CollectionReducer.hideColumn,
    [ACTIONS.COLUMNS.COLLECTION.HIDE]: collection_CollectionReducer.hideColumn,
    [ACTIONS.COLUMNS.COLLECTION.SHOW]: collection_CollectionReducer.showColumn,
    [ACTIONS.COLUMNS.COLLAPSE]: collection_CollectionReducer.collapseColumns,
    [ACTIONS.COLUMNS.COLLECTION.TOGGLE]: collection_CollectionReducer.toggleColumn,
    [ACTIONS.SET_CONFIG]: collection_CollectionReducer.setConfig,
    [ACTIONS.STATE.LOAD]: collection_CollectionReducer.loadState
};
//# sourceMappingURL=collection.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns/order.js





const order_getInitial = () => UtilsObject.copy(state_initialState.columns.order);
class order_OrderReducer {
    static reducer(state = order_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, order_OrderReducer.reducersMap);
    }
    static setContent(state, action) {
        return Object.assign({}, state, { state: action.columns });
    }
    static setConfig(state, action) {
        let columnIdsOrder = action.metadata.columns.map((value) => value.id);
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.order.enabled', action);
        return Object.assign({}, order_getInitial(), state, {
            state: columnIdsOrder,
            enabled: enabled !== undefined ? enabled : false
        });
    }
    static move(state, action) {
        let order = state.state.filter((columnId) => action.element !== columnId);
        let destinationTarget = order.indexOf(action.target);
        if (action.position === modules_constants_POSITION.AFTER) {
            destinationTarget = destinationTarget + 1;
        }
        else if (action.position !== modules_constants_POSITION.BEFORE) {
            return state;
        }
        order.splice(destinationTarget, 0, action.element);
        return Object.assign({}, state, { state: order });
    }
    static loadState(state, action) {
        let order = action.state.columns.order;
        if (state.enabled === order.enabled && UtilitiesArray.equals(state.state, order.state)) {
            return state;
        }
        else {
            return action.state.columns.order || order_getInitial();
        }
    }
}
order_OrderReducer.reducersMap = {
    [ACTIONS.COLUMNS.ORDER.SET]: order_OrderReducer.setContent,
    [ACTIONS.COLUMNS.MOVE]: order_OrderReducer.move,
    [ACTIONS.SET_CONFIG]: order_OrderReducer.setConfig,
    [ACTIONS.STATE.LOAD]: order_OrderReducer.loadState
};
//# sourceMappingURL=order.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns/freeze.js





const freeze_getInitial = () => UtilsObject.copy(state_initialState.columns.freeze);
class freeze_FreezeColumnsReducer {
    static reducer(state = freeze_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, freeze_FreezeColumnsReducer.reducersMap);
    }
    static add(state, action) {
        return Object.assign({}, state, { state: [...state.state.slice(), action.column] });
    }
    static remove(state, action) {
        return freeze_FreezeColumnsReducer.unfreezeColumn(state, action.column);
    }
    static toggle(state, action) {
        let index = state.state.indexOf(action.column);
        let freezeColumnIds = state.state.slice();
        if (index >= 0) {
            freezeColumnIds.splice(index, 1);
        }
        else {
            freezeColumnIds.push(action.column);
        }
        return freeze_FreezeColumnsReducer.overrideState(state, freezeColumnIds);
    }
    static overrideState(state, freezeColumnIds) {
        return Object.assign({}, state, { state: freezeColumnIds });
    }
    static setConfig(stateFreeze, action) {
        let freeze = UtilsObject.getPropertyValue('metadata.config.options.freezeColumns', action);
        if (freeze) {
            let { enabled, state } = freeze;
            let freezeColumns = state ? state.filter((columnId) => {
                return action.metadata.columns.some((dataColumn) => dataColumn.id === columnId);
            }) : [];
            return Object.assign({}, freeze_getInitial(), stateFreeze, { enabled, state: enabled ? freezeColumns : [] });
        }
        return Object.assign({}, freeze_getInitial(), stateFreeze, { enabled: false, state: [] });
    }
    static move(stateFreeze, action) {
        let freeze = stateFreeze.state.slice();
        let isElementFreeze = freeze.indexOf(action.element) !== -1;
        let isTargetFreeze = freeze.indexOf(action.target) !== -1;
        let isTargetMark = action.target === STATIC_CLASS.ROW_MARK;
        if (freeze_FreezeColumnsReducer.movingToFreeze(isElementFreeze, isTargetFreeze, isTargetMark)) {
            let destinationTarget = freeze_FreezeColumnsReducer.findDestinationIndex(freeze, action.target, action.position);
            freeze.splice(destinationTarget, 0, action.element);
            return Object.assign({}, stateFreeze, { state: freeze });
        }
        else if (freeze_FreezeColumnsReducer.movingToUnfreeze(isElementFreeze, isTargetFreeze, isTargetMark)) {
            return freeze_FreezeColumnsReducer.unfreezeColumn(stateFreeze, action.element);
        }
        let destinationTarget = freeze_FreezeColumnsReducer.findDestinationIndex(freeze, action.target, action.position);
        let state = freeze_FreezeColumnsReducer.movingColumnsOrder(freeze, destinationTarget, action.element);
        if (!UtilitiesArray.equals(state, stateFreeze.state)) {
            return Object.assign({}, stateFreeze, { state });
        }
        return stateFreeze;
    }
    static findDestinationIndex(columns, target, position) {
        let movePosition = position === modules_constants_POSITION.AFTER ? 1 : 0;
        return columns.indexOf(target) + movePosition;
    }
    static movingColumnsOrder(columns, destinationTarget, element) {
        let sourceTarget = columns.indexOf(element);
        if (sourceTarget === -1) {
            return columns;
        }
        return columns.reduce((acc, next, idx) => {
            if (idx === destinationTarget) {
                acc.push(element);
            }
            if (idx === sourceTarget) {
                return acc;
            }
            return [...acc, next];
        }, []);
    }
    static movingToFreeze(isElementFreeze, isTargetFreeze, isTargetMark) {
        return (!isElementFreeze && isTargetFreeze) || isTargetMark;
    }
    static movingToUnfreeze(isElementFreeze, isTargetFreeze, isTargetMark) {
        return (isElementFreeze && !isTargetFreeze) && !isTargetMark;
    }
    static unfreezeColumn(columnsFreeze, element) {
        let freeze = columnsFreeze.state.slice();
        freeze.splice(columnsFreeze.state.indexOf(element), 1);
        return Object.assign({}, columnsFreeze, { state: freeze });
    }
    static loadState(state, action) {
        let freeze = action.state.columns.freeze;
        if (state.enabled === freeze.enabled && UtilitiesArray.equals(state.state, freeze.state)) {
            return state;
        }
        else {
            return action.state.columns.freeze || freeze_getInitial();
        }
    }
}
freeze_FreezeColumnsReducer.reducersMap = {
    [ACTIONS.COLUMNS.FREEZE.ADD]: freeze_FreezeColumnsReducer.add,
    [ACTIONS.COLUMNS.FREEZE.REMOVE]: freeze_FreezeColumnsReducer.remove,
    [ACTIONS.COLUMNS.FREEZE.TOGGLE]: freeze_FreezeColumnsReducer.toggle,
    [ACTIONS.COLUMNS.MOVE]: freeze_FreezeColumnsReducer.move,
    [ACTIONS.SET_CONFIG]: freeze_FreezeColumnsReducer.setConfig,
    [ACTIONS.STATE.LOAD]: freeze_FreezeColumnsReducer.loadState
};
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns/collapsed.js



const collapsed_getInitial = () => UtilsObject.copy(state_initialState.columns.collapsed);
class collapsed_CollapsedReducer {
    static reducer(state = collapsed_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, collapsed_CollapsedReducer.reducerMap);
    }
    static collapse(state, { columnId, collapsed }) {
        return Object.assign({}, state, { [columnId]: collapsed });
    }
    static setConfig(state, action) {
        let extensions = UtilsObject.getPropertyValue('metadata.config.extensions.columns', action) || {};
        return Object.keys(extensions).reduce((value, columnId) => {
            let collapsed = extensions[columnId].collapsed;
            if (collapsed !== undefined) {
                value[columnId] = collapsed;
            }
            return value;
        }, {});
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.columns.collapsed)) {
            return state;
        }
        else {
            return action.state.columns.collapsed || collapsed_getInitial();
        }
    }
}
collapsed_CollapsedReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: collapsed_CollapsedReducer.setConfig,
    [ACTIONS.COLUMNS.COLLAPSE]: collapsed_CollapsedReducer.collapse,
    [ACTIONS.STATE.LOAD]: collapsed_CollapsedReducer.loadState
};
//# sourceMappingURL=collapsed.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns/width.js




const width_getInitial = () => UtilsObject.copy(state_initialState.columns.width);
class width_WidthReducer {
    static reducer(state = width_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, width_WidthReducer.reducersMap);
    }
    static mergeChanges(state, columns) {
        let columnsWithNewWidth = {};
        Object.keys(columns).forEach((columnId) => {
            let stateColumn = state[columnId] || {};
            if (columns[columnId].width !== undefined
                && (columns[columnId].width !== stateColumn.width || columns[columnId].auto !== stateColumn.auto)) {
                columnsWithNewWidth[columnId] = columns[columnId];
            }
        });
        if (!Object.keys(columnsWithNewWidth).length) {
            return state;
        }
        return Object.assign({}, state, columnsWithNewWidth);
    }
    static setColumnWidth(state, action) {
        return width_WidthReducer.mergeChanges(state, { [action.columnId]: { width: action.width, auto: action.auto } });
    }
    static setConfig(state, action) {
        return width_WidthReducer.mergeChanges(state, action.metadata.columns.reduce((columns, column) => {
            if (column.width === undefined) {
                return columns;
            }
            if (SIZE.CELL_MIN_WIDTH > column.width) {
                console.warn(`Column '${column.id}' width is too small. Force to use minimum '${SIZE.CELL_MIN_WIDTH}'`);
            }
            columns[column.id] = { width: Math.max(SIZE.CELL_MIN_WIDTH, column.width), auto: false };
            return columns;
        }, {}));
    }
    static loadState(state, action) {
        if ((!action.state.columns || !action.state.columns.width) ||
            UtilsObject.deepEqual(state, action.state.columns.width)) {
            return state;
        }
        else {
            return action.state.columns.width || width_getInitial();
        }
    }
}
width_WidthReducer.reducersMap = {
    [ACTIONS.COLUMNS.WIDTH.SET]: width_WidthReducer.setColumnWidth,
    [ACTIONS.SET_CONFIG]: width_WidthReducer.setConfig,
    [ACTIONS.STATE.LOAD]: width_WidthReducer.loadState
};
//# sourceMappingURL=width.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/columns.js






const columnsReducer = Object(vc_redux["b" /* combineReducers */])({
    collection: collection_CollectionReducer.reducer,
    order: order_OrderReducer.reducer,
    freeze: freeze_FreezeColumnsReducer.reducer,
    collapsed: collapsed_CollapsedReducer.reducer,
    width: width_WidthReducer.reducer
});
class ColumnsReducer {
    static reducer(state = {}, action) {
        return columnsReducer(state, action);
    }
}
//# sourceMappingURL=columns.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/sort.js




const core_sort_getInitial = () => UtilsObject.copy(state_initialState.sort);
class sort_SortReducer {
    static reducer(state = core_sort_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, sort_SortReducer.reducerMap);
    }
    static setConfig(state, action) {
        let sort = UtilsObject.getPropertyValue('metadata.config.options.sort', action);
        return Object.assign({}, core_sort_getInitial(), state, sort);
    }
    static add(state, action) {
        let newSort = { columnId: action.columnId, order: action.order };
        return Object.assign({}, state, { state: [...state.state, newSort] });
    }
    static change(state, action) {
        let newSort;
        let index = state.state.findIndex((column) => column.columnId === action.columnId);
        let sort = {
            columnId: action.columnId,
            order: action.order || sort_UtilsSort.getToggledOrderFromState(state.state, action.columnId)
        };
        if (index === -1) {
            newSort = action.multisort ? [...state.state, sort] : [sort];
        }
        else {
            newSort = [...state.state];
            if (action.multisort) {
                newSort.splice(index, 1);
            }
            else {
                newSort[index] = sort;
            }
        }
        return Object.assign({}, state, { state: newSort });
    }
    static changeGroup(state, action) {
        let index = state.groups.findIndex((column) => column.columnId === action.columnId);
        let newSort = [...state.groups];
        newSort[index] = {
            columnId: action.columnId,
            order: action.order || sort_UtilsSort.getToggledOrderFromState(state.groups, action.columnId)
        };
        return Object.assign({}, state, { groups: newSort });
    }
    static remove(state, action) {
        let columns = columns_UtilsColumns.filterColumnsById(state.state, action.columnId);
        let groups = columns_UtilsColumns.filterColumnsById(state.groups, action.columnId);
        return Object.assign({}, state, { state: columns, groups });
    }
    static reset(state, action) {
        return Object.assign({}, state, { state: core_sort_getInitial().state });
    }
    static set(state, action) {
        let groups = Array.isArray(action.groups) ? action.groups : state.groups;
        let columns = Array.isArray(action.columns) ? action.columns : state.state;
        return Object.assign({}, state, { state: columns, groups });
    }
    static addGroup(state, action) {
        let columnSortIndex = sort_UtilsSort.findIndex(state.state, action.columnId);
        let columns = state.state.slice();
        let groups = state.groups.slice();
        if (columnSortIndex !== -1) {
            let sliced = columns.splice(columnSortIndex, 1);
            groups.push(sliced[0]);
        }
        else {
            groups.push({ columnId: action.columnId, order: action.order || sort_UtilsSort.getToggledOrder() });
        }
        return Object.assign({}, state, { state: columnSortIndex === -1 ? state.state : columns, groups });
    }
    static setGroup(state, { groups = [] }) {
        let sort = state.state.slice();
        let sortGroups = [];
        groups.forEach((columnId) => {
            let groupSortIndex = sort_UtilsSort.findIndex(state.groups, columnId);
            if (groupSortIndex !== -1) {
                sortGroups.push(state.groups[groupSortIndex]);
            }
            else {
                let columnSortIndex = sort_UtilsSort.findIndex(state.state, columnId);
                if (columnSortIndex !== -1) {
                    let removed = sort.splice(columnSortIndex, 1);
                    sortGroups.push(removed[0]);
                }
                else {
                    sortGroups.push({ columnId, order: sort_UtilsSort.getToggledOrder() });
                }
            }
        });
        return Object.assign({}, state, { state: sort, groups: sortGroups });
    }
    static removeGroup(state, action) {
        let groups = state.groups.slice();
        let groupSortIndex = sort_UtilsSort.findIndex(state.groups, action.columnId);
        if (groupSortIndex !== -1) {
            groups.splice(groupSortIndex, 1);
        }
        return Object.assign({}, state, { groups });
    }
    static loadState(state, action) {
        let newSort = action.state.sort || core_sort_getInitial();
        return state.enabled === newSort.enabled
            && UtilitiesArray.equals(state.state, newSort.state)
            && UtilitiesArray.equals(state.groups, newSort.groups) ? state : newSort;
    }
}
sort_SortReducer.reducerMap = {
    [ACTIONS.SORT.ADD]: sort_SortReducer.add,
    [ACTIONS.SORT.RESET]: sort_SortReducer.reset,
    [ACTIONS.SORT.REMOVE]: sort_SortReducer.remove,
    [ACTIONS.SORT.SET]: sort_SortReducer.set,
    [ACTIONS.SORT.CHANGE]: sort_SortReducer.change,
    [ACTIONS.SORT.CHANGE_GROUP]: sort_SortReducer.changeGroup,
    [ACTIONS.GROUP.ADD]: sort_SortReducer.addGroup,
    [ACTIONS.GROUP.REMOVE]: sort_SortReducer.removeGroup,
    [ACTIONS.GROUP.SET]: sort_SortReducer.setGroup,
    [ACTIONS.GROUP.RESET]: sort_SortReducer.setGroup,
    [ACTIONS.SET_CONFIG]: sort_SortReducer.setConfig,
    [ACTIONS.STATE.LOAD]: sort_SortReducer.loadState
};
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/format.js




const format_getInitial = () => UtilsObject.copy(state_initialState.format);
class format_FormatReducer {
    static reducer(state = format_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, format_FormatReducer.reducerMap);
    }
    static setInitial(state, action) {
        let formatsData = [];
        let formats = UtilsObject.getPropertyValue('metadata.config.extensions.rows.format', action) || [];
        formats.forEach((format) => {
            format.columnIds.forEach((columnId) => {
                format.rows.forEach((rowId) => {
                    action.dictionaries.getValueByKey(DICTIONARY_NAME.INTL, format.intl).then((value) => {
                        if (value) {
                            formatsData.push(action.formatter.createFormatData(columnId, value, rowId));
                        }
                    });
                });
            });
        });
        return Object.assign({}, state, { state: formatsData });
    }
    static add(state, action) {
        let { columnId, intl, rowId } = action;
        return Object.assign({}, state, {
            state: state.state.concat([{ columnId, intl, rowId }])
        });
    }
    static update(state, action) {
        let { index, intl } = action;
        let newState = state.state.slice();
        newState[index] = Object.assign({}, newState[index], { intl });
        return Object.assign({}, state, {
            state: newState
        });
    }
}
format_FormatReducer.reducerMap = {
    [ACTIONS.SET_INITIAL]: format_FormatReducer.setInitial,
    [ACTIONS.FORMAT.ADD]: format_FormatReducer.add,
    [ACTIONS.FORMAT.UPDATE]: format_FormatReducer.update
};
//# sourceMappingURL=format.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/mark.js



const mark_getInitial = () => UtilsObject.copy(state_initialState.mark);
class mark_MarkReducer {
    static reducer(state = mark_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, mark_MarkReducer.reducerMap);
    }
    static set(state, action) {
        return Object.assign({}, state, { state: action.rowIds.slice() });
    }
    static select(state, action) {
        let rowIds = state.state.slice();
        action.rowIds.forEach((rowId) => {
            if (rowIds.indexOf(rowId) === -1) {
                rowIds.push(rowId);
            }
        });
        return Object.assign({}, state, { state: rowIds });
    }
    static deselect(state, action) {
        let rowIds = state.state.slice();
        action.rowIds.forEach((rowId) => {
            let index = rowIds.indexOf(rowId);
            if (index > -1) {
                rowIds.splice(index, 1);
            }
        });
        return Object.assign({}, state, { state: rowIds });
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.mark.enabled', action);
        return Object.assign({}, mark_getInitial(), {
            state: [],
            enabled: enabled !== undefined ? enabled : false
        });
    }
    static setInitial(state, action) {
        let mark = UtilsObject.getPropertyValue('metadata.config.options.mark', action);
        if (mark && mark.enabled) {
            return Object.assign({}, state, {
                state: mark.state.filter((rowId, index, rowIds) => rowIds.indexOf(rowId) === index)
            });
        }
        return state;
    }
    static setLength(state, action) {
        return Object.assign({}, state, {
            isAllMarked: action.length ? action.selected === action.length : mark_MarkReducer.isAllMarkedOnNoRows
        });
    }
    static refresh(state) {
        return Object.assign({}, state);
    }
    static deselectRemovedByMarked(state, action) {
        let rows = state.state.filter((rowId) => {
            return !action.rowIds.some((markedId) => markedId === rowId);
        });
        return Object.assign({}, state, { state: rows });
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.mark)) {
            return state;
        }
        else {
            return action.state.mark || mark_getInitial();
        }
    }
}
mark_MarkReducer.isAllMarkedOnNoRows = false;
mark_MarkReducer.reducerMap = {
    [ACTIONS.MARK.SET]: mark_MarkReducer.set,
    [ACTIONS.MARK.SELECT]: mark_MarkReducer.select,
    [ACTIONS.MARK.DESELECT]: mark_MarkReducer.deselect,
    [ACTIONS.MARK.REFRESH]: mark_MarkReducer.refresh,
    [ACTIONS.SET_CONFIG]: mark_MarkReducer.setConfig,
    [ACTIONS.SET_INITIAL]: mark_MarkReducer.setInitial,
    [ACTIONS.DATA.CHANGE]: mark_MarkReducer.setLength,
    [ACTIONS.DATA.ROWS.REMOVE_MARKED]: mark_MarkReducer.deselectRemovedByMarked,
    [ACTIONS.STATE.LOAD]: mark_MarkReducer.loadState
};
//# sourceMappingURL=mark.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/group.js





const core_group_getInitial = () => UtilsObject.copy(state_initialState.group);
class group_GroupReducer {
    static reducer(state = core_group_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, group_GroupReducer.reducerMap);
    }
    static groupsEnabled(group) {
        return group.state ? group.enabled && group.state.length <= MAX_GROUP_NUMBER : group.enabled;
    }
    static add(state, action) {
        let newGroup = state.groups.slice();
        newGroup.push(action.columnId);
        return Object.assign({}, state, { groups: newGroup });
    }
    static reset(state) {
        return Object.assign({}, state, { groups: [] });
    }
    static set(state, action) {
        return Object.assign({}, state, { groups: action.groups });
    }
    static loadState(state, action) {
        let { enabled, groups } = action.state.group;
        if (state.enabled === enabled && UtilitiesArray.equals(state.groups, groups)) {
            return state;
        }
        else {
            return action.state.group || core_group_getInitial();
        }
    }
    static setConfig(state, action) {
        let group = UtilsObject.getPropertyValue('metadata.config.options.group', action);
        if (group) {
            return Object.assign({}, core_group_getInitial(), state, {
                groups: group_GroupReducer.groupsEnabled(group) && group.state ? group.state.slice() : [],
                enabled: group.enabled
            });
        }
        return Object.assign({}, core_group_getInitial(), state, { groups: [], enabled: false });
    }
    static delete(state, action) {
        let groups = action.state.group.groups.slice();
        let index = groups.indexOf(action.columnId);
        if (index >= 0) {
            groups.splice(index, 1);
            return Object.assign({}, state, { groups });
        }
        return state;
    }
    static move(state, action) {
        let groups = state.groups.slice();
        let elementPosition = state.groups.indexOf(action.element);
        groups.splice(elementPosition, 1);
        let targetPosition = groups.indexOf(action.target);
        if (action.position === modules_constants_POSITION.AFTER) {
            targetPosition++;
        }
        groups.splice(targetPosition, 0, action.element);
        return Object.assign({}, state, { groups });
    }
}
group_GroupReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: group_GroupReducer.setConfig,
    [ACTIONS.STATE.LOAD]: group_GroupReducer.loadState,
    [ACTIONS.GROUP.ADD]: group_GroupReducer.add,
    [ACTIONS.GROUP.SET]: group_GroupReducer.set,
    [ACTIONS.GROUP.RESET]: group_GroupReducer.reset,
    [ACTIONS.GROUP.REMOVE]: group_GroupReducer.delete,
    [ACTIONS.GROUP.MOVE]: group_GroupReducer.move,
};
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/changed/cells.js




const cells_getInitial = () => UtilsObject.copy(state_initialState.edit.cells);
class cells_CellsReducer {
    static reducer(state = cells_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, cells_CellsReducer.reducerMap);
    }
    static reset(state, action) {
        let cellIndex = state.findIndex((cell) => cell.columnId === action.columnId && cell.rowId === action.rowId);
        if (cellIndex !== -1) {
            let changed = state.slice(0);
            changed.splice(cellIndex, 1);
            return changed;
        }
        else {
            return state;
        }
    }
    static allReset() {
        return [];
    }
    static massReset(state, action) {
        action.rowIds.forEach((rowId) => {
            state = cells_CellsReducer.reset(state, {
                rowId,
                columnId: action.columnId,
                type: ACTIONS.DATA.ROWS.MASS.RESET
            });
        });
        return state;
    }
    static change(state, action) {
        let cell = state.find((cell) => cell.columnId === action.columnId && cell.rowId === action.rowId);
        let changed = state.slice(0);
        if (!cell) {
            changed.push({
                rowId: action.rowId,
                columnId: action.columnId,
                value: action.value
            });
        }
        else {
            cell.value = action.value;
        }
        return changed;
    }
    static massChange(state, action) {
        let columnRows = state.filter((cell) => cell.columnId === action.columnId);
        let changed = state.slice(0);
        action.rowIds.forEach((rowId) => {
            let cell = columnRows.find((cell) => cell.rowId === rowId);
            if (!cell) {
                changed.push({
                    rowId,
                    columnId: action.columnId,
                    value: action.value
                });
            }
            else {
                cell.value = action.value;
            }
        });
        return changed;
    }
    static save(state) {
        return state.length > 0 ? cells_getInitial() : state;
    }
    static loadState(state, action) {
        if (UtilitiesArray.equals(state, action.state.edit.cells)) {
            return state;
        }
        else {
            return action.state.edit.cells || cells_getInitial();
        }
    }
}
cells_CellsReducer.reducerMap = {
    [ACTIONS.DATA.ROWS.CHANGE]: cells_CellsReducer.change,
    [ACTIONS.DATA.ROWS.MASS.CHANGE]: cells_CellsReducer.massChange,
    [ACTIONS.DATA.ROWS.RESET]: cells_CellsReducer.reset,
    [ACTIONS.DATA.ROWS.MASS.RESET]: cells_CellsReducer.massReset,
    [ACTIONS.DATA.ROWS.ALL.RESET]: cells_CellsReducer.allReset,
    [ACTIONS.DATA.ROWS.SAVE]: cells_CellsReducer.save,
    [ACTIONS.STATE.LOAD]: cells_CellsReducer.loadState
};
//# sourceMappingURL=cells.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/changed/added.js




const added_getInitial = () => UtilsObject.copy(state_initialState.edit.added);
class added_AddedReducer {
    static reducer(state = added_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, added_AddedReducer.reducerMap);
    }
    static add(state, action) {
        return [...state.slice(), action.row];
    }
    static save(state) {
        return state.length > 0 ? added_getInitial() : state;
    }
    static allReset() {
        return [];
    }
    static loadState(state, action) {
        if (UtilitiesArray.equals(state, action.state.edit.added)) {
            return state;
        }
        else {
            return action.state.edit.added || added_getInitial();
        }
    }
}
added_AddedReducer.reducerMap = {
    [ACTIONS.DATA.ROWS.ADD]: added_AddedReducer.add,
    [ACTIONS.DATA.ROWS.SAVE]: added_AddedReducer.save,
    [ACTIONS.DATA.ROWS.ALL.RESET]: added_AddedReducer.allReset,
    [ACTIONS.STATE.LOAD]: added_AddedReducer.loadState
};
//# sourceMappingURL=added.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/changed/invalid.js




const invalid_getInitial = () => UtilsObject.copy(state_initialState.edit.invalid);
class invalid_InvalidReducer {
    static reducer(state = invalid_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, invalid_InvalidReducer.reducerMap);
    }
    static change(state, action) {
        return action.errors;
    }
    static loadState(state, action) {
        if (UtilitiesArray.equals(state, action.state.edit.invalid)) {
            return state;
        }
        else {
            return action.state.edit.invalid || invalid_getInitial();
        }
    }
}
invalid_InvalidReducer.reducerMap = {
    [ACTIONS.DATA.ROWS.ERROR]: invalid_InvalidReducer.change,
    [ACTIONS.STATE.LOAD]: invalid_InvalidReducer.loadState
};
//# sourceMappingURL=invalid.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/changed/removed.js




const removed_getInitial = () => UtilsObject.copy(state_initialState.edit.removed);
class removed_RemovedReducer {
    static reducer(state = removed_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, removed_RemovedReducer.reducerMap);
    }
    static remove(state, action) {
        return removed_RemovedReducer.removeRow(state, action.removeId);
    }
    static removeMarked(state, action) {
        action.rowIds.forEach((rowId) => {
            state = removed_RemovedReducer.removeRow(state, rowId);
        });
        return state;
    }
    static allReset() {
        return [];
    }
    static restore(state, action) {
        let index = state.indexOf(action.rowId);
        if (index === -1) {
            return state;
        }
        let updatedState = state.slice();
        updatedState.splice(index, 1);
        return updatedState;
    }
    static save(state) {
        if (state.length > 0) {
            return removed_getInitial();
        }
        return state;
    }
    static removeRow(state, rowId) {
        if (state.indexOf(rowId) !== -1) {
            return state;
        }
        let updatedState = state.slice();
        updatedState.push(rowId);
        return updatedState;
    }
    static loadState(state, action) {
        if (UtilitiesArray.equals(state, action.state.edit.removed)) {
            return state;
        }
        else {
            return action.state.edit.removed || removed_getInitial();
        }
    }
}
removed_RemovedReducer.reducerMap = {
    [ACTIONS.DATA.ROWS.REMOVE]: removed_RemovedReducer.remove,
    [ACTIONS.DATA.ROWS.REMOVE_MARKED]: removed_RemovedReducer.removeMarked,
    [ACTIONS.DATA.ROWS.RESTORE]: removed_RemovedReducer.restore,
    [ACTIONS.DATA.ROWS.SAVE]: removed_RemovedReducer.save,
    [ACTIONS.DATA.ROWS.ALL.RESET]: removed_RemovedReducer.allReset,
    [ACTIONS.STATE.LOAD]: removed_RemovedReducer.loadState
};
//# sourceMappingURL=removed.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/changed/disabled.js




const disabled_getInitial = () => UtilsObject.copy(state_initialState.edit.disabled);
class disabled_DisabledReducer {
    static reducer(state = disabled_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, disabled_DisabledReducer.reducerMap);
    }
    static loadState(state, action) {
        if (UtilitiesArray.equals(state, action.state.edit.disabled)) {
            return state;
        }
        else {
            return action.state.edit.disabled || disabled_getInitial();
        }
    }
}
disabled_DisabledReducer.reducerMap = {
    [ACTIONS.STATE.LOAD]: disabled_DisabledReducer.loadState
};
//# sourceMappingURL=disabled.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/edit.js









const edit_getInitial = () => UtilsObject.copy(state_initialState.edit);
class edit_EditReducer {
    // todo enabled to another reducer and delete getinital
    static reducer(state = edit_getInitial(), action) {
        let combinedState = edit_EditReducer.combinedReducers(state, action);
        Object.assign(combinedState, {
            enabled: state.enabled
        });
        return UtilsReducer.runReducers(combinedState, action, edit_EditReducer.reducerMap);
    }
    static set(state, action) {
        return Object.assign({}, state, { enabled: action.editable });
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.editable.enabled', action);
        return Object.assign({}, edit_getInitial(), state, { enabled: enabled !== undefined ? enabled : false });
    }
    static setInitial(state, action) {
        let disabled = UtilsObject.getPropertyValue('metadata.config.extensions.rows.disabled', action) || [];
        return Object.assign({}, state, { disabled });
    }
    static loadState(state, action) {
        if (state.enabled === action.state.edit.enabled) {
            return state;
        }
        else {
            return Object.assign({}, edit_getInitial(), state, { enabled: action.state.edit.enabled });
        }
    }
}
edit_EditReducer.combinedReducers = Object(vc_redux["b" /* combineReducers */])({
    cells: cells_CellsReducer.reducer,
    added: added_AddedReducer.reducer,
    removed: removed_RemovedReducer.reducer,
    invalid: invalid_InvalidReducer.reducer,
    disabled: disabled_DisabledReducer.reducer
});
edit_EditReducer.reducerMap = {
    [ACTIONS.EDIT.SET]: edit_EditReducer.set,
    [ACTIONS.SET_CONFIG]: edit_EditReducer.setConfig,
    [ACTIONS.STATE.LOAD]: edit_EditReducer.loadState,
    [ACTIONS.SET_INITIAL]: edit_EditReducer.setInitial
};
//# sourceMappingURL=edit.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/resize.js



const resize_getInitial = () => UtilsObject.copy(state_initialState.resize);
class resize_ResizeReducer {
    static reducer(state = resize_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, resize_ResizeReducer.reducerMap);
    }
    static set(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.resize.enabled', action);
        return Object.assign({}, state, {
            enabled: enabled !== undefined ? enabled : false
        });
    }
    static loadState(state, action) {
        if (state.enabled === action.state.resize.enabled) {
            return state;
        }
        else {
            return action.state.resize || resize_getInitial();
        }
    }
}
resize_ResizeReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: resize_ResizeReducer.set,
    [ACTIONS.STATE.LOAD]: resize_ResizeReducer.loadState
};
//# sourceMappingURL=resize.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/infinite.js



const infinite_getInitial = () => UtilsObject.copy(state_initialState.infinite);
class infinite_InfiniteReducer {
    static reducer(state = infinite_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, infinite_InfiniteReducer.reducerMap);
    }
    static set(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.infinite.enabled', action);
        return Object.assign({}, state, {
            enabled: enabled !== undefined ? enabled : false
        });
    }
    static loadState(state, action) {
        if (state.enabled === action.state.infinite.enabled) {
            return state;
        }
        else {
            return action.state.infinite || infinite_getInitial();
        }
    }
}
infinite_InfiniteReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: infinite_InfiniteReducer.set,
    [ACTIONS.STATE.LOAD]: infinite_InfiniteReducer.loadState
};
//# sourceMappingURL=infinite.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/events.js



const events_getInitial = () => UtilsObject.copy(state_initialState.events);
class events_EventsStatusReducer {
    static reducer(state = events_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, events_EventsStatusReducer.reducerMap);
    }
    static update(state, { eventName, subscribers }) {
        let map = Object.assign({}, state.map);
        map[eventName] = subscribers;
        return Object.assign({}, state, { map });
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.events)) {
            return state;
        }
        else {
            return action.state.events || events_getInitial();
        }
    }
}
events_EventsStatusReducer.reducerMap = {
    [ACTIONS.EVENT.JOIN]: events_EventsStatusReducer.update,
    [ACTIONS.STATE.LOAD]: events_EventsStatusReducer.loadState
};
//# sourceMappingURL=events.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/scroll.js



const scroll_getInitial = () => UtilsObject.copy(state_initialState.scroll);
class scroll_ScrollReducer {
    static reducer(state = scroll_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, scroll_ScrollReducer.reducerMap);
    }
    static set(state, action) {
        return Object.assign({}, state, action.position);
    }
    static loadState(state, action) {
        if (UtilsObject.equal(state, action.state.scroll)) {
            return state;
        }
        else {
            return action.state.scroll || scroll_getInitial();
        }
    }
}
scroll_ScrollReducer.reducerMap = {
    [ACTIONS.SCROLL.SET]: scroll_ScrollReducer.set,
    [ACTIONS.STATE.LOAD]: scroll_ScrollReducer.loadState
};
//# sourceMappingURL=scroll.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/fullscreen.js



const fullscreen_getInitial = () => UtilsObject.copy(state_initialState.fullscreen);
class fullscreen_FullscreenReducer {
    static reducer(state = fullscreen_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, fullscreen_FullscreenReducer.reducerMap);
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.fullscreen.enabled', action);
        let visible = UtilsObject.getPropertyValue('metadata.config.options.fullscreen.visible', action);
        return Object.assign({}, fullscreen_getInitial(), state, {
            enabled: enabled !== undefined ? enabled : false,
            visible: visible !== undefined ? visible : false
        });
    }
    static toggle(state, action) {
        if (action.visible !== state.visible) {
            return Object.assign({}, state, { visible: action.visible });
        }
        else {
            return state;
        }
    }
}
fullscreen_FullscreenReducer.reducerMap = {
    [ACTIONS.SET_CONFIG]: fullscreen_FullscreenReducer.setConfig,
    [ACTIONS.FULLSCREEN_TOGGLE]: fullscreen_FullscreenReducer.toggle
};
//# sourceMappingURL=fullscreen.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/groupResize.js



const groupResize_getInitial = () => UtilsObject.copy(state_initialState.groupResize);
// todo move to group branch
class groupResize_GroupResizeReducer {
    static reducer(state = groupResize_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, groupResize_GroupResizeReducer.reducerMap);
    }
    static setWidths(state, action) {
        return Object.assign({}, state, action.widths);
    }
}
groupResize_GroupResizeReducer.reducerMap = {
    [ACTIONS.GROUP.SET_WIDTHS]: groupResize_GroupResizeReducer.setWidths
};
//# sourceMappingURL=groupResize.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/core/freeze.js




const core_freeze_getInitial = () => UtilsObject.copy(state_initialState.freeze);
class freeze_FreezeReducer {
    static reducer(state = core_freeze_getInitial(), action) {
        return UtilsReducer.runReducers(state, action, freeze_FreezeReducer.reducerMap);
    }
    static set(state, action) {
        let rowIds = action.rowIds.slice();
        return Object.assign({}, state, { state: freeze_FreezeReducer.limitRows(rowIds) });
    }
    static add(state, action) {
        let rowIds = state.state.slice();
        action.rowIds.forEach((rowId) => {
            if (rowIds.indexOf(rowId) === -1) {
                rowIds.push(rowId);
            }
        });
        return Object.assign({}, state, { state: rowIds });
    }
    static remove(state, action) {
        let rowIds = state.state.slice();
        action.rowIds.forEach((rowId) => {
            let index = rowIds.indexOf(rowId);
            if (index > -1) {
                rowIds.splice(index, 1);
            }
        });
        return Object.assign({}, state, { state: rowIds });
    }
    static setConfig(state, action) {
        let enabled = UtilsObject.getPropertyValue('metadata.config.options.freezeRows.enabled', action);
        return Object.assign({}, core_freeze_getInitial(), {
            state: [],
            enabled: enabled !== undefined ? enabled : false
        });
    }
    static setInitial(state, action) {
        let rowIds = [];
        let freeze = UtilsObject.getPropertyValue('metadata.config.options.freezeRows', action);
        if (state.enabled && freeze.state) {
            freeze.state.forEach((rowId) => {
                // todo freeze + mark + format + edit will filter out nonexistent id of metadata
                // if (
                //     action.metadata.rows.some((row: IDatasetIdentifiedRow) => row.id === rowId)
                //     && rowIds.indexOf(rowId) === -1
                // ) {
                rowIds.push(rowId);
                // }
            });
        }
        return Object.assign({}, state, { state: freeze_FreezeReducer.limitRows(rowIds) });
    }
    static limitRows(rowIds) {
        if (rowIds.length > FREEZE_ROW_LIMIT) {
            rowIds = rowIds.slice(0, FREEZE_ROW_LIMIT);
            console.warn(`Freezing is limited to '${FREEZE_ROW_LIMIT}' rows`);
        }
        return rowIds;
    }
    static loadState(state, action) {
        if (UtilsObject.deepEqual(state, action.state.freeze)) {
            return state;
        }
        else {
            return action.state.freeze || core_freeze_getInitial();
        }
    }
}
freeze_FreezeReducer.reducerMap = {
    [ACTIONS.FREEZE.SET]: freeze_FreezeReducer.set,
    [ACTIONS.FREEZE.ADD]: freeze_FreezeReducer.add,
    [ACTIONS.FREEZE.REMOVE]: freeze_FreezeReducer.remove,
    [ACTIONS.SET_CONFIG]: freeze_FreezeReducer.setConfig,
    [ACTIONS.SET_INITIAL]: freeze_FreezeReducer.setInitial,
    [ACTIONS.STATE.LOAD]: freeze_FreezeReducer.loadState
};
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/reducers/grid.js

























const gridReducer = Object(vc_redux["b" /* combineReducers */])({
    columns: ColumnsReducer.reducer,
    debug: debug_DebugReducer.reducer,
    edit: edit_EditReducer.reducer,
    events: events_EventsStatusReducer.reducer,
    filter: filter_FilterReducer.reducer,
    footer: FooterReducer.reducer,
    format: format_FormatReducer.reducer,
    freeze: freeze_FreezeReducer.reducer,
    fullscreen: fullscreen_FullscreenReducer.reducer,
    group: group_GroupReducer.reducer,
    groupResize: groupResize_GroupResizeReducer.reducer,
    groupVisibility: groupVisibility_GroupVisibilityReducer.reducer,
    header: HeaderReducer.reducer,
    infinite: infinite_InfiniteReducer.reducer,
    mark: mark_MarkReducer.reducer,
    page: page_PageReducer.reducer,
    resize: resize_ResizeReducer.reducer,
    scroll: scroll_ScrollReducer.reducer,
    sort: sort_SortReducer.reducer,
    summary: summary_SummaryReducer.reducer,
    theme: ThemeReducer.reducer,
    toast: toast_ToastReducer.reducer,
    translation: translation_TranslationReducer.reducer
});
class grid_GridReducer {
    static reducer(state = {}, action) {
        let iStateRoot = gridReducer(state, action);
        let newAction = Object.assign({}, action, { state: iStateRoot });
        // todo wut? shouldn't pagination be self-manageable?
        let pagination = pagination_PaginationReducer.enableNextPrevButtons(iStateRoot.footer.pagination, newAction);
        if (iStateRoot.footer.pagination !== pagination) {
            let footerState = Object.assign({}, iStateRoot.footer, {
                pagination
            });
            return Object.assign({}, iStateRoot, {
                footer: footerState
            });
        }
        return iStateRoot;
    }
}
//# sourceMappingURL=grid.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/global.js


class global_GlobalAction {
    static changeRowsNumber(current, all, initial) {
        let action = {
            type: ACTIONS.CHANGE_ROWS_NUMBER,
            all,
            current,
            initial
        };
        return UtilsValidationAction.createValidatedAction(action);
    }
    static setConfig(metadata) {
        return {
            type: ACTIONS.SET_CONFIG,
            metadata
        };
    }
    static setInitial(dictionaries, formatter, metadata) {
        return {
            type: ACTIONS.SET_INITIAL,
            dictionaries,
            formatter,
            metadata
        };
    }
    static loadState(state) {
        return {
            type: ACTIONS.STATE.LOAD,
            state
        };
    }
}
//# sourceMappingURL=global.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/validation/validation.decorator.js
function actionValidation(fn) {
    return function (target, propertyKey, descriptor) {
        let method = descriptor.value;
        descriptor.value = function (...args) {
            return function (dispatch, getState) {
                let isValid = fn(getState());
                if (isValid) {
                    let existingValidation = method.apply(null, args);
                    if (typeof existingValidation === 'function') {
                        return existingValidation(dispatch, getState);
                    }
                    else {
                        return dispatch(existingValidation);
                    }
                }
                return void 0;
            };
        };
        return descriptor;
    };
}
//# sourceMappingURL=validation.decorator.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/edit.js
var edit_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var edit_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class edit_EditAction {
    static set(enabled) {
        let args = { type: ACTIONS.EDIT.SET, editable: enabled };
        return UtilsValidationAction.createValidatedAction(args, {
            editable: [validations_rules_ValidationRules.validateIsBoolean, validations_rules_ValidationRules.validateEditHasChanged],
        });
    }
    static save() {
        return { type: ACTIONS.DATA.ROWS.SAVE };
    }
    static restore(rowId) {
        return { type: ACTIONS.DATA.ROWS.RESTORE, rowId };
    }
    static add(row) {
        return { type: ACTIONS.DATA.ROWS.ADD, row };
    }
    static change(rowId, columnId, value) {
        return { type: ACTIONS.DATA.ROWS.CHANGE, rowId, columnId, value };
    }
    static massChange(rowIds, columnId, value) {
        return { type: ACTIONS.DATA.ROWS.MASS.CHANGE, rowIds, columnId, value };
    }
    static reset(rowId, columnId) {
        return { type: ACTIONS.DATA.ROWS.RESET, rowId, columnId };
    }
    static massReset(rowIds, columnId) {
        return { type: ACTIONS.DATA.ROWS.MASS.RESET, rowIds, columnId };
    }
    static allReset() {
        return { type: ACTIONS.DATA.ROWS.ALL.RESET };
    }
    static removeMarked(rowIds) {
        return { type: ACTIONS.DATA.ROWS.REMOVE_MARKED, rowIds };
    }
    static getErrors(errors, visible) {
        return { type: ACTIONS.DATA.ROWS.ERROR, errors, visible };
    }
    static setErrorsVisible(state) {
        return { type: ACTIONS.ERRORS.SET_VISIBLE, visible: state };
    }
}
edit_decorate([
    actionValidation(validations_rules_ValidationRules.validateEditIsEnabled),
    edit_metadata("design:type", Function),
    edit_metadata("design:paramtypes", []),
    edit_metadata("design:returntype", Object)
], edit_EditAction, "save", null);
edit_decorate([
    actionValidation(validations_rules_ValidationRules.validateEditIsEnabled),
    edit_metadata("design:type", Function),
    edit_metadata("design:paramtypes", [String]),
    edit_metadata("design:returntype", Object)
], edit_EditAction, "restore", null);
edit_decorate([
    actionValidation(validations_rules_ValidationRules.validateEditIsEnabled),
    edit_metadata("design:type", Function),
    edit_metadata("design:paramtypes", [Object]),
    edit_metadata("design:returntype", Object)
], edit_EditAction, "add", null);
edit_decorate([
    actionValidation(validations_rules_ValidationRules.validateEditIsEnabled),
    edit_metadata("design:type", Function),
    edit_metadata("design:paramtypes", [Array]),
    edit_metadata("design:returntype", Object)
], edit_EditAction, "removeMarked", null);
//# sourceMappingURL=edit.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/mark.js
var mark_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mark_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class mark_MarkAction {
    static set(rowIds) {
        return { type: ACTIONS.MARK.SET, rowIds };
    }
    static select(rowIds) {
        return { type: ACTIONS.MARK.SELECT, rowIds };
    }
    static deselect(rowIds) {
        return { type: ACTIONS.MARK.DESELECT, rowIds };
    }
    static refresh() {
        return { type: ACTIONS.MARK.REFRESH };
    }
}
mark_decorate([
    actionValidation(validations_rules_ValidationRules.validateMarkIsEnabled),
    mark_metadata("design:type", Function),
    mark_metadata("design:paramtypes", [Array]),
    mark_metadata("design:returntype", Object)
], mark_MarkAction, "set", null);
mark_decorate([
    actionValidation(validations_rules_ValidationRules.validateMarkIsEnabled),
    mark_metadata("design:type", Function),
    mark_metadata("design:paramtypes", [Array]),
    mark_metadata("design:returntype", Object)
], mark_MarkAction, "select", null);
mark_decorate([
    actionValidation(validations_rules_ValidationRules.validateMarkIsEnabled),
    mark_metadata("design:type", Function),
    mark_metadata("design:paramtypes", [Array]),
    mark_metadata("design:returntype", Object)
], mark_MarkAction, "deselect", null);
//# sourceMappingURL=mark.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/freeze.js
var core_freeze_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_freeze_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class freeze_FreezeAction {
    static set(rowIds) {
        return { type: ACTIONS.FREEZE.SET, rowIds };
    }
    static add(rowIds) {
        return { type: ACTIONS.FREEZE.ADD, rowIds };
    }
    static remove(rowIds) {
        return { type: ACTIONS.FREEZE.REMOVE, rowIds };
    }
}
core_freeze_decorate([
    actionValidation(validations_rules_ValidationRules.validateFreezeIsEnabled),
    core_freeze_metadata("design:type", Function),
    core_freeze_metadata("design:paramtypes", [Array]),
    core_freeze_metadata("design:returntype", Object)
], freeze_FreezeAction, "set", null);
core_freeze_decorate([
    actionValidation(validations_rules_ValidationRules.validateFreezeIsEnabled),
    core_freeze_metadata("design:type", Function),
    core_freeze_metadata("design:paramtypes", [Array]),
    core_freeze_metadata("design:returntype", Object)
], freeze_FreezeAction, "add", null);
core_freeze_decorate([
    actionValidation(validations_rules_ValidationRules.validateFreezeIsEnabled),
    core_freeze_metadata("design:type", Function),
    core_freeze_metadata("design:paramtypes", [Array]),
    core_freeze_metadata("design:returntype", Object)
], freeze_FreezeAction, "remove", null);
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/columns.js
var core_columns_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_columns_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class columns_ColumnsAction {
    static setWidth(columnId, column) {
        let parameters = {
            type: ACTIONS.COLUMNS.WIDTH.SET,
            columnId,
            width: column.width,
            auto: column.auto
        };
        return UtilsValidationAction.createValidatedAction(parameters, {
            columnId: [validations_rules_ValidationRules.validateColumn],
            width: [validations_rules_ValidationRules.validateIsNumber],
            auto: [validations_rules_ValidationRules.validateIsBoolean]
        });
    }
    static showColumn(columnId) {
        let parameters = { type: ACTIONS.COLUMNS.COLLECTION.SHOW, columnId };
        return UtilsValidationAction.createValidatedAction(parameters, { columnId: [validations_rules_ValidationRules.validateColumnNested, validations_rules_ValidationRules.validateIfColumnHidden] });
    }
    static hideColumn(id) {
        let parameters = { type: ACTIONS.COLUMNS.COLLECTION.HIDE, columnId: id };
        return UtilsValidationAction.createValidatedAction(parameters, {
            columnId: [
                validations_rules_ValidationRules.validateColumnNested,
                validations_rules_ValidationRules.validateIfColumnVisible,
                validations_rules_ValidationRules.validateColumnHide
            ]
        });
    }
    static collapseColumn(columnId, columnIds, collapsed) {
        let parameters = { type: ACTIONS.COLUMNS.COLLAPSE, columnId, columnIds, collapsed };
        return UtilsValidationAction.createValidatedAction(parameters, {
            columnId: [validations_rules_ValidationRules.validateColumnNested],
            collapsed: [validations_rules_ValidationRules.validateIsBoolean]
        });
    }
    static visibilityToggle(id) {
        let parameters = { type: ACTIONS.COLUMNS.COLLECTION.TOGGLE, columnId: id };
        return UtilsValidationAction.createValidatedAction(parameters, { columnId: [validations_rules_ValidationRules.validateColumnNested, validations_rules_ValidationRules.validateColumnHide] });
    }
    static moveColumn(id, position, columnId) {
        let action = {
            type: ACTIONS.COLUMNS.MOVE,
            element: id,
            target: columnId,
            position: position,
            equality: [id, columnId]
        };
        return UtilsValidationAction.createValidatedAction(action, {
            element: [validations_rules_ValidationRules.validateColumn, validations_rules_ValidationRules.validateIsAreaFree],
            target: [validations_rules_ValidationRules.validateColumn],
            equality: [validations_rules_ValidationRules.validateColumnsEquality]
        });
    }
    static freeze(column) {
        let action = { type: ACTIONS.COLUMNS.FREEZE.ADD, column };
        return UtilsValidationAction.createValidatedAction(action, {
            'column': [
                validations_rules_ValidationRules.validateColumn,
                validations_rules_ValidationRules.validateColumnFreeze,
                validations_rules_ValidationRules.validateIsAreaFree
            ]
        });
    }
    static unfreeze(column) {
        let action = { type: ACTIONS.COLUMNS.FREEZE.REMOVE, column };
        return UtilsValidationAction.createValidatedAction(action, { 'column': [validations_rules_ValidationRules.validateColumn, validations_rules_ValidationRules.validateColumnUnfreeze] });
    }
}
core_columns_decorate([
    actionValidation(validations_rules_ValidationRules.validateOrderIsEnabled),
    core_columns_metadata("design:type", Function),
    core_columns_metadata("design:paramtypes", [String, String, String]),
    core_columns_metadata("design:returntype", Function)
], columns_ColumnsAction, "moveColumn", null);
core_columns_decorate([
    actionValidation(validations_rules_ValidationRules.validateColumnFreezeIsEnabled),
    core_columns_metadata("design:type", Function),
    core_columns_metadata("design:paramtypes", [String]),
    core_columns_metadata("design:returntype", Function)
], columns_ColumnsAction, "freeze", null);
core_columns_decorate([
    actionValidation(validations_rules_ValidationRules.validateColumnFreezeIsEnabled),
    core_columns_metadata("design:type", Function),
    core_columns_metadata("design:paramtypes", [String]),
    core_columns_metadata("design:returntype", Function)
], columns_ColumnsAction, "unfreeze", null);
//# sourceMappingURL=columns.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/data.js


class data_DataAction {
    static change(length, selected) {
        let action = {
            type: ACTIONS.DATA.CHANGE,
            length,
            selected
        };
        return UtilsValidationAction.createValidatedAction(action);
    }
}
//# sourceMappingURL=data.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/filter.js
var core_filter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_filter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class filter_FilterAction {
    static set(set) {
        let args = { type: ACTIONS.FILTER.SET, set };
        return UtilsValidationAction.createValidatedAction(args, {
            set: [validations_rules_ValidationRules.validateFilterSet],
        });
    }
    static reset() {
        return { type: ACTIONS.FILTER.RESET, set: null };
    }
}
core_filter_decorate([
    actionValidation(validations_rules_ValidationRules.validateFilterIsEnabled),
    core_filter_metadata("design:type", Function),
    core_filter_metadata("design:paramtypes", [Object]),
    core_filter_metadata("design:returntype", Function)
], filter_FilterAction, "set", null);
core_filter_decorate([
    actionValidation(validations_rules_ValidationRules.validateFilterIsEnabled),
    core_filter_metadata("design:type", Function),
    core_filter_metadata("design:paramtypes", []),
    core_filter_metadata("design:returntype", Object)
], filter_FilterAction, "reset", null);
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/footer/footer.js

class footer_FooterAction {
    static setVisible(visible) {
        return {
            type: ACTIONS.SET_FOOTER_VISIBLE,
            visible
        };
    }
}
//# sourceMappingURL=footer.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/group.js
var core_group_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_group_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class group_GroupAction {
    static groupVisible(visibleLength) {
        return { type: ACTIONS.GROUP.TOGGLE, visibleLength };
    }
    static group(path, state) {
        return { type: ACTIONS.GROUP.GROUP, path, isGrouped: state };
    }
    static groupAdd(columnId, order) {
        if (order) {
            order = order.toLowerCase();
        }
        let args = { type: ACTIONS.GROUP.ADD, columnId, order };
        return UtilsValidationAction.createValidatedAction(args, {
            columnId: [
                validations_rules_ValidationRules.validateColumn,
                validations_rules_ValidationRules.validateColumnGroup,
                validations_rules_ValidationRules.validateColumnGroupAdd,
                validations_rules_ValidationRules.validateLastFreezeColumn,
                validations_rules_ValidationRules.validateLastContentColumn
            ],
            order: [validations_rules_ValidationRules.validateSort]
        });
    }
    static groupsReset(grouped) {
        return { type: ACTIONS.GROUP.RESET, grouped };
    }
    static groupsSet(groups, grouped) {
        let args = { type: ACTIONS.GROUP.SET, groups, grouped };
        return UtilsValidationAction.createValidatedAction(args, {
            groups: [
                validations_rules_ValidationRules.validateGroupNumber,
                validations_rules_ValidationRules.validateGroupSet,
                validations_rules_ValidationRules.validateGroupSetUnique,
                validations_rules_ValidationRules.validateLastFreezeColumn,
                validations_rules_ValidationRules.validateLastContentColumn
            ]
        });
    }
    static groupRemove(columnId) {
        let args = { type: ACTIONS.GROUP.REMOVE, columnId };
        return UtilsValidationAction.createValidatedAction(args, {
            columnId: [validations_rules_ValidationRules.validateColumn, validations_rules_ValidationRules.validateColumnGroupExists]
        });
    }
    static moveColumn(id, position, columnId) {
        let action = {
            type: ACTIONS.GROUP.MOVE,
            element: id,
            target: columnId,
            position: position,
            equality: [id, columnId]
        };
        return UtilsValidationAction.createValidatedAction(action, {
            element: [
                validations_rules_ValidationRules.validateColumn,
                validations_rules_ValidationRules.validateIsAreaFree,
                validations_rules_ValidationRules.validateLastFreezeColumn
            ],
            target: [validations_rules_ValidationRules.validateColumn],
            equality: [validations_rules_ValidationRules.validateColumnsEquality]
        });
    }
    static setWidths(widths) {
        return { type: ACTIONS.GROUP.SET_WIDTHS, widths };
    }
}
core_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    core_group_metadata("design:type", Function),
    core_group_metadata("design:paramtypes", [String, String]),
    core_group_metadata("design:returntype", Function)
], group_GroupAction, "groupAdd", null);
core_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    core_group_metadata("design:type", Function),
    core_group_metadata("design:paramtypes", [Array]),
    core_group_metadata("design:returntype", Object)
], group_GroupAction, "groupsReset", null);
core_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    core_group_metadata("design:type", Function),
    core_group_metadata("design:paramtypes", [Array, Array]),
    core_group_metadata("design:returntype", Function)
], group_GroupAction, "groupsSet", null);
core_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    core_group_metadata("design:type", Function),
    core_group_metadata("design:paramtypes", [String]),
    core_group_metadata("design:returntype", Function)
], group_GroupAction, "groupRemove", null);
core_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    core_group_metadata("design:type", Function),
    core_group_metadata("design:paramtypes", [Object]),
    core_group_metadata("design:returntype", Object)
], group_GroupAction, "setWidths", null);
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/header/header.js

class header_HeaderAction {
    static setVisible(state) {
        return {
            type: ACTIONS.SET_HEADER_VISIBLE,
            visible: state
        };
    }
}
//# sourceMappingURL=header.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/footer/pagination.js
var pagination_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var pagination_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class pagination_PaginationAction {
    static previousPage() {
        let action = {
            type: ACTIONS.PAGINATION.PREV_PAGE
        };
        return UtilsValidationAction.createValidatedAction(action, {}, (action) => {
            let currentPage = Math.max(action.state.page.currentPage - 1, 1);
            return Object.assign({}, action, {
                page: currentPage
            });
        });
    }
    static nextPage() {
        let action = {
            type: ACTIONS.PAGINATION.NEXT_PAGE
        };
        return UtilsValidationAction.createValidatedAction(action, {}, (action) => {
            let currentPage = Math.min(action.state.page.currentPage + 1, action.state.page.numberOfPages);
            return Object.assign({}, action, {
                page: currentPage
            });
        });
    }
    static goToPage(pageNumber) {
        let iActionGoToPage = {
            type: ACTIONS.PAGINATION.CHANGE_PAGE,
            page: pageNumber
        };
        return UtilsValidationAction.createValidatedAction(iActionGoToPage, {
            'page': [
                validations_rules_ValidationRules.validateIsNumber,
                validations_rules_ValidationRules.validateIsInteger,
                validations_rules_ValidationRules.validatePageNumber
            ]
        });
    }
    static changeNumberPerPage(pageNumber) {
        let iActionChangeNumberPerPage = {
            type: ACTIONS.PAGINATION.CHANGE_NUMBER_PER_PAGE,
            page: pageNumber
        };
        return UtilsValidationAction.createValidatedAction(iActionChangeNumberPerPage, {
            'page': [
                validations_rules_ValidationRules.validateIsNumber,
                validations_rules_ValidationRules.validateIsInteger,
                validations_rules_ValidationRules.validateItemsPerPageNumber
            ]
        }, (action) => {
            let numberOfPages = action.state.page.numberOfItems / action.page;
            let pagination = Object.assign({}, action, {
                numberOfPages: numberOfPages ? Math.ceil(numberOfPages) : 1
            });
            return pagination;
        });
    }
}
pagination_decorate([
    actionValidation(validations_rules_ValidationRules.validateInfiniteIsDisabled),
    pagination_metadata("design:type", Function),
    pagination_metadata("design:paramtypes", []),
    pagination_metadata("design:returntype", Function)
], pagination_PaginationAction, "previousPage", null);
pagination_decorate([
    actionValidation(validations_rules_ValidationRules.validateInfiniteIsDisabled),
    pagination_metadata("design:type", Function),
    pagination_metadata("design:paramtypes", []),
    pagination_metadata("design:returntype", Function)
], pagination_PaginationAction, "nextPage", null);
pagination_decorate([
    actionValidation(validations_rules_ValidationRules.validateInfiniteIsDisabled),
    pagination_metadata("design:type", Function),
    pagination_metadata("design:paramtypes", [Number]),
    pagination_metadata("design:returntype", Function)
], pagination_PaginationAction, "goToPage", null);
pagination_decorate([
    actionValidation(validations_rules_ValidationRules.validateInfiniteIsDisabled),
    pagination_metadata("design:type", Function),
    pagination_metadata("design:paramtypes", [Number]),
    pagination_metadata("design:returntype", Function)
], pagination_PaginationAction, "changeNumberPerPage", null);
//# sourceMappingURL=pagination.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/search.js
var core_search_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_search_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class search_SearchAction {
    static set(value) {
        return {
            type: ACTIONS.SEARCH.SET,
            value
        };
    }
    static reset() {
        return {
            type: ACTIONS.SEARCH.RESET
        };
    }
    static setVisible(state) {
        return { type: ACTIONS.SEARCH.SET_VISIBLE, visible: state };
    }
}
core_search_decorate([
    actionValidation(validations_rules_ValidationRules.validateSearchIsEnabled),
    core_search_metadata("design:type", Function),
    core_search_metadata("design:paramtypes", [String]),
    core_search_metadata("design:returntype", Object)
], search_SearchAction, "set", null);
core_search_decorate([
    actionValidation(validations_rules_ValidationRules.validateSearchIsEnabled),
    core_search_metadata("design:type", Function),
    core_search_metadata("design:paramtypes", []),
    core_search_metadata("design:returntype", Object)
], search_SearchAction, "reset", null);
core_search_decorate([
    actionValidation(validations_rules_ValidationRules.validateSearchIsEnabled),
    core_search_metadata("design:type", Function),
    core_search_metadata("design:paramtypes", [Boolean]),
    core_search_metadata("design:returntype", Object)
], search_SearchAction, "setVisible", null);
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/sort.js
var sort_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var sort_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




class sort_SortAction {
    static add(columnId, order) {
        if (order) {
            order = order.toLowerCase();
        }
        let args = { type: ACTIONS.SORT.ADD, columnId, order };
        let validators = {
            columnId: [
                validations_rules_ValidationRules.validateColumnNested,
                validations_rules_ValidationRules.validateIfProperLeaf,
                validations_rules_ValidationRules.validateIfNotAbstract,
                validations_rules_ValidationRules.validateSortAddUnique
            ],
            order: [validations_rules_ValidationRules.validateSort]
        };
        return UtilsValidationAction.createValidatedAction(args, validators);
    }
    static sort(columnId, multisort, order) {
        if (order) {
            order = order.toLowerCase();
        }
        return { type: ACTIONS.SORT.CHANGE, columnId, order, multisort };
    }
    static sortGroup(columnId, order) {
        if (order) {
            order = order.toLowerCase();
        }
        return { type: ACTIONS.SORT.CHANGE_GROUP, columnId, order };
    }
    static remove(columnId) {
        let args = { type: ACTIONS.SORT.REMOVE, columnId };
        let validators = {
            columnId: [
                validations_rules_ValidationRules.validateColumnNested,
                validations_rules_ValidationRules.validateIfProperLeaf,
                validations_rules_ValidationRules.validateIfNotAbstract
            ]
        };
        return UtilsValidationAction.createValidatedAction(args, validators);
    }
    static reset() {
        return { type: ACTIONS.SORT.RESET };
    }
    static set(columns, groups) {
        let args = { type: ACTIONS.SORT.SET, columns, groups };
        let validators = {
            columns: [
                validations_rules_ValidationRules.validateSortSet,
                validations_rules_ValidationRules.validateSortSetGroups
            ],
            groups: [
                validations_rules_ValidationRules.validateSortSet
            ]
        };
        return UtilsValidationAction.createValidatedAction(args, validators);
    }
}
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", [String, String]),
    sort_metadata("design:returntype", Function)
], sort_SortAction, "add", null);
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", [String, Boolean, String]),
    sort_metadata("design:returntype", Object)
], sort_SortAction, "sort", null);
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", [String, String]),
    sort_metadata("design:returntype", Object)
], sort_SortAction, "sortGroup", null);
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", [String]),
    sort_metadata("design:returntype", Function)
], sort_SortAction, "remove", null);
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", []),
    sort_metadata("design:returntype", Object)
], sort_SortAction, "reset", null);
sort_decorate([
    actionValidation(validations_rules_ValidationRules.validateSortingIsEnabled),
    sort_metadata("design:type", Function),
    sort_metadata("design:paramtypes", [Array, Array]),
    sort_metadata("design:returntype", Function)
], sort_SortAction, "set", null);
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/translation.js

class translation_TranslationAction {
    static setLanguage(state) {
        return {
            type: ACTIONS.SET_LANGUAGE,
            language: state
        };
    }
}
//# sourceMappingURL=translation.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/header/settings.js

class settings_HeaderSettingsAction {
    static setVisible(visible) {
        return {
            type: ACTIONS.SETTINGS.SET_VISIBLE,
            visible
        };
    }
    static startOperation() {
        return {
            type: ACTIONS.SETTINGS.ENABLE
        };
    }
    static stopOperation() {
        return {
            type: ACTIONS.SETTINGS.DISABLE
        };
    }
}
//# sourceMappingURL=settings.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/actions.js















//# sourceMappingURL=actions.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/scroll.js

class scroll_ScrollAction {
    static set(position) {
        return {
            type: ACTIONS.SCROLL.SET,
            position
        };
    }
}
//# sourceMappingURL=scroll.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/summary.js

class summary_SummaryAction {
    static setValue(value) {
        return { type: ACTIONS.SET_SUMMARY_VALUE, value };
    }
    static setTotalValue(aggregation) {
        return { type: ACTIONS.SET_SUMMARY_TOTAL_VALUE, aggregation };
    }
    static setVisible(visible) {
        return { type: ACTIONS.SET_SUMMARY_VISIBLE, visible };
    }
}
//# sourceMappingURL=summary.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/core/format.js

class format_FormatAction {
    static add(columnId, intl, rowId) {
        return {
            type: ACTIONS.FORMAT.ADD,
            columnId,
            intl,
            rowId
        };
    }
    static update(index, intl) {
        return {
            type: ACTIONS.FORMAT.UPDATE,
            index,
            intl
        };
    }
}
//# sourceMappingURL=format.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/fullscreen.js
var fullscreen_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var fullscreen_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class fullscreen_FullscreenAction {
    static toggle(state) {
        return {
            type: ACTIONS.FULLSCREEN_TOGGLE,
            visible: state
        };
    }
}
fullscreen_decorate([
    actionValidation(validations_rules_ValidationRules.validateFullscreenIsEnabled),
    fullscreen_metadata("design:type", Function),
    fullscreen_metadata("design:paramtypes", [Boolean]),
    fullscreen_metadata("design:returntype", Object)
], fullscreen_FullscreenAction, "toggle", null);
//# sourceMappingURL=fullscreen.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/header/bar/filter.js
var bar_filter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var bar_filter_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class filter_HeaderBarFilterAction {
    static setVisible(state) {
        return {
            type: ACTIONS.SET_HEADER_BAR_FILTER_VISIBLE,
            visible: state
        };
    }
}
bar_filter_decorate([
    actionValidation(validations_rules_ValidationRules.validateHeaderIsVisible),
    actionValidation(validations_rules_ValidationRules.validateFilterIsEnabled),
    bar_filter_metadata("design:type", Function),
    bar_filter_metadata("design:paramtypes", [Boolean]),
    bar_filter_metadata("design:returntype", Object)
], filter_HeaderBarFilterAction, "setVisible", null);
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/header/bar/group.js
var bar_group_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var bar_group_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



class group_HeaderBarGroupAction {
    static setVisible(state) {
        return {
            type: ACTIONS.SET_HEADER_BAR_GROUP_VISIBLE,
            visible: state
        };
    }
}
bar_group_decorate([
    actionValidation(validations_rules_ValidationRules.validateHeaderIsVisible),
    actionValidation(validations_rules_ValidationRules.validateGroupIsEnabled),
    bar_group_metadata("design:type", Function),
    bar_group_metadata("design:paramtypes", [Boolean]),
    bar_group_metadata("design:returntype", Object)
], group_HeaderBarGroupAction, "setVisible", null);
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/theme/styling.js



class styling_ThemeStylingAction {
    static setTheme(themeName) {
        let args = {
            type: ACTIONS.THEME.STYLING.SET,
            themeName
        };
        return UtilsValidationAction.createValidatedAction(args, {
            themeName: [validations_rules_ValidationRules.validateThemeStyling]
        });
    }
}
//# sourceMappingURL=styling.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/theme/layout.js



class layout_ThemeLayoutAction {
    static set(layout) {
        let args = { type: ACTIONS.THEME.LAYOUT.SET, layout };
        return UtilsValidationAction.createValidatedAction(args, {
            layout: [validations_rules_ValidationRules.validateThemeLayout]
        });
    }
}
//# sourceMappingURL=layout.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/actions/header/events.js

class events_EventStateAction {
    static update(eventName, subscribers) {
        return {
            type: ACTIONS.EVENT.JOIN,
            eventName: eventName,
            subscribers: subscribers === true ? 1 : 0
        };
    }
}
//# sourceMappingURL=events.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build-in/services/action.js






















class action_UtilsAction {
    static subscribeToEvents(columns, eventBus, extensions, state, dispatch) {
        eventBus.join(eventsList_EVENTS.ACTION.STATE.EDIT.ROLLBACK, (params) => {
            /// ToDo: overall validation concept to refactor
            let rootState = state.get();
            if (validations_rules_ValidationRules.validateEditIsEnabled(rootState)
                && validations_rules_ValidationRules.validateRollbackAvailable(rootState, params.force)) {
                dispatch(edit_EditAction.allReset());
            }
        });
        eventBus.join(eventsList_EVENTS.REJECT.DATA.SAVE, (params) => {
            dispatch(edit_EditAction.getErrors(params.errors, true));
        });
        eventBus.join(eventsList_EVENTS.DONE.DATA.SAVE, () => {
            dispatch(edit_EditAction.setErrorsVisible(false));
        });
        // TODO: cleanup;delete legacy
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.SUMMARY, (params) => {
            dispatch(summary_SummaryAction.setValue(params.value));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.FORMAT.ADD, (params) => {
            dispatch(format_FormatAction.add(params.columnId, params.intl, params.rowId));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.FORMAT.UPDATE, (params) => {
            dispatch(format_FormatAction.update(params.index, params.intl));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.WIDTHS, (params) => {
            dispatch(group_GroupAction.setWidths(params.widths));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP, () => {
            let groups = state.group.groups;
            let groupRowVisible = columns.isVisibleById(STATIC_CLASS.ROW_GROUP);
            if (groupRowVisible && !groups.length) {
                dispatch(columns_ColumnsAction.hideColumn(STATIC_CLASS.ROW_GROUP));
            }
            else if (!groupRowVisible && groups.length) {
                dispatch(columns_ColumnsAction.showColumn(STATIC_CLASS.ROW_GROUP));
            }
            dispatch(summary_SummaryAction.setVisible(summary_UtilsSummary.hasAggregation(state)));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.SEARCH, (value) => {
            dispatch(search_SearchAction.set(value.toString()));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.CHANGE, (groups) => {
            if (groups.length) {
                dispatch(group_GroupAction.groupsSet(groups, state.group.groups));
            }
            else {
                dispatch(group_GroupAction.groupsReset(state.group.groups));
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.GRID.HEADER.GROUP.SORT, (columnId) => {
            dispatch(sort_SortAction.sortGroup(columnId));
        });
    }
    static subscribeToDataEvents(eventBus, dispatch) {
        eventBus.join(eventsList_EVENTS.ACTION.DATA.SORT_SET, (params) => {
            dispatch(sort_SortAction.set(params.columns, null));
        });
        eventBus.join(eventsList_EVENTS.ACTION.DATA.SORT, (params) => {
            if (!params.isGrouped) {
                dispatch(sort_SortAction.sort(params.columnId, params.multisort, params.order));
            }
            else {
                dispatch(sort_SortAction.sortGroup(params.columnId, params.order));
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.SEARCH_APPLY, (params) => {
            if (params && params.value) {
                dispatch(search_SearchAction.set(params.value));
            }
            else {
                dispatch(search_SearchAction.reset());
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.TOGGLE, (params) => {
            dispatch(group_GroupAction.group(params.path, params.state));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.ADD, (params) => {
            dispatch(group_GroupAction.groupAdd(params.columnId, params.order));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.GROUP.VISIBLE, (params) => {
            dispatch(group_GroupAction.groupVisible(params.number));
        });
        eventBus.join(eventsList_EVENTS.AFTER.DATA, (params) => {
            dispatch(data_DataAction.change(params.length, params.selected));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.VISIBILITY_APPLY, (params) => {
            if (params.visibility) {
                dispatch(columns_ColumnsAction.showColumn(params.columnId));
            }
            else {
                dispatch(columns_ColumnsAction.hideColumn(params.columnId));
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COMPOUND_APPLY, (params) => {
            if (params.freeze) {
                dispatch(columns_ColumnsAction.freeze(params.columnId));
            }
            else {
                dispatch(columns_ColumnsAction.unfreeze(params.columnId));
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.LAYOUT.HEADER.CELL.ORDER, (params) => {
            dispatch(columns_ColumnsAction.moveColumn(params.id, params.position, params.columnId));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.VALUE, (params) => {
            dispatch(edit_EditAction.change(params.rowId, params.columnId, params.value));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.RESET, (params) => {
            dispatch(edit_EditAction.reset(params.rowId, params.columnId));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.GRID.CHANGE_PAGE, (params) => {
            dispatch(pagination_PaginationAction.changeNumberPerPage(params));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.ROWS, (params) => {
            dispatch(global_GlobalAction.changeRowsNumber(params.current.length, params.all.length, params.initial.length));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.COLUMN.COLLAPSED, (params) => {
            dispatch(columns_ColumnsAction.collapseColumn(params.columnId, params.columnIds, params.collapsed));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.SCROLL, (params) => {
            dispatch(scroll_ScrollAction.set(params));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.VIEWSETTING.DROP_IN_GROUPS, ({ canBeGrouped, inGroup, change }) => {
            dispatch(settings_HeaderSettingsAction.startOperation());
            if (canBeGrouped) {
                dispatch(group_GroupAction.groupAdd(change.source));
            }
            if (change.target && (inGroup || canBeGrouped)) {
                dispatch(group_GroupAction.moveColumn(change.source, change.operator, change.target));
                dispatch(settings_HeaderSettingsAction.stopOperation());
            }
        });
        eventBus.join(eventsList_EVENTS.CHANGE.VIEWSETTING.DROP_IN_COLUMNS, ({ inGroup, change }) => {
            dispatch(settings_HeaderSettingsAction.startOperation());
            if (inGroup) {
                dispatch(group_GroupAction.groupRemove(change.source));
            }
            dispatch(columns_ColumnsAction.moveColumn(change.source, change.operator, change.target));
            dispatch(settings_HeaderSettingsAction.stopOperation());
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.VALUE, (params) => {
            dispatch(edit_EditAction.massChange(params.rowIds, params.columnId, params.value));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.RESET, (params) => {
            dispatch(edit_EditAction.massReset(params.rowIds, params.columnId));
        });
        eventBus.join(eventsList_EVENTS.CHANGE.DATA.CELL.MASS.RESET, (params) => {
            dispatch(edit_EditAction.massReset(params.rowIds, params.columnId));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.ROW.MARK, (params) => {
            if (params.marked) {
                dispatch(mark_MarkAction.select(params.rowIds));
            }
            else {
                dispatch(mark_MarkAction.deselect(params.rowIds));
            }
        });
        eventBus.join(eventsList_EVENTS.COMMIT.HEADER.MARK, (params) => {
            if (params.marked) {
                dispatch(mark_MarkAction.select(params.rowIds));
            }
            else {
                dispatch(mark_MarkAction.deselect(params.rowIds));
            }
        });
        eventBus.join(eventsList_EVENTS.COMMIT.ROW.FREEZE, (params) => {
            switch (params.action) {
                case 'add':
                    dispatch(freeze_FreezeAction.add(params.rowIds));
                    break;
                case 'remove':
                    dispatch(freeze_FreezeAction.remove(params.rowIds));
                    break;
            }
        });
        eventBus.join(eventsList_EVENTS.COMMIT.COLUMN.WIDTH, (params) => {
            dispatch(columns_ColumnsAction.setWidth(params.columnId, params));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.ROW.ADD, (params) => {
            dispatch(edit_EditAction.add(params.row));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.ROW.REMOVE, (params) => {
            dispatch(edit_EditAction.removeMarked(params.rowIds));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.ROW.RESTORE, (params) => {
            dispatch(edit_EditAction.restore(params.rowId));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.VIEW.PAGE, (params) => {
            dispatch(pagination_PaginationAction.goToPage(params.page));
        });
        eventBus.join(eventsList_EVENTS.COMMIT.DATA.SAVE, () => {
            dispatch(edit_EditAction.save());
        });
        eventBus.join(eventsList_EVENTS.COMMIT.DATA.AGGREGATION, ({ aggregation }) => {
            dispatch(summary_SummaryAction.setTotalValue(aggregation));
        });
    }
    static subscribeToApiEvents(eventBus, dispatch) {
        eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.ADD, (params) => {
            dispatch(group_GroupAction.groupAdd(params.columnId, params.order));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.RESET, (columnIds) => {
            dispatch(group_GroupAction.groupsReset(columnIds));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.SET, (params) => {
            dispatch(group_GroupAction.groupsSet(params.groups, params.grouped));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.GROUP.REMOVE, (columnId) => {
            dispatch(group_GroupAction.groupRemove(columnId));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.ORDER.SET, (params) => {
            dispatch(columns_ColumnsAction.moveColumn(params.columnId1, params.position, params.columnId2));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.FREEZE, (columnId) => {
            dispatch(columns_ColumnsAction.freeze(columnId));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.UNFREEZE, (columnId) => {
            dispatch(columns_ColumnsAction.unfreeze(columnId));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.SORT.ADD, (params) => {
            dispatch(sort_SortAction.add(params.columnId, params.order));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.SORT.REMOVE, (params) => {
            dispatch(sort_SortAction.remove(params.columnId));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.SORT.RESET, () => {
            dispatch(sort_SortAction.reset());
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.SORT.SET, (params) => {
            dispatch(sort_SortAction.set(params.columns, params.groups));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.SHOW, (columnId) => {
            dispatch(columns_ColumnsAction.showColumn(columnId));
        });
        eventBus.join(eventsList_EVENTS.API.COLUMN.HIDE, (columnId) => {
            dispatch(columns_ColumnsAction.hideColumn(columnId));
        });
        eventBus.join(eventsList_EVENTS.API.DATA.FILTER.RESET, () => {
            dispatch(filter_FilterAction.reset());
        });
        eventBus.join(eventsList_EVENTS.API.DATA.FILTER.SET, (set) => {
            dispatch(filter_FilterAction.set(set));
        });
        eventBus.join(eventsList_EVENTS.API.DATA.PAGE.NEXT, () => {
            dispatch(pagination_PaginationAction.nextPage());
        });
        eventBus.join(eventsList_EVENTS.API.DATA.PAGE.PREV, () => {
            dispatch(pagination_PaginationAction.previousPage());
        });
        eventBus.join(eventsList_EVENTS.API.DATA.PAGE.SET, (page) => {
            dispatch(pagination_PaginationAction.goToPage(page));
        });
        eventBus.join(eventsList_EVENTS.API.DATA.PAGE.SET_ROWS_PER_PAGE, (length) => {
            dispatch(pagination_PaginationAction.changeNumberPerPage(length));
        });
        eventBus.join(eventsList_EVENTS.API.DATA.SEARCH.RESET, () => {
            dispatch(search_SearchAction.reset());
        });
        eventBus.join(eventsList_EVENTS.API.DATA.SEARCH.SET, (value) => {
            dispatch(search_SearchAction.set(value));
        });
        eventBus.join(eventsList_EVENTS.API.LOCALIZATION.LANGUAGE.SET, (value) => {
            dispatch(translation_TranslationAction.setLanguage(value));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SET_VISIBLE, (state) => {
            dispatch(header_HeaderAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.BAR.FILTER.SET_VISIBLE, (state) => {
            dispatch(filter_HeaderBarFilterAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.BAR.GROUP.SET_VISIBLE, (state) => {
            dispatch(group_HeaderBarGroupAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SEARCH.SET_VISIBLE, (state) => {
            dispatch(search_SearchAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.HEADER.SETTINGS.SET_VISIBLE, (state) => {
            dispatch(settings_HeaderSettingsAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.THEME.STYLING.SET, (themeName) => {
            dispatch(styling_ThemeStylingAction.setTheme(themeName));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.THEME.LAYOUT.SET, (border) => {
            dispatch(layout_ThemeLayoutAction.set(border));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.FULLSCREEN.TOGGLE, (state) => {
            dispatch(fullscreen_FullscreenAction.toggle(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, (state) => {
            dispatch(edit_EditAction.set(state));
        });
        eventBus.join(eventsList_EVENTS.API.VIEW.FOOTER.SET_VISIBLE, (state) => {
            dispatch(footer_FooterAction.setVisible(state));
        });
        eventBus.join(eventsList_EVENTS.API.EVENT.UPDATE, (params) => {
            dispatch(events_EventStateAction.update(params.eventName, params.subscribers));
        });
    }
}
//# sourceMappingURL=action.js.map
// CONCATENATED MODULE: ./dist-es/modules/state/build.in.js
var state_build_in_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class build_in_State {
    constructor() {
        this._initialized = false;
    }
    boot(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.ROWS, this.afterRowsDataInitialize.bind(this));
        this._utilsState = new state_UtilsState(this.eventBus);
    }
    setMetadata(metadata) {
        this._metadata = metadata;
        this.getStore().dispatch(global_GlobalAction.setConfig(this._metadata));
    }
    initialize(initialState, params) {
        return state_build_in_awaiter(this, void 0, void 0, function* () {
            this.prepare(initialState, params);
            this.live();
        });
    }
    prepare(initialState, params) {
        this._store = Object(vc_redux["c" /* createStore */])(grid_GridReducer.reducer, initialState, Object(vc_redux["a" /* applyMiddleware */])(vc_redux_thunk));
        this.set(this._store.getState());
        this.services.state.initialize(this);
        this.getStore().subscribe(() => {
            this.services.state.update(this.getStore().getState());
        });
        this.setMetadata(params.metadata);
        action_UtilsAction.subscribeToEvents(this.services.columns, this.eventBus, this.services.extensions, this.services.state, this.getStore().dispatch);
        action_UtilsAction.subscribeToDataEvents(this.eventBus, this.getStore().dispatch);
        action_UtilsAction.subscribeToApiEvents(this.eventBus, this.getStore().dispatch);
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.ACTION.STATE.LOAD, this.onActionStateLoad.bind(this));
        // this.eventBus.join(EVENTS.ACTION.DATA.ROLLBACK, )
    }
    set(state) {
        this._state = state;
    }
    afterRowsDataInitialize() {
        if (!this._initialized) {
            this._initialized = true;
            this.getStore().dispatch(global_GlobalAction.setInitial(this.services.dictionaries, this.services.formatter, this._metadata));
        }
    }
    get() {
        return this._state;
    }
    // TODO: used by core wrapper react and api dispatch; remove after react/redux removal
    getStore() {
        return this._store;
    }
    update(newState) {
        let currentState = this.get();
        if (newState !== currentState) {
            this.set(newState);
        }
        state_UtilsState.changed(currentState, newState, ['columns', 'collection'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.COLUMNS.COLLECTION, { currentState, newState });
        });
        state_UtilsState.changed(currentState, newState, ['columns', 'collapsed'], () => {
            this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.COLUMNS.COLLAPSED);
        });
        this._utilsState.fireEventConditionally(currentState, newState, eventsList_EVENTS.CHANGE.DATA.COLUMNS.ORDER, [
            ['columns', 'freeze', 'state'],
            ['columns', 'order', 'state']
        ]);
        state_UtilsState.changed(currentState, newState, ['group'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.GROUP, { groups: newState.group.groups });
        });
        state_UtilsState.changed(currentState, newState, ['groupResize'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.GROUP.RESIZE);
        });
        state_UtilsState.changed(currentState, newState, ['fullscreen'], () => {
            this.eventBus.fire(eventsList_EVENTS.FULLSCREEN, { visible: newState.fullscreen.visible });
        });
        state_UtilsState.changed(currentState, newState, ['filter'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.FILTER, { filter: newState.filter.state });
        });
        state_UtilsState.changed(currentState, newState, ['edit', 'enabled'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.EDIT.ENABLED, { editable: { enabled: newState.edit.enabled } });
        });
        state_UtilsState.changed(currentState, newState, ['columns', 'width'], () => {
            let changed = {};
            if (currentState && currentState.columns && currentState.columns.width) {
                Object.keys(newState.columns.width).forEach((columnId) => {
                    if (currentState.columns.width[columnId] !== newState.columns.width[columnId]) {
                        changed[columnId] = newState.columns.width[columnId];
                    }
                });
            }
            this.eventBus.fire(eventsList_EVENTS.DONE.COLUMN.WIDTH, { changed });
        });
        state_UtilsState.changed(currentState, newState, ['edit', 'removed'], () => {
            if (currentState && newState.edit.removed.length < currentState.edit.removed.length) {
                this.eventBus.fire(eventsList_EVENTS.DONE.ROW.RESTORE, newState.edit);
            }
            else {
                this.eventBus.fire(eventsList_EVENTS.DONE.ROW.REMOVE, newState.edit);
            }
            if (newState.edit.removed.length === 0 && currentState.edit.removed.length > 0) {
                this.eventBus.fire(eventsList_EVENTS.DONE.STATE.EDIT.ROLLBACK);
            }
        });
        state_UtilsState.changed(currentState, newState, ['edit', 'cells'], () => {
            if (newState.edit.cells.length === 0 && currentState.edit.cells.length > 0) {
                this.eventBus.fire(eventsList_EVENTS.DONE.STATE.EDIT.ROLLBACK);
            }
        });
        state_UtilsState.changed(currentState, newState, ['edit', 'added'], () => {
            if (newState.edit.added.length === 0 && currentState.edit.added.length > 0) {
                this.eventBus.fire(eventsList_EVENTS.DONE.STATE.EDIT.ROLLBACK);
            }
            else {
                this.eventBus.fire(eventsList_EVENTS.DONE.ROW.ADD);
            }
        });
        state_UtilsState.changed(currentState, newState, ['mark'], () => {
            this.eventBus.fire(eventsList_EVENTS.DONE.ROW.MARK, newState.mark);
        });
        state_UtilsState.changed(currentState, newState, ['summary', 'total'], () => {
            this.eventBus.fire(eventsList_EVENTS.DONE.DATA.AGGREGATION, newState.summary.total);
        });
        state_UtilsState.changed(currentState, newState, ['freeze'], () => {
            this.eventBus.fire(eventsList_EVENTS.DONE.ROW.FREEZE, newState.freeze);
        });
        state_UtilsState.changed(currentState, newState, ['header', 'search'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.SEARCH);
        });
        state_UtilsState.changed(currentState, newState, ['page'], () => {
            this.eventBus.fire(eventsList_EVENTS.DONE.VIEW.PAGE, newState.page);
        });
        state_UtilsState.changed(currentState, newState, ['header', 'title'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.GRID.HEADER.TITLE, newState.header.title);
        });
        state_UtilsState.changed(currentState, newState, ['theme', 'styling', 'current'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.THEME.STYLING, {
                themeName: newState.theme.styling.current
            });
        });
        state_UtilsState.changed(currentState, newState, ['theme', 'layout'], () => {
            this.eventBus.fire(eventsList_EVENTS.CHANGE.THEME.LAYOUT, {
                layout: newState.theme.layout.value
            });
        });
        state_UtilsState.changed(currentState, newState, ['sort', 'state'], () => {
            this.sortChanged(newState, 'state');
        });
        state_UtilsState.changed(currentState, newState, ['sort', 'groups'], () => {
            this.sortChanged(newState, 'groups');
        });
    }
    sortChanged(newState, branch) {
        // todo DONE instead of change
        this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.SORT, {
            columns: newState.sort.state,
            groups: newState.sort.groups,
            groupSort: branch === 'groups'
        });
    }
    onActionStateLoad(state) {
        this.getStore().dispatch(global_GlobalAction.loadState(state));
        this.eventBus.fire(eventsList_EVENTS.COMMIT.STATE.LOAD);
        this.eventBus.fire(eventsList_EVENTS.DONE.STATE.LOAD);
    }
}
//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/modules/event-bus/build.in.js


class build_in_EventBus {
    boot() {
        this._eventBus = container_Container.get().resolve(services_event_bus_ServicesEventBus);
    }
    join(eventName, params) {
        return this._eventBus.join(eventName, params);
    }
    once(eventName, params) {
        return this._eventBus.once(eventName, params);
    }
    leave(eventName, params) {
        return this._eventBus.leave(eventName, params);
    }
    fire(eventName, params, callback) {
        return this._eventBus.fire(eventName, params, callback);
    }
    loadEventsList(eventsList) {
        return this._eventBus.loadEventsList(eventsList);
    }
    addListener(element, type, params) {
        return this._eventBus.addListener(element, type, params);
    }
    removeListener(element, type) {
        return this._eventBus.removeListener(element, type);
    }
    addConditionalFireWarningConstructors(conditions, omit) {
        return this._eventBus.addConditionalFireWarningConstructors(conditions, omit);
    }
    hasSubscribers(eventName) {
        return this._eventBus.hasSubscribers(eventName);
    }
    destroy() {
        return this._eventBus.destroy();
    }
}
//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/modules/dictionaries/build.in.js


class build_in_Dictionaries {
    boot(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
    }
    add(id, data) {
        this.services.dictionaries.setDictionary(id, Dictionary.fromObject(data));
    }
    setDictionaries(dictionaries) {
        Object.keys(dictionaries).forEach((key) => {
            this.add(key, dictionaries[key]);
        });
    }
}
//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/sort.js




function ApiColumnSort(eventBus, state) {
    function whenEnabled(callback) {
        return checkEnabled(state.sort.enabled, 'Sort', () => callback());
    }
    return {
        add: (columnId, order = DEFAULT.SORT) => {
            return whenEnabled(() => {
                if (state.sort.groups.some((col) => col.columnId === columnId)) {
                    console.warn(`Grouped column "${columnId}" can't be sorted with this method.`);
                    return void 0;
                }
                if (state.sort.state.some((col) => col.columnId === columnId)) {
                    console.warn(`Column "${columnId}" is already sorted.`);
                    return void 0;
                }
                eventBus.fire(eventsList_EVENTS.API.COLUMN.SORT.ADD, { columnId, order });
            });
        },
        reset: () => {
            return whenEnabled(() => {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.SORT.RESET);
            });
        },
        remove: (columnId) => {
            return whenEnabled(() => {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.SORT.REMOVE, { columnId });
            });
        },
        set: (columns = [], groups = []) => {
            return whenEnabled(() => {
                let sortedGroupsIds = state.sort.groups.map((col) => col.columnId);
                let sortedColumnIds = state.sort.state.map((col) => col.columnId);
                let groupIdsToSort = groups.map((col) => col.columnId);
                let columnIdsToSort = columns.map((col) => col.columnId);
                if (!UtilitiesArray.equals(sortedGroupsIds, groupIdsToSort)
                    || sortedColumnIds.some((columnId) => groupIdsToSort.indexOf(columnId) !== -1)) {
                    console.warn(`Incorrect groups to sort.`);
                    return void 0;
                }
                if (sortedGroupsIds.some((columnId) => columnIdsToSort.indexOf(columnId) !== -1)) {
                    console.warn(`Incorrect columns to sort.`);
                    return void 0;
                }
                eventBus.fire(eventsList_EVENTS.API.COLUMN.SORT.SET, { columns, groups });
            });
        },
        get: () => {
            return whenEnabled(() => state.sort);
        }
    };
}
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/format.js



function ApiColumnFormat(eventBus, services) {
    return {
        set: (columnId, intl, filterSet) => {
            if (services.formatter.hasExternalFormatter()) {
                console.warn('Grid has external formatter.');
                return void 0;
            }
            let rootState = services.state.get();
            if (validations_rules_ValidationRules.validateColumnNested(rootState, columnId) &&
                validations_rules_ValidationRules.validateIntl(rootState, columnId, intl) &&
                validations_rules_ValidationRules.validateFilterSet(rootState, filterSet)) {
                eventBus.fire(eventsList_EVENTS.CHANGE.DATA.FORMAT.SET, { columnId, intl, filterSet });
            }
        },
        getRows() {
            if (services.formatter.hasExternalFormatter()) {
                console.warn('Grid has external formatter.');
                return void 0;
            }
            return UtilsObject.getPropertyValue('format.state', services.state);
        },
        getColumns() {
            if (services.formatter.hasExternalFormatter()) {
                console.warn('Grid has external formatter.');
                return void 0;
            }
            return columns_UtilsColumns.getColumnIdsRecursive(services.columns.getAll())
                .reduce((acc, columnId) => {
                let intl = services.formatter.getColumnIntl(columnId);
                if (intl) {
                    acc.push(services.formatter.createFormatData(columnId, intl));
                }
                return acc;
            }, []);
        }
    };
}
//# sourceMappingURL=format.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/group.js





function ApiColumnGroup(eventBus, state) {
    return {
        add: (columnId, order) => {
            order = sort_UtilsSort.getOrderFromState(state.sort.state, columnId, order) || DEFAULT.SORT;
            if (validations_rules_ValidationRules.validateIfNotAbstract(state, columnId)) {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.GROUP.ADD, { columnId, order });
            }
        },
        remove: (columnId) => {
            eventBus.fire(eventsList_EVENTS.API.COLUMN.GROUP.REMOVE, columnId);
        },
        get: () => {
            return checkEnabled(state.group.enabled, 'Group', () => {
                let { group, sort } = state.get();
                return group.groups.map((columnId) => {
                    let currentSort = sort.state.find((column) => column.columnId === columnId);
                    return {
                        columnId,
                        order: currentSort ? currentSort.order : undefined
                    };
                });
            });
        },
        reset: () => {
            eventBus.fire(eventsList_EVENTS.API.COLUMN.GROUP.RESET, state.group.groups);
        },
        set: (groups) => {
            let validGroups = groups.every((columnId) => {
                return validations_rules_ValidationRules.validateIfNotAbstract(state, columnId);
            });
            if (validGroups) {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.GROUP.SET, { groups, grouped: state.group.groups });
            }
        }
    };
}
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/freeze.js



function ApiColumnFreeze(eventBus, services) {
    return {
        add: (columnId) => {
            eventBus.fire(eventsList_EVENTS.API.COLUMN.FREEZE, columnId);
        },
        remove: (columnId) => {
            eventBus.fire(eventsList_EVENTS.API.COLUMN.UNFREEZE, columnId);
        },
        get: () => {
            return checkEnabled(services.state.columns.freeze.enabled, 'Freeze', () => {
                return services.columns.getFreezeColumnIds(false);
            });
        },
        getUnfreeze: () => {
            return checkEnabled(services.state.columns.freeze.enabled, 'Freeze', () => {
                return columns_UtilsColumns.filterAbstractColumnIds(services.columns.getAll(), services.columns.getContentColumnIds());
            });
        }
    };
}
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/visibility.js


function ApiColumnVisibility(eventBus, services) {
    let validateIfCollapsable = (columnId, hide) => {
        let isValid = services.columns.isCollapsableColumn(columnId, hide);
        if (!isValid) {
            console.warn(`Column "${columnId}" cannot be hidden.`);
        }
        return isValid;
    };
    return {
        show: (columnId) => {
            let rootState = services.state.get();
            if (validations_rules_ValidationRules.validateColumnNested(rootState, columnId) &&
                validations_rules_ValidationRules.validateIfProperLeaf(rootState, columnId, true) &&
                validateIfCollapsable(columnId, false)) {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.SHOW, columnId);
            }
        },
        hide: (columnId) => {
            let rootState = services.state.get();
            if (validations_rules_ValidationRules.validateColumnNested(rootState, columnId) &&
                validations_rules_ValidationRules.validateIfProperLeaf(rootState, columnId, true) &&
                validateIfCollapsable(columnId, true)) {
                eventBus.fire(eventsList_EVENTS.API.COLUMN.HIDE, columnId);
            }
        },
        get: () => {
            return services.columns.getAllVisibleColumnIdsByOrder();
        }
    };
}
//# sourceMappingURL=visibility.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column/order.js



function ApiColumnOrder(eventBus, services) {
    return {
        get: () => {
            return checkEnabled(services.state.columns.order.enabled, 'Order', () => {
                return columns_UtilsColumns.filterAbstractColumnIds(services.columns.getAll(), services.columns.getAllColumnIds());
            });
        },
        set: (columnId1, position, columnId2) => {
            eventBus.fire(eventsList_EVENTS.API.COLUMN.ORDER.SET, { columnId1, position, columnId2 });
        }
    };
}
//# sourceMappingURL=order.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/column.js







function ApiColumn(eventBus, services) {
    return {
        format: ApiColumnFormat(eventBus, services),
        group: ApiColumnGroup(eventBus, services.state),
        order: ApiColumnOrder(eventBus, services),
        freeze: ApiColumnFreeze(eventBus, services),
        sort: ApiColumnSort(eventBus, services.state),
        visibility: ApiColumnVisibility(eventBus, services),
        get: () => {
            return columns_UtilsColumns.filterAbstract(services.columns.getAll());
        }
    };
}
//# sourceMappingURL=column.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/data/filter.js


function ApiDataFilter(eventBus, state) {
    return {
        reset: () => {
            eventBus.fire(eventsList_EVENTS.API.DATA.FILTER.RESET);
        },
        get() {
            return checkEnabled(state.filter.enabled, 'Filter', () => state.filter.state);
        },
        set: (set) => {
            eventBus.fire(eventsList_EVENTS.API.DATA.FILTER.SET, set);
        }
    };
}
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/data/page.js


function ApiDataPage(eventBus, state) {
    return {
        next: () => {
            eventBus.fire(eventsList_EVENTS.API.DATA.PAGE.NEXT);
        },
        prev: () => {
            eventBus.fire(eventsList_EVENTS.API.DATA.PAGE.PREV);
        },
        getCount: () => {
            return checkEnabled(!state.infinite.enabled, 'Page', () => state.page.numberOfPages);
        },
        getRowsPerPage: () => {
            return checkEnabled(!state.infinite.enabled, 'Page', () => state.page.itemPerPage);
        },
        setRowsPerPage: (length) => {
            eventBus.fire(eventsList_EVENTS.API.DATA.PAGE.SET_ROWS_PER_PAGE, length);
        },
        get: () => {
            return checkEnabled(!state.infinite.enabled, 'Page', () => state.page.currentPage);
        },
        set: (page) => {
            eventBus.fire(eventsList_EVENTS.API.DATA.PAGE.SET, page);
        }
    };
}
//# sourceMappingURL=page.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/data/search.js


function ApiDataSearch(eventBus, state) {
    return {
        reset: () => {
            eventBus.fire(eventsList_EVENTS.API.DATA.SEARCH.RESET);
        },
        get: () => {
            return checkEnabled(state.header.search.enabled, 'Search', () => state.header.search.value);
        },
        set: (value = '') => {
            eventBus.fire(eventsList_EVENTS.API.DATA.SEARCH.SET, value);
        }
    };
}
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/data.js
var build_in_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





function ApiData(eventBus, data, services) {
    return {
        filter: ApiDataFilter(eventBus, services.state),
        page: ApiDataPage(eventBus, services.state),
        search: ApiDataSearch(eventBus, services.state),
        export: () => build_in_data_awaiter(this, void 0, void 0, function* () {
            let numberOfItems = services.state.page.numberOfItems;
            let rows = [...yield data.getFreezeRows()].map((dataRow) => Object.assign({}, dataRow, { type: constants_VIEW.ROW.TYPE.NORMAL }));
            for (let i = 0; i < numberOfItems; i++) {
                let row = yield yield data.get(i);
                rows.push({
                    id: row.id,
                    type: row.type,
                    data: services.row.getDataForExport(row)
                });
            }
            return JSON.stringify(rows);
        }),
        reload: () => {
            eventBus.fire(eventsList_EVENTS.ACTION.DATA.RELOAD);
            eventBus.fire(eventsList_EVENTS.DONE.DATA.RELOAD);
        }
    };
}
//# sourceMappingURL=data.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/event.js

function ApiEvent(eventBus, eventManager) {
    function updateState(eventName) {
        let number = eventBus.hasSubscribers(eventName);
        eventBus.fire(eventsList_EVENTS.API.EVENT.UPDATE, { eventName, subscribers: number });
    }
    return {
        join: (eventName, callback) => {
            eventManager.join.call(eventManager, eventName, callback);
            updateState(eventName);
        },
        leave: (eventName, callback) => {
            eventManager.leave.call(eventManager, eventName, callback);
            updateState(eventName);
        }
    };
}
//# sourceMappingURL=event.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/localization/language.js


function ApiLocalizationLanguage(eventBus, state) {
    return {
        add: (language, translations) => {
            translation_Translation.addLanguage(language, translations);
        },
        get: () => {
            return state.translation.language;
        },
        set: (state) => {
            eventBus.fire(eventsList_EVENTS.API.LOCALIZATION.LANGUAGE.SET, state);
        }
    };
}
//# sourceMappingURL=language.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/localization.js

function ApiLocalization(eventBus, state) {
    return {
        language: ApiLocalizationLanguage(eventBus, state)
    };
}
//# sourceMappingURL=localization.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/row/edit.js




function ApiRowEdit(eventBus, services) {
    return {
        add() {
            checkEnabled(services.state.edit.enabled, 'Editable', () => {
                eventBus.fire(eventsList_EVENTS.ACTION.ROW.ADD);
            });
        },
        remove(rowIds) {
            checkEnabled(services.state.edit.enabled, 'Editable', () => {
                rowIds = UtilitiesArray.wrapInArray(rowIds);
                eventBus.fire(eventsList_EVENTS.ACTION.ROW.REMOVE, { rowIds });
            });
        },
        save(callback) {
            checkEnabled(services.state.edit.enabled, 'Editable', () => {
                if (!(callback instanceof Function)) {
                    console.warn(`Incorrect callback on argument 1`);
                }
                else {
                    eventBus.fire(eventsList_EVENTS.ACTION.DATA.SAVE, { callback });
                }
            });
        },
        get() {
            return checkEnabled(services.state.edit.enabled, 'Editable', () => {
                let externalStateEdit = {};
                Object.keys(services.state.edit).forEach((stateKey) => {
                    if (!(services.state.edit[stateKey] instanceof Array)) {
                        return;
                    }
                    externalStateEdit[stateKey] = services.state.edit[stateKey];
                });
                return externalStateEdit;
            });
        },
        set(changes = {}, filterSet) {
            checkEnabled(services.state.edit.enabled, 'Editable', () => {
                let rootState = services.state.get();
                let isNotValid = Object.keys(changes).some((columnId) => {
                    if (services.dataValidation.validateValue(columnId, changes[columnId], 'Value', true) &&
                        validations_rules_ValidationRules.validateColumnNested(rootState, columnId) &&
                        validations_rules_ValidationRules.validateFilterSet(rootState, filterSet) &&
                        services.columns.isEditable(services.columns.getColumnById(columnId, false))) {
                        return false;
                    }
                    console.warn(`Column ${columnId} is not editable`);
                    return true;
                });
                if (!isNotValid) {
                    eventBus.fire(eventsList_EVENTS.ACTION.DATA.EDIT, { changes, filterSet });
                }
            });
        }
    };
}
//# sourceMappingURL=edit.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/row/mark.js



function ApiRowMark(eventBus, services) {
    return {
        select(rowId) {
            let rowIds = UtilitiesArray.wrapInArray(rowId);
            eventBus.fire(eventsList_EVENTS.ACTION.ROW.MARK, { rowIds, marked: true });
        },
        deselect(rowId) {
            let rowIds = UtilitiesArray.wrapInArray(rowId);
            eventBus.fire(eventsList_EVENTS.ACTION.ROW.MARK, { rowIds, marked: false });
        },
        selectAll() {
            eventBus.fire(eventsList_EVENTS.ACTION.HEADER.MARK, { marked: true });
        },
        deselectAll() {
            eventBus.fire(eventsList_EVENTS.ACTION.HEADER.MARK, { marked: false });
        },
        get() {
            return checkEnabled(services.state.mark.enabled, 'Mark', () => services.state.mark.state.slice());
        }
    };
}
//# sourceMappingURL=mark.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/row/freeze.js



function ApiRowFreeze(eventBus, services) {
    return {
        add(rowId) {
            checkEnabled(services.state.freeze.enabled, 'Freeze', () => {
                let rowIds = UtilitiesArray.wrapInArray(rowId);
                eventBus.fire(eventsList_EVENTS.ACTION.ROW.FREEZE, { rowIds, action: 'add' });
            });
        },
        remove(rowId) {
            checkEnabled(services.state.freeze.enabled, 'Freeze', () => {
                let rowIds = UtilitiesArray.wrapInArray(rowId);
                let freezeIds = services.state.freeze.state;
                if (!rowIds.every((rowId) => freezeIds.indexOf(rowId) !== -1)) {
                    console.warn(`At least one row is not freeze`);
                    return void 0;
                }
                eventBus.fire(eventsList_EVENTS.ACTION.ROW.FREEZE, { rowIds, action: 'remove' });
            });
        },
        get() {
            return checkEnabled(services.state.freeze.enabled, 'Freeze', () => services.state.freeze.state.slice());
        }
    };
}
//# sourceMappingURL=freeze.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/row.js



function ApiRow(eventBus, services) {
    return {
        edit: ApiRowEdit(eventBus, services),
        mark: ApiRowMark(eventBus, services),
        freeze: ApiRowFreeze(eventBus, services)
    };
}
//# sourceMappingURL=row.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/state.js

function ApiState(eventBus, stateService) {
    return {
        save: () => {
            return JSON.stringify(stateService.get());
        },
        load: (data) => {
            // todo ajv validation
            let state = JSON.parse(data);
            let freezeEnabled = state.columns.freeze.enabled;
            let infiniteEnabled = state.infinite.enabled;
            let { columns, infinite } = stateService.get();
            if (freezeEnabled !== columns.freeze.enabled || infiniteEnabled !== infinite.enabled) {
                eventBus.fire(eventsList_EVENTS.CHANGE.STATE.RELOAD, state);
            }
            else {
                eventBus.fire(eventsList_EVENTS.ACTION.STATE.LOAD, state);
            }
        }
    };
}
//# sourceMappingURL=state.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/edit.js

function ApiViewEdit(eventBus, services) {
    return {
        enable: () => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, true);
        },
        disable: (force) => {
            eventBus.fire(eventsList_EVENTS.ACTION.STATE.EDIT.ROLLBACK, { force: force !== undefined ? force : false });
            eventBus.fire(eventsList_EVENTS.API.VIEW.EDIT.SET_ENABLE, false);
        }
    };
}
//# sourceMappingURL=edit.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/footer.js

function ApiViewFooter(eventBus) {
    return {
        setVisible: (visibility) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.FOOTER.SET_VISIBLE, visibility);
        }
    };
}
//# sourceMappingURL=footer.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/settings.js

function ApiViewHeaderSettings(eventBus) {
    return {
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.SETTINGS.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=settings.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/bar/filter.js

function ApiViewHeaderBarFilter(eventBus) {
    return {
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.BAR.FILTER.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=filter.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/bar/sort.js

function ApiViewHeaderBarSort(eventBus) {
    return {
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.BAR.SORT.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=sort.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/bar/group.js

function ApiViewHeaderBarGroup(eventBus) {
    return {
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.BAR.GROUP.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=group.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/bar.js



function ApiViewHeaderBar(eventBus) {
    return {
        filter: ApiViewHeaderBarFilter(eventBus),
        sort: ApiViewHeaderBarSort(eventBus),
        group: ApiViewHeaderBarGroup(eventBus)
    };
}
//# sourceMappingURL=bar.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header/search.js

function ApiViewHeaderSearch(eventBus) {
    return {
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.SEARCH.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=search.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/header.js




function ApiViewHeader(eventBus) {
    return {
        settings: ApiViewHeaderSettings(eventBus),
        bar: ApiViewHeaderBar(eventBus),
        search: ApiViewHeaderSearch(eventBus),
        setVisible: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.HEADER.SET_VISIBLE, state);
        }
    };
}
//# sourceMappingURL=header.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/theme/layout.js

function ApiViewThemeLayout(eventBus) {
    return {
        set: (layout) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.THEME.LAYOUT.SET, layout);
        }
    };
}
//# sourceMappingURL=layout.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/theme/styling.js

function ApiViewThemeStyling(eventBus) {
    return {
        setTheme: (themeName) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.THEME.STYLING.SET, themeName);
        }
    };
}
//# sourceMappingURL=styling.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/theme.js


function ApiViewTheme(eventBus) {
    return {
        styling: ApiViewThemeStyling(eventBus),
        layout: ApiViewThemeLayout(eventBus)
    };
}
//# sourceMappingURL=theme.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view/fullscreen.js

function ApiViewFullscreen(eventBus) {
    return {
        set: (state) => {
            eventBus.fire(eventsList_EVENTS.API.VIEW.FULLSCREEN.TOGGLE, state);
        }
    };
}
//# sourceMappingURL=fullscreen.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build-in/view.js






function ApiView(eventBus, services) {
    return {
        edit: ApiViewEdit(eventBus, services),
        footer: ApiViewFooter(eventBus),
        header: ApiViewHeader(eventBus),
        theme: ApiViewTheme(eventBus),
        fullscreen: ApiViewFullscreen(eventBus),
        reload: () => {
            eventBus.fire(eventsList_EVENTS.CLEAR_CACHE.ALL);
            eventBus.fire(eventsList_EVENTS.API.VIEW.RELOAD);
        }
    };
}
//# sourceMappingURL=view.js.map
// CONCATENATED MODULE: ./dist-es/modules/api/build.in.js








class build_in_Api {
    boot(eventBus, data, services) {
        this.eventBus = eventBus;
        this.data = data;
        this.services = services;
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
    }
    get() {
        return {
            column: ApiColumn(this.eventBus, this.services),
            data: ApiData(this.eventBus, this.data, this.services),
            event: ApiEvent(this.eventBus, this.services.eventManager),
            localization: ApiLocalization(this.eventBus, this.services.state),
            row: ApiRow(this.eventBus, this.services),
            state: ApiState(this.eventBus, this.services.state),
            view: ApiView(this.eventBus, this.services)
        };
    }
}
//# sourceMappingURL=build.in.js.map
// CONCATENATED MODULE: ./dist-es/modules/externals/serverside.data.js
var serverside_data_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var serverside_data_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var serverside_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const MODES = {
    LENGTH: 'length',
    DATA_BY_ROW_ID: 'dataByRowId',
    DATA_BY_DATA_INDEX: 'dataByDataIndex'
};
class serverside_data_ServerSideData {
    constructor(params) {
        this.params = params;
        this.cacheRowsByDataIndex = {};
        this.cacheRowsByRowId = {};
        this.cacheLength = undefined;
        this.lastAskedDataIndex = undefined;
        this.bodyParams = {};
        this.dataByIndexQueue = [];
        this.databyRowIdQueue = [];
        this.lengthQueue = [];
    }
    prepare() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            this.flushFetchDataQueueDebounce = UtilitiesDelay.debounce(this.flushFetchQueue.bind(this, MODES.DATA_BY_DATA_INDEX), this.params.frameCatchDelay || 200);
            this.flushFetchFreezeQueueDebounce = UtilitiesDelay.debounce(this.flushFetchQueue.bind(this, MODES.DATA_BY_ROW_ID), this.params.frameCatchDelay || 200);
            this.flushFetchLengthQueueDebounce = UtilitiesDelay.debounce(this.flushFetchQueue.bind(this, MODES.LENGTH), this.params.frameCatchDelay || 200);
        });
    }
    fireChangeDataRows() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            let params = {
                initial: yield this.getLength(),
                current: yield this.getLength(),
                freeze: this.services.state.get().freeze.state.length,
            };
            this.eventBus.fire(eventsList_EVENTS.CHANGE.DATA.ROWS, Object.assign({}, params, { all: params.current + params.freeze }));
        });
    }
    init() {
        this.prepare();
        this.fetchInitial();
        this.live();
    }
    isLoaded() {
        return true;
    }
    fetchInitial() {
        if (this.params.initialNumberOfLoad) {
            let to = Math.max(0, this.params.initialNumberOfLoad);
            for (let from = 0; from < to; from += 1) {
                this.get(from, true);
            }
        }
    }
    rowIdsRange() {
        let rowIds = Object.keys(this.databyRowIdQueue).sort();
        return this.services.state.get().freeze.state.filter((rowId) => rowIds.indexOf(rowId) !== -1);
    }
    dataIndexRange() {
        let ranges = UtilitiesString.numbersToRanges(this.getDataIndexes());
        if (this.params.frameCatchAll === true) {
            return ranges;
        }
        let lastFrame;
        ranges.forEach((range) => {
            let dataIndexes = UtilitiesString.rangesToNumbers([range]);
            if (lastFrame === undefined && dataIndexes.indexOf(this.lastAskedDataIndex) !== -1) {
                lastFrame = range;
            }
            else {
                dataIndexes.forEach((dataIndex) => {
                    this.dataByIndexQueue[dataIndex].forEach(({ reject }) => reject(''));
                    delete this.dataByIndexQueue[dataIndex];
                });
            }
        });
        if (!lastFrame) {
            console.warn(`Cannot find current frame. Force to ask for all frames`);
            return ranges;
        }
        else {
            return [lastFrame];
        }
    }
    fetchDataByDataIndex() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            let body = Object.assign({ mode: MODES.DATA_BY_DATA_INDEX, records: this.dataIndexRange() }, this.bodyParams);
            return yield fetch(this.params.url, {
                method: 'POST',
                cache: 'no-cache',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            }).then((response) => response.json());
        });
    }
    fetchDataByRowId() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            let body = Object.assign({ mode: MODES.DATA_BY_ROW_ID, records: this.rowIdsRange() }, this.bodyParams);
            return yield fetch(this.params.url, {
                method: 'POST',
                cache: 'no-cache',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            }).then((response) => response.json());
        });
    }
    fetchLength() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            let body = Object.assign({ mode: MODES.LENGTH }, this.bodyParams);
            return yield fetch(this.params.url, {
                method: 'POST',
                cache: 'no-cache',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            }).then((response) => response.json());
        });
    }
    processFetchLength({ data }) {
        if (isNaN(data.length)) {
            this.lengthQueue.forEach(({ reject }) => reject(''));
            return void 0;
        }
        let previousLength = this.cacheLength;
        this.cacheLength = data.length;
        this.lengthQueue.forEach(({ resolve }) => resolve(data.length));
        this.lengthQueue = [];
        if (previousLength !== this.cacheLength) {
            UtilitiesDelay.queue(() => {
                this.eventBus.fire(eventsList_EVENTS.AFTER.DATA, {
                    length: this.cacheLength
                });
            });
        }
    }
    processFetchByDataIndex({ data, request }) {
        UtilitiesString.rangesToNumbers(request.records).forEach((dataIndex, index) => {
            this.cacheRowsByDataIndex[dataIndex] = data[index];
            (this.dataByIndexQueue[dataIndex] || []).forEach(({ resolve }) => {
                return resolve(this.cacheRowsByDataIndex[dataIndex]);
            });
            delete this.dataByIndexQueue[dataIndex];
        });
    }
    processFetchByRowId({ data, request }) {
        request.records.forEach((rowId, index) => {
            this.cacheRowsByRowId[rowId] = data[index];
            this.databyRowIdQueue[rowId].forEach(({ resolve }) => {
                return resolve(this.cacheRowsByRowId[rowId]);
            });
            delete this.databyRowIdQueue[rowId];
        });
    }
    flushFetchQueue(mode) {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            switch (mode) {
                case MODES.LENGTH:
                    this.processFetchLength(yield this.fetchLength());
                    break;
                case MODES.DATA_BY_ROW_ID:
                    this.processFetchByRowId(yield this.fetchDataByRowId());
                    break;
                case MODES.DATA_BY_DATA_INDEX:
                    this.processFetchByDataIndex(yield this.fetchDataByDataIndex());
            }
            this.fireChangeDataRows();
        });
    }
    getDataIndexes() {
        let dataIndexes = Object.keys(this.dataByIndexQueue);
        dataIndexes.sort((a, b) => parseInt(a, 10) > parseInt(b, 10) ? 1 : -1);
        return dataIndexes.map((dataIndex) => parseInt(dataIndex, 10));
    }
    addToDataByIndexQueue(dataIndex, resolve, reject) {
        if (!this.dataByIndexQueue[dataIndex]) {
            this.dataByIndexQueue[dataIndex] = [];
        }
        this.lastAskedDataIndex = dataIndex;
        this.dataByIndexQueue[dataIndex].push({ resolve, reject });
    }
    addToDataByIdQueue(rowId, resolve, reject) {
        if (!this.databyRowIdQueue[rowId]) {
            this.databyRowIdQueue[rowId] = [];
        }
        this.databyRowIdQueue[rowId].push({ resolve, reject });
    }
    boot(eventBus, services) {
        this.eventBus = eventBus;
        this.services = services;
        this.eventBus.fire(eventsList_EVENTS.MODULES.BUILD_IN.READY, { moduleName: this.constructor.name });
    }
    getLength() {
        return new Promise((resolve, reject) => serverside_data_awaiter(this, void 0, void 0, function* () {
            if (this.cacheLength !== undefined) {
                resolve(this.cacheLength);
                return void 0;
            }
            this.lengthQueue.push({ resolve, reject });
            this.flushFetchLengthQueueDebounce();
        }));
    }
    getRowsIds() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            return {
                all: [],
                freeze: [],
                current: [],
                marked: [],
                added: [],
                disabled: [],
                removed: [],
                initial: []
            };
        });
    }
    getCurrentRows(fromCache = true) {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    getFreezeRows() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    getPackage(dataIndex) {
        if (!this.dataByIndexQueue[dataIndex]) {
            let placeholderFn = () => void 0;
            let lastDataIndex = dataIndex + this.params.packageSize;
            lastDataIndex = this.cacheLength ? Math.min(lastDataIndex, this.cacheLength - 1) : lastDataIndex;
            for (let i = dataIndex; i <= lastDataIndex; i += 1) {
                if (!this.cacheRowsByDataIndex[i]) {
                    this.addToDataByIndexQueue(i, placeholderFn, placeholderFn);
                }
            }
        }
    }
    get(dataIndex, single = false) {
        if (!single && this.params.packageSize > 0) {
            this.getPackage(dataIndex);
        }
        return new Promise((resolve, reject) => {
            if (this.cacheRowsByDataIndex[dataIndex]) {
                let removed = this.services.state.edit.removed.find((changedRow) => this.cacheRowsByDataIndex[dataIndex].id === changedRow);
                resolve({
                    id: this.cacheRowsByDataIndex[dataIndex].id,
                    // type: removed ? VIEW.ROW.TYPE.REMOVED : VIEW.ROW.TYPE.NORMAL,
                    type: this.cacheRowsByDataIndex[dataIndex].type,
                    data: this.cacheRowsByDataIndex[dataIndex].data
                });
                return void 0;
            }
            this.addToDataByIndexQueue(dataIndex, resolve, reject);
            this.flushFetchDataQueueDebounce();
        });
    }
    getTotalAggregation() {
        return serverside_data_awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    getByRowId(rowId) {
        return new Promise((resolve, reject) => {
            if (this.cacheRowsByRowId[rowId]) {
                resolve(this.cacheRowsByRowId[rowId]);
                return void 0;
            }
            this.addToDataByIdQueue(rowId, resolve, reject);
            this.flushFetchFreezeQueueDebounce();
        });
    }
    onChangeDataSort({ columns, groups }) {
        this.bodyParams.sort = { columns, groups };
        this.cacheRowsByDataIndex = {};
        this.eventBus.fire(eventsList_EVENTS.DONE.DATA.SORT, { columns, groups });
    }
    onChangeDataFilter({ filter }) {
        this.bodyParams.filter = filter;
        this.cacheRowsByDataIndex = {};
        this.cacheLength = undefined;
        this.eventBus.fire(eventsList_EVENTS.AFTER.DATA.FILTER);
    }
    onAfterDataCacheClear({ rowId }) {
        Object.keys(this.cacheRowsByDataIndex).forEach((dataIndex) => {
            if (this.cacheRowsByDataIndex[dataIndex].getId() === rowId) {
                delete this.cacheRowsByDataIndex[dataIndex];
            }
        });
    }
    live() {
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.SORT, this.onChangeDataSort.bind(this));
        this.eventBus.join(eventsList_EVENTS.CHANGE.DATA.FILTER, this.onChangeDataFilter.bind(this));
        this.eventBus.join(eventsList_EVENTS.AFTER.DATA.CACHE.CLEAR, this.onAfterDataCacheClear.bind(this));
    }
}
serverside_data_decorate([
    measure(),
    serverside_data_metadata("design:type", Function),
    serverside_data_metadata("design:paramtypes", []),
    serverside_data_metadata("design:returntype", Promise)
], serverside_data_ServerSideData.prototype, "prepare", null);
//# sourceMappingURL=serverside.data.js.map
// CONCATENATED MODULE: ./dist-es/modules/externals/serverside.renderer.js

class serverside_renderer_ServerSideRenderer extends build_in_Renderer {
    constructor(externalParams) {
        super();
        this.externalParams = externalParams;
    }
    boot(eventBus, data, services) {
        super.boot(eventBus, data, services, this.getExternalParams());
    }
    getExternalParams() {
        return this.externalParams;
    }
}
//# sourceMappingURL=serverside.renderer.js.map
// CONCATENATED MODULE: ./dist-es/modules/index.one.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridOne", function() { return index_one_GridOne; });
var index_one_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;












const _COMPONENTS = Symbol('components');
class index_one_GridOne extends modules_Grid {
    constructor() {
        super(...arguments);
        // Force to bundleVuiComponents
        this[_a] = vui_reg_namespaceObject;
    }
    boot(instances = {}) {
        return index_one_awaiter(this, void 0, void 0, function* () {
            if (this.bootstrapped) {
                console.warn('Grid already bootstrapped');
                return void 0;
            }
            let buildIn = {
                state: new build_in_State(),
                eventBus: new build_in_EventBus(),
                dictionaries: new build_in_Dictionaries(),
                api: new build_in_Api()
            };
            if (!this.modulesToLoad['data']) {
                buildIn['data'] = new build_in_Data();
            }
            if (!this.modulesToLoad['renderer']) {
                buildIn['renderer'] = new build_in_Renderer();
            }
            this.instances = Object.assign({}, buildIn, instances);
            this.bootstrapped = true;
            if (this.isConnected) {
                yield this.initialize();
            }
        });
    }
    getExternalModule(metadata, params) {
        let constructor;
        switch (metadata.NAME) {
            case 'ServerSideData':
                constructor = Promise.resolve({ ServerSideData: serverside_data_ServerSideData });
                break;
            case 'ServerSideRenderer':
                constructor = Promise.resolve({ ServerSideRenderer: serverside_renderer_ServerSideRenderer });
                break;
            default:
                constructor = script_Script.import(metadata.PATH);
        }
        this.modulesToLoad[metadata.EXTENDS] = {
            name: metadata.NAME,
            constructor,
            params
        };
    }
    initializeTheme() {
        let { styling } = this.instances.state.get().theme;
        this.themeController.initializeThemeList(this.shadowRoot, THEMES_LIST_GRID.PATHS, styling.current, styling.path);
    }
}
_a = _COMPONENTS;
if (customElements.get(`${modules_Grid.tag}-one`) === undefined) {
    customElements.define(`${modules_Grid.tag}-one`, index_one_GridOne);
}
//# sourceMappingURL=index.one.js.map

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })
/******/ ]);
});